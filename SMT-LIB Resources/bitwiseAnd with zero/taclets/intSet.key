/**
 * Definition of an integer set sort. It is named "Free" ("\free" in JML)
 * strictly for convenience, as KeY already has this name built in.
 *
 * An integer set is constructed using "iset_empty" for the empty set, and
 * "iset_insert" to insert elements. For example, the set {1, 2, 3} can be
 * constructed using:
 *
 *     iset_insert(1, iset_insert(2, iset_insert(3, iset_empty)))
 *
 * All other rules (should) simplify arbitrary sets to a series of applications
 * of these two above functions. Example: Applying the union function to the
 * sets {1, 2} and {3, 4} will (eventually) expand to a series of insertions:
 *
 *     iset_union(iset_insert(1, iset_insert(2, iset_empty)),
 *                iset_insert(3, iset_insert(4, iset_empty)))
 *   = iset_insert(1, iset_insert(2, iset_insert(3, iset_insert(4, iset_empty))))
 *
 * An element may be inserted more than once into a set. This is important to
 * remember when defining some functions, e.g. iset_remove or iset_cardinality.
 * For example, the following cardinality must equal 1, not 2:
 *
 *     iset_cardinality(iset_insert(42, iset_insert(42, iset_empty))) = 1
 */

\sorts {
    Free;  // Built into KeY, do not change! Can be accessed in JML via \free.
}

\functions {
    Free iset_empty;
    Free iset_singleton(int); // Convenience function
    Free iset_insert(int, Free);
    Free iset_remove(int, Free);
    Free iset_union(Free, Free);
    Free iset_intersect(Free, Free);
    Free iset_difference(Free, Free);
    Free iset_symmetricDifference(Free, Free);

    int iset_cardinality(Free);
    int iset_max(Free);
}

\predicates {
    in(int, Free);
}

\schemaVariables {
    \term int x, y;
    \term Free setA, setB, setC;
}

\rules {
    // Equality rules /////////////////////////////////////////////////////////

    setEquality {
        \schemaVar \variables int n;
        \find(setA = setB)
        \varcond(\notFreeIn(n, setA, setB))
        \replacewith(\forall n; (in(n, setA) <-> in(n, setB)))
        \heuristics(simplify)
    };

    // Singleton Definition ///////////////////////////////////////////////////

    singletonDef {
        \find(iset_singleton(x))
        \replacewith(iset_insert(x, iset_empty))
        \heuristics(concrete)
    };

    // Remove Definition //////////////////////////////////////////////////////

    removeEmpty {
        \find(iset_remove(x, iset_empty))
        \replacewith(iset_empty)
        \heuristics(concrete)
    };

    removeInsert {
        \find(iset_remove(x, iset_insert(y, setA)))
        \replacewith(\if (x = y)
                     \then (iset_remove(x, setA)) // Cannot simplify to "setA"
                                                  // because x may be inserted
                                                  // into setA multiple times
                     \else (iset_insert(y, iset_remove(x, setA))))
        \heuristics(simplify)
    };

    removeDef {
        \find(iset_remove(x, setA))
        \replacewith(iset_difference(setA, iset_singleton(x)))
        \heuristics(simplify)
    };

    // "in" rules /////////////////////////////////////////////////////////////

    inEmpty {
        \find(in(x, iset_empty))
        \replacewith(false)
        \heuristics(concrete)
    };

    inInsert {
        \find(in(x, iset_insert(y, setA)))
        \replacewith(x = y | in(x, setA))
        \heuristics(simplify)
    };

    inSetUnion {
        \find(in(x, iset_union(setA, setB)))
        \replacewith(in(x, setA) | in(x, setB))
        \heuristics(simplify)
    };

    inSetIntersect {
        \find(in(x, iset_intersect(setA, setB)))
        \replacewith(in(x, setA) & in(x, setB))
        \heuristics(simplify)
    };

    inSetDifference {
        \find(in(x, iset_difference(setA, setB)))
        \replacewith(in(x, setA) & !in(x,setB))
        \heuristics(simplify)
    };

    inSetSymmetricDifference {
        \find(in(x, iset_symmetricDifference(setA, setB)))
        \replacewith((in(x, setA) & !in(x,setB)) | (!in(x, setA) & in(x,setB)))
        \heuristics(simplify)
    };

    // Union rules ////////////////////////////////////////////////////////////

    setUnionEmptyLeft {
        \find(iset_union(iset_empty, setA))
        \replacewith(setA)
        \heuristics(concrete)
    };

    setUnionEmptyRight {
        \find(iset_union(setA, iset_empty))
        \replacewith(setA)
        \heuristics(concrete)
    };

    setUnionSelf {
        \find(iset_union(setA, setA))
        \replacewith(setA)
        \heuristics(concrete)
    };

    setUnionInsert {
        \find(iset_union(setA, iset_insert(x, setB)))
        \replacewith(iset_insert(x, iset_union(setA, setB)))
        \heuristics(simplify)
    };

    setUnionCommutate {
        \find(iset_union(setA, setB))
        \replacewith(iset_union(setB, setA))
        \heuristics(simplify)
    };

    setUnionAssociate {
        \find(iset_union(iset_union(setA, setB), setC))
        \replacewith(iset_union(setA, iset_union(setB, setC)))
        \heuristics(simplify)
    };

    // Intersect rules ////////////////////////////////////////////////////////

    setIntersectEmptyLeft {
        \find(iset_intersect(iset_empty, setA))
        \replacewith(iset_empty)
        \heuristics(concrete)
    };

    setIntersectEmptyRight {
        \find(iset_intersect(setA, iset_empty))
        \replacewith(iset_empty)
        \heuristics(concrete)
    };

    setIntersectSelf {
        \find(iset_intersect(setA, setA))
        \replacewith(setA)
        \heuristics(concrete)
    };

    setIntersectInsert {
        \find(iset_intersect(setA, iset_insert(x, setB)))
        \replacewith(\if (in(x, setA))
                     \then (iset_insert(x, iset_intersect(setA, setB)))
                     \else (iset_intersect(setA, setB)))
        \heuristics(simplify)
    };

    setIntersectCommutate {
        \find(iset_intersect(setA, setB))
        \replacewith(iset_intersect(setB, setA))
        \heuristics(simplify)
    };

    setIntersectAssociate {
        \find(iset_intersect(iset_intersect(setA, setB), setC))
        \replacewith(iset_intersect(setA, iset_intersect(setB, setC)))
        \heuristics(simplify)
    };

    // Difference rules ///////////////////////////////////////////////////////

    setDifferenceEmptyLeft {
        \find(iset_difference(iset_empty, setA))
        \replacewith(iset_empty)
        \heuristics(concrete)
    };

    setDifferenceEmptyRight {
        \find(iset_difference(setA, iset_empty))
        \replacewith(setA)
        \heuristics(concrete)
    };

    setDifferenceSelf {
        \find(iset_difference(setA, setA))
        \replacewith(iset_empty)
        \heuristics(concrete)
    };

    setDifferenceInsert {
        \find(iset_difference(setA, iset_insert(x, setB)))
        \replacewith(\if (in(x, setA))
                     \then (iset_difference(setA, setB))
                     \else (iset_insert(x, iset_difference(setA, setB))))
        \heuristics(simplify)
    };

    setDifferenceRepeat {
        \find(iset_difference(setA, iset_difference(setA, setB)))
        \replacewith(iset_difference(setA, setB))
        \heuristics(simplify)
    };

    setDifferenceAsIntersect {
        \find(iset_difference(iset_difference(setA, setB), setB))
        \replacewith(iset_intersect(setA, setB))
        \heuristics(simplify)
    };

    // Symmetric Difference rules /////////////////////////////////////////////

    setSymmetricDifferenceEmptyLeft {
        \find(iset_symmetricDifference(iset_empty, setA))
        \replacewith(setA)
        \heuristics(concrete)
    };

    setSymmetricDifferenceEmptyRight {
        \find(iset_symmetricDifference(setA, iset_empty))
        \replacewith(setA)
        \heuristics(concrete)
    };

    setSymmetricDifferenceSelf {
        \find(iset_symmetricDifference(setA, setA))
        \replacewith(iset_empty)
        \heuristics(concrete)
    };

    setSymmetricDifferenceInsert {
        \find(iset_symmetricDifference(setA, iset_insert(x, setB)))
        \replacewith(\if (in(x, setA))
                     \then (iset_symmetricDifference(setA, setB))
                     \else (iset_insert(x, iset_symmetricDifference(setA, setB))))
        \heuristics(simplify)
    };

    setSymmetricDifferenceCommutate {
        \find(iset_symmetricDifference(setA, setB))
        \replacewith(iset_symmetricDifference(setB, setA))
        \heuristics(simplify)
    };

    setSymmetricDifferenceAssociate {
        \find(iset_symmetricDifference(iset_symmetricDifference(setA, setB), setC))
        \replacewith(iset_symmetricDifference(setA, iset_symmetricDifference(setB, setC)))
        \heuristics(simplify)
    };

    // Cardinality rules //////////////////////////////////////////////////////

    cardinalityEmpty {
        \find(iset_cardinality(iset_empty))
        \replacewith(0)
        \heuristics(concrete)
    };

    cardinalityInsert {
        \find(iset_cardinality(iset_insert(x, setA)))
        \replacewith(\if (!in(x, setA)) \then (1) \else (0) + iset_cardinality(setA))
        \heuristics(simplify)
    };

    // Max Element Rules //////////////////////////////////////////////////////

    maxElementInsert {
        \find(iset_max(iset_insert(x, setA)))
        \replacewith(\if (setA = iset_empty)
                     \then (x)
                     \else (\if (x >= iset_max(setA))
                            \then (x)
                            \else (iset_max(setA))))
        \heuristics(simplify)
    };
}
