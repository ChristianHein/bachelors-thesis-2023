\functions {
    // Gets single bit (0 or 1) of the first argument at a specified index,
    // where index 0 refers to the least-significant bit.
    int bitAt(int, int);
}

\schemaVariables {
    \term int left, right;
}

\rules(programRules:Java, intRules:javaSemantics) {
    bitAtDef {
        \schemaVar \term int number, index;
        \find(bitAt(number, index))
        \replacewith(\if (0 <= index)
                     \then (mod(div(number, pow(2, index)), 2))
                     \else (0))
        \heuristics(simplify)
    };

    binaryAndIntDef {
        \find(binaryAnd(left, right))
        \replacewith(
            bsum{int i;}(0, 31, pow(2, i) * bitAt(left, i) * bitAt(right, i))
            - \if(left < 0 & right < 0)
              \then (pow(2, 31))
              \else (0));
        \add(==> inInt(left), inInt(right))
        //\heuristics(simplify_enlarging)
    };

    binaryAndLongDef {
        \find(binaryAnd(left, right))
        \replacewith(
            bsum{int i;}(0, 63, pow(2, i) * bitAt(left, i) * bitAt(right, i))
            - \if(left < 0 & right < 0)
              \then (pow(2, 63))
              \else (0));
        \add(==> inLong(left), inLong(right))
        //\heuristics(simplify_enlarging)
    };

    binaryOrIntDef {
        \find(binaryOr(left, right))
        \replacewith(
            bsum{int i;}(0, 31,
                pow(2, i) * mod(bitAt(left, i)
                                + bitAt(right, i)
                                + (bitAt(left, i) * bitAt(right, i)), 2))
            - \if(left < 0 | right < 0)
              \then (pow(2, 31))
              \else (0));
        \add(==> inInt(left), inInt(right))
        //\heuristics(simplify_enlarging)
    };

    binaryOrLongDef {
        \find(binaryOr(left, right))
        \replacewith(
            bsum{int i;}(0, 63,
                pow(2, i) * mod(bitAt(left, i)
                                + bitAt(right, i)
                                + (bitAt(left, i) * bitAt(right, i)), 2))
            - \if(left < 0 | right < 0)
              \then (pow(2, 63))
              \else (0));
        \add(==> inLong(left), inLong(right))
        //\heuristics(simplify_enlarging)
    };

    binaryXOrIntDef {
        \find(binaryXOr(left, right))
        \replacewith(
            bsum{int i;}(0, 31,
                pow(2, i) * mod(bitAt(left, i) + bitAt(right, i), 2))
            - \if(!(left < 0 <-> right < 0))
              \then (pow(2, 31))
              \else (0));
        \add(==> inInt(left), inInt(right))
        //\heuristics(simplify_enlarging)
    };

    binaryXOrLongDef {
        \find(binaryXOr(left, right))
        \replacewith(
            bsum{int i;}(0, 63,
                pow(2, i) * mod(bitAt(left, i) + bitAt(right, i), 2))
            - \if(!(left < 0 <-> right < 0))
              \then (pow(2, 63))
              \else (0));
        \add(==> inLong(left), inLong(right))
        //\heuristics(simplify_enlarging)
    };

    binaryAndIntDef_expanded {
        \find(binaryAnd(left, right))
        \replacewith(
              pow(2, 0) * bitAt(left, 0) * bitAt(right, 0)
            + pow(2, 1) * bitAt(left, 1) * bitAt(right, 1)
            + pow(2, 2) * bitAt(left, 2) * bitAt(right, 2)
            + pow(2, 3) * bitAt(left, 3) * bitAt(right, 3)
            + pow(2, 4) * bitAt(left, 4) * bitAt(right, 4)
            + pow(2, 5) * bitAt(left, 5) * bitAt(right, 5)
            + pow(2, 6) * bitAt(left, 6) * bitAt(right, 6)
            + pow(2, 7) * bitAt(left, 7) * bitAt(right, 7)
            + pow(2, 8) * bitAt(left, 8) * bitAt(right, 8)
            + pow(2, 9) * bitAt(left, 9) * bitAt(right, 9)
            + pow(2, 10) * bitAt(left, 10) * bitAt(right, 10)
            + pow(2, 11) * bitAt(left, 11) * bitAt(right, 11)
            + pow(2, 12) * bitAt(left, 12) * bitAt(right, 12)
            + pow(2, 13) * bitAt(left, 13) * bitAt(right, 13)
            + pow(2, 14) * bitAt(left, 14) * bitAt(right, 14)
            + pow(2, 15) * bitAt(left, 15) * bitAt(right, 15)
            + pow(2, 16) * bitAt(left, 16) * bitAt(right, 16)
            + pow(2, 17) * bitAt(left, 17) * bitAt(right, 17)
            + pow(2, 18) * bitAt(left, 18) * bitAt(right, 18)
            + pow(2, 19) * bitAt(left, 19) * bitAt(right, 19)
            + pow(2, 20) * bitAt(left, 20) * bitAt(right, 20)
            + pow(2, 21) * bitAt(left, 21) * bitAt(right, 21)
            + pow(2, 22) * bitAt(left, 22) * bitAt(right, 22)
            + pow(2, 23) * bitAt(left, 23) * bitAt(right, 23)
            + pow(2, 24) * bitAt(left, 24) * bitAt(right, 24)
            + pow(2, 25) * bitAt(left, 25) * bitAt(right, 25)
            + pow(2, 26) * bitAt(left, 26) * bitAt(right, 26)
            + pow(2, 27) * bitAt(left, 27) * bitAt(right, 27)
            + pow(2, 28) * bitAt(left, 28) * bitAt(right, 28)
            + pow(2, 29) * bitAt(left, 29) * bitAt(right, 29)
            + pow(2, 30) * bitAt(left, 30) * bitAt(right, 30)
            - \if(left < 0 & right < 0)
              \then (pow(2, 31))
              \else (0));
        \add(==> inInt(left), inInt(right))
        //\heuristics(simplify_enlarging)
    };

    binaryAndLongDef_expanded {
        \find(binaryAnd(left, right))
        \replacewith(
              pow(2, 0) * bitAt(left, 0) * bitAt(right, 0)
            + pow(2, 1) * bitAt(left, 1) * bitAt(right, 1)
            + pow(2, 2) * bitAt(left, 2) * bitAt(right, 2)
            + pow(2, 3) * bitAt(left, 3) * bitAt(right, 3)
            + pow(2, 4) * bitAt(left, 4) * bitAt(right, 4)
            + pow(2, 5) * bitAt(left, 5) * bitAt(right, 5)
            + pow(2, 6) * bitAt(left, 6) * bitAt(right, 6)
            + pow(2, 7) * bitAt(left, 7) * bitAt(right, 7)
            + pow(2, 8) * bitAt(left, 8) * bitAt(right, 8)
            + pow(2, 9) * bitAt(left, 9) * bitAt(right, 9)
            + pow(2, 10) * bitAt(left, 10) * bitAt(right, 10)
            + pow(2, 11) * bitAt(left, 11) * bitAt(right, 11)
            + pow(2, 12) * bitAt(left, 12) * bitAt(right, 12)
            + pow(2, 13) * bitAt(left, 13) * bitAt(right, 13)
            + pow(2, 14) * bitAt(left, 14) * bitAt(right, 14)
            + pow(2, 15) * bitAt(left, 15) * bitAt(right, 15)
            + pow(2, 16) * bitAt(left, 16) * bitAt(right, 16)
            + pow(2, 17) * bitAt(left, 17) * bitAt(right, 17)
            + pow(2, 18) * bitAt(left, 18) * bitAt(right, 18)
            + pow(2, 19) * bitAt(left, 19) * bitAt(right, 19)
            + pow(2, 20) * bitAt(left, 20) * bitAt(right, 20)
            + pow(2, 21) * bitAt(left, 21) * bitAt(right, 21)
            + pow(2, 22) * bitAt(left, 22) * bitAt(right, 22)
            + pow(2, 23) * bitAt(left, 23) * bitAt(right, 23)
            + pow(2, 24) * bitAt(left, 24) * bitAt(right, 24)
            + pow(2, 25) * bitAt(left, 25) * bitAt(right, 25)
            + pow(2, 26) * bitAt(left, 26) * bitAt(right, 26)
            + pow(2, 27) * bitAt(left, 27) * bitAt(right, 27)
            + pow(2, 28) * bitAt(left, 28) * bitAt(right, 28)
            + pow(2, 29) * bitAt(left, 29) * bitAt(right, 29)
            + pow(2, 30) * bitAt(left, 30) * bitAt(right, 30)
            + pow(2, 31) * bitAt(left, 31) * bitAt(right, 31)
            + pow(2, 32) * bitAt(left, 32) * bitAt(right, 32)
            + pow(2, 33) * bitAt(left, 33) * bitAt(right, 33)
            + pow(2, 34) * bitAt(left, 34) * bitAt(right, 34)
            + pow(2, 35) * bitAt(left, 35) * bitAt(right, 35)
            + pow(2, 36) * bitAt(left, 36) * bitAt(right, 36)
            + pow(2, 37) * bitAt(left, 37) * bitAt(right, 37)
            + pow(2, 38) * bitAt(left, 38) * bitAt(right, 38)
            + pow(2, 39) * bitAt(left, 39) * bitAt(right, 39)
            + pow(2, 40) * bitAt(left, 40) * bitAt(right, 40)
            + pow(2, 41) * bitAt(left, 41) * bitAt(right, 41)
            + pow(2, 42) * bitAt(left, 42) * bitAt(right, 42)
            + pow(2, 43) * bitAt(left, 43) * bitAt(right, 43)
            + pow(2, 44) * bitAt(left, 44) * bitAt(right, 44)
            + pow(2, 45) * bitAt(left, 45) * bitAt(right, 45)
            + pow(2, 46) * bitAt(left, 46) * bitAt(right, 46)
            + pow(2, 47) * bitAt(left, 47) * bitAt(right, 47)
            + pow(2, 48) * bitAt(left, 48) * bitAt(right, 48)
            + pow(2, 49) * bitAt(left, 49) * bitAt(right, 49)
            + pow(2, 50) * bitAt(left, 50) * bitAt(right, 50)
            + pow(2, 51) * bitAt(left, 51) * bitAt(right, 51)
            + pow(2, 52) * bitAt(left, 52) * bitAt(right, 52)
            + pow(2, 53) * bitAt(left, 53) * bitAt(right, 53)
            + pow(2, 54) * bitAt(left, 54) * bitAt(right, 54)
            + pow(2, 55) * bitAt(left, 55) * bitAt(right, 55)
            + pow(2, 56) * bitAt(left, 56) * bitAt(right, 56)
            + pow(2, 57) * bitAt(left, 57) * bitAt(right, 57)
            + pow(2, 58) * bitAt(left, 58) * bitAt(right, 58)
            + pow(2, 59) * bitAt(left, 59) * bitAt(right, 59)
            + pow(2, 60) * bitAt(left, 60) * bitAt(right, 60)
            + pow(2, 61) * bitAt(left, 61) * bitAt(right, 61)
            + pow(2, 62) * bitAt(left, 62) * bitAt(right, 62)
            - \if(left < 0 & right < 0)
              \then (pow(2, 63))
              \else (0));
        \add(==> inLong(left), inLong(right))
        //\heuristics(simplify_enlarging)
    };

    binaryOrIntDef_expanded {
        \find(binaryOr(left, right))
        \replacewith(
              pow(2, 0) * mod(bitAt(left, 0) + bitAt(right, 0) + (bitAt(left, 0) * bitAt(right, 0)), 2)
            + pow(2, 1) * mod(bitAt(left, 1) + bitAt(right, 1) + (bitAt(left, 1) * bitAt(right, 1)), 2)
            + pow(2, 2) * mod(bitAt(left, 2) + bitAt(right, 2) + (bitAt(left, 2) * bitAt(right, 2)), 2)
            + pow(2, 3) * mod(bitAt(left, 3) + bitAt(right, 3) + (bitAt(left, 3) * bitAt(right, 3)), 2)
            + pow(2, 4) * mod(bitAt(left, 4) + bitAt(right, 4) + (bitAt(left, 4) * bitAt(right, 4)), 2)
            + pow(2, 5) * mod(bitAt(left, 5) + bitAt(right, 5) + (bitAt(left, 5) * bitAt(right, 5)), 2)
            + pow(2, 6) * mod(bitAt(left, 6) + bitAt(right, 6) + (bitAt(left, 6) * bitAt(right, 6)), 2)
            + pow(2, 7) * mod(bitAt(left, 7) + bitAt(right, 7) + (bitAt(left, 7) * bitAt(right, 7)), 2)
            + pow(2, 8) * mod(bitAt(left, 8) + bitAt(right, 8) + (bitAt(left, 8) * bitAt(right, 8)), 2)
            + pow(2, 9) * mod(bitAt(left, 9) + bitAt(right, 9) + (bitAt(left, 9) * bitAt(right, 9)), 2)
            + pow(2, 10) * mod(bitAt(left, 10) + bitAt(right, 10) + (bitAt(left, 10) * bitAt(right, 10)), 2)
            + pow(2, 11) * mod(bitAt(left, 11) + bitAt(right, 11) + (bitAt(left, 11) * bitAt(right, 11)), 2)
            + pow(2, 12) * mod(bitAt(left, 12) + bitAt(right, 12) + (bitAt(left, 12) * bitAt(right, 12)), 2)
            + pow(2, 13) * mod(bitAt(left, 13) + bitAt(right, 13) + (bitAt(left, 13) * bitAt(right, 13)), 2)
            + pow(2, 14) * mod(bitAt(left, 14) + bitAt(right, 14) + (bitAt(left, 14) * bitAt(right, 14)), 2)
            + pow(2, 15) * mod(bitAt(left, 15) + bitAt(right, 15) + (bitAt(left, 15) * bitAt(right, 15)), 2)
            + pow(2, 16) * mod(bitAt(left, 16) + bitAt(right, 16) + (bitAt(left, 16) * bitAt(right, 16)), 2)
            + pow(2, 17) * mod(bitAt(left, 17) + bitAt(right, 17) + (bitAt(left, 17) * bitAt(right, 17)), 2)
            + pow(2, 18) * mod(bitAt(left, 18) + bitAt(right, 18) + (bitAt(left, 18) * bitAt(right, 18)), 2)
            + pow(2, 19) * mod(bitAt(left, 19) + bitAt(right, 19) + (bitAt(left, 19) * bitAt(right, 19)), 2)
            + pow(2, 20) * mod(bitAt(left, 20) + bitAt(right, 20) + (bitAt(left, 20) * bitAt(right, 20)), 2)
            + pow(2, 21) * mod(bitAt(left, 21) + bitAt(right, 21) + (bitAt(left, 21) * bitAt(right, 21)), 2)
            + pow(2, 22) * mod(bitAt(left, 22) + bitAt(right, 22) + (bitAt(left, 22) * bitAt(right, 22)), 2)
            + pow(2, 23) * mod(bitAt(left, 23) + bitAt(right, 23) + (bitAt(left, 23) * bitAt(right, 23)), 2)
            + pow(2, 24) * mod(bitAt(left, 24) + bitAt(right, 24) + (bitAt(left, 24) * bitAt(right, 24)), 2)
            + pow(2, 25) * mod(bitAt(left, 25) + bitAt(right, 25) + (bitAt(left, 25) * bitAt(right, 25)), 2)
            + pow(2, 26) * mod(bitAt(left, 26) + bitAt(right, 26) + (bitAt(left, 26) * bitAt(right, 26)), 2)
            + pow(2, 27) * mod(bitAt(left, 27) + bitAt(right, 27) + (bitAt(left, 27) * bitAt(right, 27)), 2)
            + pow(2, 28) * mod(bitAt(left, 28) + bitAt(right, 28) + (bitAt(left, 28) * bitAt(right, 28)), 2)
            + pow(2, 29) * mod(bitAt(left, 29) + bitAt(right, 29) + (bitAt(left, 29) * bitAt(right, 29)), 2)
            + pow(2, 30) * mod(bitAt(left, 30) + bitAt(right, 30) + (bitAt(left, 30) * bitAt(right, 30)), 2)
            - \if(left < 0 | right < 0)
              \then (pow(2, 31))
              \else (0));
        \add(==> inInt(left), inInt(right))
        //\heuristics(simplify_enlarging)
    };

    binaryOrLongDef_expanded {
        \find(binaryOr(left, right))
        \replacewith(
              pow(2, 0) * mod(bitAt(left, 0) + bitAt(right, 0) + (bitAt(left, 0) * bitAt(right, 0)), 2)
            + pow(2, 1) * mod(bitAt(left, 1) + bitAt(right, 1) + (bitAt(left, 1) * bitAt(right, 1)), 2)
            + pow(2, 2) * mod(bitAt(left, 2) + bitAt(right, 2) + (bitAt(left, 2) * bitAt(right, 2)), 2)
            + pow(2, 3) * mod(bitAt(left, 3) + bitAt(right, 3) + (bitAt(left, 3) * bitAt(right, 3)), 2)
            + pow(2, 4) * mod(bitAt(left, 4) + bitAt(right, 4) + (bitAt(left, 4) * bitAt(right, 4)), 2)
            + pow(2, 5) * mod(bitAt(left, 5) + bitAt(right, 5) + (bitAt(left, 5) * bitAt(right, 5)), 2)
            + pow(2, 6) * mod(bitAt(left, 6) + bitAt(right, 6) + (bitAt(left, 6) * bitAt(right, 6)), 2)
            + pow(2, 7) * mod(bitAt(left, 7) + bitAt(right, 7) + (bitAt(left, 7) * bitAt(right, 7)), 2)
            + pow(2, 8) * mod(bitAt(left, 8) + bitAt(right, 8) + (bitAt(left, 8) * bitAt(right, 8)), 2)
            + pow(2, 9) * mod(bitAt(left, 9) + bitAt(right, 9) + (bitAt(left, 9) * bitAt(right, 9)), 2)
            + pow(2, 10) * mod(bitAt(left, 10) + bitAt(right, 10) + (bitAt(left, 10) * bitAt(right, 10)), 2)
            + pow(2, 11) * mod(bitAt(left, 11) + bitAt(right, 11) + (bitAt(left, 11) * bitAt(right, 11)), 2)
            + pow(2, 12) * mod(bitAt(left, 12) + bitAt(right, 12) + (bitAt(left, 12) * bitAt(right, 12)), 2)
            + pow(2, 13) * mod(bitAt(left, 13) + bitAt(right, 13) + (bitAt(left, 13) * bitAt(right, 13)), 2)
            + pow(2, 14) * mod(bitAt(left, 14) + bitAt(right, 14) + (bitAt(left, 14) * bitAt(right, 14)), 2)
            + pow(2, 15) * mod(bitAt(left, 15) + bitAt(right, 15) + (bitAt(left, 15) * bitAt(right, 15)), 2)
            + pow(2, 16) * mod(bitAt(left, 16) + bitAt(right, 16) + (bitAt(left, 16) * bitAt(right, 16)), 2)
            + pow(2, 17) * mod(bitAt(left, 17) + bitAt(right, 17) + (bitAt(left, 17) * bitAt(right, 17)), 2)
            + pow(2, 18) * mod(bitAt(left, 18) + bitAt(right, 18) + (bitAt(left, 18) * bitAt(right, 18)), 2)
            + pow(2, 19) * mod(bitAt(left, 19) + bitAt(right, 19) + (bitAt(left, 19) * bitAt(right, 19)), 2)
            + pow(2, 20) * mod(bitAt(left, 20) + bitAt(right, 20) + (bitAt(left, 20) * bitAt(right, 20)), 2)
            + pow(2, 21) * mod(bitAt(left, 21) + bitAt(right, 21) + (bitAt(left, 21) * bitAt(right, 21)), 2)
            + pow(2, 22) * mod(bitAt(left, 22) + bitAt(right, 22) + (bitAt(left, 22) * bitAt(right, 22)), 2)
            + pow(2, 23) * mod(bitAt(left, 23) + bitAt(right, 23) + (bitAt(left, 23) * bitAt(right, 23)), 2)
            + pow(2, 24) * mod(bitAt(left, 24) + bitAt(right, 24) + (bitAt(left, 24) * bitAt(right, 24)), 2)
            + pow(2, 25) * mod(bitAt(left, 25) + bitAt(right, 25) + (bitAt(left, 25) * bitAt(right, 25)), 2)
            + pow(2, 26) * mod(bitAt(left, 26) + bitAt(right, 26) + (bitAt(left, 26) * bitAt(right, 26)), 2)
            + pow(2, 27) * mod(bitAt(left, 27) + bitAt(right, 27) + (bitAt(left, 27) * bitAt(right, 27)), 2)
            + pow(2, 28) * mod(bitAt(left, 28) + bitAt(right, 28) + (bitAt(left, 28) * bitAt(right, 28)), 2)
            + pow(2, 29) * mod(bitAt(left, 29) + bitAt(right, 29) + (bitAt(left, 29) * bitAt(right, 29)), 2)
            + pow(2, 30) * mod(bitAt(left, 30) + bitAt(right, 30) + (bitAt(left, 30) * bitAt(right, 30)), 2)
            + pow(2, 31) * mod(bitAt(left, 31) + bitAt(right, 31) + (bitAt(left, 31) * bitAt(right, 31)), 2)
            + pow(2, 32) * mod(bitAt(left, 32) + bitAt(right, 32) + (bitAt(left, 32) * bitAt(right, 32)), 2)
            + pow(2, 33) * mod(bitAt(left, 33) + bitAt(right, 33) + (bitAt(left, 33) * bitAt(right, 33)), 2)
            + pow(2, 34) * mod(bitAt(left, 34) + bitAt(right, 34) + (bitAt(left, 34) * bitAt(right, 34)), 2)
            + pow(2, 35) * mod(bitAt(left, 35) + bitAt(right, 35) + (bitAt(left, 35) * bitAt(right, 35)), 2)
            + pow(2, 36) * mod(bitAt(left, 36) + bitAt(right, 36) + (bitAt(left, 36) * bitAt(right, 36)), 2)
            + pow(2, 37) * mod(bitAt(left, 37) + bitAt(right, 37) + (bitAt(left, 37) * bitAt(right, 37)), 2)
            + pow(2, 38) * mod(bitAt(left, 38) + bitAt(right, 38) + (bitAt(left, 38) * bitAt(right, 38)), 2)
            + pow(2, 39) * mod(bitAt(left, 39) + bitAt(right, 39) + (bitAt(left, 39) * bitAt(right, 39)), 2)
            + pow(2, 40) * mod(bitAt(left, 40) + bitAt(right, 40) + (bitAt(left, 40) * bitAt(right, 40)), 2)
            + pow(2, 41) * mod(bitAt(left, 41) + bitAt(right, 41) + (bitAt(left, 41) * bitAt(right, 41)), 2)
            + pow(2, 42) * mod(bitAt(left, 42) + bitAt(right, 42) + (bitAt(left, 42) * bitAt(right, 42)), 2)
            + pow(2, 43) * mod(bitAt(left, 43) + bitAt(right, 43) + (bitAt(left, 43) * bitAt(right, 43)), 2)
            + pow(2, 44) * mod(bitAt(left, 44) + bitAt(right, 44) + (bitAt(left, 44) * bitAt(right, 44)), 2)
            + pow(2, 45) * mod(bitAt(left, 45) + bitAt(right, 45) + (bitAt(left, 45) * bitAt(right, 45)), 2)
            + pow(2, 46) * mod(bitAt(left, 46) + bitAt(right, 46) + (bitAt(left, 46) * bitAt(right, 46)), 2)
            + pow(2, 47) * mod(bitAt(left, 47) + bitAt(right, 47) + (bitAt(left, 47) * bitAt(right, 47)), 2)
            + pow(2, 48) * mod(bitAt(left, 48) + bitAt(right, 48) + (bitAt(left, 48) * bitAt(right, 48)), 2)
            + pow(2, 49) * mod(bitAt(left, 49) + bitAt(right, 49) + (bitAt(left, 49) * bitAt(right, 49)), 2)
            + pow(2, 50) * mod(bitAt(left, 50) + bitAt(right, 50) + (bitAt(left, 50) * bitAt(right, 50)), 2)
            + pow(2, 51) * mod(bitAt(left, 51) + bitAt(right, 51) + (bitAt(left, 51) * bitAt(right, 51)), 2)
            + pow(2, 52) * mod(bitAt(left, 52) + bitAt(right, 52) + (bitAt(left, 52) * bitAt(right, 52)), 2)
            + pow(2, 53) * mod(bitAt(left, 53) + bitAt(right, 53) + (bitAt(left, 53) * bitAt(right, 53)), 2)
            + pow(2, 54) * mod(bitAt(left, 54) + bitAt(right, 54) + (bitAt(left, 54) * bitAt(right, 54)), 2)
            + pow(2, 55) * mod(bitAt(left, 55) + bitAt(right, 55) + (bitAt(left, 55) * bitAt(right, 55)), 2)
            + pow(2, 56) * mod(bitAt(left, 56) + bitAt(right, 56) + (bitAt(left, 56) * bitAt(right, 56)), 2)
            + pow(2, 57) * mod(bitAt(left, 57) + bitAt(right, 57) + (bitAt(left, 57) * bitAt(right, 57)), 2)
            + pow(2, 58) * mod(bitAt(left, 58) + bitAt(right, 58) + (bitAt(left, 58) * bitAt(right, 58)), 2)
            + pow(2, 59) * mod(bitAt(left, 59) + bitAt(right, 59) + (bitAt(left, 59) * bitAt(right, 59)), 2)
            + pow(2, 60) * mod(bitAt(left, 60) + bitAt(right, 60) + (bitAt(left, 60) * bitAt(right, 60)), 2)
            + pow(2, 61) * mod(bitAt(left, 61) + bitAt(right, 61) + (bitAt(left, 61) * bitAt(right, 61)), 2)
            + pow(2, 62) * mod(bitAt(left, 62) + bitAt(right, 62) + (bitAt(left, 62) * bitAt(right, 62)), 2)
            - \if(left < 0 | right < 0)
              \then (pow(2, 63))
              \else (0));
        \add(==> inLong(left), inLong(right))
        //\heuristics(simplify_enlarging)
    };

    binaryXOrIntDef_expanded {
        \find(binaryXOr(left, right))
        \replacewith(
              pow(2, 0) * mod(bitAt(left, 0) + bitAt(right, 0), 2)
            + pow(2, 1) * mod(bitAt(left, 1) + bitAt(right, 1), 2)
            + pow(2, 2) * mod(bitAt(left, 2) + bitAt(right, 2), 2)
            + pow(2, 3) * mod(bitAt(left, 3) + bitAt(right, 3), 2)
            + pow(2, 4) * mod(bitAt(left, 4) + bitAt(right, 4), 2)
            + pow(2, 5) * mod(bitAt(left, 5) + bitAt(right, 5), 2)
            + pow(2, 6) * mod(bitAt(left, 6) + bitAt(right, 6), 2)
            + pow(2, 7) * mod(bitAt(left, 7) + bitAt(right, 7), 2)
            + pow(2, 8) * mod(bitAt(left, 8) + bitAt(right, 8), 2)
            + pow(2, 9) * mod(bitAt(left, 9) + bitAt(right, 9), 2)
            + pow(2, 10) * mod(bitAt(left, 10) + bitAt(right, 10), 2)
            + pow(2, 11) * mod(bitAt(left, 11) + bitAt(right, 11), 2)
            + pow(2, 12) * mod(bitAt(left, 12) + bitAt(right, 12), 2)
            + pow(2, 13) * mod(bitAt(left, 13) + bitAt(right, 13), 2)
            + pow(2, 14) * mod(bitAt(left, 14) + bitAt(right, 14), 2)
            + pow(2, 15) * mod(bitAt(left, 15) + bitAt(right, 15), 2)
            + pow(2, 16) * mod(bitAt(left, 16) + bitAt(right, 16), 2)
            + pow(2, 17) * mod(bitAt(left, 17) + bitAt(right, 17), 2)
            + pow(2, 18) * mod(bitAt(left, 18) + bitAt(right, 18), 2)
            + pow(2, 19) * mod(bitAt(left, 19) + bitAt(right, 19), 2)
            + pow(2, 20) * mod(bitAt(left, 20) + bitAt(right, 20), 2)
            + pow(2, 21) * mod(bitAt(left, 21) + bitAt(right, 21), 2)
            + pow(2, 22) * mod(bitAt(left, 22) + bitAt(right, 22), 2)
            + pow(2, 23) * mod(bitAt(left, 23) + bitAt(right, 23), 2)
            + pow(2, 24) * mod(bitAt(left, 24) + bitAt(right, 24), 2)
            + pow(2, 25) * mod(bitAt(left, 25) + bitAt(right, 25), 2)
            + pow(2, 26) * mod(bitAt(left, 26) + bitAt(right, 26), 2)
            + pow(2, 27) * mod(bitAt(left, 27) + bitAt(right, 27), 2)
            + pow(2, 28) * mod(bitAt(left, 28) + bitAt(right, 28), 2)
            + pow(2, 29) * mod(bitAt(left, 29) + bitAt(right, 29), 2)
            + pow(2, 30) * mod(bitAt(left, 30) + bitAt(right, 30), 2)
            - \if(!(left < 0 <-> right < 0))
              \then (pow(2, 31))
              \else (0));
        \add(==> inInt(left), inInt(right))
        //\heuristics(simplify_enlarging)
    };

    binaryXOrLongDef_expanded {
        \find(binaryXOr(left, right))
        \replacewith(
              pow(2, 0) * mod(bitAt(left, 0) + bitAt(right, 0), 2)
            + pow(2, 1) * mod(bitAt(left, 1) + bitAt(right, 1), 2)
            + pow(2, 2) * mod(bitAt(left, 2) + bitAt(right, 2), 2)
            + pow(2, 3) * mod(bitAt(left, 3) + bitAt(right, 3), 2)
            + pow(2, 4) * mod(bitAt(left, 4) + bitAt(right, 4), 2)
            + pow(2, 5) * mod(bitAt(left, 5) + bitAt(right, 5), 2)
            + pow(2, 6) * mod(bitAt(left, 6) + bitAt(right, 6), 2)
            + pow(2, 7) * mod(bitAt(left, 7) + bitAt(right, 7), 2)
            + pow(2, 8) * mod(bitAt(left, 8) + bitAt(right, 8), 2)
            + pow(2, 9) * mod(bitAt(left, 9) + bitAt(right, 9), 2)
            + pow(2, 10) * mod(bitAt(left, 10) + bitAt(right, 10), 2)
            + pow(2, 11) * mod(bitAt(left, 11) + bitAt(right, 11), 2)
            + pow(2, 12) * mod(bitAt(left, 12) + bitAt(right, 12), 2)
            + pow(2, 13) * mod(bitAt(left, 13) + bitAt(right, 13), 2)
            + pow(2, 14) * mod(bitAt(left, 14) + bitAt(right, 14), 2)
            + pow(2, 15) * mod(bitAt(left, 15) + bitAt(right, 15), 2)
            + pow(2, 16) * mod(bitAt(left, 16) + bitAt(right, 16), 2)
            + pow(2, 17) * mod(bitAt(left, 17) + bitAt(right, 17), 2)
            + pow(2, 18) * mod(bitAt(left, 18) + bitAt(right, 18), 2)
            + pow(2, 19) * mod(bitAt(left, 19) + bitAt(right, 19), 2)
            + pow(2, 20) * mod(bitAt(left, 20) + bitAt(right, 20), 2)
            + pow(2, 21) * mod(bitAt(left, 21) + bitAt(right, 21), 2)
            + pow(2, 22) * mod(bitAt(left, 22) + bitAt(right, 22), 2)
            + pow(2, 23) * mod(bitAt(left, 23) + bitAt(right, 23), 2)
            + pow(2, 24) * mod(bitAt(left, 24) + bitAt(right, 24), 2)
            + pow(2, 25) * mod(bitAt(left, 25) + bitAt(right, 25), 2)
            + pow(2, 26) * mod(bitAt(left, 26) + bitAt(right, 26), 2)
            + pow(2, 27) * mod(bitAt(left, 27) + bitAt(right, 27), 2)
            + pow(2, 28) * mod(bitAt(left, 28) + bitAt(right, 28), 2)
            + pow(2, 29) * mod(bitAt(left, 29) + bitAt(right, 29), 2)
            + pow(2, 30) * mod(bitAt(left, 30) + bitAt(right, 30), 2)
            + pow(2, 31) * mod(bitAt(left, 31) + bitAt(right, 31), 2)
            + pow(2, 32) * mod(bitAt(left, 32) + bitAt(right, 32), 2)
            + pow(2, 33) * mod(bitAt(left, 33) + bitAt(right, 33), 2)
            + pow(2, 34) * mod(bitAt(left, 34) + bitAt(right, 34), 2)
            + pow(2, 35) * mod(bitAt(left, 35) + bitAt(right, 35), 2)
            + pow(2, 36) * mod(bitAt(left, 36) + bitAt(right, 36), 2)
            + pow(2, 37) * mod(bitAt(left, 37) + bitAt(right, 37), 2)
            + pow(2, 38) * mod(bitAt(left, 38) + bitAt(right, 38), 2)
            + pow(2, 39) * mod(bitAt(left, 39) + bitAt(right, 39), 2)
            + pow(2, 40) * mod(bitAt(left, 40) + bitAt(right, 40), 2)
            + pow(2, 41) * mod(bitAt(left, 41) + bitAt(right, 41), 2)
            + pow(2, 42) * mod(bitAt(left, 42) + bitAt(right, 42), 2)
            + pow(2, 43) * mod(bitAt(left, 43) + bitAt(right, 43), 2)
            + pow(2, 44) * mod(bitAt(left, 44) + bitAt(right, 44), 2)
            + pow(2, 45) * mod(bitAt(left, 45) + bitAt(right, 45), 2)
            + pow(2, 46) * mod(bitAt(left, 46) + bitAt(right, 46), 2)
            + pow(2, 47) * mod(bitAt(left, 47) + bitAt(right, 47), 2)
            + pow(2, 48) * mod(bitAt(left, 48) + bitAt(right, 48), 2)
            + pow(2, 49) * mod(bitAt(left, 49) + bitAt(right, 49), 2)
            + pow(2, 50) * mod(bitAt(left, 50) + bitAt(right, 50), 2)
            + pow(2, 51) * mod(bitAt(left, 51) + bitAt(right, 51), 2)
            + pow(2, 52) * mod(bitAt(left, 52) + bitAt(right, 52), 2)
            + pow(2, 53) * mod(bitAt(left, 53) + bitAt(right, 53), 2)
            + pow(2, 54) * mod(bitAt(left, 54) + bitAt(right, 54), 2)
            + pow(2, 55) * mod(bitAt(left, 55) + bitAt(right, 55), 2)
            + pow(2, 56) * mod(bitAt(left, 56) + bitAt(right, 56), 2)
            + pow(2, 57) * mod(bitAt(left, 57) + bitAt(right, 57), 2)
            + pow(2, 58) * mod(bitAt(left, 58) + bitAt(right, 58), 2)
            + pow(2, 59) * mod(bitAt(left, 59) + bitAt(right, 59), 2)
            + pow(2, 60) * mod(bitAt(left, 60) + bitAt(right, 60), 2)
            + pow(2, 61) * mod(bitAt(left, 61) + bitAt(right, 61), 2)
            + pow(2, 62) * mod(bitAt(left, 62) + bitAt(right, 62), 2)
            - \if(!(left < 0 <-> right < 0))
              \then (pow(2, 63))
              \else (0));
        \add(==> inLong(left), inLong(right))
        //\heuristics(simplify_enlarging)
    };
}
