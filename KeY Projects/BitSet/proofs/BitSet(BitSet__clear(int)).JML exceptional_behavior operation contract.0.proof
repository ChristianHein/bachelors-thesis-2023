\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Apr 26 15:47:40 CEST 2023
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:on , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:allow , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[Labels]UseOriginLabels=true
[NewSMT]Axiomatisations=false
[NewSMT]Presburger=false
[NewSMT]sqrtSMTTranslation=SMT
[SMTSettings]SelectedTaclets=
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]maxGenericSorts=2
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[Strategy]ActiveStrategy=JavaCardDLStrategy
[Strategy]MaximumNumberOfAutomaticApplications=10000
[Strategy]Timeout=-1
"
}

\javaSource "..";

\include "../taclets/intSet.key",  "../taclets/binaryAxiomsExtension.key",  "../taclets/bitwiseOperations.key";

\proofObligation "#Proof Obligation Settings
#Wed Apr 26 15:47:40 CEST 2023
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
contract=BitSet[BitSet\\:\\:clear(int)].JML exceptional_behavior operation contract.0
name=BitSet[BitSet\\:\\:clear(int)].JML exceptional_behavior operation contract.0
";

\proof {
(keyLog "0" (keyUser "christianhein" ) (keyVersion "208396f69e"))
(keyLog "1" (keyUser "christianhein" ) (keyVersion "208396f69e"))

(autoModeTime "22531")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "6"))
(rule "times_zero_1" (formula "6") (term "1,0,0"))
(rule "add_zero_right" (formula "6") (term "0,0"))
(rule "assignment" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "inEqSimp_sepPosMonomial0" (formula "6"))
(rule "mul_literals" (formula "6") (term "1"))
(rule "Class_invariant_axiom_for_BitSet" (formula "7") (inst "i=i") (inst "x=x") (inst "bitIndex=bitIndex_1") (inst "wordIndex=wordIndex") (inst "i_0=i_0") (ifseqformula "3"))
 (builtin "One Step Simplification" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "translateJavaMulLong" (formula "12") (term "1,1,1,0"))
(rule "translateJavaAddLong" (formula "11") (term "0,0,1,0,0"))
(rule "translateJavaSubInt" (formula "9") (term "0,2,0,0,1"))
(rule "translateJavaCastLong" (formula "12") (term "0,1,1,1,0"))
(rule "translateJavaMulLong" (formula "11") (term "0,0,0,1,0,0"))
(rule "translateJavaCastLong" (formula "11") (term "0,0,0,0,1,0,0"))
(rule "bitAtDef" (formula "11") (term "0,1,1,0,0"))
(rule "ifEqualsInteger" (formula "11") (term "1,1,0,0"))
(rule "equal_literals" (formula "11") (term "1,1,1,1,0,0"))
 (builtin "One Step Simplification" (formula "11"))
(rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "1,1,0"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,0,0"))
(rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0,0,0"))
(rule "add_literals" (formula "11") (term "0,0,1,0,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "13") (term "0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
(rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0"))
(rule "polySimp_mulComm0" (formula "12") (term "1,1,1,0"))
(rule "polySimp_rightDist" (formula "12") (term "1,1,1,0"))
(rule "mul_literals" (formula "12") (term "0,1,1,1,0"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,1,0"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,1,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,0,0"))
(rule "mul_literals" (formula "11") (term "1,1,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,0,0,0,0"))
(rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,0,0,0,0"))
(rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,0,0,0,0"))
(rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "8"))
(rule "times_zero_1" (formula "7") (term "0,0"))
(rule "add_zero_left" (formula "7") (term "0"))
(rule "nnf_imp2or" (formula "14") (term "0"))
(rule "nnf_imp2or" (formula "11") (term "0"))
(rule "nnf_imp2or" (formula "13") (term "0"))
(rule "nnf_imp2or" (formula "12") (term "0,0"))
(rule "nnf_notAnd" (formula "14") (term "0,0"))
(rule "nnf_notAnd" (formula "11") (term "0,0"))
(rule "nnf_notAnd" (formula "13") (term "0,0"))
(rule "nnf_notAnd" (formula "12") (term "0,0,0"))
(rule "nnf_notAnd" (formula "14") (term "0,0,0"))
(rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0"))
(rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0"))
(rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
(rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0"))
(rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0"))
(rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
(rule "nnf_notAnd" (formula "11") (term "0,0,0"))
(rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0"))
(rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
(rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
(rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0"))
(rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
(rule "add_literals" (formula "12") (term "0,0,1,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0"))
(rule "mul_literals" (formula "12") (term "1,1,0,0,0,0,0"))
(rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0,0,0,0"))
(rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0,0,0,0"))
(rule "add_literals" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,0,0"))
(rule "mul_literals" (formula "12") (term "1,1,0,0,0,0,0,0"))
(rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0,0,0"))
(rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0,0,0"))
(rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0,0,0"))
(rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0,0,0"))
(rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0,0,0"))
(rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,0,0,0"))
(rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0,0,0"))
(rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0,0"))
(rule "commute_or" (formula "13") (term "0,0"))
(rule "commute_or_2" (formula "14") (term "0,0"))
(rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_clear,savedHeapBefore_clear"))
 (builtin "One Step Simplification" (formula "17"))
(rule "commute_or_2" (formula "11") (term "0,0"))
(rule "commute_or_2" (formula "12") (term "0,0,0"))
(rule "commute_or" (formula "14") (term "0,0,0"))
(rule "commute_or" (formula "11") (term "0,0,0"))
(rule "commute_or_2" (formula "11") (term "0,0"))
(rule "cnf_rightDist" (formula "13") (term "0"))
(rule "distr_forallAnd" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "commute_or" (formula "14") (term "0"))
(rule "cnf_rightDist" (formula "15") (term "0"))
(rule "distr_forallAnd" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "commute_or" (formula "16") (term "0"))
(rule "commute_or_2" (formula "12") (term "0,0,0,0"))
(rule "commute_or_2" (formula "12") (term "0,0,0"))
(rule "cnf_eqv" (formula "12") (term "1,0,0"))
(rule "nnf_notAnd" (formula "12") (term "1,0,1,0,0"))
(rule "inEqSimp_notGeq" (formula "12") (term "0,1,0,1,0,0"))
(rule "times_zero_1" (formula "12") (term "1,0,0,0,1,0,1,0,0"))
(rule "add_zero_right" (formula "12") (term "0,0,0,1,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,1,0,1,0,0"))
(rule "mul_literals" (formula "12") (term "1,0,1,0,1,0,0"))
(rule "commute_or_2" (formula "12") (term "0,0,0,0,0"))
(rule "commute_or_2" (formula "12") (term "0,0,0,0"))
(rule "shift_paren_or" (formula "12") (term "0,1,0,0"))
(rule "commute_or_2" (formula "12") (term "0,0,0,0,0,0"))
(rule "commute_or_2" (formula "12") (term "0,0,0,0,0"))
(rule "commute_or_2" (formula "12") (term "0,0,0,0"))
(rule "commute_or_2" (formula "12") (term "0,0,0"))
(rule "cnf_rightDist" (formula "12") (term "1,1,0,0"))
(rule "cnf_rightDist" (formula "12") (term "0,0"))
(rule "distr_forallAnd" (formula "12") (term "0"))
(rule "distr_forallAnd" (formula "12"))
(rule "andLeft" (formula "12"))
(rule "commute_or" (formula "13") (term "0,0"))
(rule "shift_paren_or" (formula "12") (term "0,0"))
(rule "commute_or_2" (formula "12") (term "0,0,0"))
(rule "commute_or" (formula "13") (term "1,1,0,0"))
(rule "commute_or_2" (formula "12") (term "0,0,0,0"))
(rule "cnf_rightDist" (formula "13") (term "0,0"))
(rule "distr_forallAnd" (formula "13") (term "0"))
(rule "distr_forallAnd" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "commute_or_2" (formula "13") (term "0,0"))
(rule "commute_or_2" (formula "14") (term "0,0"))
(rule "commute_or_2" (formula "13") (term "0,0,0"))
(rule "shift_paren_or" (formula "14") (term "0,0,0"))
(rule "shift_paren_or" (formula "13") (term "0,0,0,0"))
(rule "inEqSimp_or_subsumption3" (formula "13") (term "0,0,0"))
(rule "qeq_literals" (formula "13") (term "0,1,0,0,0"))
 (builtin "One Step Simplification" (formula "13"))
(rule "commute_or_2" (formula "13") (term "0,0,0,0"))
(rule "inEqSimp_or_tautInEq1" (formula "13") (term "0,0,0"))
(rule "add_zero_right" (formula "13") (term "1,1,0,0,0"))
(rule "qeq_literals" (formula "13") (term "1,0,0,0"))
 (builtin "One Step Simplification" (formula "13"))
(rule "true_left" (formula "13"))
(rule "shift_paren_or" (formula "13") (term "0,0,0,0"))
(rule "shift_paren_or" (formula "12") (term "0,0,0,0,0"))
(rule "shift_paren_or" (formula "13") (term "0,0,0,0,0"))
(rule "commute_or_2" (formula "12") (term "0,0,0,0,0,0"))
 (builtin "One Step Simplification" (formula "12"))
(rule "shift_paren_or" (formula "13") (term "0,0,0,0,0,0"))
(rule "arrayLengthNotNegative" (formula "9") (term "1"))
(rule "arrayLengthIsAnInt" (formula "9") (term "1"))
(rule "commute_or" (formula "13") (term "0,0,0,0,0,0,0,0"))
(rule "commute_or_2" (formula "13") (term "0,0,0,0,0,0,0"))
(rule "commute_or_2" (formula "13") (term "0,0,0,0,0,0"))
(rule "commute_or_2" (formula "13") (term "0,0,0,0,0"))
(rule "commute_or_2" (formula "13") (term "0,0,0,0"))
(rule "commute_or" (formula "14") (term "1,0,0,0,0,0,0,0"))
(rule "shift_paren_or" (formula "14") (term "0,0,0,0,0,0,0"))
(rule "commute_or_2" (formula "14") (term "0,0,0,0,0,0"))
(rule "commute_or_2" (formula "14") (term "0,0,0,0,0"))
(rule "commute_or_2" (formula "14") (term "0,0,0,0"))
(rule "commute_or" (formula "14") (term "0,0,0,0,0,0,0,0"))
(rule "commute_or_2" (formula "14") (term "0,0,0,0,0,0,0"))
(rule "ifUnfold" (formula "21") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "21") (term "1") (newnames "x"))
(rule "less_than_comparison_simple" (formula "21") (term "1"))
 (builtin "One Step Simplification" (formula "21"))
(rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,1,0"))
(rule "times_zero_1" (formula "21") (term "1,0,0,0,0,1,0"))
(rule "add_zero_right" (formula "21") (term "0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,1,0"))
(rule "mul_literals" (formula "21") (term "1,0,0,1,0"))
(rule "replace_known_left" (formula "21") (term "0,0,1,0") (ifseqformula "6"))
 (builtin "One Step Simplification" (formula "21"))
(rule "ifSplit" (formula "21"))
(branch "if x true"
    (builtin "One Step Simplification" (formula "22"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "throwUnfold" (formula "21") (term "1") (inst "#v0=i"))
   (rule "variableDeclarationAssign" (formula "21") (term "1"))
   (rule "variableDeclaration" (formula "21") (term "1") (newnames "i"))
   (rule "instanceCreationAssignmentUnfoldArguments" (formula "21") (term "1"))
   (rule "variableDeclarationAssign" (formula "21") (term "1"))
   (rule "variableDeclaration" (formula "21") (term "1") (newnames "var"))
   (rule "compound_addition_1" (formula "21") (term "1") (inst "#v=s"))
   (rule "variableDeclarationAssign" (formula "21") (term "1"))
   (rule "variableDeclaration" (formula "21") (term "1") (newnames "s"))
   (rule "stringAssignment" (formula "21") (term "1"))
    (builtin "One Step Simplification" (formula "23"))
    (builtin "One Step Simplification" (formula "1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "notLeft" (formula "1"))
   (rule "stringConcatIntExpRight" (formula "23") (term "1") (inst "sk=sk_0"))
    (builtin "One Step Simplification" (formula "25"))
    (builtin "One Step Simplification" (formula "24"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "poolKeyIsContentOfValue" (formula "1") (term "0,1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0") (ifseqformula "3"))
   (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "23"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "equalityToSeqGetAndSeqLenLeft" (formula "2") (inst "iv=iv"))
   (rule "andLeft" (formula "2"))
   (rule "lenOfSeqConcat" (formula "2") (term "1"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,1"))
   (rule "add_literals" (formula "2") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "2") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "add_literals" (formula "2") (term "1,0,1"))
   (rule "add_literals" (formula "2") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
   (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "4"))
   (rule "lenOfSeqConcat" (formula "2") (term "0"))
   (rule "polySimp_homoEq" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "1,1,0"))
   (rule "times_zero_1" (formula "2") (term "1,0"))
   (rule "add_zero_right" (formula "2") (term "0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "add_literals" (formula "2") (term "0,1,0"))
   (rule "mul_literals" (formula "2") (term "1,0"))
   (rule "add_literals" (formula "2") (term "0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "applyEq" (formula "2") (term "0,0,1,0,0,1,0,0") (ifseqformula "3"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "2") (term "0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "add_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
   (rule "applyEq" (formula "2") (term "0,0,1,0") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "instanceCreationAssignment" (formula "26") (term "1") (inst "#v0=i_1"))
   (rule "variableDeclarationAssign" (formula "26") (term "1"))
   (rule "variableDeclaration" (formula "26") (term "1") (newnames "i_1"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "26") (term "1") (inst "#v0=i_2"))
   (rule "variableDeclaration" (formula "26") (term "1") (newnames "i_2"))
   (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
    (builtin "One Step Simplification" (formula "26"))
   (rule "variableDeclaration" (formula "26") (term "1") (newnames "__NEW__"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "26") (term "1") (inst "#v0=i_3"))
   (rule "variableDeclaration" (formula "26") (term "1") (newnames "i_3"))
   (rule "allocateInstance" (formula "26"))
    (builtin "One Step Simplification" (formula "27"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "wellFormedCreate" (formula "1") (term "0,1,0"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "blockEmpty" (formula "29") (term "1"))
   (rule "assignment" (formula "29") (term "1"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=java_lang_Object_created__0"))
   (rule "simplifySelectOfCreate" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
   (rule "castDel" (formula "1") (term "1,0"))
   (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
   (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "29"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
   (rule "applyEqReverse" (formula "24") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "methodBodyExpand" (formula "29") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "assignment_write_attribute_this" (formula "29") (term "1"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "methodCallWithinClass" (formula "29") (term "1"))
   (rule "methodBodyExpand" (formula "29") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "methodCallSuper" (formula "29") (term "1"))
   (rule "methodBodyExpand" (formula "29") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "methodCallSuper" (formula "29") (term "1"))
   (rule "methodBodyExpand" (formula "29") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "methodCallSuper" (formula "29") (term "1"))
   (rule "methodBodyExpand" (formula "29") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "methodCallSuper" (formula "29") (term "1"))
   (rule "methodBodyExpand" (formula "29") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "methodCallEmpty" (formula "29") (term "1"))
   (rule "blockEmpty" (formula "29") (term "1"))
   (rule "assignment_write_attribute_this" (formula "29") (term "1"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "assignment_write_attribute_this" (formula "29") (term "1"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "methodCallEmpty" (formula "29") (term "1"))
   (rule "methodCallEmpty" (formula "29") (term "1"))
   (rule "methodCallEmpty" (formula "29") (term "1"))
   (rule "methodCallEmpty" (formula "29") (term "1"))
   (rule "blockEmpty" (formula "29") (term "1"))
   (rule "methodCallReturnIgnoreResult" (formula "29") (term "1"))
   (rule "methodCallReturn" (formula "29") (term "1"))
   (rule "assignment" (formula "29") (term "1"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "methodCallEmpty" (formula "29") (term "1"))
   (rule "blockEmpty" (formula "29") (term "1"))
   (rule "assignment" (formula "29") (term "1"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "variableDeclarationAssign" (formula "29") (term "1"))
   (rule "variableDeclaration" (formula "29") (term "1") (newnames "var_1"))
   (rule "assignment" (formula "29") (term "1"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "methodBodyExpand" (formula "29") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "methodCallSuper" (formula "29") (term "1"))
   (rule "variableDeclarationAssign" (formula "29") (term "1"))
   (rule "variableDeclaration" (formula "29") (term "1") (newnames "arg0"))
   (rule "assignment" (formula "29") (term "1"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "methodBodyExpand" (formula "29") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "methodCallSuper" (formula "29") (term "1"))
   (rule "variableDeclarationAssign" (formula "29") (term "1"))
   (rule "variableDeclaration" (formula "29") (term "1") (newnames "arg0_1"))
   (rule "assignment" (formula "29") (term "1"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "methodBodyExpand" (formula "29") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "methodCallSuper" (formula "29") (term "1"))
   (rule "variableDeclarationAssign" (formula "29") (term "1"))
   (rule "variableDeclaration" (formula "29") (term "1") (newnames "arg0_2"))
   (rule "assignment" (formula "29") (term "1"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "methodBodyExpand" (formula "29") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "methodCall" (formula "29") (term "1") (newnames "target"))
   (branch "Normal Execution (this != null )"
       (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "24")))
      (rule "false_right" (formula "29"))
      (rule "variableDeclarationAssign" (formula "29") (term "1"))
      (rule "variableDeclaration" (formula "29") (term "1") (newnames "arg0_3"))
      (rule "assignment" (formula "29") (term "1"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "variableDeclarationAssign" (formula "29") (term "1"))
      (rule "variableDeclaration" (formula "29") (term "1") (newnames "arg1"))
      (rule "assignment" (formula "29") (term "1"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "variableDeclarationAssign" (formula "29") (term "1"))
      (rule "variableDeclaration" (formula "29") (term "1") (newnames "target"))
      (rule "delete_unnecessary_cast" (formula "29") (term "1"))
       (builtin "One Step Simplification" (formula "30"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "methodBodyExpand" (formula "29") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "methodCallSuper" (formula "29") (term "1"))
      (rule "methodBodyExpand" (formula "29") (term "1") (newnames "heapBefore_<init>_4,savedHeapBefore_<init>_4"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "methodCallEmpty" (formula "29") (term "1"))
      (rule "blockEmpty" (formula "29") (term "1"))
      (rule "assignment_write_attribute_this" (formula "29") (term "1"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "assignment_write_attribute_this" (formula "29") (term "1"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "assignment_write_attribute_this" (formula "29") (term "1"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "emptyStatement" (formula "29") (term "1"))
      (rule "assignment_write_attribute_this" (formula "29") (term "1"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "emptyStatement" (formula "29") (term "1"))
      (rule "methodCallEmpty" (formula "29") (term "1"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "methodCallEmpty" (formula "29") (term "1"))
      (rule "methodCallEmpty" (formula "29") (term "1"))
      (rule "methodCallEmpty" (formula "29") (term "1"))
      (rule "methodCallEmpty" (formula "29") (term "1"))
      (rule "blockEmpty" (formula "29") (term "1"))
      (rule "assignment_write_attribute" (formula "29") (term "1"))
      (branch "Normal Execution (i_1 != null)"
          (builtin "One Step Simplification" (formula "30"))
          (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "24")))
         (rule "false_right" (formula "29"))
         (rule "assignment" (formula "29") (term "1"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "blockEmpty" (formula "29") (term "1"))
         (rule "methodCallThrow" (formula "29") (term "1"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "tryCatchThrow" (formula "29") (term "1"))
         (rule "ifElseUnfold" (formula "29") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "29") (term "1") (newnames "x_1"))
         (rule "equality_comparison_simple" (formula "29") (term "1"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "replace_known_right" (formula "29") (term "0,0,1,0") (ifseqformula "24"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "ifElseSplit" (formula "29"))
         (branch "if x_1 true"
             (builtin "One Step Simplification" (formula "30"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_1 false"
             (builtin "One Step Simplification" (formula "30"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "elim_double_block" (formula "29") (term "1"))
            (rule "ifElseSplit" (formula "29"))
            (branch "if i instanceof java.lang.Throwable true"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
               (rule "true_left" (formula "1"))
               (rule "variableDeclaration" (formula "29") (term "1") (newnames "e"))
               (rule "delete_unnecessary_cast" (formula "29") (term "1"))
                (builtin "One Step Simplification" (formula "30"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "29") (term "1"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "emptyModality" (formula "29") (term "1"))
                (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "24")))
               (rule "eqSymm" (formula "29") (term "1,0,0,1"))
               (rule "Class_invariant_axiom_for_BitSet" (formula "29") (term "0") (inst "i=i_4") (inst "x=x_2") (inst "bitIndex=bitIndex_1") (inst "wordIndex=wordIndex") (inst "i_0=i_0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "translateJavaCastLong" (formula "29") (term "0,1,1,1,0,1,0,0"))
               (rule "translateJavaAddLong" (formula "29") (term "0,0,1,0,0,1,0,0,0"))
               (rule "translateJavaSubInt" (formula "29") (term "0,2,0,0,1,1,0,0,0,0,0"))
               (rule "translateJavaMulLong" (formula "29") (term "1,1,1,0,1,0,0"))
               (rule "translateJavaCastLong" (formula "29") (term "0,0,0,0,1,0,0,1,0,0,0"))
               (rule "translateJavaMulLong" (formula "29") (term "0,0,0,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,1,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,1,1,0,0,0,1,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,0,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,1,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,1,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,1,1,0,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,1,1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,0,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,2,0,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,1,1,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,1,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,1,1,0,0,0,1,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,1,0,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,0,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,1,0,0,0,0,0,0"))
               (rule "bitAtDef" (formula "29") (term "0,1,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,1,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,1,1,0,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,1,1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,0,1,1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "29") (term "1,0,0,1,0,0,0,0,0,1,0,0,0"))
               (rule "add_literals" (formula "29") (term "0,0,1,0,0,0,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,0,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,2,0,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,1,1,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,1,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,1,1,0,0,0,1,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,1,0,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,0,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,0,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,0,1,0,1,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,1,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,1,1,0,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,1,1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,0,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,2,0,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,1,1,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,1,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,1,0,1,0,1,0"))
               (rule "ifEqualsInteger" (formula "29") (term "1,1,0,0,1,0,0,0"))
               (rule "equal_literals" (formula "29") (term "1,1,1,1,0,0,1,0,0,0"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,1,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,1,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,0,1,1,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,1,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,1,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,0,1,1,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,1,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,0,0,1,1,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "0,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "29") (term "1,0,0,0,1,1,1,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "29") (term "1,1,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,1,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "29") (term "0,1,1,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0,0,0,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "29") (term "0,1,0,0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "29") (term "1,1,0,0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,0,1,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "29") (term "0,1,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "29") (term "0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "29") (term "1,1,0,0,0,0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,1,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,1,1,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,1,1,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,1,0,1,0,0"))
               (rule "mul_literals" (formula "29") (term "0,1,1,1,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1,1,1,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0,1,0,0,0,0"))
               (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "29") (term "0,1,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "pullOutSelect" (formula "29") (term "1,0,1,0,0,1,0,0,0") (inst "selectSK=BitSet_iSet_0"))
               (rule "applyEq" (formula "30") (term "1,0,0,0,1,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
               (rule "applyEqReverse" (formula "30") (term "1,0,1,0,0,1,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "30") (term "1,0,0,0,1,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "29") (term "0,0,0,1,0,0,0,0,0") (inst "selectSK=BitSet_wordsInUse_0"))
               (rule "applyEq" (formula "30") (term "0,0,1,1,1,1,0,1,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "30") (term "1,0,0,0,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "30") (term "0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "30") (term "0,0,2,0,0,1,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "30") (term "1,1,1,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "30") (term "1,1,1,0,0,0,0,0,0,0,1,0,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
               (rule "applyEqReverse" (formula "30") (term "0,0,0,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "30") (term "0,0,1,1,1,1,0,1,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "30") (term "1,0,0,0,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "30") (term "0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "30") (term "0,0,2,0,0,1,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "30") (term "1,1,1,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "30") (term "1,1,1,0,0,0,0,0,0,0,1,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_left" (formula "29") (term "0,1,0,0,0,0,0,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "pullOutSelect" (formula "29") (term "1,0,1,1,0,1,0") (inst "selectSK=BitSet_words_0"))
               (rule "applyEq" (formula "30") (term "1,0,0,1,0,1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "30") (term "1,0,0,0,1,1,1,0,0,1,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "30") (term "1,0,0,1,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "30") (term "0,1,1,1,0,0,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "30") (term "1,0,1,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "30") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "30") (term "0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "30") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "1"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
               (rule "applyEqReverse" (formula "30") (term "1,0,1,1,0,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "30") (term "1,0,0,1,0,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "30") (term "1,0,0,0,1,1,1,0,0,1,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "30") (term "1,0,0,1,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "30") (term "1,0,1,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "30") (term "0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "29") (term "0,0,0,0,0,0,0,0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "inEqSimp_commuteGeq" (formula "29") (term "0,0,0,0,0,0"))
               (rule "replace_known_left" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "14"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "pullOutSelect" (formula "29") (term "0,0,1,0,0,0,0,0") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
               (rule "applyEqReverse" (formula "30") (term "0,0,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_left" (formula "29") (term "0,0,0,0,0") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "nnf_imp2or" (formula "29") (term "0,1,0"))
               (rule "nnf_imp2or" (formula "29") (term "0,1,0,0"))
               (rule "nnf_notAnd" (formula "29") (term "0,0,1,0"))
               (rule "nnf_imp2or" (formula "29") (term "0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "29") (term "0,0,1,0,0"))
               (rule "nnf_notAnd" (formula "29") (term "0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,1,0"))
               (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,1,0"))
               (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,1,0"))
               (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,1,0"))
               (rule "mul_literals" (formula "29") (term "1,0,0,0,0,1,0"))
               (rule "nnf_imp2or" (formula "29") (term "0,0,1,0,0,0"))
               (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "29") (term "0,0,0,1,0,0,0"))
               (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "29") (term "0,1,0,0,0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,1,0,0,0"))
               (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0,1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "29") (term "1,0,0,1,0,0,0,0,0,1,0,0,0"))
               (rule "add_literals" (formula "29") (term "0,0,1,0,0,0,0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "29") (term "1,1,0,0,0,0,0,1,0,0,0"))
               (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0,0,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "29") (term "1,0,0,0,0,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "29") (term "1,0,0,1,0,0,0,0,0,0,1,0,0,0"))
               (rule "add_zero_right" (formula "29") (term "0,0,1,0,0,0,0,0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0,0,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "29") (term "1,1,0,0,0,0,0,0,1,0,0,0"))
               (rule "nnf_notAnd" (formula "29") (term "0,0,0,0,0,0,0,1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "add_literals" (formula "29") (term "0,0,0,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "29") (term "0,0,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "add_zero_right" (formula "29") (term "0,0,0,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "cut_direct" (formula "15") (term "0,0"))
               (branch "CUT: self.wordsInUse = 0 TRUE"
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "applyEq" (formula "20") (term "0,0,1,1,1,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "29") (term "1,1,0,0,0,0,0,0,0,1,0,0,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "18") (term "1,1,0,0,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "17") (term "1,1,0,0,0") (ifseqformula "15"))
                  (rule "applyEq" (formula "29") (term "1,1,0,0,0,0,0,0,0,0") (ifseqformula "15"))
                  (rule "add_zero_right" (formula "29") (term "1,0,0,0,0,0,0,0,0"))
                  (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
                  (rule "inEqSimp_commuteLeq" (formula "14"))
                  (rule "applyEq" (formula "28") (term "0,0,1,1,1,1,0,1,0,0") (ifseqformula "14"))
                  (rule "applyEq" (formula "15") (term "1,1,1,0,0") (ifseqformula "14"))
                  (rule "add_zero_right" (formula "15") (term "1,1,0,0"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "14"))
                  (rule "qeq_literals" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "inEqSimp_or_tautInEq0" (formula "27") (term "0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "27") (term "1,1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "qeq_literals" (formula "27") (term "1,0,0,0,0,0,0,0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "inEqSimp_or_tautInEq1" (formula "16") (term "0,0,0"))
                  (rule "add_zero_right" (formula "16") (term "1,1,0,0,0"))
                  (rule "qeq_literals" (formula "16") (term "1,0,0,0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "inEqSimp_or_tautInEq1" (formula "15") (term "0,0,0"))
                  (rule "add_zero_right" (formula "15") (term "1,1,0,0,0"))
                  (rule "qeq_literals" (formula "15") (term "1,0,0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "commute_or_2" (formula "14") (term "0,0"))
                  (rule "andRight" (formula "25"))
                  (branch "Case 1"
                     (rule "andRight" (formula "25"))
                     (branch "Case 1"
                        (rule "andRight" (formula "25"))
                        (branch "Case 1"
                           (rule "allRight" (formula "25") (inst "sk=i_0_0"))
                           (rule "orRight" (formula "25"))
                           (rule "orRight" (formula "25"))
                           (rule "notRight" (formula "26"))
                           (rule "orRight" (formula "26"))
                           (rule "inEqSimp_leqRight" (formula "26"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "27"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=arr_1"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                           (rule "simplifySelectOfCreate" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                           (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "allLeft" (formula "17") (inst "t=i_0_0"))
                           (rule "replace_known_left" (formula "17") (term "0,0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "29")))
                           (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
                           (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "17") (term "0,0,1"))
                           (rule "leq_literals" (formula "17") (term "0,1"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "17") (term "0"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "closeFalse" (formula "17"))
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "25") (inst "sk=x_2_0"))
                           (rule "orRight" (formula "25"))
                           (rule "orRight" (formula "25"))
                           (rule "notRight" (formula "26"))
                           (rule "notRight" (formula "26"))
                           (rule "inEqSimp_homoInEq0" (formula "27") (term "1"))
                           (rule "polySimp_addComm1" (formula "27") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1"))
                           (rule "polySimp_mulComm0" (formula "27") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "27") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1"))
                           (rule "mul_literals" (formula "27") (term "0,1,1"))
                           (rule "polySimp_elimOne" (formula "27") (term "1,1,1"))
                           (rule "allLeft" (formula "18") (inst "t=x_2_0"))
                           (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "1")))
                           (rule "inEqSimp_homoInEq0" (formula "18"))
                           (rule "polySimp_addComm1" (formula "18") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1"))
                           (rule "mul_literals" (formula "18") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                           (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_geqRight" (formula "28"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "allLeft" (formula "18") (inst "t=x_2_0"))
                           (rule "replace_known_left" (formula "18") (term "0,1,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "3")))
                           (rule "inEqSimp_contradInEq0" (formula "18") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "18") (term "0"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "closeFalse" (formula "18"))
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "25") (inst "sk=i_4_0"))
                        (rule "orRight" (formula "25"))
                        (rule "orRight" (formula "25"))
                        (rule "notRight" (formula "26"))
                        (rule "orRight" (formula "26"))
                        (rule "inEqSimp_geqRight" (formula "27"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "27"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "pullOutSelect" (formula "28") (term "0,1") (inst "selectSK=arr_1"))
                        (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "1"))
                        (rule "simplifySelectOfCreate" (formula "1"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                        (rule "simplifySelectOfCreate" (formula "1"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                        (rule "applyEqReverse" (formula "29") (term "0,1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "allLeft" (formula "21") (inst "t=i_4_0"))
                        (rule "replace_known_left" (formula "21") (term "0,0,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0"))
                        (rule "add_literals" (formula "21") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "21") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "21") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "21") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "21") (term "0,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "inEqSimp_geqRight" (formula "29"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_subsumption0" (formula "22") (ifseqformula "1"))
                        (rule "leq_literals" (formula "22") (term "0"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "true_left" (formula "22"))
                        (rule "allLeft" (formula "21") (inst "t=i_4_0"))
                        (rule "replace_known_left" (formula "21") (term "0,0,0,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
                        (rule "inEqSimp_contradInEq0" (formula "21") (term "1") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "21") (term "0,1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "21") (term "0,0"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "21"))
                        (rule "andLeft" (formula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "1,1,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0"))
                        (rule "add_literals" (formula "3") (term "0"))
                        (rule "leq_literals" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "25") (inst "sk=f_0"))
                     (rule "allRight" (formula "25") (inst "sk=o_0"))
                     (rule "orRight" (formula "25"))
                     (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "27"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                     (rule "simplifySelectOfStore" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                     (rule "simplifySelectOfStore" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                     (rule "simplifySelectOfCreate" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
                     (rule "simplifySelectOfCreate" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "29"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_and" (formula "5") (term "0,0"))
                     (rule "commute_and" (formula "4") (term "0,0"))
                     (rule "commute_and" (formula "3") (term "0,0"))
                     (rule "commute_and" (formula "2") (term "0,0"))
                     (rule "commute_and" (formula "1") (term "0,0"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "f_0 = java.lang.Object::<created> ∧ o_0 = sk_0 TRUE"
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "applyEqRigid" (formula "30") (term "1,0,0,1") (ifseqformula "2"))
                        (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "31") (term "2,0") (ifseqformula "1"))
                        (rule "narrowSelectType" (formula "31") (term "0") (ifseqformula "10"))
                        (rule "eqSymm" (formula "31"))
                        (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "2"))
                        (rule "sortsDisjointModuloNull" (formula "3") (term "1,0,0"))
                        (rule "replace_known_right" (formula "3") (term "1,1,0,0") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "28")))
                        (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "eqSymm" (formula "28"))
                        (rule "replace_known_right" (formula "27") (term "0,1") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "notRight" (formula "27"))
                        (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "3"))
                        (rule "close" (formula "27") (ifseqformula "1"))
                     )
                     (branch "f_0 = java.lang.Object::<created> ∧ o_0 = sk_0 FALSE"
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch "f_0 = java.lang.Object::<created> ∧ o_0 = i_3 TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "applyEq" (formula "31") (term "0,0,0") (ifseqformula "2"))
                           (rule "replace_known_right" (formula "31") (term "0,0") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "notRight" (formula "31"))
                           (rule "applyEqRigid" (formula "32") (term "2,0") (ifseqformula "2"))
                           (rule "narrowSelectType" (formula "32") (term "0") (ifseqformula "11"))
                           (rule "eqSymm" (formula "32"))
                           (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "6"))
                           (rule "hideAuxiliaryEq" (formula "6"))
                           (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "5"))
                           (rule "hideAuxiliaryEq" (formula "5"))
                           (rule "applyEq" (formula "23") (term "0") (ifseqformula "3"))
                           (rule "eqSymm" (formula "23"))
                           (rule "sortsDisjointModuloNull" (formula "23"))
                           (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "29")))
                           (rule "false_right" (formula "23"))
                           (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "eqSymm" (formula "28"))
                           (rule "close" (formula "28") (ifseqformula "1"))
                        )
                        (branch "f_0 = java.lang.Object::<created> ∧ o_0 = i_3 FALSE"
                           (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch "f_0 = java.lang.Throwable::$message ∧ o_0 = i_3 TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "false_right" (formula "24"))
                              (rule "applyEq" (formula "30") (term "1,0,0,1") (ifseqformula "2"))
                              (rule "replace_known_right" (formula "30") (term "0,1") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "notRight" (formula "30"))
                              (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "applyEqRigid" (formula "30") (term "2,0") (ifseqformula "2"))
                              (rule "narrowSelectType" (formula "30") (term "0") (ifseqformula "9"))
                              (rule "eqSymm" (formula "30"))
                              (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "eqSymm" (formula "29"))
                              (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "false_right" (formula "22"))
                              (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "3"))
                              (rule "close" (formula "23") (ifseqformula "3"))
                           )
                           (branch "f_0 = java.lang.Throwable::$message ∧ o_0 = i_3 FALSE"
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch "f_0 = java.lang.Throwable::$cause ∧ o_0 = i_3 TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "23"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "false_right" (formula "24"))
                                 (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEqReverse" (formula "31") (term "1") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "applyEq" (formula "30") (term "2,0") (ifseqformula "1"))
                                 (rule "narrowSelectType" (formula "30") (term "0") (ifseqformula "7"))
                                 (rule "applyEq" (formula "29") (term "0,0,0") (ifseqformula "2"))
                                 (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "notRight" (formula "29"))
                                 (rule "applyEq" (formula "23") (term "0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "false_right" (formula "23"))
                                 (rule "applyEq" (formula "22") (term "0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "false_right" (formula "22"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                 (rule "close" (formula "22") (ifseqformula "1"))
                              )
                              (branch "f_0 = java.lang.Throwable::$cause ∧ o_0 = i_3 FALSE"
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch "f_0 = java.lang.Object::<initialized> ∧ o_0 = i_3 TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "applyEqReverse" (formula "33") (term "1") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "23"))
                                    (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "23"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "false_right" (formula "24"))
                                    (rule "applyEqRigid" (formula "21") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "false_right" (formula "21"))
                                    (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "false_right" (formula "22"))
                                    (rule "applyEq" (formula "21") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "false_right" (formula "21"))
                                    (rule "applyEq" (formula "28") (term "2,0") (ifseqformula "1"))
                                    (rule "narrowSelectType" (formula "28") (term "0") (ifseqformula "7"))
                                    (rule "applyEq" (formula "27") (term "0,0,0") (ifseqformula "2"))
                                    (rule "replace_known_right" (formula "27") (term "0,0") (ifseqformula "22"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "notRight" (formula "27"))
                                    (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                    (rule "close" (formula "22") (ifseqformula "1"))
                                 )
                                 (branch "f_0 = java.lang.Object::<initialized> ∧ o_0 = i_3 FALSE"
                                    (rule "close" (formula "32") (ifseqformula "1"))
                                 )
                              )
                           )
                        )
                     )
                  )
               )
               (branch "CUT: self.wordsInUse = 0 FALSE"
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "notLeft" (formula "15"))
                  (rule "inEqSimp_strengthen1" (formula "12") (ifseqformula "23"))
                  (rule "add_zero_right" (formula "12") (term "1"))
                  (rule "inEqSimp_contradEq7" (formula "23") (ifseqformula "12"))
                  (rule "mul_literals" (formula "23") (term "1,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0"))
                  (rule "leq_literals" (formula "23") (term "0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "false_right" (formula "23"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "14"))
                  (rule "mul_literals" (formula "12") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                  (rule "mul_literals" (formula "12") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "12"))
                  (rule "leq_literals" (formula "11") (term "0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "andRight" (formula "29"))
                  (branch "Case 1"
                     (rule "andRight" (formula "29"))
                     (branch "Case 1"
                        (rule "andRight" (formula "29"))
                        (branch "Case 1"
                           (rule "andRight" (formula "29"))
                           (branch "Case 1"
                              (rule "allRight" (formula "29") (inst "sk=i_0_0"))
                              (rule "orRight" (formula "29"))
                              (rule "orRight" (formula "29"))
                              (rule "notRight" (formula "30"))
                              (rule "orRight" (formula "30"))
                              (rule "inEqSimp_geqRight" (formula "31"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "31"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_1"))
                              (rule "simplifySelectOfCreate" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                              (rule "simplifySelectOfCreate" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                              (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "1"))
                              (rule "mul_literals" (formula "15") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                              (rule "mul_literals" (formula "15") (term "1"))
                              (rule "allLeft" (formula "19") (inst "t=i_0_0"))
                              (rule "replace_known_left" (formula "19") (term "0,0,0,0") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "34")))
                              (rule "inEqSimp_commuteGeq" (formula "19") (term "0"))
                              (rule "inEqSimp_homoInEq0" (formula "19") (term "1"))
                              (rule "polySimp_addComm1" (formula "19") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1"))
                              (rule "mul_literals" (formula "19") (term "0,1,1"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "19") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0"))
                              (rule "add_literals" (formula "19") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "19") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "19") (term "0,0,0"))
                              (rule "leq_literals" (formula "19") (term "0,0"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "19"))
                              (rule "andLeft" (formula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "1"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "leq_literals" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "29") (inst "sk=bitIndex_1_0"))
                              (rule "allRight" (formula "29") (inst "sk=wordIndex_0"))
                              (rule "orRight" (formula "29"))
                              (rule "orRight" (formula "29"))
                              (rule "notRight" (formula "30"))
                              (rule "orRight" (formula "30"))
                              (rule "notRight" (formula "31"))
                              (rule "orRight" (formula "31"))
                              (rule "orRight" (formula "31"))
                              (rule "orRight" (formula "31"))
                              (rule "inEqSimp_geqRight" (formula "34"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_leqRight" (formula "34"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "replace_known_left" (formula "35") (term "0,1") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "inEqSimp_leqRight" (formula "33"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "34"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                              (rule "mul_literals" (formula "4") (term "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "pullOutSelect" (formula "35") (term "0,0,0,1") (inst "selectSK=arr_1"))
                              (rule "simplifySelectOfCreate" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
                              (rule "simplifySelectOfCreate" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
                              (rule "applyEqReverse" (formula "36") (term "0,0,0,1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "20"))
                              (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                              (rule "mul_literals" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                              (rule "equiv_right" (formula "36"))
                              (branch "Case '->'"
                                 (rule "allLeft" (formula "25") (inst "t=bitIndex_1_0"))
                                 (rule "replace_known_left" (formula "25") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "8"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_contradInEq0" (formula "25") (term "1,0,0,0,0") (ifseqformula "6"))
                                 (rule "qeq_literals" (formula "25") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0,0,0,0") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "25") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "allLeft" (formula "25") (inst "t=wordIndex_0"))
                                 (rule "replace_known_left" (formula "25") (term "0,0,0,0,0") (ifseqformula "7"))
                                  (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "1")) (ifInst ""  (formula "39")))
                                 (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,1"))
                                 (rule "leq_literals" (formula "25") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "25"))
                                 (rule "qeq_literals" (formula "4") (term "0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "closeFalse" (formula "4"))
                              )
                              (branch "Case '<-'"
                                 (rule "allLeft" (formula "24") (inst "t=bitIndex_1_0"))
                                 (rule "replace_known_left" (formula "24") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "8"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_contradInEq0" (formula "24") (term "1,0,0,0,0") (ifseqformula "6"))
                                 (rule "qeq_literals" (formula "24") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0,0,0,0") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "24") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "allLeft" (formula "24") (inst "t=wordIndex_0"))
                                 (rule "replace_known_left" (formula "24") (term "0,0,0,0,0") (ifseqformula "7"))
                                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "39")) (ifInst ""  (formula "1")))
                                 (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "24") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "3"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "inEqSimp_homoInEq1" (formula "24"))
                                 (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                                 (rule "add_literals" (formula "24") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "24") (term "1,0"))
                                 (rule "add_zero_right" (formula "24") (term "0"))
                                 (rule "leq_literals" (formula "24"))
                                 (rule "closeFalse" (formula "24"))
                              )
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "29") (inst "sk=x_2_0"))
                           (rule "orRight" (formula "29"))
                           (rule "orRight" (formula "29"))
                           (rule "notRight" (formula "30"))
                           (rule "notRight" (formula "30"))
                           (rule "inEqSimp_homoInEq0" (formula "31") (term "1"))
                           (rule "polySimp_addComm1" (formula "31") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1"))
                           (rule "polySimp_mulComm0" (formula "31") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "31") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1"))
                           (rule "mul_literals" (formula "31") (term "0,1,1"))
                           (rule "polySimp_elimOne" (formula "31") (term "1,1,1"))
                           (rule "allLeft" (formula "21") (inst "t=x_2_0"))
                           (rule "replace_known_left" (formula "21") (term "0,1,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "2")))
                           (rule "inEqSimp_homoInEq0" (formula "21"))
                           (rule "polySimp_addComm1" (formula "21") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1"))
                           (rule "polySimp_rightDist" (formula "21") (term "1"))
                           (rule "mul_literals" (formula "21") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                           (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_geqRight" (formula "32"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "allLeft" (formula "21") (inst "t=x_2_0"))
                           (rule "replace_known_left" (formula "21") (term "0,1,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "3")))
                           (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "21") (term "0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "closeFalse" (formula "21"))
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "29") (inst "sk=i_4_0"))
                        (rule "orRight" (formula "29"))
                        (rule "orRight" (formula "29"))
                        (rule "orRight" (formula "29"))
                        (rule "notRight" (formula "31"))
                        (rule "inEqSimp_leqRight" (formula "30"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "31"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "pullOutSelect" (formula "32") (term "0,0") (inst "selectSK=arr_1"))
                        (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "1"))
                        (rule "simplifySelectOfCreate" (formula "1"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                        (rule "simplifySelectOfCreate" (formula "1"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                        (rule "applyEqReverse" (formula "33") (term "0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "33") (term "0,1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "allLeft" (formula "24") (inst "t=i_4_0"))
                        (rule "replace_known_left" (formula "24") (term "0,0,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1,0"))
                        (rule "add_literals" (formula "24") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,1,0"))
                        (rule "add_zero_right" (formula "24") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "24") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "24") (term "0,0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "33"))
                        (rule "inEqSimp_geqRight" (formula "33"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_subsumption0" (formula "25") (ifseqformula "1"))
                        (rule "leq_literals" (formula "25") (term "0"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "true_left" (formula "25"))
                        (rule "allLeft" (formula "24") (inst "t=i_4_0"))
                        (rule "replace_known_left" (formula "24") (term "0,0,0,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "24") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,0"))
                        (rule "add_literals" (formula "24") (term "1,1,0,0,0"))
                        (rule "times_zero_1" (formula "24") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "24") (term "0,0,0"))
                        (rule "leq_literals" (formula "24") (term "0,0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "24"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "29") (inst "sk=f_0"))
                     (rule "allRight" (formula "29") (inst "sk=o_0"))
                     (rule "orRight" (formula "29"))
                     (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "31"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                     (rule "simplifySelectOfStore" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                     (rule "simplifySelectOfStore" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                     (rule "simplifySelectOfCreate" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "28"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
                     (rule "simplifySelectOfCreate" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "33"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_and" (formula "5") (term "0,0"))
                     (rule "commute_and" (formula "4") (term "0,0"))
                     (rule "commute_and" (formula "3") (term "0,0"))
                     (rule "commute_and" (formula "2") (term "0,0"))
                     (rule "commute_and" (formula "1") (term "0,0"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "f_0 = java.lang.Object::<created> ∧ o_0 = sk_0 TRUE"
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,0,0") (ifseqformula "2"))
                        (rule "sortsDisjointModuloNull" (formula "4") (term "1,0,0"))
                        (rule "replace_known_right" (formula "4") (term "0,1,0,0") (ifseqformula "33"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "29")))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "applyEqRigid" (formula "33") (term "1,0,0,1") (ifseqformula "2"))
                        (rule "applyEqRigid" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEqReverse" (formula "34") (term "1") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "33") (term "1") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "applyEqRigid" (formula "32") (term "1,0") (ifseqformula "2"))
                        (rule "applyEqRigid" (formula "31") (term "0,0,0") (ifseqformula "2"))
                        (rule "replace_known_right" (formula "31") (term "0,0") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "notRight" (formula "31"))
                        (rule "applyEq" (formula "32") (term "2,0") (ifseqformula "2"))
                        (rule "castTrueImpliesOriginalTrue" (formula "32") (ifseqformula "1"))
                        (rule "closeTrue" (formula "32"))
                     )
                     (branch "f_0 = java.lang.Object::<created> ∧ o_0 = sk_0 FALSE"
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch "f_0 = java.lang.Object::<created> ∧ o_0 = i_3 TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "applyEqReverse" (formula "35") (term "1") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "applyEq" (formula "32") (term "1,0,0,1") (ifseqformula "2"))
                           (rule "replace_known_right" (formula "32") (term "0,1") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "notRight" (formula "32"))
                           (rule "applyEq" (formula "33") (term "1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "33") (term "2,0") (ifseqformula "2"))
                           (rule "narrowSelectType" (formula "33") (term "0") (ifseqformula "8"))
                           (rule "applyEq" (formula "25") (term "0") (ifseqformula "3"))
                           (rule "eqSymm" (formula "25"))
                           (rule "sortsDisjointModuloNull" (formula "25"))
                           (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "32")))
                           (rule "false_right" (formula "25"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3"))
                           (rule "close" (formula "27") (ifseqformula "3"))
                        )
                        (branch "f_0 = java.lang.Object::<created> ∧ o_0 = i_3 FALSE"
                           (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch "f_0 = java.lang.Throwable::$message ∧ o_0 = i_3 TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "false_right" (formula "27"))
                              (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "34") (term "1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "applyEq" (formula "24") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "false_right" (formula "24"))
                              (rule "applyEq" (formula "31") (term "0,0,0") (ifseqformula "2"))
                              (rule "replace_known_right" (formula "31") (term "0,0") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "notRight" (formula "31"))
                              (rule "applyEq" (formula "32") (term "2,0") (ifseqformula "2"))
                              (rule "narrowSelectType" (formula "32") (term "0") (ifseqformula "8"))
                              (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                              (rule "close" (formula "26") (ifseqformula "1"))
                           )
                           (branch "f_0 = java.lang.Throwable::$message ∧ o_0 = i_3 FALSE"
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch "f_0 = java.lang.Throwable::$cause ∧ o_0 = i_3 TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "false_right" (formula "27"))
                                 (rule "applyEq" (formula "34") (term "1,0,0,1") (ifseqformula "2"))
                                 (rule "replace_known_right" (formula "34") (term "0,1") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "notRight" (formula "34"))
                                 (rule "applyEq" (formula "35") (term "2,0") (ifseqformula "2"))
                                 (rule "narrowSelectType" (formula "35") (term "0") (ifseqformula "9"))
                                 (rule "eqSymm" (formula "35"))
                                 (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "eqSymm" (formula "34"))
                                 (rule "applyEq" (formula "25") (term "0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "false_right" (formula "25"))
                                 (rule "applyEq" (formula "25") (term "0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "false_right" (formula "25"))
                                 (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "close" (formula "27") (ifseqformula "3"))
                              )
                              (branch "f_0 = java.lang.Throwable::$cause ∧ o_0 = i_3 FALSE"
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch "f_0 = java.lang.Object::<initialized> ∧ o_0 = i_3 TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "applyEqReverse" (formula "37") (term "1") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "26"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "false_right" (formula "27"))
                                    (rule "applyEq" (formula "24") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "false_right" (formula "24"))
                                    (rule "applyEq" (formula "33") (term "1,0,0,1") (ifseqformula "2"))
                                    (rule "replace_known_right" (formula "33") (term "0,1") (ifseqformula "27"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "notRight" (formula "33"))
                                    (rule "applyEqRigid" (formula "25") (term "0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "false_right" (formula "25"))
                                    (rule "applyEq" (formula "33") (term "1,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "25") (term "0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "false_right" (formula "25"))
                                    (rule "applyEq" (formula "32") (term "2,0") (ifseqformula "2"))
                                    (rule "narrowSelectType" (formula "32") (term "0") (ifseqformula "8"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                                    (rule "close" (formula "27") (ifseqformula "1"))
                                 )
                                 (branch "f_0 = java.lang.Object::<initialized> ∧ o_0 = i_3 FALSE"
                                    (rule "close" (formula "36") (ifseqformula "1"))
                                 )
                              )
                           )
                        )
                     )
                  )
               )
            )
            (branch "if i instanceof java.lang.Throwable false"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Null Reference (i_1 = null)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (this = null)"
       (builtin "One Step Simplification" (formula "30"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "if x false"
    (builtin "One Step Simplification" (formula "22"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
)
}
