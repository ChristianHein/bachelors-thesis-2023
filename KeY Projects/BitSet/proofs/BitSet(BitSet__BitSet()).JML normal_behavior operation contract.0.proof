\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Mar 29 14:03:54 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:on , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:allow , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "..";

\include "../taclets/intSet.key",  "../taclets/binaryAxiomsExtension.key",  "../taclets/bitwiseOperations.key";

\proofObligation "#Proof Obligation Settings
#Wed Mar 29 14:03:54 CEST 2023
contract=BitSet[BitSet\\:\\:BitSet()].JML normal_behavior operation contract.0
name=BitSet[BitSet\\:\\:BitSet()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "christianhein" ) (keyVersion "208396f69e"))

(autoModeTime "2480")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "3") (term "1,0,0,1,0,1"))
(rule "setEquality" (formula "3") (term "0,0,0,0,1") (inst "n=n"))
 (builtin "One Step Simplification" (formula "3"))
(rule "assignment" (formula "3") (term "1"))
 (builtin "One Step Simplification" (formula "3"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "self_1"))
(rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "3") (term "1") (inst "#v0=b"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "b"))
(rule "methodBodyExpand" (formula "3") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
 (builtin "One Step Simplification" (formula "3"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "__NEW__"))
(rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "3") (term "1") (inst "#v0=b_1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "b_1"))
(rule "allocateInstance" (formula "3"))
 (builtin "One Step Simplification" (formula "4"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "blockEmpty" (formula "6") (term "1"))
(rule "assignment" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
 (builtin "One Step Simplification" (formula "6"))
(rule "assignment_write_attribute_this" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "methodCallWithinClass" (formula "6") (term "1"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
 (builtin "One Step Simplification" (formula "6"))
(rule "methodCallSuper" (formula "6") (term "1"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
 (builtin "One Step Simplification" (formula "6"))
(rule "methodCallEmpty" (formula "6") (term "1"))
(rule "blockEmpty" (formula "6") (term "1"))
(rule "assignment_write_attribute_this" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "assignment_write_attribute_this" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "assignment_write_attribute_this" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "assignment_write_attribute_this" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "methodCallEmpty" (formula "6") (term "1"))
(rule "blockEmpty" (formula "6") (term "1"))
(rule "methodCallReturnIgnoreResult" (formula "6") (term "1"))
(rule "methodCallReturn" (formula "6") (term "1"))
(rule "assignment" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "methodCallEmpty" (formula "6") (term "1"))
(rule "blockEmpty" (formula "6") (term "1"))
(rule "assignment" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "blockEmpty" (formula "6") (term "1"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
 (builtin "One Step Simplification" (formula "6"))
(rule "methodCallSuper" (formula "6") (term "1"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
 (builtin "One Step Simplification" (formula "6"))
(rule "methodCallEmpty" (formula "6") (term "1"))
(rule "blockEmpty" (formula "6") (term "1"))
(rule "assignment_write_attribute_this" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "assignment_write_attribute_this" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
 (builtin "Use Operation Contract" (formula "6") (newnames "heapBefore_initWords,exc_0,heapAfter_initWords,anon_heap_initWords") (contract "BitSet[BitSet::initWords(int)].JML normal_behavior operation contract.0"))
(branch "Post (initWords)"
    (builtin "One Step Simplification" (formula "5"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "expand_inInt" (formula "5") (term "1,0,0,0,1,1,0,1,1"))
   (rule "replace_int_MAX" (formula "5") (term "1,0,1,0,0,0,1,1,0,1,1"))
   (rule "replace_int_MIN" (formula "5") (term "0,1,1,0,0,0,1,1,0,1,1"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "translateJavaSubInt" (formula "7") (term "1,0,1"))
   (rule "translateJavaAddInt" (formula "7") (term "1"))
   (rule "setEquality" (formula "9") (inst "n=n"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "1,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0"))
   (rule "assignment_write_attribute_this" (formula "13") (term "1"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "Query_axiom_for_wordIndex_int__in_BitSet" (formula "7") (term "0,1") (inst "wordIndex_sk=wordIndex_sk_0") (inst "#p0=x_1") (inst "#res=x"))
   (rule "expand_inInt" (formula "7") (term "0,0,1"))
   (rule "replace_int_MIN" (formula "7") (term "0,1,0,0,1"))
   (rule "replace_int_MAX" (formula "7") (term "1,0,0,0,1"))
   (rule "eqSymm" (formula "7") (term "1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "1,0,0,1"))
   (rule "pullOutSelect" (formula "8") (term "0,0") (inst "selectSK=BitSet_words_0"))
   (rule "applyEq" (formula "12") (term "0") (ifseqformula "8"))
   (rule "applyEq" (formula "10") (term "0,1,1,0,0,0") (ifseqformula "8"))
   (rule "applyEq" (formula "10") (term "1,0,1,0") (ifseqformula "8"))
   (rule "simplifySelectOfAnonEQ" (formula "8") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "14")))
   (rule "dismissNonSelectedField" (formula "8") (term "2,0"))
   (rule "dismissNonSelectedField" (formula "8") (term "0,0,1,0,0"))
   (rule "dismissNonSelectedField" (formula "8") (term "2,0"))
   (rule "dismissNonSelectedField" (formula "8") (term "0,0,1,0,0"))
   (rule "dismissNonSelectedField" (formula "8") (term "0,0,1,0,0"))
   (rule "dismissNonSelectedField" (formula "8") (term "0,0,1,0,0"))
   (rule "dismissNonSelectedField" (formula "8") (term "0,0,1,0,0"))
   (rule "applyEq" (formula "10") (term "1,1,0,0,0") (ifseqformula "9"))
   (rule "elementOfUnion" (formula "8") (term "0,0,0"))
   (rule "elementOfSingleton" (formula "8") (term "1,0,0,0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "elementOfSingleton" (formula "8") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "applyEqReverse" (formula "9") (term "0,0") (ifseqformula "8"))
   (rule "applyEqReverse" (formula "12") (term "0") (ifseqformula "8"))
   (rule "applyEqReverse" (formula "10") (term "1,0,1,0") (ifseqformula "8"))
   (rule "hideAuxiliaryEq" (formula "8"))
   (rule "pullOutSelect" (formula "10") (term "1,0,0") (inst "selectSK=BitSet_iSet_0"))
   (rule "simplifySelectOfAnonEQ" (formula "10") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")))
   (rule "setEquality" (formula "10") (inst "n=n"))
   (rule "dismissNonSelectedField" (formula "10") (term "2,1,0,0"))
   (rule "dismissNonSelectedField" (formula "10") (term "0,0,1,0,1,0,0"))
   (rule "dismissNonSelectedField" (formula "10") (term "2,1,0,0"))
   (rule "dismissNonSelectedField" (formula "10") (term "0,0,1,0,1,0,0"))
   (rule "dismissNonSelectedField" (formula "10") (term "2,1,0,0"))
   (rule "dismissNonSelectedField" (formula "10") (term "0,0,1,0,1,0,0"))
   (rule "dismissNonSelectedField" (formula "10") (term "0,0,1,0,1,0,0"))
   (rule "dismissNonSelectedField" (formula "10") (term "0,0,1,0,1,0,0"))
   (rule "elementOfUnion" (formula "10") (term "0,0,1,0,0"))
   (rule "elementOfSingleton" (formula "10") (term "0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "elementOfSingleton" (formula "10") (term "0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "boxToDiamond" (formula "7") (term "1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "notLeft" (formula "7"))
   (rule "commuteUnion" (formula "5") (term "1,0"))
   (rule "expand_addJint" (formula "7") (term "1"))
   (rule "polySimp_addComm0" (formula "7") (term "0,1"))
   (rule "expand_addJint" (formula "8") (term "1,1,0,0,0"))
   (rule "polySimp_addComm0" (formula "8") (term "0,1,1,0,0,0"))
   (rule "expand_subJint" (formula "11") (term "0,1,0"))
   (rule "sub_literals" (formula "11") (term "0,0,1,0"))
   (rule "expand_moduloInteger" (formula "7") (term "1"))
   (rule "replace_int_MIN" (formula "7") (term "0,1"))
   (rule "replace_int_RANGE" (formula "7") (term "1,1,1"))
   (rule "replace_int_HALFRANGE" (formula "7") (term "0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "7") (term "0,1,1"))
   (rule "add_literals" (formula "7") (term "0,0,1,1"))
   (rule "expand_moduloInteger" (formula "8") (term "1,1,0,0,0"))
   (rule "replace_int_RANGE" (formula "8") (term "1,1,1,1,0,0,0"))
   (rule "replace_int_HALFRANGE" (formula "8") (term "0,0,1,1,1,0,0,0"))
   (rule "replace_int_MIN" (formula "8") (term "0,1,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,1,1,1,0,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,1,1,1,0,0,0"))
   (rule "expand_moduloInteger" (formula "11") (term "0,1,0"))
   (rule "replace_int_RANGE" (formula "11") (term "1,1,0,1,0"))
   (rule "replace_int_HALFRANGE" (formula "11") (term "0,0,1,0,1,0"))
   (rule "replace_int_MIN" (formula "11") (term "0,0,1,0"))
   (rule "add_literals" (formula "11") (term "0,1,0,1,0"))
   (rule "commute_and" (formula "8") (term "1,0,0"))
   (rule "methodCallEmpty" (formula "15") (term "1"))
   (rule "blockEmpty" (formula "15") (term "1"))
   (rule "assignment_write_attribute" (formula "15") (term "1"))
   (branch "Normal Execution (self_1 != null)"
       (builtin "One Step Simplification" (formula "16"))
       (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
      (rule "false_right" (formula "15"))
      (rule "commute_and" (formula "8") (term "0,0,0"))
      (rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_wordIndex,savedHeapBefore_wordIndex"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "shift_paren_and" (formula "8") (term "0,0"))
      (rule "commute_and_2" (formula "8") (term "0,0,0"))
      (rule "tryEmpty" (formula "15") (term "1"))
      (rule "returnUnfold" (formula "11") (term "1") (inst "#v0=x_2"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_2"))
      (rule "emptyModality" (formula "15") (term "1"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "eqSymm" (formula "15") (term "1,0,0,1"))
      (rule "dismissNonSelectedField" (formula "15") (term "1,0,0,0,0"))
      (rule "dismissNonSelectedField" (formula "15") (term "1,0,0,0,0"))
      (rule "replaceKnownSelect_taclet0_2" (formula "15") (term "1,0,0,0,0"))
      (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "assignmentShiftRightInt" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "translateJavaShiftRightInt" (formula "11") (term "0,1,0"))
      (rule "javaShiftRightIntDef" (formula "11") (term "0,1,0"))
      (rule "shiftRightDef" (formula "11") (term "0,0,1,0"))
      (rule "polySimp_elimNeg" (formula "11") (term "1,1,0,0,1,0"))
      (rule "shiftRightPositiveShiftDef" (formula "11") (term "2,0,0,1,0"))
      (rule "shiftLeftPositiveShiftDef" (formula "11") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
      (rule "expand_moduloInteger" (formula "11") (term "0,1,0"))
      (rule "replace_int_HALFRANGE" (formula "11") (term "0,0,1,0,1,0"))
      (rule "replace_int_MIN" (formula "11") (term "0,0,1,0"))
      (rule "replace_int_RANGE" (formula "11") (term "1,1,0,1,0"))
      (rule "methodCallReturn" (formula "11") (term "1"))
      (rule "assignment" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "methodCallEmpty" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "emptyModality" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "notRight" (formula "11"))
      (rule "polySimp_homoEq" (formula "1") (term "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,1"))
      (rule "mul_literals" (formula "1") (term "0,1,0,1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
      (rule "polySimp_addComm0" (formula "1") (term "0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0,0,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0,1,0,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0,1,0,1,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0,1,0,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0,1,0,1,0,1,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,0,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0,0,1,0,1"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0,1,0,0,1,0,1"))
      (rule "add_zero_right" (formula "1") (term "0,0,0,1,0,0,1,0,1"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,1,0"))
      (rule "add_literals" (formula "1") (term "0,0,1,0"))
      (rule "add_zero_left" (formula "1") (term "0,1,0"))
      (rule "mod_axiom" (formula "1") (term "1,1,1,1,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,1,0,0,1,0,1"))
      (rule "div_literals" (formula "1") (term "0,1,1,1,1,1,0,0,1,0,1"))
      (rule "mul_literals" (formula "1") (term "1,1,1,1,1,0,0,1,0,1"))
      (rule "add_zero_right" (formula "1") (term "1,1,1,1,0,0,1,0,1"))
      (rule "polySimp_pullOutFactor0" (formula "1") (term "1,1,0,0,1,0,1"))
      (rule "add_literals" (formula "1") (term "1,1,1,0,0,1,0,1"))
      (rule "mod_axiom" (formula "1") (term "1,0,2,1,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,2,1,0,0,1,0,1"))
      (rule "div_literals" (formula "1") (term "0,1,1,0,2,1,0,0,1,0,1"))
      (rule "times_zero_2" (formula "1") (term "1,1,0,2,1,0,0,1,0,1"))
      (rule "add_literals" (formula "1") (term "1,0,2,1,0,0,1,0,1"))
      (rule "add_literals" (formula "1") (term "0,2,1,0,0,1,0,1"))
      (rule "mod_axiom" (formula "1") (term "1,1,2,1,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,2,1,0,0,1,0,1"))
      (rule "div_literals" (formula "1") (term "0,1,1,1,2,1,0,0,1,0,1"))
      (rule "times_zero_2" (formula "1") (term "1,1,1,2,1,0,0,1,0,1"))
      (rule "add_zero_right" (formula "1") (term "1,1,2,1,0,0,1,0,1"))
      (rule "pow_literals" (formula "1") (term "1,2,1,0,0,1,0,1"))
      (rule "div_literals" (formula "1") (term "2,1,0,0,1,0,1"))
      (rule "mod_axiom" (formula "1") (term "1,0,0,1,0,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0,1,0,1"))
      (rule "div_literals" (formula "1") (term "0,1,1,0,0,1,0,0,1,0,1"))
      (rule "times_zero_2" (formula "1") (term "1,1,0,0,1,0,0,1,0,1"))
      (rule "add_literals" (formula "1") (term "1,0,0,1,0,0,1,0,1"))
      (rule "add_literals" (formula "1") (term "0,0,1,0,0,1,0,1"))
      (rule "leq_literals" (formula "1") (term "0,1,0,0,1,0,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "add_zero_right" (formula "1") (term "0,0,1,0,1"))
      (rule "mod_axiom" (formula "1") (term "0,1,0,1,1,1,0,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,1,1,1,0,0,1,0,0,0"))
      (rule "div_literals" (formula "1") (term "0,1,0,1,0,1,1,1,0,0,1,0,0,0"))
      (rule "times_zero_2" (formula "1") (term "1,0,1,0,1,1,1,0,0,1,0,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,1,0,1,1,1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,1,1,1,0,0,1,0,0,0"))
      (rule "pow_literals" (formula "1") (term "0,1,1,1,0,0,1,0,0,0"))
      (rule "mod_axiom" (formula "1") (term "1,0,0,1,0,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0,1,0,0,0"))
      (rule "div_literals" (formula "1") (term "0,1,1,0,0,1,0,0,1,0,0,0"))
      (rule "times_zero_2" (formula "1") (term "1,1,0,0,1,0,0,1,0,0,0"))
      (rule "add_literals" (formula "1") (term "1,0,0,1,0,0,1,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,1,0,0,1,0,0,0"))
      (rule "leq_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "mod_axiom" (formula "1") (term "0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,1"))
      (rule "div_literals" (formula "1") (term "0,1,0,1,0,1"))
      (rule "times_zero_2" (formula "1") (term "1,0,1,0,1"))
      (rule "add_literals" (formula "1") (term "0,1,0,1"))
      (rule "mul_literals" (formula "1") (term "1,0,1"))
      (rule "polySimp_addComm1" (formula "1") (term "0,1"))
      (rule "add_literals" (formula "1") (term "0,0,1"))
      (rule "add_zero_left" (formula "1") (term "0,1"))
      (rule "mod_axiom" (formula "1") (term "1,0,0,1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,0,0,1,0"))
      (rule "div_literals" (formula "1") (term "0,1,1,0,0,1,0,0,0,1,0"))
      (rule "times_zero_2" (formula "1") (term "1,1,0,0,1,0,0,0,1,0"))
      (rule "add_zero_right" (formula "1") (term "1,0,0,1,0,0,0,1,0"))
      (rule "add_literals" (formula "1") (term "0,0,1,0,0,0,1,0"))
      (rule "leq_literals" (formula "1") (term "0,1,0,0,0,1,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "mod_axiom" (formula "1") (term "1,0,1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0,0,0,1,0"))
      (rule "div_literals" (formula "1") (term "0,1,1,0,1,0,0,0,1,0"))
      (rule "times_zero_2" (formula "1") (term "1,1,0,1,0,0,0,1,0"))
      (rule "add_literals" (formula "1") (term "1,0,1,0,0,0,1,0"))
      (rule "add_literals" (formula "1") (term "0,1,0,0,0,1,0"))
      (rule "mod_axiom" (formula "1") (term "1,1,1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,0,0,0,1,0"))
      (rule "div_literals" (formula "1") (term "0,1,1,1,1,0,0,0,1,0"))
      (rule "times_zero_2" (formula "1") (term "1,1,1,1,0,0,0,1,0"))
      (rule "add_literals" (formula "1") (term "1,1,1,0,0,0,1,0"))
      (rule "pow_literals" (formula "1") (term "1,1,0,0,0,1,0"))
      (rule "div_literals" (formula "1") (term "1,0,0,0,1,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
      (rule "mod_axiom" (formula "1") (term "1,1,1,0,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,0,0,1,0,0,0"))
      (rule "div_literals" (formula "1") (term "0,1,1,1,1,0,0,1,0,0,0"))
      (rule "times_zero_2" (formula "1") (term "1,1,1,1,0,0,1,0,0,0"))
      (rule "add_literals" (formula "1") (term "1,1,1,0,0,1,0,0,0"))
      (rule "pow_literals" (formula "1") (term "1,1,0,0,1,0,0,0"))
      (rule "mod_axiom" (formula "1") (term "1,0,1,0,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0,0,1,0,0,0"))
      (rule "div_literals" (formula "1") (term "0,1,1,0,1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "1") (term "1,1,0,1,0,0,1,0,0,0"))
      (rule "add_literals" (formula "1") (term "1,0,1,0,0,1,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,1,0,0,1,0,0,0"))
      (rule "div_literals" (formula "1") (term "1,0,0,1,0,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,1,0,0,0"))
      (rule "mod_axiom" (formula "1") (term "0,0,1,0"))
      (rule "div_literals" (formula "1") (term "0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
      (rule "mul_literals" (formula "1") (term "1,0,0,1,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0"))
      (rule "leq_literals" (formula "1") (term "1,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "mod_axiom" (formula "1") (term "0,1,0,0"))
      (rule "div_literals" (formula "1") (term "0,0,1,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
      (rule "times_zero_2" (formula "1") (term "1,0,1,0,0"))
      (rule "add_literals" (formula "1") (term "0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "qeq_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEq" (formula "9") (term "1,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
      (rule "add_zero_right" (formula "9") (term "0,0,1,0,0,0,0,0,0,0"))
      (rule "mod_axiom" (formula "9") (term "0,1,0,0,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0,0,0,0,0,0,0"))
      (rule "div_literals" (formula "9") (term "0,1,0,1,0,0,0,0,0,0,0"))
      (rule "times_zero_2" (formula "9") (term "1,0,1,0,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "9") (term "0,1,0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "9") (term "0,0,0,0,0,0"))
      (rule "applyEqRigid" (formula "8") (term "1,0,1,1") (ifseqformula "1"))
      (rule "add_zero_right" (formula "8") (term "0,1,1"))
      (rule "mod_axiom" (formula "8") (term "1,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1"))
      (rule "div_literals" (formula "8") (term "0,1,1,1"))
      (rule "times_zero_2" (formula "8") (term "1,1,1"))
      (rule "add_zero_right" (formula "8") (term "1,1"))
      (rule "add_literals" (formula "8") (term "1"))
      (rule "inEqSimp_and_subsumption3" (formula "9") (term "0,0,0"))
      (rule "leq_literals" (formula "9") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_and_antiSymm0" (formula "9") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "leq_literals" (formula "9") (term "0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "pullOutSelect" (formula "9") (term "0") (inst "selectSK=arr_0"))
      (rule "simplifySelectOfAnonEQ" (formula "9") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "13")))
      (rule "dismissNonSelectedField" (formula "9") (term "2,0"))
      (rule "dismissNonSelectedField" (formula "9") (term "0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "9") (term "2,0"))
      (rule "dismissNonSelectedField" (formula "9") (term "0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "9") (term "2,0"))
      (rule "dismissNonSelectedField" (formula "9") (term "0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "9") (term "2,0"))
      (rule "dismissNonSelectedField" (formula "9") (term "0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "9") (term "2,0"))
      (rule "dismissNonSelectedField" (formula "9") (term "0,0,1,0,0"))
      (rule "applyEqRigid" (formula "9") (term "1") (ifseqformula "10"))
      (rule "ifEqualsInteger" (formula "9"))
      (rule "elementOfUnion" (formula "9") (term "0,0,0,1"))
      (rule "elementOfSingleton" (formula "9") (term "0,0,0,0,1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "elementOfSingleton" (formula "9") (term "0,0,0,1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "elementOfUnion" (formula "9") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "9") (term "1,0,0,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "elementOfSingleton" (formula "9") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "pullOutSelect" (formula "9") (term "0,1,1") (inst "selectSK=arr_1"))
      (rule "simplifySelectOfCreate" (formula "9"))
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "16")))
      (rule "applyEqReverse" (formula "10") (term "0,1,1") (ifseqformula "9"))
      (rule "hideAuxiliaryEq" (formula "9"))
      (rule "pullOutSelect" (formula "9") (term "0,0,1") (inst "selectSK=java_lang_Object_created__0"))
      (rule "applyEq" (formula "10") (term "0,0,0,0") (ifseqformula "9"))
      (rule "simplifySelectOfCreate" (formula "9"))
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "16")))
      (rule "castDel" (formula "9") (term "1,0"))
      (rule "eqSymm" (formula "9") (term "0,0"))
      (rule "sortsDisjointModuloNull" (formula "9") (term "0,0"))
      (rule "replace_known_right" (formula "9") (term "1,0,0") (ifseqformula "16"))
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "14")))
      (rule "applyEqReverse" (formula "10") (term "0,0,1") (ifseqformula "9"))
      (rule "applyEqReverse" (formula "10") (term "0,0,0,0") (ifseqformula "9"))
      (rule "hideAuxiliaryEq" (formula "9"))
      (rule "cnf_eqv" (formula "11") (term "0"))
      (rule "distr_forallAnd" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "Class_invariant_axiom_for_BitSet" (formula "17") (term "0") (inst "x=x") (inst "bitIndex=bitIndex") (inst "wordIndex=wordIndex") (inst "i=i") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "expand_inLong" (formula "17") (term "1,0,0,1,0"))
      (rule "expand_inInt" (formula "17") (term "1,0,0,0,1,0,0"))
      (rule "expand_inInt" (formula "17") (term "1,0,0,0,0,1,0,0"))
      (rule "expand_inInt" (formula "17") (term "1,0,0,1,0,0,0"))
      (rule "replace_long_MAX" (formula "17") (term "1,0,1,0,0,1,0"))
      (rule "replace_long_MIN" (formula "17") (term "0,1,1,0,0,1,0"))
      (rule "replace_int_MAX" (formula "17") (term "1,0,1,0,0,0,1,0,0"))
      (rule "replace_int_MIN" (formula "17") (term "0,1,1,0,0,0,1,0,0"))
      (rule "replace_int_MAX" (formula "17") (term "1,0,1,0,0,0,0,1,0,0"))
      (rule "replace_int_MIN" (formula "17") (term "0,1,1,0,0,0,0,1,0,0"))
      (rule "replace_int_MAX" (formula "17") (term "1,0,1,0,0,1,0,0,0"))
      (rule "replace_int_MIN" (formula "17") (term "0,1,1,0,0,1,0,0,0"))
      (rule "translateJavaCastLong" (formula "17") (term "0,1,1,1,0,1,0"))
      (rule "translateJavaAddLong" (formula "17") (term "0,0,1,0,0,1,0,0"))
      (rule "translateJavaSubInt" (formula "17") (term "0,2,0,0,1,1,0,0,0,0"))
      (rule "translateJavaMulLong" (formula "17") (term "1,1,1,0,1,0"))
      (rule "translateJavaCastLong" (formula "17") (term "0,0,0,0,1,0,0,1,0,0"))
      (rule "translateJavaMulLong" (formula "17") (term "0,0,0,1,0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,1,0,0,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "1,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "1,0,0,1,1,0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,1,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "1,0,0,0,1,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0,0,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,0,0,0,0,1,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,0,0,0,0,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,0,0,1,0,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,0,1,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "1,0,0,1,1,0,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,0,2,0,0,1,1,0,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,1,1,0,1,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,1,0,0,0,0,0"))
      (rule "replaceKnownSelect_taclet0_0" (formula "17") (term "0,1,1,1,0,0,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "17") (term "0,1,1,1,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0,0,0,0,1,0,0"))
      (rule "add_literals" (formula "17") (term "0,0,1,0,0,0,0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "1,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0,0,1,0,0"))
      (rule "replaceKnownSelect_taclet0_2" (formula "17") (term "1,0,1,0,0,1,0,0"))
      (rule "bitAtDef" (formula "17") (term "0,1,1,0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0,1,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "1,0,0,0,1,0"))
      (rule "replaceKnownSelect_taclet0_2" (formula "17") (term "1,0,0,0,1,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0,0,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,0,0,0,0,1,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,0,0,0,0,0,0,0"))
      (rule "replaceKnownSelect_taclet0_0" (formula "17") (term "0,0,0,0,0,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "17") (term "0,0,0,0,0,0,0,0"))
      (rule "replace_known_right" (formula "17") (term "0,0,0,0,0,0,0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,0,0,1,0,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "1,0,0,1,1,0,0,0,0"))
      (rule "replaceKnownSelect_taclet0_0" (formula "17") (term "1,0,0,1,1,0,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "17") (term "1,0,0,1,1,0,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,0,1,1,0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "1,0,1,0,1,0,0,0"))
      (rule "replaceKnownSelect_taclet0_0" (formula "17") (term "1,0,1,0,1,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "17") (term "1,0,1,0,1,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,1,1,0,0,0,1,0,0,0"))
      (rule "replaceKnownSelect_taclet0_0" (formula "17") (term "0,1,1,0,0,0,1,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "17") (term "0,1,1,0,0,0,1,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,1,1,0,1,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,0,2,0,0,1,1,0,0,0,0"))
      (rule "ifEqualsInteger" (formula "17") (term "1,1,0,0,1,0,0"))
      (rule "equal_literals" (formula "17") (term "1,1,1,1,0,0,1,0,0"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,1,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "1,0,0,0,1,1,1,0,0,1,0,0"))
      (rule "replaceKnownSelect_taclet0_0" (formula "17") (term "1,0,0,0,1,1,1,0,0,1,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "17") (term "1,0,0,0,1,1,1,0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,1,0,0,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,0,0,1,1,1,0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "17") (term "0,0,1,1,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "1,1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "1,1,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "1,1,0,0,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,1,1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "1,1,0,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0,0,0,0,0,1,0,0"))
      (rule "applyEq" (formula "17") (term "1,1,0,0,0,0,0") (ifseqformula "8"))
      (rule "applyEq" (formula "17") (term "0,1,0,0,1,0,0,0,1,0,0,0") (ifseqformula "8"))
      (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0,0,1,0,0,0"))
      (rule "add_literals" (formula "17") (term "0,0,1,0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "17") (term "0,1,0,0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "17") (term "1,1,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,1,0,1,0"))
      (rule "mul_literals" (formula "17") (term "0,1,1,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,1,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "pullOutSelect" (formula "17") (term "0,0,0,1,0,0,0,0") (inst "selectSK=BitSet_wordsInUse_0"))
      (rule "applyEq" (formula "18") (term "1,0,0,0,0,1,0,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "18") (term "0,0,1,1,1,1,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "18") (term "0,0,2,0,0,1,1,0,0,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "18") (term "1,1,1,0,0,0,0,0,0,0,1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "18") (term "0,1,0,0,0,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "18") (term "0,0,0,0,0,0,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
      (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
      (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "pullOutSelect" (formula "18") (term "0,0,1,1,0,0,0,0") (inst "selectSK=arr_2"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
      (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
      (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
      (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
      (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
      (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,0,0"))
      (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
      (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,0,0"))
      (rule "replaceKnownSelect_taclet00_6" (formula "1") (term "0,0,1,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "1") (term "0,0,1,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "pullOutSelect" (formula "2") (term "0,0,0") (inst "selectSK=java_lang_Object_created__1"))
      (rule "simplifySelectOfCreate" (formula "2"))
       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "19")))
      (rule "castDel" (formula "2") (term "0"))
      (rule "applyEqReverse" (formula "3") (term "0,0,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "simplifySelectOfStore" (formula "3"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "castDel" (formula "3") (term "0"))
      (rule "applyEqReverse" (formula "20") (term "0,1,0,0,0,0,0") (ifseqformula "3"))
      (rule "leq_literals" (formula "20") (term "1,0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "applyEqReverse" (formula "1") (term "0,0,2,1,0") (ifseqformula "3"))
      (rule "applyEqReverse" (formula "1") (term "0,0,2,2,0") (ifseqformula "3"))
      (rule "applyEqReverse" (formula "20") (term "1,1,1,0,0,0,0,0,0,0,1,0,0") (ifseqformula "3"))
      (rule "add_zero_right" (formula "20") (term "1,1,0,0,0,0,0,0,0,1,0,0"))
      (rule "applyEqReverse" (formula "20") (term "0,0,0,0,0,0") (ifseqformula "3"))
      (rule "qeq_literals" (formula "20") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "applyEqReverse" (formula "20") (term "0,0,0,0,0,0,0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "applyEqReverse" (formula "20") (term "0,0,1,1,1,1,0,1,0") (ifseqformula "3"))
      (rule "applyEqReverse" (formula "20") (term "1,0,0,0,0,0,0,0") (ifseqformula "3"))
      (rule "hideAuxiliaryEq" (formula "2"))
      (rule "hideAuxiliaryEq" (formula "2"))
      (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=arr_3"))
      (rule "simplifySelectOfCreate" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
      (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "expand_subJint" (formula "1") (term "0,2,2,0"))
      (rule "sub_literals" (formula "1") (term "0,0,2,2,0"))
      (rule "expand_mulJlong" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
      (rule "expand_moduloLong" (formula "18") (term "0,1,1,1,1,0,1,0"))
      (rule "replace_long_RANGE" (formula "18") (term "1,1,0,1,1,1,1,0,1,0"))
      (rule "add_zero_right" (formula "18") (term "0,1,0,1,1,1,1,0,1,0"))
      (rule "replace_long_MIN" (formula "18") (term "0,0,1,1,1,1,0,1,0"))
      (rule "replace_long_HALFRANGE" (formula "18") (term "0,1,0,1,1,1,1,0,1,0"))
      (rule "mod_axiom" (formula "18") (term "1,0,1,1,1,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,1,1,1,1,0,1,0"))
      (rule "div_literals" (formula "18") (term "0,1,1,0,1,1,1,1,0,1,0"))
      (rule "times_zero_2" (formula "18") (term "1,1,0,1,1,1,1,0,1,0"))
      (rule "add_zero_right" (formula "18") (term "1,0,1,1,1,1,0,1,0"))
      (rule "add_literals" (formula "18") (term "0,1,1,1,1,0,1,0"))
      (rule "expand_subJint" (formula "1") (term "0,2,1,0"))
      (rule "sub_literals" (formula "1") (term "0,0,2,1,0"))
      (rule "expand_moduloInteger" (formula "1") (term "0,2,2,0"))
      (rule "replace_int_RANGE" (formula "1") (term "1,1,0,2,2,0"))
      (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0,2,2,0"))
      (rule "replace_int_MIN" (formula "1") (term "0,0,2,2,0"))
      (rule "add_literals" (formula "1") (term "0,1,0,2,2,0"))
      (rule "mod_axiom" (formula "1") (term "1,0,2,2,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,2,2,0"))
      (rule "div_literals" (formula "1") (term "0,1,1,0,2,2,0"))
      (rule "times_zero_2" (formula "1") (term "1,1,0,2,2,0"))
      (rule "add_literals" (formula "1") (term "1,0,2,2,0"))
      (rule "add_literals" (formula "1") (term "0,2,2,0"))
      (rule "expand_moduloLong" (formula "18") (term "0,0,0,0,0,1,0,0,1,0,0"))
      (rule "replace_long_RANGE" (formula "18") (term "1,1,0,0,0,0,0,1,0,0,1,0,0"))
      (rule "replace_long_HALFRANGE" (formula "18") (term "0,0,1,0,0,0,0,0,1,0,0,1,0,0"))
      (rule "replace_long_MIN" (formula "18") (term "0,0,0,0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "0,0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "18") (term "0,0,0,0,1,0,0,1,0,0"))
      (rule "mul_literals" (formula "18") (term "0,0,0,0,0,1,0,0,1,0,0"))
      (rule "mod_axiom" (formula "18") (term "0,1,0,0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "18") (term "0,1,0,0,0,0,1,0,0,1,0,0"))
      (rule "mul_literals" (formula "18") (term "0,0,1,0,0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0,1,0,0,1,0,0"))
      (rule "add_literals" (formula "18") (term "0,0,0,0,0,0,1,0,0,1,0,0"))
      (rule "add_zero_left" (formula "18") (term "0,0,0,0,0,1,0,0,1,0,0"))
      (rule "expand_mulJlong" (formula "18") (term "1,1,1,1,0,1,0"))
      (rule "mul_literals" (formula "18") (term "0,1,1,1,1,0,1,0"))
      (rule "expand_moduloInteger" (formula "1") (term "0,2,1,0"))
      (rule "replace_int_MIN" (formula "1") (term "0,0,2,1,0"))
      (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0,2,1,0"))
      (rule "replace_int_RANGE" (formula "1") (term "1,1,0,2,1,0"))
      (rule "add_literals" (formula "1") (term "0,1,0,2,1,0"))
      (rule "mod_axiom" (formula "1") (term "1,0,2,1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,2,1,0"))
      (rule "div_literals" (formula "1") (term "0,1,1,0,2,1,0"))
      (rule "times_zero_2" (formula "1") (term "1,1,0,2,1,0"))
      (rule "add_literals" (formula "1") (term "1,0,2,1,0"))
      (rule "add_literals" (formula "1") (term "0,2,1,0"))
      (rule "nnf_imp2or" (formula "18") (term "0,0,0,0"))
      (rule "expand_moduloLong" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
      (rule "replace_long_RANGE" (formula "18") (term "1,1,0,0,0,1,0,0,1,0,0"))
      (rule "replace_long_HALFRANGE" (formula "18") (term "0,0,1,0,0,0,1,0,0,1,0,0"))
      (rule "replace_long_MIN" (formula "18") (term "0,0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,1,0,0,0,1,0,0,1,0,0"))
      (rule "polyMod_pullOut" (formula "18") (term "1,0,0,0,1,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,1,0,0,0,1,0,0,1,0,0"))
      (rule "add_literals" (formula "18") (term "1,1,0,1,0,0,0,1,0,0,1,0,0"))
      (rule "times_zero_1" (formula "18") (term "1,0,1,0,0,0,1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "18") (term "0,1,0,0,0,1,0,0,1,0,0"))
      (rule "mod_axiom" (formula "18") (term "1,0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,1,0,0,1,0,0"))
      (rule "add_literals" (formula "18") (term "0,0,0,0,0,1,0,0,1,0,0"))
      (rule "add_zero_left" (formula "18") (term "0,0,0,0,1,0,0,1,0,0"))
      (rule "expand_moduloLong" (formula "18") (term "1,1,1,1,0,1,0"))
      (rule "replace_long_MIN" (formula "18") (term "0,1,1,1,1,0,1,0"))
      (rule "add_zero_right" (formula "18") (term "0,1,1,1,1,1,0,1,0"))
      (rule "replace_long_RANGE" (formula "18") (term "1,1,1,1,1,1,0,1,0"))
      (rule "replace_long_HALFRANGE" (formula "18") (term "0,1,1,1,1,1,0,1,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "1,1,1,0,1,0"))
      (rule "add_literals" (formula "18") (term "0,1,1,1,0,1,0"))
      (rule "mod_axiom" (formula "18") (term "1,1,1,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,1,1,0,1,0"))
      (rule "div_literals" (formula "18") (term "0,1,1,1,1,1,0,1,0"))
      (rule "mul_literals" (formula "18") (term "1,1,1,1,1,0,1,0"))
      (rule "add_zero_right" (formula "18") (term "1,1,1,1,0,1,0"))
      (rule "add_literals" (formula "18") (term "1,1,1,0,1,0"))
      (rule "expand_addJlong" (formula "18") (term "0,0,1,0,0,1,0,0"))
      (rule "polySimp_addComm1" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_addComm0" (formula "18") (term "0,0,0,0,1,0,0,1,0,0"))
      (rule "commute_or" (formula "13") (term "0"))
      (rule "commute_or" (formula "12") (term "0"))
      (rule "expand_moduloLong" (formula "18") (term "0,0,1,0,0,1,0,0"))
      (rule "replace_long_RANGE" (formula "18") (term "1,1,0,0,1,0,0,1,0,0"))
      (rule "replace_long_HALFRANGE" (formula "18") (term "0,0,1,0,0,1,0,0,1,0,0"))
      (rule "replace_long_MIN" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,1,0,0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1,0,0,1,0,0"))
      (rule "polyMod_pullOut" (formula "18") (term "1,0,0,1,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            mul(wordIndex, Z(4(6(#))))),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(1(#))))"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,0,1,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,0,1,0,0,1,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,1,0,0,1,0,0,1,0,0"))
      (rule "add_literals" (formula "18") (term "1,1,0,1,0,0,1,0,0,1,0,0"))
      (rule "times_zero_1" (formula "18") (term "1,0,1,0,0,1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "18") (term "0,1,0,0,1,0,0,1,0,0"))
      (rule "mod_axiom" (formula "18") (term "1,0,0,1,0,0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,1,0,0,1,0,0"))
      (rule "add_literals" (formula "18") (term "0,0,0,0,0,1,0,0,1,0,0"))
      (rule "add_zero_left" (formula "18") (term "0,0,0,0,1,0,0,1,0,0"))
      (rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0"))
      (rule "nnf_imp2or" (formula "18") (term "0,1,0"))
      (rule "cnf_rightDist" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "nnf_notAnd" (formula "19") (term "0,0,1,0"))
      (rule "nnf_imp2or" (formula "19") (term "0,0,1,0,0"))
      (rule "nnf_notAnd" (formula "19") (term "1,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "19") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "19") (term "1,0,0,1,1,0,0,1,0"))
      (rule "add_literals" (formula "19") (term "0,0,1,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,1,0,0,1,0"))
      (rule "mul_literals" (formula "19") (term "1,1,1,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "19") (term "0,1,0,0,1,0"))
      (rule "mul_literals" (formula "19") (term "1,0,0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,1,0,0,1,0"))
      (rule "mul_literals" (formula "19") (term "1,0,1,0,0,1,0"))
      (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0,0,0,0,0"))
      (rule "add_literals" (formula "19") (term "0,0,1,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "19") (term "1,1,0,0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0,0"))
      (rule "inEqSimp_or_antiSymm0" (formula "19") (term "0,0,0,0,0,0"))
      (rule "add_literals" (formula "19") (term "1,0,1,0,0,0,0,0,0"))
      (rule "add_literals" (formula "19") (term "0,0,0,0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
      (rule "expand_inInt" (formula "9"))
      (rule "replace_int_MIN" (formula "9") (term "0,1"))
      (rule "replace_int_MAX" (formula "9") (term "1,0"))
      (rule "andLeft" (formula "9"))
      (rule "inEqSimp_commuteLeq" (formula "10"))
      (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
      (rule "qeq_literals" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
      (rule "leq_literals" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "arrayLengthNotNegative" (formula "9") (term "0"))
      (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
      (rule "qeq_literals" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "nnf_notAnd" (formula "19") (term "0,0,0,1,0,0"))
      (rule "nnf_notAnd" (formula "19") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "19") (term "0,1,0,0,0,0,0"))
      (rule "mul_literals" (formula "19") (term "1,0,0,0,1,0,0,0,0,0"))
      (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,1,0,0,0,0,0"))
      (rule "mul_literals" (formula "19") (term "1,0,1,0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "19") (term "1,1,0,0,0,0,0"))
      (rule "mul_literals" (formula "19") (term "1,0,0,1,1,0,0,0,0,0"))
      (rule "add_literals" (formula "19") (term "0,0,1,1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,1,0,0,0,0,0"))
      (rule "mul_literals" (formula "19") (term "1,1,1,0,0,0,0,0"))
      (rule "nnf_notAnd" (formula "19") (term "1,0,0,0,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "19") (term "0,1,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "19") (term "1,0,0,0,1,0,0,0,1,0,0"))
      (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,1,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "19") (term "1,0,1,0,0,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "19") (term "1,1,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "19") (term "1,0,0,1,1,0,0,0,1,0,0"))
      (rule "add_literals" (formula "19") (term "0,0,1,1,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,1,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "19") (term "1,1,1,0,0,0,1,0,0"))
      (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,1,0,0"))
      (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0,0,0,0,1,0,0"))
      (rule "add_literals" (formula "19") (term "0,0,1,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "19") (term "1,1,0,0,0,0,0,1,0,0"))
      (rule "nnf_notAnd" (formula "19") (term "1,0,0,0,0,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "19") (term "0,1,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "19") (term "1,0,0,0,1,0,0,0,0,1,0,0"))
      (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,1,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "19") (term "1,0,1,0,0,0,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "19") (term "1,1,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "19") (term "1,0,0,1,1,0,0,0,0,1,0,0"))
      (rule "add_literals" (formula "19") (term "0,0,1,1,0,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,1,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "19") (term "1,1,1,0,0,0,0,1,0,0"))
      (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0,0,0,0,0,1,0,0"))
      (rule "add_zero_right" (formula "19") (term "0,0,1,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "19") (term "1,1,0,0,0,0,0,0,1,0,0"))
      (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,0,0,0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,0,0,0,0,1,0,0"))
      (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0,0,0,1,0,0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "commute_or" (formula "10"))
      (rule "cnf_rightDist" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "commute_or" (formula "11"))
      (rule "commute_or" (formula "12"))
      (rule "cnf_rightDist" (formula "10"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "commute_or" (formula "10"))
      (rule "andRight" (formula "20"))
      (branch "Case 1"
         (rule "andRight" (formula "20"))
         (branch "Case 1"
            (rule "allRight" (formula "20") (inst "sk=i_0"))
            (rule "orRight" (formula "20"))
            (rule "orRight" (formula "20"))
            (rule "notRight" (formula "20"))
            (rule "orRight" (formula "21"))
            (rule "inEqSimp_geqRight" (formula "21"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_leqRight" (formula "22"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "3"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "qeq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "applyEqRigid" (formula "21") (term "0,2,0") (ifseqformula "1"))
            (rule "replaceKnownSelect_taclet00_3" (formula "21") (term "0"))
            (rule "close" (formula "21") (ifseqformula "14"))
         )
         (branch "Case 2"
            (rule "allRight" (formula "20") (inst "sk=x_0"))
            (rule "orRight" (formula "20"))
            (rule "orRight" (formula "20"))
            (rule "orRight" (formula "21"))
            (rule "notRight" (formula "20"))
            (rule "inEqSimp_leqRight" (formula "22"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_geqRight" (formula "22"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "commute_and" (formula "23"))
            (rule "inEqSimp_and_contradInEq0" (formula "23"))
            (rule "qeq_literals" (formula "23") (term "1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "false_right" (formula "23"))
            (rule "ifthenelse_split" (formula "4") (term "0"))
            (branch " (b_1.words@anon_heap_initWords«anonHeapFunction»).<created> = TRUE TRUE"
               (rule "hideAuxiliaryEq" (formula "5"))
               (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "13"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "allLeft" (formula "17") (inst "t=x_0"))
               (rule "notLeft" (formula "17"))
               (rule "close" (formula "18") (ifseqformula "3"))
            )
            (branch " (b_1.words@anon_heap_initWords«anonHeapFunction»).<created> = TRUE FALSE"
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "replace_known_right" (formula "13") (term "0,0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "allLeft" (formula "16") (inst "t=x_0"))
               (rule "notLeft" (formula "16"))
               (rule "close" (formula "17") (ifseqformula "3"))
            )
         )
      )
      (branch "Case 2"
         (rule "allRight" (formula "20") (inst "sk=f_0"))
         (rule "allRight" (formula "20") (inst "sk=o_0"))
         (rule "orRight" (formula "20"))
         (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=f_0_0"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "22"))
         (rule "eqSymm" (formula "1") (term "0,0,0"))
         (rule "eqSymm" (formula "1") (term "1,0,0"))
         (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "1") (term "0,0,0"))
         (rule "eqSymm" (formula "1") (term "1,0,0"))
         (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,1,0,0"))
         (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,1,0,0"))
         (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,1,0,0"))
         (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,1,0,0"))
         (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,1,0,0"))
         (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
         (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "1") (term "0,0,0"))
         (rule "eqSymm" (formula "1") (term "1,0,0"))
         (rule "pullOutSelect" (formula "2") (term "0,0,1,1,0,0") (inst "selectSK=java_lang_Object_created__2"))
         (rule "simplifySelectOfCreate" (formula "2"))
          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "24")))
         (rule "castDel" (formula "2") (term "1,0"))
         (rule "eqSymm" (formula "2") (term "0,0"))
         (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "1") (term "0,0,0"))
         (rule "eqSymm" (formula "1") (term "1,0,0"))
         (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_5"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "1") (term "0,0,0"))
         (rule "eqSymm" (formula "1") (term "1,0,0"))
         (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_6"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "1") (term "0,0,0"))
         (rule "eqSymm" (formula "1") (term "1,0,0"))
         (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_7"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "1") (term "0,0,0"))
         (rule "eqSymm" (formula "1") (term "1,0,0"))
         (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_8"))
         (rule "simplifySelectOfCreate" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "1") (term "0,0,0,0"))
         (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "29"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "ifthenelse_split" (formula "11") (term "0"))
         (branch " (b_1.words@anon_heap_initWords«anonHeapFunction»).<created> = TRUE TRUE"
            (rule "hideAuxiliaryEq" (formula "12"))
            (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "commute_and" (formula "10") (term "0,0"))
            (rule "commute_and" (formula "9") (term "0,0"))
            (rule "commute_and" (formula "6") (term "0,0"))
            (rule "commute_and" (formula "5") (term "0,0"))
            (rule "commute_and" (formula "4") (term "0,0"))
            (rule "commute_and" (formula "8") (term "1,0,0"))
            (rule "commute_and" (formula "3") (term "0,0"))
            (rule "commute_and" (formula "2") (term "0,0"))
            (rule "commute_and" (formula "1") (term "0,0"))
            (rule "commute_and" (formula "8") (term "0,0,0,0,0"))
            (rule "commute_and" (formula "8") (term "1,0,0,0,0"))
            (rule "cnf_rightDist" (formula "8") (term "0,0,0,0"))
            (rule "commute_or" (formula "8") (term "0,0,0,0,0"))
            (rule "cnf_rightDist" (formula "8") (term "1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "commute_or" (formula "8") (term "0,1,0,0,0,0"))
            (rule "commute_and" (formula "8") (term "1,0,0,0,0"))
            (rule "cnf_rightDist" (formula "8") (term "0,0,0,0,0"))
            (rule "commute_or" (formula "8") (term "0,0,0,0,0,0"))
            (rule "commute_or" (formula "8") (term "1,0,0,0,0,0"))
            (rule "commute_and_2" (formula "8") (term "0,0,0,0"))
            (rule "ifthenelse_split" (formula "7") (term "0"))
            (branch "o_0 = b_1 TRUE"
               (rule "applyEqReverse" (formula "9") (term "0,0,0,1,0,0") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "7")) (ifInst ""  (formula "7")) (ifInst ""  (formula "7")))
               (rule "hideAuxiliaryEq" (formula "8"))
               (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "replace_known_left" (formula "10") (term "1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "applyEq" (formula "8") (term "1,1,0") (ifseqformula "7"))
               (rule "applyEq" (formula "1") (term "1,2,0") (ifseqformula "7"))
               (rule "applyEq" (formula "28") (term "0,0,0") (ifseqformula "7"))
               (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "27"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "notRight" (formula "28"))
               (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "8"))
               (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "8"))
               (rule "close" (formula "27") (ifseqformula "1"))
            )
            (branch "o_0 = b_1 FALSE"
               (rule "applyEqReverse" (formula "8") (term "0,0,0,1,0,0") (ifseqformula "7"))
               (rule "hideAuxiliaryEq" (formula "7"))
               (rule "replace_known_right" (formula "7") (term "0,1,0,0,0,0,0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "24")) (ifInst ""  (formula "24")))
               (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "replace_known_right" (formula "5") (term "1,0,0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "5"))
               (rule "hideAuxiliaryEq" (formula "5"))
               (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "commute_and" (formula "1") (term "0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch " (b_1.words@anon_heap_initWords«anonHeapFunction»).<created> = TRUE FALSE"
            (rule "hideAuxiliaryEq" (formula "11"))
            (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "26"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "26"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "commute_and" (formula "10") (term "0,0"))
            (rule "commute_and" (formula "9") (term "0,0"))
            (rule "commute_and" (formula "6") (term "0,0"))
            (rule "commute_and" (formula "5") (term "0,0"))
            (rule "commute_and" (formula "4") (term "0,0"))
            (rule "commute_and" (formula "8") (term "1,0,0"))
            (rule "commute_and" (formula "3") (term "0,0"))
            (rule "commute_and" (formula "2") (term "0,0"))
            (rule "commute_and" (formula "1") (term "0,0"))
            (rule "commute_and" (formula "8") (term "0,0,0,0,0"))
            (rule "commute_and" (formula "8") (term "1,0,0,0,0"))
            (rule "cnf_rightDist" (formula "8") (term "0,0,0,0"))
            (rule "commute_or" (formula "8") (term "0,0,0,0,0"))
            (rule "cnf_rightDist" (formula "8") (term "1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "commute_or" (formula "8") (term "0,1,0,0,0,0"))
            (rule "commute_and" (formula "8") (term "1,0,0,0,0"))
            (rule "cnf_rightDist" (formula "8") (term "0,0,0,0,0"))
            (rule "commute_and_2" (formula "8") (term "0,0,0,0"))
            (rule "commute_or" (formula "8") (term "1,0,0,0,0"))
            (rule "commute_or" (formula "8") (term "0,0,0,0,0,0"))
            (rule "ifthenelse_split" (formula "7") (term "0"))
            (branch "o_0 = b_1 TRUE"
               (rule "applyEqReverse" (formula "9") (term "0,0,0,1,0,0") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "7")) (ifInst ""  (formula "7")) (ifInst ""  (formula "7")))
               (rule "hideAuxiliaryEq" (formula "8"))
               (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "replace_known_left" (formula "9") (term "1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "replace_known_left" (formula "10") (term "1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "applyEq" (formula "1") (term "1,2,0") (ifseqformula "7"))
               (rule "applyEq" (formula "28") (term "0,0,0") (ifseqformula "7"))
               (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "27"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "notRight" (formula "28"))
               (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "8"))
               (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "8"))
               (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "8"))
               (rule "close" (formula "27") (ifseqformula "1"))
            )
            (branch "o_0 = b_1 FALSE"
               (rule "applyEqReverse" (formula "8") (term "0,0,0,1,0,0") (ifseqformula "7"))
               (rule "hideAuxiliaryEq" (formula "7"))
               (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "replace_known_right" (formula "8") (term "1,0,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "applyEqReverse" (formula "28") (term "1") (ifseqformula "8"))
               (rule "hideAuxiliaryEq" (formula "8"))
               (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "replace_known_right" (formula "4") (term "1,1,1,0,0,0,0,0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "19")) (ifInst ""  (formula "19")))
               (rule "replace_known_right" (formula "5") (term "1,0,0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "5"))
               (rule "hideAuxiliaryEq" (formula "5"))
               (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "commute_and" (formula "1") (term "0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
   )
   (branch "Null Reference (self_1 = null)"
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Exceptional Post (initWords)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "expand_inInt" (formula "5") (term "1,0,0,0,1,1,0,1,1"))
   (rule "replace_int_MIN" (formula "5") (term "0,1,1,0,0,0,1,1,0,1,1"))
   (rule "replace_int_MAX" (formula "5") (term "1,0,1,0,0,0,1,1,0,1,1"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "6"))
   (rule "close" (formula "10") (ifseqformula "9"))
)
(branch "Pre (initWords)"
    (builtin "One Step Simplification" (formula "6"))
   (rule "wellFormedStorePrimitive" (formula "6") (term "0,1"))
   (rule "wellFormedStorePrimitive" (formula "6") (term "0,1"))
   (rule "leq_literals" (formula "6") (term "0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "expand_inInt" (formula "6") (term "1"))
   (rule "replace_int_MIN" (formula "6") (term "0,1,1"))
   (rule "replace_int_MAX" (formula "6") (term "1,0,1"))
   (rule "leq_literals" (formula "6") (term "1,1"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "leq_literals" (formula "6") (term "1"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "wellFormedStoreObject" (formula "6"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "wellFormedStorePrimitive" (formula "6"))
   (rule "wellFormedStorePrimitive" (formula "6"))
   (rule "wellFormedCreate" (formula "6"))
   (rule "close" (formula "6") (ifseqformula "2"))
)
)
}
