\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Feb 23 09:28:24 CET 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:on , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:allow , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "..";

\include "../taclets/intSet.key",  "../taclets/bitwiseOperations.key",  "../taclets/binaryAxiomsExtension.key";

\proofObligation "#Proof Obligation Settings
#Thu Feb 23 09:28:24 CET 2023
contract=BitSet[BitSet\\:\\:get(int)].JML normal_behavior operation contract.0
name=BitSet[BitSet\\:\\:get(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "christianhein" ) (keyVersion "59a0e37210"))
(keyLog "1" (keyUser "christianhein" ) (keyVersion "59a0e37210"))

(autoModeTime "19823")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "0,0,1,0,1"))
(rule "assignment" (formula "9") (term "1"))
(rule "methodBodyExpand" (formula "9") (term "1,1") (newnames "heapBefore_get,savedHeapBefore_get"))
(rule "ifUnfold" (formula "9") (term "1,1,1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "9") (term "1,1,1") (newnames "x"))
(rule "less_than_comparison_simple" (formula "9") (term "1,1,1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "if" (formula "9") (term "1") (userinteraction))
 (builtin "One Step Simplification" (formula "9") (userinteraction))
(rule "less_neg" (formula "9") (term "0") (userinteraction))
(rule "le1_add1_eq_le" (formula "9") (term "0,0") (userinteraction))
(rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "6") (userinteraction))
 (builtin "One Step Simplification" (formula "9") (userinteraction))
(rule "methodCallWithinClass" (formula "9") (term "1") (userinteraction))
(rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_checkInvariants,savedHeapBefore_checkInvariants") (userinteraction))
(rule "evaluateAssertCondition_1" (formula "9") (term "1,1") (inst "#condition=x") (userinteraction))
(rule "variableDeclarationAssign" (formula "9") (term "1,1") (userinteraction))
(rule "variableDeclaration" (formula "9") (term "1,1") (newnames "x_1") (userinteraction))
 (builtin "One Step Simplification" (formula "9"))
(rule "expand_inInt" (formula "4"))
(rule "replace_int_MAX" (formula "4") (term "1,0"))
(rule "replace_int_MIN" (formula "4") (term "0,1"))
(rule "andLeft" (formula "4"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "remove_parentheses_right" (formula "10") (term "1"))
(rule "compound_assignment_5_nonsimple" (formula "10") (term "1"))
(rule "ifElseUnfold" (formula "10") (term "1") (inst "#boolv=x_2"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "x_2"))
(rule "compound_equality_comparison_1" (formula "10") (term "1") (inst "#v0=x_3"))
(rule "variableDeclarationAssign" (formula "10") (term "1"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "x_3"))
(rule "assignment_read_attribute_this" (formula "10") (term "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "equality_comparison_simple" (formula "10") (term "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "ifElse" (formula "10") (term "1") (userinteraction))
 (builtin "One Step Simplification" (formula "10") (userinteraction))
(rule "ifthenelse_split_for" (formula "10") (userinteraction))
(branch "self.wordsInUse = 0 TRUE"
   (rule "assignment" (formula "11") (term "1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "assert" (formula "11") (term "1"))
   (branch "Assertion (x_1) OK"
       (builtin "One Step Simplification" (formula "12"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "evaluateAssertCondition_1" (formula "11") (term "1") (inst "#condition=x"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_4"))
      (rule "remove_parentheses_right" (formula "11") (term "1"))
      (rule "compound_assignment_3_nonsimple" (formula "11") (term "1"))
      (rule "ifElseUnfold" (formula "11") (term "1") (inst "#boolv=x_5"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_5"))
      (rule "compound_assignment_2" (formula "11") (term "1") (inst "#v=x_6"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_6"))
      (rule "compound_greater_equal_than_comparison_1" (formula "11") (term "1") (inst "#v0=x_7"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_7"))
      (rule "assignment_read_attribute_this" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "greater_equal_than_comparison_simple" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "compound_assignment_1_new" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "ifElseSplit" (formula "11"))
      (branch "if x_5 true"
          (builtin "One Step Simplification" (formula "12"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "assignment" (formula "12") (term "1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "assert" (formula "12") (term "1"))
         (branch "Assertion (x_4) OK"
             (builtin "One Step Simplification" (formula "13"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Assertion (x_4) Failure"
             (builtin "One Step Simplification" (formula "13"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "throwUnfold" (formula "12") (term "1") (inst "#v0=a"))
            (rule "variableDeclarationAssign" (formula "12") (term "1"))
            (rule "variableDeclaration" (formula "12") (term "1") (newnames "a"))
            (rule "instanceCreationAssignment" (formula "12") (term "1") (inst "#v0=a_1"))
            (rule "variableDeclarationAssign" (formula "12") (term "1"))
            (rule "variableDeclaration" (formula "12") (term "1") (newnames "a_1"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "12") (term "1") (inst "#v0=a_2"))
            (rule "variableDeclaration" (formula "12") (term "1") (newnames "a_2"))
            (rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "variableDeclaration" (formula "12") (term "1") (newnames "__NEW__"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "12") (term "1") (inst "#v0=a_3"))
            (rule "variableDeclaration" (formula "12") (term "1") (newnames "a_3"))
            (rule "allocateInstance" (formula "12"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
             (builtin "One Step Simplification" (formula "13"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "blockEmpty" (formula "15") (term "1"))
            (rule "assignment" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "assignment_write_attribute_this" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "methodCallWithinClass" (formula "15") (term "1"))
            (rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "methodCallSuper" (formula "15") (term "1"))
            (rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "methodCallSuper" (formula "15") (term "1"))
            (rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "methodCallSuper" (formula "15") (term "1"))
            (rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "methodCallEmpty" (formula "15") (term "1"))
            (rule "blockEmpty" (formula "15") (term "1"))
            (rule "assignment_write_attribute_this" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "assignment_write_attribute_this" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "methodCallEmpty" (formula "15") (term "1"))
            (rule "methodCallEmpty" (formula "15") (term "1"))
            (rule "methodCallEmpty" (formula "15") (term "1"))
            (rule "blockEmpty" (formula "15") (term "1"))
            (rule "methodCallReturnIgnoreResult" (formula "15") (term "1"))
            (rule "methodCallReturn" (formula "15") (term "1"))
            (rule "assignment" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "methodCallEmpty" (formula "15") (term "1"))
            (rule "blockEmpty" (formula "15") (term "1"))
            (rule "assignment" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "methodCallSuper" (formula "15") (term "1"))
            (rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "methodCallSuper" (formula "15") (term "1"))
            (rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "methodCallSuper" (formula "15") (term "1"))
            (rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "methodCallEmpty" (formula "15") (term "1"))
            (rule "blockEmpty" (formula "15") (term "1"))
            (rule "assignment_write_attribute_this" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "assignment_write_attribute_this" (formula "15") (term "1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "methodCallEmpty" (formula "15") (term "1"))
            (rule "methodCallEmpty" (formula "15") (term "1"))
            (rule "methodCallEmpty" (formula "15") (term "1"))
            (rule "blockEmpty" (formula "15") (term "1"))
            (rule "assignment_write_attribute" (formula "15") (term "1"))
            (branch "Normal Execution (a_1 != null)"
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "12")))
                (builtin "One Step Simplification" (formula "16"))
               (rule "false_right" (formula "15"))
               (rule "assignment" (formula "15") (term "1"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "methodCallThrow" (formula "15") (term "1"))
               (rule "blockThrow" (formula "15") (term "1"))
               (rule "methodCallParamThrow" (formula "15") (term "1"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "tryCatchThrow" (formula "15") (term "1"))
               (rule "ifElseUnfold" (formula "15") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_8"))
               (rule "equality_comparison_simple" (formula "15") (term "1"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "replace_known_right" (formula "15") (term "0,0,1,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "ifElseSplit" (formula "15"))
               (branch "if x_8 true"
                   (builtin "One Step Simplification" (formula "16"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_8 false"
                   (builtin "One Step Simplification" (formula "1"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "1"))
                  (rule "elim_double_block" (formula "15") (term "1"))
                  (rule "ifElseSplit" (formula "15"))
                  (branch "if a instanceof java.lang.Throwable true"
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                     (rule "true_left" (formula "1"))
                     (rule "variableDeclaration" (formula "15") (term "1") (newnames "e"))
                     (rule "delete_unnecessary_cast" (formula "15") (term "1"))
                      (builtin "One Step Simplification" (formula "16"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "assignment" (formula "15") (term "1"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "emptyModality" (formula "15") (term "1"))
                      (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "12")))
                     (rule "false_right" (formula "15"))
                     (rule "Partial_inv_axiom_for_JML_class_invariant_nr_9_in_BitSet" (formula "10") (inst "x=x_9") (ifseqformula "14"))
                     (rule "expand_inInt" (formula "10") (term "1,0,0"))
                     (rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0"))
                     (rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "10") (term "1,1,0,0"))
                     (rule "nnf_imp2or" (formula "10") (term "0"))
                     (rule "nnf_notAnd" (formula "10") (term "0,0"))
                     (rule "nnf_notAnd" (formula "10") (term "1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "10") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,0,0,1,1,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "10") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,0,0,0,1,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,0,1,0,0"))
                     (rule "shift_paren_or" (formula "10") (term "0,0"))
                     (rule "commute_or_2" (formula "10") (term "0,0"))
                     (rule "commute_or_2" (formula "10") (term "0"))
                     (rule "inEqSimp_or_subsumption3" (formula "10") (term "0"))
                     (rule "qeq_literals" (formula "10") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "Partial_inv_axiom_for_JML_class_invariant_nr_5_in_BitSet" (formula "11") (inst "i=i") (ifseqformula "15"))
                     (rule "expand_inInt" (formula "11") (term "1,0,0"))
                     (rule "replace_int_MIN" (formula "11") (term "0,1,1,0,0"))
                     (rule "replace_int_MAX" (formula "11") (term "1,0,1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0,0"))
                     (rule "applyEq" (formula "11") (term "1,0,0,0,0") (ifseqformula "2"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0"))
                     (rule "nnf_imp2or" (formula "11") (term "0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0"))
                     (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "11") (term "1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,1,1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,1,0,0"))
                     (rule "commute_or_2" (formula "11") (term "0,0"))
                     (rule "shift_paren_or" (formula "11") (term "0,0,0"))
                     (rule "commute_or_2" (formula "11") (term "0,0,0"))
                     (rule "commute_or" (formula "11") (term "0,0,0,0"))
                     (rule "inEqSimp_or_subsumption0" (formula "11") (term "0,0,0,0"))
                     (rule "qeq_literals" (formula "11") (term "0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "arrayLengthIsAnInt" (formula "11") (term "1,1,0,0"))
                     (rule "expand_inInt" (formula "11"))
                     (rule "replace_int_MAX" (formula "11") (term "1,0"))
                     (rule "replace_int_MIN" (formula "11") (term "0,1"))
                     (rule "andLeft" (formula "11"))
                     (rule "inEqSimp_commuteLeq" (formula "12"))
                     (rule "arrayLengthNotNegative" (formula "13") (term "1,1,0,0"))
                     (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "13"))
                     (rule "leq_literals" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "0,1,1,0,0") (ifseqformula "3"))
                     (rule "cut_direct" (formula "13") (term "0"))
                     (branch "CUT: self.words = null TRUE"
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "true_left" (formula "14"))
                        (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "14") (term "0,1,1,0,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "13"))
                        (rule "applyEq" (formula "14") (term "1,0,1,0") (ifseqformula "13"))
                        (rule "arrayLengthNotNegative" (formula "12") (term "0"))
                        (rule "arrayLengthIsAnInt" (formula "12") (term "0"))
                        (rule "expand_inInt" (formula "12"))
                        (rule "replace_int_MIN" (formula "12") (term "0,1"))
                        (rule "replace_int_MAX" (formula "12") (term "1,0"))
                        (rule "andLeft" (formula "12"))
                        (rule "inEqSimp_commuteLeq" (formula "12"))
                        (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "13"))
                        (rule "leq_literals" (formula "12") (term "0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "Partial_inv_axiom_for_JML_class_invariant_nr_7_in_BitSet" (formula "15") (inst "x=x_9") (ifseqformula "19"))
                        (rule "expand_inInt" (formula "15") (term "1,0,0"))
                        (rule "replace_int_MIN" (formula "15") (term "0,1,1,0,0"))
                        (rule "replace_int_MAX" (formula "15") (term "1,0,1,0,0"))
                        (rule "eqSymm" (formula "15") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1,0,0"))
                        (rule "nnf_imp2or" (formula "15") (term "0"))
                        (rule "nnf_notAnd" (formula "15") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "15") (term "1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,1,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "15") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,1,0,0"))
                        (rule "shift_paren_or" (formula "15") (term "0,0"))
                        (rule "commute_or_2" (formula "15") (term "0"))
                        (rule "commute_or_2" (formula "15") (term "0,0"))
                        (rule "commute_or_2" (formula "15") (term "0"))
                        (rule "commute_or" (formula "15") (term "0,0,0"))
                        (rule "commute_or_2" (formula "15") (term "0,0"))
                        (rule "inEqSimp_or_subsumption1" (formula "15") (term "0,0"))
                        (rule "qeq_literals" (formula "15") (term "0,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "ifthenelse_to_or_left" (formula "15") (term "0,0,0"))
                        (rule "eqSymm" (formula "15") (term "1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "eqSymm" (formula "15") (term "1,0,0,0,0"))
                        (rule "commute_or" (formula "15") (term "0,0"))
                        (rule "commute_or_2" (formula "15") (term "0"))
                        (rule "commute_or" (formula "15") (term "0,1,0"))
                        (rule "commute_or" (formula "15") (term "1,1,0"))
                        (rule "cnf_rightDist" (formula "15") (term "0"))
                        (rule "distr_forallAnd" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "commute_or_2" (formula "15") (term "0"))
                        (rule "shift_paren_or" (formula "16") (term "0"))
                        (rule "commute_or" (formula "15") (term "0,0"))
                        (rule "Partial_inv_axiom_for_JML_class_invariant_nr_0_in_BitSet" (formula "17") (ifseqformula "21"))
                        (rule "notLeft" (formula "17"))
                        (rule "close" (formula "18") (ifseqformula "13"))
                     )
                     (branch "CUT: self.words = null FALSE"
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "Partial_inv_axiom_for_JML_class_invariant_nr_7_in_BitSet" (formula "15") (inst "x=x_9") (ifseqformula "20"))
                        (rule "expand_inInt" (formula "15") (term "1,0,0"))
                        (rule "replace_int_MAX" (formula "15") (term "1,0,1,0,0"))
                        (rule "replace_int_MIN" (formula "15") (term "0,1,1,0,0"))
                        (rule "eqSymm" (formula "15") (term "1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1,0,0"))
                        (rule "nnf_imp2or" (formula "15") (term "0"))
                        (rule "nnf_notAnd" (formula "15") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "15") (term "1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "15") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,1,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,1,1,0,0"))
                        (rule "commute_or" (formula "15") (term "1,0,0"))
                        (rule "shift_paren_or" (formula "15") (term "0,0"))
                        (rule "commute_or_2" (formula "15") (term "0"))
                        (rule "commute_or_2" (formula "15") (term "0,0"))
                        (rule "commute_or" (formula "15") (term "0,0,0"))
                        (rule "commute_or_2" (formula "15") (term "0,0"))
                        (rule "inEqSimp_or_subsumption1" (formula "15") (term "0,0"))
                        (rule "qeq_literals" (formula "15") (term "0,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "ifthenelse_to_or_left" (formula "15") (term "0,0,0"))
                        (rule "eqSymm" (formula "15") (term "1,0,0,0,0"))
                        (rule "eqSymm" (formula "15") (term "1,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "commute_or" (formula "15") (term "0,0"))
                        (rule "commute_or_2" (formula "15") (term "0"))
                        (rule "commute_or" (formula "15") (term "1,1,0"))
                        (rule "commute_or" (formula "15") (term "0,1,0"))
                        (rule "cnf_rightDist" (formula "15") (term "0"))
                        (rule "distr_forallAnd" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "commute_or_2" (formula "15") (term "0"))
                        (rule "shift_paren_or" (formula "16") (term "0"))
                        (rule "commute_or" (formula "15") (term "0,0"))
                        (rule "Partial_inv_axiom_for_JML_class_invariant_nr_0_in_BitSet" (formula "17") (ifseqformula "22"))
                        (rule "notLeft" (formula "17"))
                        (rule "Partial_inv_axiom_for_JML_class_invariant_nr_1_in_BitSet" (formula "17") (ifseqformula "22"))
                        (rule "andLeft" (formula "17"))
                        (rule "inEqSimp_commuteLeq" (formula "17"))
                        (rule "close" (formula "23") (ifseqformula "17"))
                     )
                  )
                  (branch "if a instanceof java.lang.Throwable false"
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "Null Reference (a_1 = null)"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "if x_5 false"
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "8"))
         (rule "leq_literals" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "compound_less_equal_than_comparison_2" (formula "10") (term "1") (inst "#v1=x_6") (inst "#v0=x_5"))
         (rule "variableDeclarationAssign" (formula "10") (term "1"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_8"))
         (rule "assignment_read_attribute_this" (formula "10") (term "1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "variableDeclarationAssign" (formula "10") (term "1"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_9"))
         (rule "eval_order_array_access6" (formula "10") (term "1") (inst "#v0=x_arr"))
         (rule "variableDeclarationAssign" (formula "10") (term "1"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_arr"))
         (rule "assignment_read_attribute_this" (formula "10") (term "1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "assignment_read_length" (formula "10") (term "1"))
         (branch "Normal Execution (x_arr != null)"
             (builtin "One Step Simplification" (formula "11"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "applyEq" (formula "11") (term "0,1,0,0") (ifseqformula "1"))
            (rule "less_equal_than_comparison_simple" (formula "11") (term "1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,0"))
            (rule "blockEmpty" (formula "11") (term "1"))
            (rule "assert" (formula "11") (term "1"))
            (branch "Assertion (x_4) OK"
                (builtin "One Step Simplification" (formula "12"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "evaluateAssertCondition_1" (formula "12") (term "1") (inst "#condition=x"))
               (rule "variableDeclarationAssign" (formula "12") (term "1"))
               (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_10"))
               (rule "remove_parentheses_right" (formula "12") (term "1"))
               (rule "compound_assignment_5_nonsimple" (formula "12") (term "1"))
               (rule "ifElseUnfold" (formula "12") (term "1") (inst "#boolv=x_11"))
               (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_11"))
               (rule "compound_equality_comparison_2" (formula "12") (term "1") (inst "#v1=x_13") (inst "#v0=x_12"))
               (rule "variableDeclarationAssign" (formula "12") (term "1"))
               (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_12"))
               (rule "assignment_read_attribute_this" (formula "12") (term "1"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "variableDeclarationAssign" (formula "12") (term "1"))
               (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_13"))
               (rule "eval_order_access2" (formula "12") (term "1") (inst "#v0=x_arr"))
               (rule "variableDeclarationAssign" (formula "12") (term "1"))
               (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_arr_1"))
               (rule "assignment_read_attribute_this" (formula "12") (term "1"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "assignment_read_length" (formula "12") (term "1"))
               (branch "Normal Execution (x_arr_1 != null)"
                   (builtin "One Step Simplification" (formula "13"))
                   (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")))
                  (rule "false_right" (formula "12"))
                  (rule "applyEq" (formula "12") (term "0,1,0,0") (ifseqformula "2"))
                  (rule "equality_comparison_simple" (formula "12") (term "1"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "eqSymm" (formula "12") (term "0,0,1,0"))
                  (rule "ifElseSplit" (formula "12"))
                  (branch "if x_11 true"
                      (builtin "One Step Simplification" (formula "1"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "assignment" (formula "13") (term "1"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "assert" (formula "12") (term "1"))
                     (branch "Assertion (x_10) OK"
                         (builtin "One Step Simplification" (formula "13"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "methodCallEmpty" (formula "12") (term "1"))
                        (rule "blockEmpty" (formula "12") (term "1"))
                        (rule "variableDeclarationAssign" (formula "12") (term "1"))
                        (rule "variableDeclaration" (formula "12") (term "1") (newnames "wordIndex"))
                         (builtin "Use Operation Contract" (formula "12") (newnames "heapBefore_wordIndex,result_wordIndex,exc_0") (contract "BitSet[BitSet::wordIndex(int)].JML normal_behavior operation contract.0"))
                        (branch "Post (wordIndex)"
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "expand_inInt" (formula "10") (term "1,0"))
                           (rule "replace_int_MAX" (formula "10") (term "1,0,1,0"))
                           (rule "replace_int_MIN" (formula "10") (term "0,1,1,0"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "12"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "13"))
                           (rule "eqSymm" (formula "14") (term "1"))
                           (rule "translateJavaDivInt" (formula "14") (term "0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "12"))
                           (rule "assignment" (formula "17") (term "1"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "inEqSimp_contradEq7" (formula "13") (term "0") (ifseqformula "8"))
                           (rule "add_zero_left" (formula "13") (term "0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,0,0"))
                           (rule "leq_literals" (formula "13") (term "0,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "true_left" (formula "13"))
                           (rule "inEqSimp_contradEq7" (formula "13") (term "0,0") (ifseqformula "8"))
                           (rule "add_zero_left" (formula "13") (term "0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,0,0,0"))
                           (rule "leq_literals" (formula "13") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "expand_divJint" (formula "13") (term "0"))
                           (rule "expand_moduloInteger" (formula "13") (term "0"))
                           (rule "replace_int_MIN" (formula "13") (term "0,0"))
                           (rule "replace_int_HALFRANGE" (formula "13") (term "0,0,1,0"))
                           (rule "replace_int_RANGE" (formula "13") (term "1,1,0"))
                           (rule "polySimp_homoEq" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0"))
                           (rule "polySimp_addComm0" (formula "13") (term "0,0"))
                           (rule "polySimp_sepNegMonomial" (formula "13"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0"))
                           (rule "returnUnfold" (formula "16") (term "1") (inst "#v0=x"))
                           (rule "variableDeclarationAssign" (formula "16") (term "1"))
                           (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_14"))
                           (rule "compound_assignment_3_nonsimple" (formula "16") (term "1"))
                           (rule "jdiv_axiom" (formula "13") (term "1,0,0"))
                           (rule "eqSymm" (formula "13"))
                           (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "8"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "eqSymm" (formula "13"))
                           (rule "applyEq" (formula "14") (term "1,0,0") (ifseqformula "13"))
                           (rule "ifElseUnfold" (formula "17") (term "1") (inst "#boolv=x_15"))
                           (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_15"))
                           (rule "compound_assignment_2" (formula "17") (term "1") (inst "#v=x_16"))
                           (rule "variableDeclarationAssign" (formula "17") (term "1"))
                           (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_16"))
                           (rule "remove_parentheses_right" (formula "17") (term "1"))
                           (rule "compound_less_than_comparison_2" (formula "17") (term "1") (inst "#v1=x_18") (inst "#v0=x_17"))
                           (rule "variableDeclarationAssign" (formula "17") (term "1"))
                           (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_17"))
                           (rule "assignment" (formula "17") (term "1"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "variableDeclarationAssign" (formula "17") (term "1"))
                           (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_18"))
                           (rule "assignment_read_attribute_this" (formula "17") (term "1"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "applyEq" (formula "17") (term "0,1,0") (ifseqformula "2"))
                           (rule "less_than_comparison_simple" (formula "17") (term "1"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1,0"))
                           (rule "mul_literals" (formula "17") (term "1,0,0,0,0,1,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,1,0"))
                           (rule "mul_literals" (formula "17") (term "1,0,0,1,0"))
                           (rule "compound_assignment_1_new" (formula "17") (term "1"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "div_axiom" (formula "13") (term "1") (inst "quotient=quotient_0"))
                           (rule "mul_literals" (formula "13") (term "1,1,1,1,1"))
                           (rule "equal_literals" (formula "13") (term "0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "qeq_literals" (formula "13") (term "0,1"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "andLeft" (formula "13"))
                           (rule "andLeft" (formula "13"))
                           (rule "polySimp_addComm1" (formula "15") (term "1"))
                           (rule "add_literals" (formula "15") (term "0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "14"))
                           (rule "inEqSimp_homoInEq1" (formula "15"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0"))
                           (rule "applyEq" (formula "17") (term "1,0,0") (ifseqformula "13"))
                           (rule "applyEq" (formula "16") (term "1") (ifseqformula "13"))
                           (rule "mod_axiom" (formula "17") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,0"))
                           (rule "polySimp_homoEq" (formula "17"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "0,1,0"))
                           (rule "mul_literals" (formula "17") (term "0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "17") (term "0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "17") (term "0,0,0"))
                           (rule "polySimp_sepPosMonomial" (formula "17"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1"))
                           (rule "polySimp_rightDist" (formula "17") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                           (rule "polySimp_mulAssoc" (formula "17") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "17") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "17") (term "0,1"))
                           (rule "applyEq" (formula "12") (term "0") (ifseqformula "17"))
                           (rule "inEqSimp_homoInEq1" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0"))
                           (rule "applyEq" (formula "20") (term "0,0,0,1,0") (ifseqformula "17"))
                           (rule "inEqSimp_homoInEq0" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,1,0"))
                           (rule "applyEq" (formula "11") (term "0") (ifseqformula "17"))
                           (rule "inEqSimp_homoInEq0" (formula "11"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0"))
                           (rule "applyEq" (formula "20") (term "0,1,0,0") (ifseqformula "17"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1"))
                           (rule "polySimp_rightDist" (formula "15") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                           (rule "mul_literals" (formula "15") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1"))
                           (rule "polySimp_rightDist" (formula "12") (term "1"))
                           (rule "mul_literals" (formula "12") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1"))
                           (rule "polySimp_rightDist" (formula "11") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                           (rule "mul_literals" (formula "11") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "6"))
                           (rule "polySimp_mulAssoc" (formula "14") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "14") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "14"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(1(3(4(4(5(5(3(3(#)))))))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(4(6(#)))"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
                           (rule "neg_literal" (formula "14") (term "0,0,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "14") (term "0,0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "14") (term "0,0,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                           (rule "add_literals" (formula "14") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0"))
                           (rule "qeq_literals" (formula "14") (term "0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "16"))
                           (rule "mul_literals" (formula "8") (term "0,0"))
                           (rule "add_zero_left" (formula "8") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                           (rule "mul_literals" (formula "8") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(4(6(#)))"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "8") (term "0,0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                           (rule "add_literals" (formula "8") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "8") (term "1,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0"))
                           (rule "leq_literals" (formula "8") (term "0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "arrayLengthIsAnInt" (formula "1") (term "0"))
                           (rule "expand_inInt" (formula "1"))
                           (rule "replace_int_MAX" (formula "1") (term "1,0"))
                           (rule "replace_int_MIN" (formula "1") (term "0,1"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_commuteLeq" (formula "2"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                           (rule "leq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "arrayLengthNotNegative" (formula "1") (term "0"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "div_axiom" (formula "19") (term "0,1,1") (inst "quotient=quotient_1"))
                           (rule "mul_literals" (formula "19") (term "1,1,1,1,1"))
                           (rule "qeq_literals" (formula "19") (term "0,1,1"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "equal_literals" (formula "19") (term "0"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,1"))
                           (rule "add_literals" (formula "21") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "21") (term "1"))
                           (rule "add_literals" (formula "21") (term "0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "20"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "20") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "21"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "21") (term "0"))
                           (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "19"))
                           (rule "inEqSimp_homoInEq1" (formula "12"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "12") (term "0"))
                           (rule "applyEqRigid" (formula "24") (term "0,1,0,1,0,0") (ifseqformula "18"))
                           (rule "polySimp_addComm0" (formula "24") (term "0,1,0,0"))
                           (rule "applyEqRigid" (formula "24") (term "0,0,0,0,1,0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "24") (term "0,0,0,1,0"))
                           (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq0" (formula "12"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "12") (term "0"))
                           (rule "applyEqRigid" (formula "20") (term "0,1,1") (ifseqformula "17"))
                           (rule "polySimp_addComm0" (formula "20") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                           (rule "mul_literals" (formula "18") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                           (rule "mul_literals" (formula "19") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1,0"))
                           (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "13"))
                           (rule "polySimp_rightDist" (formula "18") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
                           (rule "mul_literals" (formula "18") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "18") (term "0"))
                           (rule "add_literals" (formula "18") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "18"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "18") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0"))
                           (rule "neg_literal" (formula "18") (term "0,0,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "18") (term "0,0"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "18") (term "0,0,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0"))
                           (rule "add_literals" (formula "18") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "18") (term "1,0,0"))
                           (rule "add_literals" (formula "18") (term "0,0"))
                           (rule "qeq_literals" (formula "18") (term "0"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "20"))
                           (rule "mul_literals" (formula "8") (term "0,0"))
                           (rule "add_zero_left" (formula "8") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                           (rule "mul_literals" (formula "8") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "8") (term "0,0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                           (rule "add_literals" (formula "8") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "8") (term "1,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0"))
                           (rule "leq_literals" (formula "8") (term "0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "19"))
                           (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "8"))
                           (rule "leq_literals" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "applyEqRigid" (formula "21") (term "0,1,1") (ifseqformula "8"))
                           (rule "mul_literals" (formula "21") (term "1,1"))
                           (rule "add_literals" (formula "21") (term "1"))
                           (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "8"))
                           (rule "qeq_literals" (formula "9"))
                           (rule "true_left" (formula "9"))
                           (rule "applyEq" (formula "24") (term "0,1,1,0,0,1,0") (ifseqformula "8"))
                           (rule "mul_literals" (formula "24") (term "1,1,0,0,1,0"))
                           (rule "add_literals" (formula "24") (term "1,0,0,1,0"))
                           (rule "applyEq" (formula "19") (term "0,1,1") (ifseqformula "8"))
                           (rule "mul_literals" (formula "19") (term "1,1"))
                           (rule "add_literals" (formula "19") (term "1"))
                           (rule "applyEqRigid" (formula "24") (term "0,0,0,1,0,0") (ifseqformula "8"))
                           (rule "mul_literals" (formula "24") (term "0,0,1,0,0"))
                           (rule "add_zero_left" (formula "24") (term "0,1,0,0"))
                           (rule "applyEq" (formula "18") (term "1") (ifseqformula "8"))
                           (rule "applyEq" (formula "21") (term "0,0,1") (ifseqformula "8"))
                           (rule "mul_literals" (formula "21") (term "0,1"))
                           (rule "add_zero_left" (formula "21") (term "1"))
                           (rule "inEqSimp_subsumption0" (formula "20") (ifseqformula "14"))
                           (rule "leq_literals" (formula "20") (term "0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "9"))
                           (rule "leq_literals" (formula "19") (term "0"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "true_left" (formula "19"))
                           (rule "inEqSimp_contradInEq1" (formula "22") (term "0,0,1,0") (ifseqformula "9"))
                           (rule "qeq_literals" (formula "22") (term "0,0,0,1,0"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "3"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "ifElseSplit" (formula "23"))
                           (branch "if x_15 true"
                               (builtin "One Step Simplification" (formula "1"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "1"))
                              (rule "assignment" (formula "23") (term "1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "methodCallReturn" (formula "23") (term "1"))
                              (rule "assignment" (formula "23") (term "1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "methodCallEmpty" (formula "23") (term "1"))
                              (rule "tryEmpty" (formula "23") (term "1"))
                              (rule "emptyModality" (formula "23") (term "1"))
                               (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "12")))
                              (rule "notRight" (formula "23"))
                              (rule "Class_invariant_axiom_for_BitSet" (formula "13") (inst "x=x_19") (inst "x_0=x_0") (inst "i=i") (ifseqformula "7"))
                              (rule "expand_inInt" (formula "13") (term "1,0,0,1,0,0"))
                              (rule "expand_inInt" (formula "13") (term "1,0,0,1"))
                              (rule "expand_inInt" (formula "13") (term "1,0,0,1,0"))
                              (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,1,0,0"))
                              (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,1,0,0"))
                              (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,1"))
                              (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,1"))
                              (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,1,0"))
                              (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,1,0"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "13"))
                              (rule "notLeft" (formula "13"))
                              (rule "andLeft" (formula "13"))
                              (rule "eqSymm" (formula "17") (term "1,0"))
                              (rule "translateJavaSubInt" (formula "15") (term "0,2,0,0,1"))
                              (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "17") (term "1,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "16") (term "1,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "13"))
                              (rule "applyEq" (formula "13") (term "0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "applyEq" (formula "13") (term "1") (ifseqformula "3"))
                              (rule "applyEq" (formula "14") (term "1,0,0,0,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "13") (term "0") (ifseqformula "4"))
                              (rule "leq_literals" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "applyEq" (formula "13") (term "0,1,0,0,1,0,0,0") (ifseqformula "3"))
                              (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                              (rule "nnf_imp2or" (formula "15") (term "0"))
                              (rule "nnf_imp2or" (formula "14") (term "0"))
                              (rule "nnf_imp2or" (formula "13") (term "0"))
                              (rule "nnf_notAnd" (formula "15") (term "0,0"))
                              (rule "nnf_notAnd" (formula "14") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
                              (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                              (rule "mul_literals" (formula "14") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "13") (term "0,0"))
                              (rule "nnf_notAnd" (formula "15") (term "1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "15") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,0,0,0,1,0,0"))
                              (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,0,1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "15") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,0,0,1,1,0,0"))
                              (rule "add_literals" (formula "15") (term "0,0,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,1,1,0,0"))
                              (rule "nnf_notAnd" (formula "14") (term "1,0,0"))
                              (rule "inEqSimp_notGeq" (formula "14") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "14") (term "1,0,0,1,1,0,0"))
                              (rule "add_literals" (formula "14") (term "0,0,1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,1,0,0"))
                              (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "14") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,0"))
                              (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,1,0,0"))
                              (rule "mul_literals" (formula "14") (term "1,0,1,0,0"))
                              (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "1,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "shift_paren_or" (formula "14") (term "0,0"))
                              (rule "commute_or_2" (formula "14") (term "0,0"))
                              (rule "commute_or_2" (formula "14") (term "0"))
                              (rule "inEqSimp_or_subsumption3" (formula "14") (term "0"))
                              (rule "qeq_literals" (formula "14") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "shift_paren_or" (formula "13") (term "0,0"))
                              (rule "commute_or_2" (formula "13") (term "0"))
                              (rule "commute_or_2" (formula "13") (term "0,0"))
                              (rule "commute_or_2" (formula "13") (term "0"))
                              (rule "commute_or" (formula "13") (term "0,0,0"))
                              (rule "commute_or_2" (formula "13") (term "0,0"))
                              (rule "inEqSimp_or_subsumption1" (formula "13") (term "0,0"))
                              (rule "qeq_literals" (formula "13") (term "0,1,0,0,0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "ifthenelse_to_or_left" (formula "13") (term "0,0,0"))
                              (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "eqSymm" (formula "13") (term "1,0,0,0,0"))
                              (rule "commute_or" (formula "13") (term "0,0"))
                              (rule "commute_or_2" (formula "13") (term "0"))
                              (rule "commute_or" (formula "13") (term "0,1,0"))
                              (rule "commute_or" (formula "13") (term "1,1,0"))
                              (rule "cnf_rightDist" (formula "13") (term "0"))
                              (rule "distr_forallAnd" (formula "13"))
                              (rule "andLeft" (formula "13"))
                              (rule "commute_or_2" (formula "13") (term "0"))
                              (rule "shift_paren_or" (formula "14") (term "0"))
                              (rule "commute_or" (formula "13") (term "0,0"))
                              (rule "allLeft" (formula "13") (inst "t=bitIndex"))
                              (rule "replace_known_left" (formula "13") (term "0,1,0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "Query_axiom_for_get_int__in_BitSet" (formula "13") (term "0,0,0") (inst "get_sk=get_sk_0") (inst "#p0=x_1") (inst "#self=b") (inst "#res=x") (ifseqformula "7"))
                              (rule "eqSymm" (formula "13") (term "0,1"))
                              (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0") (ifseqformula "12"))
                              (rule "qeq_literals" (formula "14") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "inEqSimp_contradInEq0" (formula "14") (term "1") (ifseqformula "8"))
                              (rule "qeq_literals" (formula "14") (term "0,1"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "applyEqRigid" (formula "13") (term "1,0,1") (ifseqformula "14"))
                              (rule "boxToDiamond" (formula "13") (term "1"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "notLeft" (formula "13"))
                              (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_get_0,savedHeapBefore_get_0"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "ifUnfold" (formula "25") (term "1") (inst "#boolv=x_2"))
                              (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_19"))
                              (rule "less_than_comparison_simple" (formula "25") (term "1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,0,0,1,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,1,0"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "0,0,1,0") (ifseqformula "12"))
                              (rule "qeq_literals" (formula "25") (term "0,0,0,1,0"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "ifSplit" (formula "25"))
                              (branch "if x_19 true"
                                  (builtin "One Step Simplification" (formula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_19 false"
                                  (builtin "One Step Simplification" (formula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                  (builtin "Use Operation Contract" (formula "25") (newnames "heapBefore_checkInvariants_0,exc_1,heapAfter_checkInvariants,anon_heap_checkInvariants") (contract "BitSet[BitSet::checkInvariants()].JML exceptional_behavior operation contract.0#BitSet[BitSet::checkInvariants()].JML normal_behavior operation contract.0"))
                                 (branch "Post (checkInvariants)"
                                     (builtin "One Step Simplification" (formula "27"))
                                     (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "29")) (ifInst ""  (formula "4")) (ifInst ""  (formula "29")) (ifInst ""  (formula "4")))
                                    (rule "andLeft" (formula "26"))
                                    (rule "andLeft" (formula "27"))
                                    (rule "typeEqDerived" (formula "28") (term "0,0,0,1,1,0") (ifseqformula "27"))
                                    (rule "typeEqDerived" (formula "28") (term "0,1,1,1,1,0") (ifseqformula "27"))
                                    (rule "typeEqDerived" (formula "28") (term "0,0,1,1,1,0") (ifseqformula "27"))
                                     (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "27")) (ifInst ""  (formula "27")))
                                    (rule "notLeft" (formula "28"))
                                    (rule "orRight" (formula "28"))
                                    (rule "notRight" (formula "28"))
                                    (rule "notRight" (formula "29"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "variableDeclarationAssign" (formula "31") (term "1"))
                                    (rule "variableDeclaration" (formula "31") (term "1") (newnames "wordIndex_1"))
                                    (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "7"))
                                    (rule "eqSymm" (formula "1") (term "0"))
                                    (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "6"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "applyEq" (formula "2") (term "0") (ifseqformula "6"))
                                    (rule "inEqSimp_commuteLeq" (formula "2"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "6"))
                                    (rule "qeq_literals" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                     (builtin "Use Operation Contract" (formula "28") (newnames "heapBefore_wordIndex_0,result_wordIndex_0,exc_2") (contract "BitSet[BitSet::wordIndex(int)].JML normal_behavior operation contract.0"))
                                    (branch "Post (wordIndex)"
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "expand_inInt" (formula "28") (term "1,0"))
                                       (rule "replace_int_MAX" (formula "28") (term "1,0,1,0"))
                                       (rule "replace_int_MIN" (formula "28") (term "0,1,1,0"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "andLeft" (formula "29"))
                                       (rule "andLeft" (formula "31"))
                                       (rule "translateJavaDivInt" (formula "32") (term "1,1"))
                                       (rule "eqSymm" (formula "32") (term "1"))
                                       (rule "inEqSimp_commuteLeq" (formula "30"))
                                       (rule "assignment" (formula "33") (term "1"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "inEqSimp_contradEq7" (formula "31") (term "0") (ifseqformula "12"))
                                       (rule "add_zero_left" (formula "31") (term "0,0,0"))
                                       (rule "mul_literals" (formula "31") (term "0,0,0"))
                                       (rule "leq_literals" (formula "31") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "31"))
                                       (rule "true_left" (formula "31"))
                                       (rule "inEqSimp_contradEq7" (formula "31") (term "0,0") (ifseqformula "12"))
                                       (rule "add_zero_left" (formula "31") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "31") (term "0,0,0,0"))
                                       (rule "leq_literals" (formula "31") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "31"))
                                       (rule "expand_divJint" (formula "31") (term "0"))
                                       (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "22"))
                                       (rule "expand_moduloInteger" (formula "31") (term "0"))
                                       (rule "replace_int_MIN" (formula "31") (term "0,0"))
                                       (rule "replace_int_RANGE" (formula "31") (term "1,1,0"))
                                       (rule "replace_int_HALFRANGE" (formula "31") (term "0,0,1,0"))
                                       (rule "polySimp_homoEq" (formula "31"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                                       (rule "mul_literals" (formula "31") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "31") (term "0"))
                                       (rule "polySimp_addComm0" (formula "31") (term "0,0"))
                                       (rule "mod_axiom" (formula "31") (term "0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "31") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
                                       (rule "polySimp_rightDist" (formula "31") (term "0,1,0"))
                                       (rule "mul_literals" (formula "31") (term "0,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "31") (term "0"))
                                       (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                                       (rule "polySimp_addAssoc" (formula "31") (term "0,0,0"))
                                       (rule "add_literals" (formula "31") (term "0,0,0,0"))
                                       (rule "add_zero_left" (formula "31") (term "0,0,0"))
                                       (rule "applyEq" (formula "31") (term "0,1,0,0") (ifseqformula "23"))
                                       (rule "mul_literals" (formula "31") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "31") (term "0,0"))
                                       (rule "polySimp_sepPosMonomial" (formula "31"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "1"))
                                       (rule "polySimp_elimOne" (formula "31") (term "1"))
                                       (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                                       (rule "applyEq" (formula "29") (term "0") (ifseqformula "31"))
                                       (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "31"))
                                       (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "11"))
                                       (rule "leq_literals" (formula "30") (term "0"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "true_left" (formula "30"))
                                       (rule "inEqSimp_subsumption0" (formula "29") (ifseqformula "19"))
                                       (rule "leq_literals" (formula "29") (term "0"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "true_left" (formula "29"))
                                       (rule "returnUnfold" (formula "30") (term "1") (inst "#v0=x_2"))
                                       (rule "variableDeclarationAssign" (formula "30") (term "1"))
                                       (rule "variableDeclaration" (formula "30") (term "1") (newnames "x_20"))
                                       (rule "compound_assignment_3_nonsimple" (formula "30") (term "1"))
                                       (rule "ifElseUnfold" (formula "30") (term "1") (inst "#boolv=x_21"))
                                       (rule "variableDeclaration" (formula "30") (term "1") (newnames "x_21"))
                                       (rule "compound_assignment_2" (formula "30") (term "1") (inst "#v=x_22"))
                                       (rule "variableDeclarationAssign" (formula "30") (term "1"))
                                       (rule "variableDeclaration" (formula "30") (term "1") (newnames "x_22"))
                                       (rule "remove_parentheses_right" (formula "30") (term "1"))
                                       (rule "compound_less_than_comparison_2" (formula "30") (term "1") (inst "#v1=x_24") (inst "#v0=x_23"))
                                       (rule "variableDeclarationAssign" (formula "30") (term "1"))
                                       (rule "variableDeclaration" (formula "30") (term "1") (newnames "x_23"))
                                       (rule "assignment" (formula "30") (term "1"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "variableDeclarationAssign" (formula "30") (term "1"))
                                       (rule "variableDeclaration" (formula "30") (term "1") (newnames "x_24"))
                                       (rule "assignment_read_attribute_this" (formula "30") (term "1"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "pullOutSelect" (formula "30") (term "0,1,0") (inst "selectSK=BitSet_wordsInUse_0"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")) (ifInst ""  (formula "7")))
                                       (rule "applyEqReverse" (formula "31") (term "0,1,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "applyEq" (formula "30") (term "0,1,0") (ifseqformula "4"))
                                       (rule "less_than_comparison_simple" (formula "30") (term "1"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,1,0"))
                                       (rule "mul_literals" (formula "30") (term "1,0,0,0,0,1,0"))
                                       (rule "add_literals" (formula "30") (term "0,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,1,0"))
                                       (rule "mul_literals" (formula "30") (term "1,0,0,1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0,1,0") (ifseqformula "11"))
                                       (rule "qeq_literals" (formula "30") (term "0,0,0,1,0"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "compound_assignment_1_new" (formula "30") (term "1"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "ifElseSplit" (formula "30"))
                                       (branch "if x_21 true"
                                           (builtin "One Step Simplification" (formula "31"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "assignment" (formula "30") (term "1"))
                                           (builtin "One Step Simplification" (formula "30"))
                                          (rule "methodCallReturn" (formula "30") (term "1"))
                                          (rule "assignment" (formula "30") (term "1"))
                                           (builtin "One Step Simplification" (formula "30"))
                                          (rule "methodCallEmpty" (formula "30") (term "1"))
                                           (builtin "One Step Simplification" (formula "30"))
                                          (rule "emptyModality" (formula "30") (term "1"))
                                           (builtin "One Step Simplification" (formula "30"))
                                          (rule "closeTrue" (formula "30"))
                                       )
                                       (branch "if x_21 false"
                                           (builtin "One Step Simplification" (formula "31"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                    (branch "Exceptional Post (wordIndex)"
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "andLeft" (formula "29"))
                                       (rule "andLeft" (formula "28"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "notLeft" (formula "28"))
                                       (rule "close" (formula "32") (ifseqformula "31"))
                                    )
                                    (branch "Pre (wordIndex)"
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "wellFormedAnonEQ" (formula "28") (term "0,1") (ifseqformula "26"))
                                       (rule "expand_inInt" (formula "28") (term "1,1"))
                                       (rule "replace_int_MIN" (formula "28") (term "0,1,1,1"))
                                       (rule "replace_int_MAX" (formula "28") (term "1,0,1,1"))
                                       (rule "replace_known_left" (formula "28") (term "0,0,1") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "25")) (ifInst ""  (formula "8")))
                                       (rule "inEqSimp_commuteLeq" (formula "28") (term "1"))
                                       (rule "inEqSimp_commuteLeq" (formula "28") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "28") (term "1") (ifseqformula "12"))
                                       (rule "leq_literals" (formula "28") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "inEqSimp_geqRight" (formula "28"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "9") (term "0"))
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "true_left" (formula "9"))
                                       (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "12") (term "0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "closeFalse" (formula "12"))
                                    )
                                 )
                                 (branch "Exceptional Post (checkInvariants)"
                                     (builtin "One Step Simplification" (formula "27"))
                                     (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "29")) (ifInst ""  (formula "4")) (ifInst ""  (formula "29")) (ifInst ""  (formula "4")))
                                    (rule "andLeft" (formula "26"))
                                    (rule "andLeft" (formula "27"))
                                    (rule "andLeft" (formula "27"))
                                    (rule "andLeft" (formula "29"))
                                    (rule "notLeft" (formula "27"))
                                    (rule "replace_known_right" (formula "28") (term "0,0,1") (ifseqformula "30"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "30"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "notLeft" (formula "29"))
                                    (rule "inEqSimp_ltToLeq" (formula "28") (term "1,1,0,1"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,1,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "28") (term "0,1,0,1"))
                                    (rule "times_zero_1" (formula "28") (term "1,0,0,0,1,0,1"))
                                    (rule "add_literals" (formula "28") (term "0,0,0,1,0,1"))
                                    (rule "applyEq" (formula "29") (term "0,1,0") (ifseqformula "4"))
                                    (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0"))
                                    (rule "applyEq" (formula "28") (term "1,1,0,0,0") (ifseqformula "3"))
                                    (rule "applyEq" (formula "29") (term "0,2,0,1,1") (ifseqformula "4"))
                                    (rule "applyEq" (formula "28") (term "0,2,0,1,0,1,0") (ifseqformula "4"))
                                    (rule "applyEq" (formula "28") (term "0,0,0,1,0") (ifseqformula "4"))
                                    (rule "eqSymm" (formula "28") (term "0,0,1,0"))
                                    (rule "replace_known_left" (formula "28") (term "0,0,1,0") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "applyEq" (formula "29") (term "0,0,1") (ifseqformula "4"))
                                    (rule "eqSymm" (formula "29") (term "0,1"))
                                    (rule "replace_known_left" (formula "29") (term "0,1") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "applyEq" (formula "28") (term "0,0,0,0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "28") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "applyEq" (formula "29") (term "0,1") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "29") (term "1"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "inEqSimp_geqRight" (formula "29"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0"))
                                    (rule "applyEq" (formula "29") (term "0,0,0") (ifseqformula "5"))
                                    (rule "leq_literals" (formula "29") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "5"))
                                    (rule "add_literals" (formula "1") (term "0"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "Pre (checkInvariants)"
                                     (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "27")) (ifInst ""  (formula "4")) (ifInst ""  (formula "27")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")))
                                    (rule "orRight" (formula "25"))
                                    (rule "orRight" (formula "25"))
                                    (rule "notRight" (formula "25"))
                                    (rule "notRight" (formula "26"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "3")) (ifInst ""  (formula "1")))
                                    (rule "closeTrue" (formula "28"))
                                 )
                              )
                           )
                           (branch "if x_15 false"
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch "Exceptional Post (wordIndex)"
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "12"))
                           (rule "notLeft" (formula "10"))
                           (rule "close" (formula "13") (ifseqformula "12"))
                        )
                        (branch "Pre (wordIndex)"
                            (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "3")))
                           (rule "expand_inInt" (formula "12") (term "1"))
                           (rule "replace_int_MAX" (formula "12") (term "1,0,1"))
                           (rule "replace_int_MIN" (formula "12") (term "0,1,1"))
                           (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "1"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0"))
                           (rule "inEqSimp_subsumption1" (formula "12") (term "0") (ifseqformula "8"))
                           (rule "leq_literals" (formula "12") (term "0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "inEqSimp_geqRight" (formula "12"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "1"))
                           (rule "leq_literals" (formula "7") (term "0"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "true_left" (formula "7"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "8"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Assertion (x_10) Failure"
                         (builtin "One Step Simplification" (formula "13"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "if x_11 false"
                      (builtin "One Step Simplification" (formula "1"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "notLeft" (formula "1"))
                     (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "10"))
                     (rule "add_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_contradEq7" (formula "10") (ifseqformula "1"))
                     (rule "mul_literals" (formula "10") (term "1,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0"))
                     (rule "leq_literals" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "false_right" (formula "10"))
                     (rule "compound_equality_comparison_1" (formula "12") (term "1") (inst "#v0=x_11"))
                     (rule "variableDeclarationAssign" (formula "12") (term "1"))
                     (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_14"))
                     (rule "eval_order_array_access4" (formula "12") (term "1") (inst "#v0=x_arr"))
                     (rule "variableDeclarationAssign" (formula "12") (term "1"))
                     (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_arr_2"))
                     (rule "assignment_read_attribute_this" (formula "12") (term "1"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "eval_order_array_access5" (formula "12") (term "1") (inst "#v1=x_15") (inst "#ar1=x_arr_3"))
                     (rule "variableDeclarationAssign" (formula "12") (term "1"))
                     (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_arr_3"))
                     (rule "assignment" (formula "12") (term "1"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "variableDeclarationAssign" (formula "12") (term "1"))
                     (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_15"))
                     (rule "assignment_read_attribute_this" (formula "12") (term "1"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "assignment_array2" (formula "12") (term "1"))
                     (branch "Normal Execution (x_arr_3 != null)"
                         (builtin "One Step Simplification" (formula "13"))
                         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")))
                        (rule "orRight" (formula "12"))
                        (rule "inEqSimp_leqRight" (formula "12"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_ltRight" (formula "13"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "4"))
                        (rule "mul_literals" (formula "2") (term "1,0"))
                        (rule "add_zero_right" (formula "2") (term "0"))
                        (rule "applyEq" (formula "14") (term "0,2,0,1,0") (ifseqformula "4"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "equality_comparison_simple" (formula "12") (term "1"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "blockEmpty" (formula "12") (term "1"))
                        (rule "assert" (formula "12") (term "1"))
                        (branch "Assertion (x_10) OK"
                            (builtin "One Step Simplification" (formula "13"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "methodCallEmpty" (formula "13") (term "1"))
                           (rule "blockEmpty" (formula "13") (term "1"))
                           (rule "variableDeclarationAssign" (formula "13") (term "1"))
                           (rule "variableDeclaration" (formula "13") (term "1") (newnames "wordIndex"))
                            (builtin "Use Operation Contract" (formula "13") (newnames "heapBefore_wordIndex,result_wordIndex,exc_0") (contract "BitSet[BitSet::wordIndex(int)].JML normal_behavior operation contract.0"))
                           (branch "Post (wordIndex)"
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "expand_inInt" (formula "11") (term "1,0"))
                              (rule "replace_int_MAX" (formula "11") (term "1,0,1,0"))
                              (rule "replace_int_MIN" (formula "11") (term "0,1,1,0"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "14"))
                              (rule "translateJavaDivInt" (formula "15") (term "1,1"))
                              (rule "eqSymm" (formula "15") (term "1"))
                              (rule "inEqSimp_commuteLeq" (formula "13"))
                              (rule "assignment" (formula "18") (term "1"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "inEqSimp_contradEq7" (formula "15") (term "0,0") (ifseqformula "9"))
                              (rule "add_zero_left" (formula "15") (term "0,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,0,0,0"))
                              (rule "leq_literals" (formula "15") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "inEqSimp_contradEq7" (formula "14") (term "0") (ifseqformula "9"))
                              (rule "add_zero_left" (formula "14") (term "0,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,0,0"))
                              (rule "leq_literals" (formula "14") (term "0,0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "expand_divJint" (formula "14") (term "0"))
                              (rule "expand_moduloInteger" (formula "14") (term "0"))
                              (rule "replace_int_MIN" (formula "14") (term "0,0"))
                              (rule "replace_int_RANGE" (formula "14") (term "1,1,0"))
                              (rule "replace_int_HALFRANGE" (formula "14") (term "0,0,1,0"))
                              (rule "polySimp_homoEq" (formula "14"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0"))
                              (rule "polySimp_addComm0" (formula "14") (term "0,0"))
                              (rule "polySimp_sepNegMonomial" (formula "14"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                              (rule "polySimp_elimOne" (formula "14") (term "0"))
                              (rule "returnUnfold" (formula "17") (term "1") (inst "#v0=x"))
                              (rule "variableDeclarationAssign" (formula "17") (term "1"))
                              (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_16"))
                              (rule "compound_assignment_3_nonsimple" (formula "17") (term "1"))
                              (rule "jdiv_axiom" (formula "14") (term "1,0,0"))
                              (rule "eqSymm" (formula "14"))
                              (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "eqSymm" (formula "14"))
                              (rule "applyEq" (formula "15") (term "1,0,0") (ifseqformula "14"))
                              (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x_17"))
                              (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_17"))
                              (rule "compound_assignment_2" (formula "18") (term "1") (inst "#v=x_18"))
                              (rule "variableDeclarationAssign" (formula "18") (term "1"))
                              (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_18"))
                              (rule "remove_parentheses_right" (formula "18") (term "1"))
                              (rule "compound_less_than_comparison_2" (formula "18") (term "1") (inst "#v1=x_20") (inst "#v0=x_19"))
                              (rule "variableDeclarationAssign" (formula "18") (term "1"))
                              (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_19"))
                              (rule "assignment" (formula "18") (term "1"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "variableDeclarationAssign" (formula "18") (term "1"))
                              (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_20"))
                              (rule "assignment_read_attribute_this" (formula "18") (term "1"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "applyEq" (formula "18") (term "0,1,0") (ifseqformula "3"))
                              (rule "less_than_comparison_simple" (formula "18") (term "1"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1,0"))
                              (rule "mul_literals" (formula "18") (term "1,0,0,0,0,1,0"))
                              (rule "add_literals" (formula "18") (term "0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1,0"))
                              (rule "mul_literals" (formula "18") (term "1,0,0,1,0"))
                              (rule "compound_assignment_1_new" (formula "18") (term "1"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                              (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                              (rule "leq_literals" (formula "2") (term "0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "arrayLengthIsAnInt" (formula "2") (term "0"))
                              (rule "expand_inInt" (formula "2"))
                              (rule "replace_int_MAX" (formula "2") (term "1,0"))
                              (rule "replace_int_MIN" (formula "2") (term "0,1"))
                              (rule "andLeft" (formula "2"))
                              (rule "inEqSimp_commuteLeq" (formula "3"))
                              (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
                              (rule "leq_literals" (formula "3") (term "0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "true_left" (formula "3"))
                              (rule "div_axiom" (formula "15") (term "1") (inst "quotient=quotient_0"))
                              (rule "mul_literals" (formula "15") (term "1,1,1,1,1"))
                              (rule "qeq_literals" (formula "15") (term "0,1,1"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "equal_literals" (formula "15") (term "0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "andLeft" (formula "15"))
                              (rule "andLeft" (formula "15"))
                              (rule "polySimp_addComm1" (formula "17") (term "1"))
                              (rule "add_literals" (formula "17") (term "0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "16"))
                              (rule "inEqSimp_homoInEq1" (formula "17"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "17") (term "0"))
                              (rule "applyEq" (formula "19") (term "1,0,0") (ifseqformula "15"))
                              (rule "applyEq" (formula "18") (term "1") (ifseqformula "15"))
                              (rule "mod_axiom" (formula "19") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,0"))
                              (rule "polySimp_homoEq" (formula "19"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "19") (term "0,1,0"))
                              (rule "mul_literals" (formula "19") (term "0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "19") (term "0"))
                              (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "19") (term "0,0,0"))
                              (rule "add_literals" (formula "19") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "19") (term "0,0,0"))
                              (rule "polySimp_sepPosMonomial" (formula "19"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1"))
                              (rule "polySimp_rightDist" (formula "19") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                              (rule "polySimp_mulAssoc" (formula "19") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "19") (term "0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "19") (term "0,1"))
                              (rule "applyEq" (formula "22") (term "0,1,0,0") (ifseqformula "19"))
                              (rule "applyEq" (formula "22") (term "0,0,0,1,0") (ifseqformula "19"))
                              (rule "inEqSimp_homoInEq0" (formula "22") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,1,0"))
                              (rule "applyEq" (formula "13") (term "0") (ifseqformula "19"))
                              (rule "inEqSimp_homoInEq0" (formula "13"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0"))
                              (rule "applyEq" (formula "14") (term "0") (ifseqformula "19"))
                              (rule "inEqSimp_homoInEq1" (formula "14"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "17"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1"))
                              (rule "polySimp_rightDist" (formula "17") (term "1"))
                              (rule "mul_literals" (formula "17") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1"))
                              (rule "polySimp_rightDist" (formula "13") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                              (rule "mul_literals" (formula "13") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1"))
                              (rule "polySimp_rightDist" (formula "14") (term "1"))
                              (rule "mul_literals" (formula "14") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "8"))
                              (rule "polySimp_mulAssoc" (formula "16") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "16") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                              (rule "elimGcdLeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(1(3(4(4(5(5(3(3(#)))))))))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(4(6(#)))"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0,1,0"))
                              (rule "neg_literal" (formula "16") (term "0,0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "16") (term "0,0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                              (rule "add_literals" (formula "16") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "16") (term "1,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0"))
                              (rule "qeq_literals" (formula "16") (term "0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "18"))
                              (rule "mul_literals" (formula "10") (term "0,0"))
                              (rule "add_zero_left" (formula "10") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                              (rule "mul_literals" (formula "10") (term "1"))
                              (rule "elimGcdGeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(4(6(#)))"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
                              (rule "add_literals" (formula "10") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0"))
                              (rule "add_literals" (formula "10") (term "0,0"))
                              (rule "leq_literals" (formula "10") (term "0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "div_axiom" (formula "21") (term "0,1,1") (inst "quotient=quotient_1"))
                              (rule "equal_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "qeq_literals" (formula "21") (term "0,1"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "mul_literals" (formula "21") (term "1,1,1"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "polySimp_addAssoc" (formula "23") (term "0,1"))
                              (rule "add_literals" (formula "23") (term "0,0,1"))
                              (rule "polySimp_addComm1" (formula "23") (term "1"))
                              (rule "add_literals" (formula "23") (term "0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "22"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "22") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "23"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "23") (term "0"))
                              (rule "applyEqRigid" (formula "15") (term "0,0") (ifseqformula "21"))
                              (rule "inEqSimp_homoInEq0" (formula "15"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "15") (term "0"))
                              (rule "applyEq" (formula "26") (term "0,1,0,1,0,0") (ifseqformula "20"))
                              (rule "polySimp_addComm0" (formula "26") (term "0,1,0,0"))
                              (rule "applyEqRigid" (formula "14") (term "0,0") (ifseqformula "20"))
                              (rule "inEqSimp_homoInEq1" (formula "14"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "14") (term "0"))
                              (rule "applyEqRigid" (formula "25") (term "0,0,0,0,1,0") (ifseqformula "19"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "25") (term "0,0,0,1,0"))
                              (rule "applyEq" (formula "22") (term "0,1,1") (ifseqformula "19"))
                              (rule "polySimp_addComm0" (formula "22") (term "1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1"))
                              (rule "polySimp_rightDist" (formula "20") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                              (rule "mul_literals" (formula "20") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1"))
                              (rule "polySimp_rightDist" (formula "21") (term "1"))
                              (rule "mul_literals" (formula "21") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "15"))
                              (rule "polySimp_rightDist" (formula "20") (term "0,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0"))
                              (rule "mul_literals" (formula "20") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "20") (term "0"))
                              (rule "add_literals" (formula "20") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "20"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                              (rule "elimGcdLeq_antec" (formula "20") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,0,0,1,0"))
                              (rule "neg_literal" (formula "20") (term "0,0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "20") (term "0,0"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addLiterals" (formula "20") (term "0,0,0,0"))
                              (rule "add_literals" (formula "20") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,0"))
                              (rule "add_literals" (formula "20") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "20") (term "1,0,0"))
                              (rule "add_literals" (formula "20") (term "0,0"))
                              (rule "qeq_literals" (formula "20") (term "0"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "22"))
                              (rule "mul_literals" (formula "10") (term "0,0"))
                              (rule "add_zero_left" (formula "10") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                              (rule "mul_literals" (formula "10") (term "1"))
                              (rule "elimGcdGeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
                              (rule "add_literals" (formula "10") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0"))
                              (rule "add_literals" (formula "10") (term "0,0"))
                              (rule "leq_literals" (formula "10") (term "0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "21"))
                              (rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "applyEqRigid" (formula "22") (term "0,1,1") (ifseqformula "10"))
                              (rule "mul_literals" (formula "22") (term "1,1"))
                              (rule "add_literals" (formula "22") (term "1"))
                              (rule "applyEqRigid" (formula "27") (term "0,1,1,0,0,1,0") (ifseqformula "10"))
                              (rule "mul_literals" (formula "27") (term "1,1,0,0,1,0"))
                              (rule "add_literals" (formula "27") (term "1,0,0,1,0"))
                              (rule "applyEqRigid" (formula "21") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "applyEq" (formula "22") (term "0,1,1") (ifseqformula "10"))
                              (rule "times_zero_2" (formula "22") (term "1,1"))
                              (rule "add_literals" (formula "22") (term "1"))
                              (rule "applyEq" (formula "20") (term "1") (ifseqformula "10"))
                              (rule "applyEq" (formula "26") (term "0,0,0,1,0,0") (ifseqformula "10"))
                              (rule "mul_literals" (formula "26") (term "0,0,1,0,0"))
                              (rule "add_zero_left" (formula "26") (term "0,1,0,0"))
                              (rule "applyEqRigid" (formula "23") (term "0,0,1") (ifseqformula "10"))
                              (rule "mul_literals" (formula "23") (term "0,1"))
                              (rule "add_zero_left" (formula "23") (term "1"))
                              (rule "inEqSimp_subsumption0" (formula "22") (ifseqformula "16"))
                              (rule "leq_literals" (formula "22") (term "0"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "11"))
                              (rule "leq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0,1,0") (ifseqformula "11"))
                              (rule "qeq_literals" (formula "24") (term "0,0,0,1,0"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "ifElseSplit" (formula "25"))
                              (branch "if x_17 true"
                                  (builtin "One Step Simplification" (formula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "assignment" (formula "25") (term "1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "methodCallReturn" (formula "25") (term "1"))
                                 (rule "assignment" (formula "25") (term "1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "methodCallEmpty" (formula "25") (term "1"))
                                 (rule "tryEmpty" (formula "25") (term "1"))
                                 (rule "emptyModality" (formula "25") (term "1"))
                                  (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "14")))
                                 (rule "notRight" (formula "25"))
                                 (rule "Class_invariant_axiom_for_BitSet" (formula "15") (inst "x=x_21") (inst "x_0=x_0") (inst "i=i") (ifseqformula "9"))
                                 (rule "expand_inInt" (formula "15") (term "1,0,0,1"))
                                 (rule "expand_inInt" (formula "15") (term "1,0,0,1,0"))
                                 (rule "expand_inInt" (formula "15") (term "1,0,0,1,0,0"))
                                 (rule "replace_int_MIN" (formula "15") (term "0,1,1,0,0,1"))
                                 (rule "replace_int_MAX" (formula "15") (term "1,0,1,0,0,1"))
                                 (rule "replace_int_MIN" (formula "15") (term "0,1,1,0,0,1,0"))
                                 (rule "replace_int_MAX" (formula "15") (term "1,0,1,0,0,1,0"))
                                 (rule "replace_int_MIN" (formula "15") (term "0,1,1,0,0,1,0,0"))
                                 (rule "replace_int_MAX" (formula "15") (term "1,0,1,0,0,1,0,0"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "notLeft" (formula "15"))
                                 (rule "andLeft" (formula "15"))
                                 (rule "eqSymm" (formula "19") (term "1,0"))
                                 (rule "translateJavaSubInt" (formula "17") (term "0,2,0,0,1"))
                                 (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "6"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "true_left" (formula "17"))
                                 (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "19") (term "1,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "18") (term "1,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "17") (term "1,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "15"))
                                 (rule "applyEq" (formula "17") (term "1,0,0,0,0") (ifseqformula "6"))
                                 (rule "applyEq" (formula "16") (term "0") (ifseqformula "6"))
                                 (rule "inEqSimp_commuteLeq" (formula "16"))
                                 (rule "applyEq" (formula "15") (term "0") (ifseqformula "6"))
                                 (rule "qeq_literals" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "16") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "5"))
                                 (rule "leq_literals" (formula "15") (term "0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "nnf_imp2or" (formula "17") (term "0"))
                                 (rule "nnf_imp2or" (formula "16") (term "0"))
                                 (rule "nnf_imp2or" (formula "15") (term "0"))
                                 (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "16") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "17") (term "1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "17") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "17") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "17") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "17") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "17") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "17") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "17") (term "1,0,1,0,0"))
                                 (rule "nnf_notAnd" (formula "16") (term "1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "16") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "16") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "16") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "16") (term "1,0,1,0,0"))
                                 (rule "nnf_notAnd" (formula "15") (term "1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "15") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,0,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "15") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,0,0,0,0"))
                                 (rule "shift_paren_or" (formula "17") (term "0,0"))
                                 (rule "commute_or" (formula "16") (term "1,0,0"))
                                 (rule "commute_or_2" (formula "15") (term "0,0"))
                                 (rule "commute_or_2" (formula "17") (term "0,0"))
                                 (rule "commute_or_2" (formula "17") (term "0"))
                                 (rule "inEqSimp_or_subsumption3" (formula "17") (term "0"))
                                 (rule "qeq_literals" (formula "17") (term "0,1,0"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "shift_paren_or" (formula "16") (term "0,0"))
                                 (rule "commute_or_2" (formula "16") (term "0"))
                                 (rule "commute_or_2" (formula "16") (term "0,0"))
                                 (rule "commute_or" (formula "16") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "16") (term "0,0"))
                                 (rule "inEqSimp_or_subsumption1" (formula "16") (term "0,0"))
                                 (rule "qeq_literals" (formula "16") (term "0,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "shift_paren_or" (formula "15") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "15") (term "0,0,0"))
                                 (rule "commute_or" (formula "15") (term "0,0,0,0"))
                                 (rule "inEqSimp_or_subsumption0" (formula "15") (term "0,0,0,0"))
                                 (rule "qeq_literals" (formula "15") (term "0,0,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "ifthenelse_to_or_left" (formula "16") (term "0,0,0"))
                                 (rule "eqSymm" (formula "16") (term "1,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "eqSymm" (formula "16") (term "1,0,0,0,0"))
                                 (rule "commute_or" (formula "16") (term "0,0"))
                                 (rule "commute_or_2" (formula "16") (term "0"))
                                 (rule "commute_or" (formula "16") (term "0,1,0"))
                                 (rule "commute_or" (formula "16") (term "1,1,0"))
                                 (rule "cnf_rightDist" (formula "16") (term "0"))
                                 (rule "distr_forallAnd" (formula "16"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "commute_or_2" (formula "16") (term "0"))
                                 (rule "shift_paren_or" (formula "17") (term "0"))
                                 (rule "commute_or" (formula "16") (term "0,0"))
                                 (rule "allLeft" (formula "16") (inst "t=bitIndex"))
                                 (rule "replace_known_left" (formula "16") (term "0,1,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "Query_axiom_for_get_int__in_BitSet" (formula "16") (term "0,0,0") (inst "get_sk=get_sk_0") (inst "#p0=x_1") (inst "#self=b") (inst "#res=x") (ifseqformula "9"))
                                 (rule "eqSymm" (formula "16") (term "0,1"))
                                 (rule "inEqSimp_contradInEq0" (formula "17") (term "1") (ifseqformula "10"))
                                 (rule "qeq_literals" (formula "17") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "14"))
                                 (rule "qeq_literals" (formula "17") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "applyEqRigid" (formula "16") (term "1,0,1") (ifseqformula "17"))
                                 (rule "boxToDiamond" (formula "16") (term "1"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "notLeft" (formula "16"))
                                 (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_get_0,savedHeapBefore_get_0"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "ifUnfold" (formula "28") (term "1") (inst "#boolv=x_2"))
                                 (rule "variableDeclaration" (formula "28") (term "1") (newnames "x_21"))
                                 (rule "less_than_comparison_simple" (formula "28") (term "1"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,1,0"))
                                 (rule "mul_literals" (formula "28") (term "1,0,0,0,0,1,0"))
                                 (rule "add_literals" (formula "28") (term "0,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,1,0"))
                                 (rule "mul_literals" (formula "28") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0,1,0") (ifseqformula "14"))
                                 (rule "qeq_literals" (formula "28") (term "0,0,0,1,0"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "ifSplit" (formula "28"))
                                 (branch "if x_21 true"
                                     (builtin "One Step Simplification" (formula "29"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if x_21 false"
                                     (builtin "One Step Simplification" (formula "29"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                     (builtin "Use Operation Contract" (formula "28") (newnames "heapBefore_checkInvariants_0,exc_1,heapAfter_checkInvariants,anon_heap_checkInvariants") (contract "BitSet[BitSet::checkInvariants()].JML exceptional_behavior operation contract.0#BitSet[BitSet::checkInvariants()].JML normal_behavior operation contract.0"))
                                    (branch "Post (checkInvariants)"
                                        (builtin "One Step Simplification" (formula "30"))
                                        (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "32")) (ifInst ""  (formula "6")) (ifInst ""  (formula "32")) (ifInst ""  (formula "6")))
                                       (rule "andLeft" (formula "29"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "typeEqDerived" (formula "31") (term "0,0,0,1,1,0") (ifseqformula "30"))
                                       (rule "typeEqDerived" (formula "31") (term "0,1,1,1,1,0") (ifseqformula "30"))
                                       (rule "typeEqDerived" (formula "31") (term "0,0,1,1,1,0") (ifseqformula "30"))
                                        (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "30")) (ifInst ""  (formula "30")))
                                       (rule "notLeft" (formula "31"))
                                       (rule "orRight" (formula "31"))
                                       (rule "notRight" (formula "32"))
                                       (rule "notRight" (formula "32"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "variableDeclarationAssign" (formula "34") (term "1"))
                                       (rule "variableDeclaration" (formula "34") (term "1") (newnames "wordIndex_1"))
                                       (rule "applyEq" (formula "3") (term "0,2,0,1") (ifseqformula "9"))
                                       (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "8"))
                                       (rule "inEqSimp_commuteLeq" (formula "2"))
                                       (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
                                       (rule "qeq_literals" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "6"))
                                       (rule "leq_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                        (builtin "Use Operation Contract" (formula "31") (newnames "heapBefore_wordIndex_0,result_wordIndex_0,exc_2") (contract "BitSet[BitSet::wordIndex(int)].JML normal_behavior operation contract.0"))
                                       (branch "Post (wordIndex)"
                                           (builtin "One Step Simplification" (formula "31"))
                                          (rule "expand_inInt" (formula "31") (term "1,0"))
                                          (rule "replace_int_MAX" (formula "31") (term "1,0,1,0"))
                                          (rule "replace_int_MIN" (formula "31") (term "0,1,1,0"))
                                          (rule "andLeft" (formula "31"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "andLeft" (formula "31"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "andLeft" (formula "31"))
                                          (rule "eqSymm" (formula "34") (term "1"))
                                          (rule "translateJavaDivInt" (formula "34") (term "0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "32"))
                                          (rule "assignment" (formula "36") (term "1"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "inEqSimp_contradEq7" (formula "34") (term "0,0") (ifseqformula "14"))
                                          (rule "add_zero_left" (formula "34") (term "0,0,0,0"))
                                          (rule "mul_literals" (formula "34") (term "0,0,0,0"))
                                          (rule "leq_literals" (formula "34") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_contradEq7" (formula "33") (term "0") (ifseqformula "14"))
                                          (rule "mul_literals" (formula "33") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "33") (term "0,0,0"))
                                          (rule "leq_literals" (formula "33") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "33"))
                                          (rule "true_left" (formula "33"))
                                          (rule "expand_divJint" (formula "33") (term "0"))
                                          (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "25"))
                                          (rule "expand_moduloInteger" (formula "33") (term "0"))
                                          (rule "replace_int_RANGE" (formula "33") (term "1,1,0"))
                                          (rule "replace_int_MIN" (formula "33") (term "0,0"))
                                          (rule "replace_int_HALFRANGE" (formula "33") (term "0,0,1,0"))
                                          (rule "polySimp_homoEq" (formula "33"))
                                          (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                                          (rule "mul_literals" (formula "33") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "33") (term "0"))
                                          (rule "polySimp_addComm0" (formula "33") (term "0,0"))
                                          (rule "mod_axiom" (formula "33") (term "0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                                          (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0"))
                                          (rule "polySimp_rightDist" (formula "33") (term "0,1,0"))
                                          (rule "mul_literals" (formula "33") (term "0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "33") (term "0"))
                                          (rule "polySimp_addAssoc" (formula "33") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "33") (term "0,0,0"))
                                          (rule "add_literals" (formula "33") (term "0,0,0,0"))
                                          (rule "add_zero_left" (formula "33") (term "0,0,0"))
                                          (rule "applyEqRigid" (formula "33") (term "0,1,0,0") (ifseqformula "26"))
                                          (rule "mul_literals" (formula "33") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "33") (term "0,0"))
                                          (rule "polySimp_sepPosMonomial" (formula "33"))
                                          (rule "polySimp_mulLiterals" (formula "33") (term "1"))
                                          (rule "polySimp_elimOne" (formula "33") (term "1"))
                                          (rule "applyEq" (formula "31") (term "0") (ifseqformula "33"))
                                          (rule "applyEq" (formula "35") (term "0,1,0") (ifseqformula "33"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "33"))
                                          (rule "inEqSimp_subsumption0" (formula "31") (ifseqformula "22"))
                                          (rule "leq_literals" (formula "31") (term "0"))
                                           (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "13"))
                                          (rule "leq_literals" (formula "31") (term "0"))
                                           (builtin "One Step Simplification" (formula "31"))
                                          (rule "true_left" (formula "31"))
                                          (rule "returnUnfold" (formula "33") (term "1") (inst "#v0=x_2"))
                                          (rule "variableDeclarationAssign" (formula "33") (term "1"))
                                          (rule "variableDeclaration" (formula "33") (term "1") (newnames "x_22"))
                                          (rule "compound_assignment_3_nonsimple" (formula "33") (term "1"))
                                          (rule "ifElseUnfold" (formula "33") (term "1") (inst "#boolv=x_23"))
                                          (rule "variableDeclaration" (formula "33") (term "1") (newnames "x_23"))
                                          (rule "compound_assignment_2" (formula "33") (term "1") (inst "#v=x_24"))
                                          (rule "variableDeclarationAssign" (formula "33") (term "1"))
                                          (rule "variableDeclaration" (formula "33") (term "1") (newnames "x_24"))
                                          (rule "remove_parentheses_right" (formula "33") (term "1"))
                                          (rule "compound_less_than_comparison_2" (formula "33") (term "1") (inst "#v1=x_26") (inst "#v0=x_25"))
                                          (rule "variableDeclarationAssign" (formula "33") (term "1"))
                                          (rule "variableDeclaration" (formula "33") (term "1") (newnames "x_25"))
                                          (rule "assignment" (formula "33") (term "1"))
                                           (builtin "One Step Simplification" (formula "33"))
                                          (rule "variableDeclarationAssign" (formula "33") (term "1"))
                                          (rule "variableDeclaration" (formula "33") (term "1") (newnames "x_26"))
                                          (rule "assignment_read_attribute_this" (formula "33") (term "1"))
                                           (builtin "One Step Simplification" (formula "33"))
                                          (rule "pullOutSelect" (formula "33") (term "0,1,0") (inst "selectSK=BitSet_wordsInUse_0"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")) (ifInst ""  (formula "9")))
                                          (rule "applyEqReverse" (formula "34") (term "0,1,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "applyEq" (formula "33") (term "0,1,0") (ifseqformula "6"))
                                          (rule "less_than_comparison_simple" (formula "33") (term "1"))
                                           (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0,1,0"))
                                          (rule "mul_literals" (formula "33") (term "1,0,0,0,0,1,0"))
                                          (rule "add_literals" (formula "33") (term "0,0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,1,0"))
                                          (rule "mul_literals" (formula "33") (term "1,0,0,1,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (term "0,0,1,0") (ifseqformula "13"))
                                          (rule "qeq_literals" (formula "33") (term "0,0,0,1,0"))
                                           (builtin "One Step Simplification" (formula "33"))
                                          (rule "compound_assignment_1_new" (formula "33") (term "1"))
                                           (builtin "One Step Simplification" (formula "33"))
                                          (rule "ifElseSplit" (formula "33"))
                                          (branch "if x_23 true"
                                              (builtin "One Step Simplification" (formula "34"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "assignment" (formula "33") (term "1"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "methodCallReturn" (formula "33") (term "1"))
                                             (rule "assignment" (formula "33") (term "1"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "methodCallEmpty" (formula "33") (term "1"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "emptyModality" (formula "33") (term "1"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "closeTrue" (formula "33"))
                                          )
                                          (branch "if x_23 false"
                                              (builtin "One Step Simplification" (formula "34"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "Exceptional Post (wordIndex)"
                                           (builtin "One Step Simplification" (formula "31"))
                                          (rule "andLeft" (formula "31"))
                                          (rule "andLeft" (formula "32"))
                                          (rule "andLeft" (formula "31"))
                                          (rule "andLeft" (formula "33"))
                                          (rule "notLeft" (formula "31"))
                                          (rule "close" (formula "35") (ifseqformula "34"))
                                       )
                                       (branch "Pre (wordIndex)"
                                           (builtin "One Step Simplification" (formula "31"))
                                          (rule "wellFormedAnonEQ" (formula "31") (term "0,1") (ifseqformula "29"))
                                          (rule "expand_inInt" (formula "31") (term "1,1"))
                                          (rule "replace_int_MAX" (formula "31") (term "1,0,1,1"))
                                          (rule "replace_int_MIN" (formula "31") (term "0,1,1,1"))
                                          (rule "replace_known_left" (formula "31") (term "0,0,1") (ifseqformula "7"))
                                           (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "28")) (ifInst ""  (formula "10")))
                                          (rule "inEqSimp_commuteLeq" (formula "31") (term "1"))
                                          (rule "inEqSimp_commuteLeq" (formula "31") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "31") (term "1") (ifseqformula "14"))
                                          (rule "leq_literals" (formula "31") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "31"))
                                          (rule "inEqSimp_geqRight" (formula "31"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "1"))
                                          (rule "leq_literals" (formula "11") (term "0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "14") (term "0"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "closeFalse" (formula "14"))
                                       )
                                    )
                                    (branch "Exceptional Post (checkInvariants)"
                                        (builtin "One Step Simplification" (formula "30"))
                                        (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "32")) (ifInst ""  (formula "6")) (ifInst ""  (formula "32")) (ifInst ""  (formula "6")))
                                       (rule "andLeft" (formula "29"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "andLeft" (formula "31"))
                                       (rule "andLeft" (formula "30"))
                                       (rule "notLeft" (formula "30"))
                                       (rule "replace_known_right" (formula "31") (term "0,0,1") (ifseqformula "33"))
                                        (builtin "One Step Simplification" (formula "31"))
                                       (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "33"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "notLeft" (formula "32"))
                                       (rule "inEqSimp_ltToLeq" (formula "31") (term "0,1,0,1"))
                                       (rule "times_zero_1" (formula "31") (term "1,0,0,0,1,0,1"))
                                       (rule "add_literals" (formula "31") (term "0,0,0,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "31") (term "1,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,1,0,1"))
                                       (rule "applyEq" (formula "32") (term "0,0,0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "32") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "applyEq" (formula "31") (term "0,0,0,0,0") (ifseqformula "6"))
                                       (rule "qeq_literals" (formula "31") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "31"))
                                       (rule "applyEq" (formula "31") (term "0,0,0,1,0") (ifseqformula "6"))
                                       (rule "eqSymm" (formula "31") (term "0,0,1,0"))
                                       (rule "applyEq" (formula "32") (term "0,0,1") (ifseqformula "6"))
                                       (rule "eqSymm" (formula "32") (term "0,1"))
                                       (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "6"))
                                       (rule "inEqSimp_commuteLeq" (formula "32") (term "0"))
                                       (rule "applyEq" (formula "31") (term "0,2,0,1,0,1,0") (ifseqformula "6"))
                                       (rule "replace_known_left" (formula "31") (term "1,0,1,0") (ifseqformula "3"))
                                        (builtin "One Step Simplification" (formula "31"))
                                       (rule "applyEq" (formula "32") (term "0,2,0,1,1") (ifseqformula "6"))
                                       (rule "replace_known_left" (formula "32") (term "1,1") (ifseqformula "3"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "inEqSimp_geqRight" (formula "32"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "applyEq" (formula "32") (term "0,0,0") (ifseqformula "7"))
                                       (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "1,1,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "32") (term "1,1,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,1,0,1"))
                                       (rule "mul_literals" (formula "32") (term "0,1,1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "32") (term "1,1,1,1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,1,0,1"))
                                       (rule "mul_literals" (formula "32") (term "1,0,1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "mul_literals" (formula "1") (term "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "32") (term "0,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "32") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "6") (term "0"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "closeFalse" (formula "6"))
                                    )
                                    (branch "Pre (checkInvariants)"
                                        (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "30")) (ifInst ""  (formula "6")) (ifInst ""  (formula "30")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")))
                                       (rule "orRight" (formula "28"))
                                       (rule "orRight" (formula "28"))
                                       (rule "notRight" (formula "28"))
                                       (rule "notRight" (formula "29"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "replace_known_left" (formula "31") (term "0,0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "3")) (ifInst ""  (formula "1")))
                                       (rule "closeTrue" (formula "31"))
                                    )
                                 )
                              )
                              (branch "if x_17 false"
                                  (builtin "One Step Simplification" (formula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "Exceptional Post (wordIndex)"
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "13"))
                              (rule "notLeft" (formula "11"))
                              (rule "close" (formula "15") (ifseqformula "14"))
                           )
                           (branch "Pre (wordIndex)"
                               (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "4")))
                              (rule "expand_inInt" (formula "13") (term "1"))
                              (rule "replace_int_MAX" (formula "13") (term "1,0,1"))
                              (rule "replace_int_MIN" (formula "13") (term "0,1,1"))
                              (rule "replace_known_left" (formula "13") (term "0,1") (ifseqformula "7"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "13") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "13") (term "1") (ifseqformula "9"))
                              (rule "leq_literals" (formula "13") (term "0,1"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "inEqSimp_geqRight" (formula "13"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "1"))
                              (rule "leq_literals" (formula "8") (term "0"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "true_left" (formula "8"))
                              (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "9") (term "0"))
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "closeFalse" (formula "9"))
                           )
                        )
                        (branch "Assertion (x_10) Failure"
                            (builtin "One Step Simplification" (formula "13"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "throwUnfold" (formula "13") (term "1") (inst "#v0=a"))
                           (rule "variableDeclarationAssign" (formula "13") (term "1"))
                           (rule "variableDeclaration" (formula "13") (term "1") (newnames "a"))
                           (rule "arrayLengthIsAnInt" (formula "1") (term "0"))
                           (rule "expand_inInt" (formula "1"))
                           (rule "replace_int_MIN" (formula "1") (term "0,1"))
                           (rule "replace_int_MAX" (formula "1") (term "1,0"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_commuteLeq" (formula "2"))
                           (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                           (rule "leq_literals" (formula "2") (term "0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "arrayLengthNotNegative" (formula "2") (term "0"))
                           (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                           (rule "leq_literals" (formula "2") (term "0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "2") (term "0,0") (ifseqformula "4"))
                           (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "14"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "instanceCreationAssignment" (formula "15") (term "1") (inst "#v0=a_1"))
                           (rule "variableDeclarationAssign" (formula "15") (term "1"))
                           (rule "variableDeclaration" (formula "15") (term "1") (newnames "a_1"))
                           (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "15") (term "1") (inst "#v0=a_2"))
                           (rule "variableDeclaration" (formula "15") (term "1") (newnames "a_2"))
                           (rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "variableDeclaration" (formula "15") (term "1") (newnames "__NEW__"))
                           (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "15") (term "1") (inst "#v0=a_3"))
                           (rule "variableDeclaration" (formula "15") (term "1") (newnames "a_3"))
                           (rule "allocateInstance" (formula "15"))
                            (builtin "One Step Simplification" (formula "16"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "blockEmpty" (formula "18") (term "1"))
                           (rule "assignment" (formula "18") (term "1"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "assignment_write_attribute_this" (formula "18") (term "1"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "methodCallWithinClass" (formula "18") (term "1"))
                           (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "methodCallSuper" (formula "18") (term "1"))
                           (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "methodCallSuper" (formula "18") (term "1"))
                           (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "methodCallSuper" (formula "18") (term "1"))
                           (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "methodCallEmpty" (formula "18") (term "1"))
                           (rule "blockEmpty" (formula "18") (term "1"))
                           (rule "assignment_write_attribute_this" (formula "18") (term "1"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "assignment_write_attribute_this" (formula "18") (term "1"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "methodCallEmpty" (formula "18") (term "1"))
                           (rule "methodCallEmpty" (formula "18") (term "1"))
                           (rule "methodCallEmpty" (formula "18") (term "1"))
                           (rule "blockEmpty" (formula "18") (term "1"))
                           (rule "methodCallReturnIgnoreResult" (formula "18") (term "1"))
                           (rule "methodCallReturn" (formula "18") (term "1"))
                           (rule "assignment" (formula "18") (term "1"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "methodCallEmpty" (formula "18") (term "1"))
                           (rule "blockEmpty" (formula "18") (term "1"))
                           (rule "assignment" (formula "18") (term "1"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "methodCallSuper" (formula "18") (term "1"))
                           (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "methodCallSuper" (formula "18") (term "1"))
                           (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "methodCallSuper" (formula "18") (term "1"))
                           (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "methodCallEmpty" (formula "18") (term "1"))
                           (rule "blockEmpty" (formula "18") (term "1"))
                           (rule "assignment_write_attribute_this" (formula "18") (term "1"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "assignment_write_attribute_this" (formula "18") (term "1"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "methodCallEmpty" (formula "18") (term "1"))
                           (rule "methodCallEmpty" (formula "18") (term "1"))
                           (rule "methodCallEmpty" (formula "18") (term "1"))
                           (rule "blockEmpty" (formula "18") (term "1"))
                           (rule "assignment_write_attribute" (formula "18") (term "1"))
                           (branch "Normal Execution (a_1 != null)"
                               (builtin "One Step Simplification" (formula "19"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "14")))
                              (rule "false_right" (formula "18"))
                              (rule "assignment" (formula "18") (term "1"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "methodCallThrow" (formula "18") (term "1"))
                              (rule "blockThrow" (formula "18") (term "1"))
                              (rule "methodCallParamThrow" (formula "18") (term "1"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "tryCatchThrow" (formula "18") (term "1"))
                              (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x"))
                              (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_16"))
                              (rule "equality_comparison_simple" (formula "18") (term "1"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "replace_known_right" (formula "18") (term "0,0,1,0") (ifseqformula "14"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "ifElseSplit" (formula "18"))
                              (branch "if x_16 true"
                                  (builtin "One Step Simplification" (formula "19"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_16 false"
                                  (builtin "One Step Simplification" (formula "19"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "elim_double_block" (formula "18") (term "1"))
                                 (rule "ifElseSplit" (formula "18"))
                                 (branch "if a instanceof java.lang.Throwable true"
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                                    (rule "true_left" (formula "1"))
                                    (rule "variableDeclaration" (formula "18") (term "1") (newnames "e"))
                                    (rule "delete_unnecessary_cast" (formula "18") (term "1"))
                                     (builtin "One Step Simplification" (formula "19"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "assignment" (formula "18") (term "1"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "emptyModality" (formula "18") (term "1"))
                                     (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "14")))
                                    (rule "false_right" (formula "18"))
                                    (rule "Class_invariant_axiom_for_BitSet" (formula "12") (inst "x=x_17") (inst "x_0=x_0") (inst "i=i") (ifseqformula "8"))
                                    (rule "expand_inInt" (formula "12") (term "1,0,0,1,0,0"))
                                    (rule "expand_inInt" (formula "12") (term "1,0,0,1"))
                                    (rule "expand_inInt" (formula "12") (term "1,0,0,1,0"))
                                    (rule "replace_int_MIN" (formula "12") (term "0,1,1,0,0,1,0,0"))
                                    (rule "replace_int_MAX" (formula "12") (term "1,0,1,0,0,1,0,0"))
                                    (rule "replace_int_MIN" (formula "12") (term "0,1,1,0,0,1"))
                                    (rule "replace_int_MAX" (formula "12") (term "1,0,1,0,0,1"))
                                    (rule "replace_int_MIN" (formula "12") (term "0,1,1,0,0,1,0"))
                                    (rule "replace_int_MAX" (formula "12") (term "1,0,1,0,0,1,0"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "notLeft" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "eqSymm" (formula "16") (term "1,0"))
                                    (rule "translateJavaSubInt" (formula "14") (term "0,2,0,0,1"))
                                    (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "true_left" (formula "14"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "16") (term "1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "12"))
                                    (rule "applyEq" (formula "12") (term "0") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "applyEq" (formula "12") (term "0") (ifseqformula "5"))
                                    (rule "inEqSimp_commuteLeq" (formula "12"))
                                    (rule "applyEq" (formula "13") (term "1,0,0,0,0") (ifseqformula "5"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
                                    (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "4"))
                                    (rule "leq_literals" (formula "12") (term "0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "nnf_imp2or" (formula "14") (term "0"))
                                    (rule "nnf_imp2or" (formula "13") (term "0"))
                                    (rule "nnf_imp2or" (formula "12") (term "0"))
                                    (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                    (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                    (rule "nnf_notAnd" (formula "14") (term "1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "14") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,0,0,1,1,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "14") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,0,1,0,0"))
                                    (rule "nnf_notAnd" (formula "13") (term "1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "13") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "13") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,0,1,0,0"))
                                    (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,0,0,0,0"))
                                    (rule "nnf_notAnd" (formula "12") (term "1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "12") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "12") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,0,1,0,0"))
                                    (rule "commute_or" (formula "14") (term "1,0,0"))
                                    (rule "commute_or" (formula "13") (term "1,0,0"))
                                    (rule "commute_or_2" (formula "12") (term "0,0"))
                                    (rule "shift_paren_or" (formula "14") (term "0,0"))
                                    (rule "commute_or_2" (formula "14") (term "0"))
                                    (rule "inEqSimp_or_subsumption3" (formula "14") (term "0"))
                                    (rule "qeq_literals" (formula "14") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "shift_paren_or" (formula "13") (term "0,0"))
                                    (rule "commute_or_2" (formula "13") (term "0"))
                                    (rule "commute_or_2" (formula "13") (term "0,0"))
                                    (rule "commute_or" (formula "13") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "13") (term "0,0"))
                                    (rule "inEqSimp_or_subsumption1" (formula "13") (term "0,0"))
                                    (rule "qeq_literals" (formula "13") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "shift_paren_or" (formula "12") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                    (rule "commute_or" (formula "12") (term "0,0,0,0"))
                                    (rule "inEqSimp_or_subsumption0" (formula "12") (term "0,0,0,0"))
                                    (rule "qeq_literals" (formula "12") (term "0,0,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "ifthenelse_to_or_left" (formula "13") (term "0,0,0"))
                                    (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "eqSymm" (formula "13") (term "1,0,0,0,0"))
                                    (rule "commute_or" (formula "13") (term "0,0"))
                                    (rule "commute_or_2" (formula "13") (term "0"))
                                    (rule "commute_or" (formula "13") (term "0,1,0"))
                                    (rule "commute_or" (formula "13") (term "1,1,0"))
                                    (rule "cnf_rightDist" (formula "13") (term "0"))
                                    (rule "distr_forallAnd" (formula "13"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "commute_or_2" (formula "13") (term "0"))
                                    (rule "shift_paren_or" (formula "14") (term "0"))
                                    (rule "commute_or" (formula "13") (term "0,0"))
                                    (rule "allLeft" (formula "12") (inst "t=Z(0(#))"))
                                    (rule "leq_literals" (formula "12") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "19")))
                                    (rule "qeq_literals" (formula "12") (term "0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "inEqSimp_commuteGeq" (formula "12"))
                                    (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "12"))
                                    (rule "qeq_literals" (formula "4") (term "0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "closeFalse" (formula "4"))
                                 )
                                 (branch "if a instanceof java.lang.Throwable false"
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                           )
                           (branch "Null Reference (a_1 = null)"
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                     )
                     (branch "Null Reference (x_arr_3 = null)"
                         (builtin "One Step Simplification" (formula "13"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Index Out of Bounds (x_arr_3 != null, but x_15 Out of Bounds!)"
                         (builtin "One Step Simplification" (formula "13"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "1,0,0,1"))
                        (rule "add_literals" (formula "1") (term "0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
                        (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "3"))
                        (rule "inEqSimp_commuteGeq" (formula "1") (term "0"))
                        (rule "applyEq" (formula "1") (term "1,0,1") (ifseqformula "3"))
                        (rule "add_literals" (formula "1") (term "0,1"))
                        (rule "leq_literals" (formula "1") (term "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "blockThrow" (formula "13") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                  )
               )
               (branch "Null Reference (x_arr_1 = null)"
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Assertion (x_4) Failure"
                (builtin "One Step Simplification" (formula "12"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "inEqSimp_geqRight" (formula "9"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "throwUnfold" (formula "12") (term "1") (inst "#v0=a"))
               (rule "variableDeclarationAssign" (formula "12") (term "1"))
               (rule "variableDeclaration" (formula "12") (term "1") (newnames "a"))
               (rule "arrayLengthNotNegative" (formula "1") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
               (rule "qeq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
         )
         (branch "Null Reference (x_arr = null)"
             (builtin "One Step Simplification" (formula "11"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEq" (formula "11") (term "0,1,0") (ifseqformula "2"))
            (rule "blockThrow" (formula "11") (term "1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "3"))
            (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "throwUnfold" (formula "11") (term "1") (inst "#v0=n"))
            (rule "variableDeclarationAssign" (formula "11") (term "1"))
            (rule "variableDeclaration" (formula "11") (term "1") (newnames "n"))
             (builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_NullPointerException,self_0,exc_0,heapAfter_NullPointerException,anon_heap_NullPointerException") (contract "java.lang.NullPointerException[java.lang.NullPointerException::NullPointerException()].JML normal_behavior operation contract.0"))
            (branch "Post (NullPointerException)"
                (builtin "One Step Simplification" (formula "13"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "13"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "13"))
               (rule "andLeft" (formula "16"))
               (rule "notLeft" (formula "13"))
               (rule "andLeft" (formula "13"))
               (rule "notLeft" (formula "13"))
               (rule "assignment" (formula "21") (term "1"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "pullOutSelect" (formula "15") (term "0") (inst "selectSK=java_lang_Throwable_message_0"))
               (rule "simplifySelectOfAnonEQ" (formula "15") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "20")) (ifInst ""  (formula "19")))
               (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "15"))
               (rule "hideAuxiliaryEq" (formula "15"))
               (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=java_lang_Throwable_cause_0"))
               (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "20")) (ifInst ""  (formula "19")))
               (rule "applyEqReverse" (formula "17") (term "0") (ifseqformula "16"))
               (rule "hideAuxiliaryEq" (formula "16"))
               (rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=java_lang_Object_created__0"))
               (rule "simplifySelectOfAnonEQ" (formula "13") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "20")) (ifInst ""  (formula "19")))
               (rule "applyEqReverse" (formula "14") (term "0") (ifseqformula "13"))
               (rule "hideAuxiliaryEq" (formula "13"))
               (rule "commuteUnion" (formula "11") (term "1,0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "16") (term "0") (ifseqformula "10"))
               (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0") (ifseqformula "10"))
               (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "true_left" (formula "15"))
               (rule "methodCallThrow" (formula "21") (term "1"))
               (rule "blockThrow" (formula "21") (term "1"))
               (rule "methodCallParamThrow" (formula "21") (term "1"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "tryCatchThrow" (formula "21") (term "1"))
               (rule "ifElseUnfold" (formula "21") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_10"))
               (rule "equality_comparison_simple" (formula "21") (term "1"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "replace_known_right" (formula "21") (term "0,0,1,0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "ifElseSplit" (formula "21"))
               (branch "if x_10 true"
                   (builtin "One Step Simplification" (formula "22"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_10 false"
                   (builtin "One Step Simplification" (formula "22"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "elim_double_block" (formula "21") (term "1"))
                  (rule "ifElseSplit" (formula "21"))
                  (branch "if n instanceof java.lang.Throwable true"
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                     (rule "true_left" (formula "1"))
                     (rule "variableDeclaration" (formula "21") (term "1") (newnames "e"))
                     (rule "delete_unnecessary_cast" (formula "21") (term "1"))
                      (builtin "One Step Simplification" (formula "22"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "assignment" (formula "21") (term "1"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "emptyModality" (formula "21") (term "1"))
                      (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "19")))
                     (rule "false_right" (formula "21"))
                     (rule "Class_invariant_axiom_for_BitSet" (formula "9") (inst "x=x_11") (inst "x_0=x_0") (inst "i=i") (ifseqformula "5"))
                     (rule "expand_inInt" (formula "9") (term "1,0,0,1"))
                     (rule "expand_inInt" (formula "9") (term "1,0,0,1,0"))
                     (rule "expand_inInt" (formula "9") (term "1,0,0,1,0,0"))
                     (rule "replace_int_MAX" (formula "9") (term "1,0,1,0,0,1"))
                     (rule "replace_int_MIN" (formula "9") (term "0,1,1,0,0,1"))
                     (rule "replace_int_MAX" (formula "9") (term "1,0,1,0,0,1,0"))
                     (rule "replace_int_MIN" (formula "9") (term "0,1,1,0,0,1,0"))
                     (rule "replace_int_MAX" (formula "9") (term "1,0,1,0,0,1,0,0"))
                     (rule "replace_int_MIN" (formula "9") (term "0,1,1,0,0,1,0,0"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "10"))
                     (rule "notLeft" (formula "9"))
                     (rule "close" (formula "23") (ifseqformula "1"))
                  )
                  (branch "if n instanceof java.lang.Throwable false"
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "Exceptional Post (NullPointerException)"
                (builtin "One Step Simplification" (formula "11"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "12"))
               (rule "andLeft" (formula "14"))
               (rule "andLeft" (formula "16"))
               (rule "notLeft" (formula "12"))
               (rule "close" (formula "18") (ifseqformula "17"))
            )
            (branch "Pre (NullPointerException)"
                (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "3")))
               (rule "closeTrue" (formula "11"))
            )
         )
      )
   )
   (branch "Assertion (x_1) Failure"
       (builtin "One Step Simplification" (formula "12"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "self.wordsInUse = 0 FALSE"
   (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
   (rule "leq_literals" (formula "5") (term "0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "compound_inequality_comparison_1" (formula "10") (term "1") (inst "#v0=x_2"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_4"))
   (rule "eval_order_array_access4" (formula "10") (term "1") (inst "#v0=x_arr"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_arr"))
   (rule "assignment_read_attribute_this" (formula "10") (term "1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "eval_order_array_access5" (formula "10") (term "1") (inst "#v1=x_5") (inst "#ar1=x_arr_1"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_arr_1"))
   (rule "assignment" (formula "10") (term "1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_5"))
   (rule "compound_subtraction_1" (formula "10") (term "1") (inst "#v=x_6"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "x_6"))
   (rule "assignment_read_attribute_this" (formula "10") (term "1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "assignmentSubtractionInt" (formula "10") (term "1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "translateJavaSubInt" (formula "10") (term "0,1,0"))
   (rule "assignment_array2" (formula "10") (term "1"))
   (branch "Normal Execution (x_arr_1 != null)"
       (builtin "One Step Simplification" (formula "11"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "orRight" (formula "10"))
      (rule "orRight" (formula "10"))
      (rule "inEqSimp_ltRight" (formula "12"))
      (rule "mul_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_leqRight" (formula "12"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
      (rule "mul_literals" (formula "2") (term "0,0"))
      (rule "add_zero_left" (formula "2") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
      (rule "mul_literals" (formula "2") (term "1"))
      (rule "expand_subJint" (formula "14") (term "0,2,0,1,0"))
      (rule "polySimp_elimSub" (formula "14") (term "0,0,2,0,1,0"))
      (rule "mul_literals" (formula "14") (term "1,0,0,2,0,1,0"))
      (rule "polySimp_addComm0" (formula "14") (term "0,0,2,0,1,0"))
      (rule "expand_subJint" (formula "3") (term "0"))
      (rule "polySimp_elimSub" (formula "3") (term "0,0"))
      (rule "mul_literals" (formula "3") (term "1,0,0"))
      (rule "polySimp_addComm0" (formula "3") (term "0,0"))
      (rule "expand_subJint" (formula "1") (term "0"))
      (rule "polySimp_elimSub" (formula "1") (term "0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0,0"))
      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
      (rule "mul_literals" (formula "3") (term "0,0"))
      (rule "add_zero_left" (formula "3") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
      (rule "mul_literals" (formula "3") (term "1"))
      (rule "expand_moduloInteger" (formula "14") (term "0,2,0,1,0"))
      (rule "replace_int_RANGE" (formula "14") (term "1,1,0,2,0,1,0"))
      (rule "replace_int_HALFRANGE" (formula "14") (term "0,0,1,0,2,0,1,0"))
      (rule "replace_int_MIN" (formula "14") (term "0,0,2,0,1,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,2,0,1,0"))
      (rule "add_literals" (formula "14") (term "0,0,1,0,2,0,1,0"))
      (rule "expand_moduloInteger" (formula "3") (term "0"))
      (rule "replace_int_HALFRANGE" (formula "3") (term "0,0,1,0"))
      (rule "replace_int_MIN" (formula "3") (term "0,0"))
      (rule "replace_int_RANGE" (formula "3") (term "1,1,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,1,0"))
      (rule "add_literals" (formula "3") (term "0,0,1,0"))
      (rule "mod_axiom" (formula "3") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
      (rule "add_literals" (formula "3") (term "0,0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "expand_moduloInteger" (formula "1") (term "0"))
      (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0"))
      (rule "replace_int_MIN" (formula "1") (term "0,0"))
      (rule "replace_int_RANGE" (formula "1") (term "1,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,1,0"))
      (rule "add_literals" (formula "1") (term "0,0,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "mod_axiom" (formula "1") (term "0,1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
      (rule "inEqSimp_exactShadow0" (formula "1") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "greater_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "polySimp_addLiterals" (formula "1") (term "0"))
      (rule "polySimp_addComm0" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_subsumption6" (formula "1") (ifseqformula "3"))
      (rule "mul_literals" (formula "1") (term "1,1,0"))
      (rule "greater_literals" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "leq_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "inequality_comparison_simple" (formula "14") (term "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "blockEmpty" (formula "14") (term "1"))
      (rule "assert" (formula "14") (term "1"))
      (branch "Assertion (x_1) OK"
          (builtin "One Step Simplification" (formula "15"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "mod_axiom" (formula "11") (term "1,0,2,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,2,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,2,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,2,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,2,0"))
         (rule "evaluateAssertCondition_1" (formula "15") (term "1") (inst "#condition=x"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_7"))
         (rule "remove_parentheses_right" (formula "15") (term "1"))
         (rule "div_axiom" (formula "3") (term "0,0") (inst "quotient=quotient_0"))
         (rule "qeq_literals" (formula "3") (term "0,1,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "equal_literals" (formula "3") (term "0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "mul_literals" (formula "3") (term "1,1,1"))
         (rule "andLeft" (formula "3"))
         (rule "andLeft" (formula "3"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,1"))
         (rule "add_literals" (formula "5") (term "0,0,1"))
         (rule "polySimp_addComm1" (formula "5") (term "1"))
         (rule "add_literals" (formula "5") (term "0,1"))
         (rule "inEqSimp_homoInEq0" (formula "4"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0"))
         (rule "inEqSimp_homoInEq1" (formula "5"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
         (rule "polySimp_addComm1" (formula "5") (term "0"))
         (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq0" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0"))
         (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0"))
         (rule "applyEq" (formula "14") (term "0,1,0,2,0") (ifseqformula "3"))
         (rule "polySimp_addComm1" (formula "14") (term "0,2,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "4"))
         (rule "polySimp_mulComm0" (formula "4") (term "1"))
         (rule "polySimp_rightDist" (formula "4") (term "1"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
         (rule "mul_literals" (formula "4") (term "0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1"))
         (rule "polySimp_rightDist" (formula "5") (term "1"))
         (rule "mul_literals" (formula "5") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6"))
         (rule "polySimp_mulComm0" (formula "6") (term "1"))
         (rule "polySimp_rightDist" (formula "6") (term "1"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
         (rule "mul_literals" (formula "6") (term "0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
         (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "6"))
         (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
         (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
         (rule "add_literals" (formula "4") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
         (rule "add_literals" (formula "4") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "4") (term "1,0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0"))
         (rule "qeq_literals" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "1"))
         (rule "polySimp_rightDist" (formula "5") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
         (rule "mul_literals" (formula "5") (term "0,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0"))
         (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
         (rule "add_literals" (formula "5") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "5") (term "1,0,0"))
         (rule "add_literals" (formula "5") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "5"))
         (rule "mul_literals" (formula "5") (term "1"))
         (rule "compound_assignment_3_nonsimple" (formula "17") (term "1"))
         (rule "arrayLengthNotNegative" (formula "2") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
         (rule "leq_literals" (formula "2") (term "0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "arrayLengthIsAnInt" (formula "2") (term "0"))
         (rule "expand_inInt" (formula "2"))
         (rule "replace_int_MIN" (formula "2") (term "0,1"))
         (rule "replace_int_MAX" (formula "2") (term "1,0"))
         (rule "andLeft" (formula "2"))
         (rule "inEqSimp_commuteLeq" (formula "3"))
         (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
         (rule "leq_literals" (formula "3") (term "0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x_8"))
         (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_8"))
         (rule "compound_assignment_2" (formula "18") (term "1") (inst "#v=x_9"))
         (rule "variableDeclarationAssign" (formula "18") (term "1"))
         (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_9"))
         (rule "compound_greater_equal_than_comparison_1" (formula "18") (term "1") (inst "#v0=x_10"))
         (rule "variableDeclarationAssign" (formula "18") (term "1"))
         (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_10"))
         (rule "assignment_read_attribute_this" (formula "18") (term "1"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "greater_equal_than_comparison_simple" (formula "18") (term "1"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "compound_assignment_1_new" (formula "18") (term "1"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "ifElseSplit" (formula "18"))
         (branch "if x_8 true"
             (builtin "One Step Simplification" (formula "19"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "inEqSimp_geqRight" (formula "14"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "assignment" (formula "19") (term "1"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_contradEq3" (formula "17") (ifseqformula "1"))
            (rule "mul_literals" (formula "17") (term "1,0,0"))
            (rule "add_zero_right" (formula "17") (term "0,0"))
            (rule "qeq_literals" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "false_right" (formula "17"))
            (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "1"))
            (rule "polySimp_rightDist" (formula "7") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
            (rule "mul_literals" (formula "7") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0"))
            (rule "add_literals" (formula "7") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0"))
            (rule "elimGcdLeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "leq_literals" (formula "7") (term "0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
            (rule "neg_literal" (formula "7") (term "0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
            (rule "add_literals" (formula "7") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0"))
            (rule "add_literals" (formula "7") (term "0,0"))
            (rule "qeq_literals" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "assert" (formula "19") (term "1"))
            (branch "Assertion (x_7) OK"
                (builtin "One Step Simplification" (formula "20"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Assertion (x_7) Failure"
                (builtin "One Step Simplification" (formula "20"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "throwUnfold" (formula "19") (term "1") (inst "#v0=a"))
               (rule "variableDeclarationAssign" (formula "19") (term "1"))
               (rule "variableDeclaration" (formula "19") (term "1") (newnames "a"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0,0") (ifseqformula "9"))
               (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "instanceCreationAssignment" (formula "20") (term "1") (inst "#v0=a_1"))
               (rule "variableDeclarationAssign" (formula "20") (term "1"))
               (rule "variableDeclaration" (formula "20") (term "1") (newnames "a_1"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "20") (term "1") (inst "#v0=a_2"))
               (rule "variableDeclaration" (formula "20") (term "1") (newnames "a_2"))
               (rule "methodBodyExpand" (formula "20") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "variableDeclaration" (formula "20") (term "1") (newnames "__NEW__"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "20") (term "1") (inst "#v0=a_3"))
               (rule "variableDeclaration" (formula "20") (term "1") (newnames "a_3"))
               (rule "allocateInstance" (formula "20"))
                (builtin "One Step Simplification" (formula "21"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "blockEmpty" (formula "23") (term "1"))
               (rule "assignment" (formula "23") (term "1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "assignment_write_attribute_this" (formula "23") (term "1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "methodCallWithinClass" (formula "23") (term "1"))
               (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "methodCallSuper" (formula "23") (term "1"))
               (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "methodCallSuper" (formula "23") (term "1"))
               (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "methodCallSuper" (formula "23") (term "1"))
               (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "methodCallEmpty" (formula "23") (term "1"))
               (rule "blockEmpty" (formula "23") (term "1"))
               (rule "assignment_write_attribute_this" (formula "23") (term "1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "assignment_write_attribute_this" (formula "23") (term "1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "methodCallEmpty" (formula "23") (term "1"))
               (rule "methodCallEmpty" (formula "23") (term "1"))
               (rule "methodCallEmpty" (formula "23") (term "1"))
               (rule "blockEmpty" (formula "23") (term "1"))
               (rule "methodCallReturnIgnoreResult" (formula "23") (term "1"))
               (rule "methodCallReturn" (formula "23") (term "1"))
               (rule "assignment" (formula "23") (term "1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "methodCallEmpty" (formula "23") (term "1"))
               (rule "blockEmpty" (formula "23") (term "1"))
               (rule "assignment" (formula "23") (term "1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "methodCallSuper" (formula "23") (term "1"))
               (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "methodCallSuper" (formula "23") (term "1"))
               (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "methodCallSuper" (formula "23") (term "1"))
               (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "methodCallEmpty" (formula "23") (term "1"))
               (rule "blockEmpty" (formula "23") (term "1"))
               (rule "assignment_write_attribute_this" (formula "23") (term "1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "assignment_write_attribute_this" (formula "23") (term "1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "methodCallEmpty" (formula "23") (term "1"))
               (rule "methodCallEmpty" (formula "23") (term "1"))
               (rule "methodCallEmpty" (formula "23") (term "1"))
               (rule "blockEmpty" (formula "23") (term "1"))
               (rule "assignment_write_attribute" (formula "23") (term "1"))
               (branch "Normal Execution (a_1 != null)"
                   (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "19")))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "false_right" (formula "23"))
                  (rule "assignment" (formula "23") (term "1"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "methodCallThrow" (formula "23") (term "1"))
                  (rule "blockThrow" (formula "23") (term "1"))
                  (rule "methodCallParamThrow" (formula "23") (term "1"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "tryCatchThrow" (formula "23") (term "1"))
                  (rule "ifElseUnfold" (formula "23") (term "1") (inst "#boolv=x"))
                  (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_11"))
                  (rule "equality_comparison_simple" (formula "23") (term "1"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "replace_known_right" (formula "23") (term "0,0,1,0") (ifseqformula "19"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "ifElseSplit" (formula "23"))
                  (branch "if x_11 true"
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if x_11 false"
                      (builtin "One Step Simplification" (formula "24"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "elim_double_block" (formula "23") (term "1"))
                     (rule "ifElseSplit" (formula "23"))
                     (branch "if a instanceof java.lang.Throwable true"
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                        (rule "true_left" (formula "1"))
                        (rule "variableDeclaration" (formula "23") (term "1") (newnames "e"))
                        (rule "delete_unnecessary_cast" (formula "23") (term "1"))
                         (builtin "One Step Simplification" (formula "24"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "assignment" (formula "23") (term "1"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "emptyModality" (formula "23") (term "1"))
                         (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "19")))
                        (rule "false_right" (formula "23"))
                        (rule "Class_invariant_axiom_for_BitSet" (formula "17") (inst "x=x_12") (inst "x_0=x_0") (inst "i=i") (ifseqformula "13"))
                        (rule "expand_inInt" (formula "17") (term "1,0,0,1,0"))
                        (rule "expand_inInt" (formula "17") (term "1,0,0,1"))
                        (rule "expand_inInt" (formula "17") (term "1,0,0,1,0,0"))
                        (rule "replace_int_MIN" (formula "17") (term "0,1,1,0,0,1,0"))
                        (rule "replace_int_MAX" (formula "17") (term "1,0,1,0,0,1,0"))
                        (rule "replace_int_MIN" (formula "17") (term "0,1,1,0,0,1"))
                        (rule "replace_int_MAX" (formula "17") (term "1,0,1,0,0,1"))
                        (rule "replace_int_MIN" (formula "17") (term "0,1,1,0,0,1,0,0"))
                        (rule "replace_int_MAX" (formula "17") (term "1,0,1,0,0,1,0,0"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "notLeft" (formula "17"))
                        (rule "andLeft" (formula "17"))
                        (rule "eqSymm" (formula "21") (term "1,0"))
                        (rule "translateJavaSubInt" (formula "19") (term "0,2,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "21") (term "1,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "1,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "17"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_contradEq3" (formula "19") (term "0,0") (ifseqformula "2"))
                        (rule "mul_literals" (formula "19") (term "1,0,0,0,0"))
                        (rule "add_literals" (formula "19") (term "0,0,0,0"))
                        (rule "qeq_literals" (formula "19") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "notLeft" (formula "19"))
                        (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "17") (term "0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "closeFalse" (formula "17"))
                     )
                     (branch "if a instanceof java.lang.Throwable false"
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
               (branch "Null Reference (a_1 = null)"
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "if x_8 false"
             (builtin "One Step Simplification" (formula "19"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "17"))
            (rule "add_literals" (formula "1") (term "1"))
            (rule "inEqSimp_contradEq7" (formula "17") (ifseqformula "1"))
            (rule "mul_literals" (formula "17") (term "1,0,0"))
            (rule "add_zero_right" (formula "17") (term "0,0"))
            (rule "leq_literals" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "false_right" (formula "17"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "6"))
            (rule "mul_literals" (formula "1") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "elimGcdGeq_antec" (formula "1") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "1") (term "0,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "leq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
            (rule "mul_literals" (formula "2") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "5"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "inEqSimp_subsumption6" (formula "2") (ifseqformula "1"))
            (rule "mul_literals" (formula "2") (term "1,1,0"))
            (rule "greater_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "compound_less_equal_than_comparison_2" (formula "20") (term "1") (inst "#v1=x_9") (inst "#v0=x_8"))
            (rule "variableDeclarationAssign" (formula "20") (term "1"))
            (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_11"))
            (rule "assignment_read_attribute_this" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "variableDeclarationAssign" (formula "20") (term "1"))
            (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_12"))
            (rule "eval_order_access2" (formula "20") (term "1") (inst "#v0=x_arr"))
            (rule "variableDeclarationAssign" (formula "20") (term "1"))
            (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_arr_2"))
            (rule "assignment_read_attribute_this" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "assignment_read_length" (formula "20") (term "1"))
            (branch "Normal Execution (x_arr_2 != null)"
                (builtin "One Step Simplification" (formula "21"))
                (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "19")))
               (rule "false_right" (formula "20"))
               (rule "less_equal_than_comparison_simple" (formula "20") (term "1"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "blockEmpty" (formula "20") (term "1"))
               (rule "assert" (formula "20") (term "1"))
               (branch "Assertion (x_7) OK"
                   (builtin "One Step Simplification" (formula "1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "1"))
                  (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                  (rule "mul_literals" (formula "10") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1"))
                  (rule "mul_literals" (formula "10") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                  (rule "mul_literals" (formula "4") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1"))
                  (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "6"))
                  (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                  (rule "mul_literals" (formula "10") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0"))
                  (rule "add_literals" (formula "10") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
                  (rule "neg_literal" (formula "10") (term "0,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "10") (term "0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
                  (rule "add_literals" (formula "10") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0"))
                  (rule "qeq_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "10"))
                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "applyEqRigid" (formula "11") (term "0,1,1") (ifseqformula "2"))
                  (rule "mul_literals" (formula "11") (term "1,1"))
                  (rule "add_literals" (formula "11") (term "1"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "2"))
                  (rule "leq_literals" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "applyEqRigid" (formula "10") (term "0,1,1") (ifseqformula "2"))
                  (rule "mul_literals" (formula "10") (term "1,1"))
                  (rule "add_literals" (formula "10") (term "1"))
                  (rule "applyEqRigid" (formula "9") (term "0,1,1") (ifseqformula "2"))
                  (rule "mul_literals" (formula "9") (term "1,1"))
                  (rule "add_literals" (formula "9") (term "1"))
                  (rule "applyEqRigid" (formula "3") (term "0,1,1") (ifseqformula "2"))
                  (rule "mul_literals" (formula "3") (term "1,1"))
                  (rule "add_literals" (formula "3") (term "1"))
                  (rule "applyEq" (formula "16") (term "0,1,0,0,2,0") (ifseqformula "2"))
                  (rule "mul_literals" (formula "16") (term "1,0,0,2,0"))
                  (rule "add_literals" (formula "16") (term "0,0,2,0"))
                  (rule "applyEqRigid" (formula "7") (term "1") (ifseqformula "2"))
                  (rule "applyEqRigid" (formula "4") (term "0,0,1") (ifseqformula "2"))
                  (rule "mul_literals" (formula "4") (term "0,1"))
                  (rule "add_zero_left" (formula "4") (term "1"))
                  (rule "evaluateAssertCondition_1" (formula "18") (term "1") (inst "#condition=x"))
                  (rule "variableDeclarationAssign" (formula "18") (term "1"))
                  (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_13"))
                  (rule "remove_parentheses_right" (formula "18") (term "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "0,0") (ifseqformula "8"))
                  (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "compound_assignment_5_nonsimple" (formula "19") (term "1"))
                  (rule "ifElseUnfold" (formula "19") (term "1") (inst "#boolv=x_14"))
                  (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_14"))
                  (rule "compound_equality_comparison_2" (formula "19") (term "1") (inst "#v1=x_16") (inst "#v0=x_15"))
                  (rule "variableDeclarationAssign" (formula "19") (term "1"))
                  (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_15"))
                  (rule "assignment_read_attribute_this" (formula "19") (term "1"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "variableDeclarationAssign" (formula "19") (term "1"))
                  (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_16"))
                  (rule "eval_order_access2" (formula "19") (term "1") (inst "#v0=x_arr"))
                  (rule "variableDeclarationAssign" (formula "19") (term "1"))
                  (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_arr_3"))
                  (rule "assignment_read_attribute_this" (formula "19") (term "1"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "assignment_read_length" (formula "19") (term "1"))
                  (branch "Normal Execution (x_arr_3 != null)"
                      (builtin "One Step Simplification" (formula "20"))
                      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "18")))
                     (rule "false_right" (formula "19"))
                     (rule "equality_comparison_simple" (formula "19") (term "1"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "ifElseSplit" (formula "19"))
                     (branch "if x_14 true"
                         (builtin "One Step Simplification" (formula "20"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "assignment" (formula "20") (term "1"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "applyEq" (formula "8") (term "1,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "1"))
                        (rule "applyEq" (formula "8") (term "0") (ifseqformula "1"))
                        (rule "applyEq" (formula "16") (term "1,0,2,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "2"))
                        (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "1,0"))
                        (rule "times_zero_1" (formula "2") (term "0"))
                        (rule "qeq_literals" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "3"))
                        (rule "leq_literals" (formula "7") (term "0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "assert" (formula "17") (term "1"))
                        (branch "Assertion (x_13) OK"
                            (builtin "One Step Simplification" (formula "18"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "methodCallEmpty" (formula "17") (term "1"))
                           (rule "blockEmpty" (formula "17") (term "1"))
                           (rule "variableDeclarationAssign" (formula "17") (term "1"))
                           (rule "variableDeclaration" (formula "17") (term "1") (newnames "wordIndex"))
                           (rule "div_axiom" (formula "6") (term "0") (inst "quotient=quotient_1"))
                           (rule "equal_literals" (formula "6") (term "0"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "mul_literals" (formula "6") (term "1,1,1,1"))
                           (rule "qeq_literals" (formula "6") (term "0,1"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "andLeft" (formula "6"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0,1"))
                           (rule "add_literals" (formula "8") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "8") (term "1"))
                           (rule "add_literals" (formula "8") (term "0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "7"))
                           (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "7") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "8"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "8") (term "0"))
                           (rule "applyEq" (formula "6") (term "0") (ifseqformula "9"))
                           (rule "eqSymm" (formula "6"))
                           (rule "applyEq" (formula "8") (term "0,1,0,0") (ifseqformula "6"))
                           (rule "mul_literals" (formula "8") (term "1,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0"))
                           (rule "applyEqRigid" (formula "7") (term "0,1,0,0") (ifseqformula "6"))
                           (rule "mul_literals" (formula "7") (term "1,0,0"))
                           (rule "add_literals" (formula "7") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                           (rule "mul_literals" (formula "8") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                           (rule "mul_literals" (formula "7") (term "1"))
                           (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "3"))
                           (rule "leq_literals" (formula "8") (term "0"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "true_left" (formula "8"))
                           (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "5"))
                           (rule "leq_literals" (formula "7") (term "0"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "true_left" (formula "7"))
                            (builtin "Use Operation Contract" (formula "18") (newnames "heapBefore_wordIndex,result_wordIndex,exc_0") (contract "BitSet[BitSet::wordIndex(int)].JML normal_behavior operation contract.0"))
                           (branch "Post (wordIndex)"
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "expand_inInt" (formula "15") (term "1,0"))
                              (rule "replace_int_MAX" (formula "15") (term "1,0,1,0"))
                              (rule "replace_int_MIN" (formula "15") (term "0,1,1,0"))
                              (rule "andLeft" (formula "15"))
                              (rule "andLeft" (formula "16"))
                              (rule "andLeft" (formula "15"))
                              (rule "andLeft" (formula "16"))
                              (rule "andLeft" (formula "15"))
                              (rule "eqSymm" (formula "18") (term "1"))
                              (rule "translateJavaDivInt" (formula "18") (term "0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "16"))
                              (rule "assignment" (formula "23") (term "1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_contradEq7" (formula "18") (term "0,0") (ifseqformula "13"))
                              (rule "add_zero_left" (formula "18") (term "0,0,0,0"))
                              (rule "mul_literals" (formula "18") (term "0,0,0,0"))
                              (rule "leq_literals" (formula "18") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "inEqSimp_contradEq7" (formula "17") (term "0") (ifseqformula "13"))
                              (rule "add_zero_left" (formula "17") (term "0,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,0,0"))
                              (rule "leq_literals" (formula "17") (term "0,0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "expand_divJint" (formula "17") (term "0"))
                              (rule "expand_moduloInteger" (formula "17") (term "0"))
                              (rule "replace_int_MIN" (formula "17") (term "0,0"))
                              (rule "replace_int_RANGE" (formula "17") (term "1,1,0"))
                              (rule "replace_int_HALFRANGE" (formula "17") (term "0,0,1,0"))
                              (rule "polySimp_homoEq" (formula "17"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0"))
                              (rule "polySimp_addComm0" (formula "17") (term "0,0"))
                              (rule "polySimp_sepNegMonomial" (formula "17"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                              (rule "polySimp_elimOne" (formula "17") (term "0"))
                              (rule "returnUnfold" (formula "22") (term "1") (inst "#v0=x"))
                              (rule "variableDeclarationAssign" (formula "22") (term "1"))
                              (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_17"))
                              (rule "compound_assignment_3_nonsimple" (formula "22") (term "1"))
                              (rule "jdiv_axiom" (formula "17") (term "1,0,0"))
                              (rule "eqSymm" (formula "17"))
                              (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "13"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "eqSymm" (formula "17"))
                              (rule "applyEq" (formula "18") (term "1,0,0") (ifseqformula "17"))
                              (rule "ifElseUnfold" (formula "23") (term "1") (inst "#boolv=x_18"))
                              (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_18"))
                              (rule "compound_assignment_2" (formula "23") (term "1") (inst "#v=x_19"))
                              (rule "variableDeclarationAssign" (formula "23") (term "1"))
                              (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_19"))
                              (rule "remove_parentheses_right" (formula "23") (term "1"))
                              (rule "compound_less_than_comparison_2" (formula "23") (term "1") (inst "#v1=x_21") (inst "#v0=x_20"))
                              (rule "variableDeclarationAssign" (formula "23") (term "1"))
                              (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_20"))
                              (rule "assignment" (formula "23") (term "1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "variableDeclarationAssign" (formula "23") (term "1"))
                              (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_21"))
                              (rule "assignment_read_attribute_this" (formula "23") (term "1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "applyEq" (formula "23") (term "0,1,0") (ifseqformula "1"))
                              (rule "less_than_comparison_simple" (formula "23") (term "1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "23") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "23") (term "0,0,0,1,0"))
                              (rule "compound_assignment_1_new" (formula "23") (term "1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "div_axiom" (formula "17") (term "1") (inst "quotient=quotient_2"))
                              (rule "mul_literals" (formula "17") (term "1,1,1,1,1"))
                              (rule "qeq_literals" (formula "17") (term "0,1,1"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "equal_literals" (formula "17") (term "0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "andLeft" (formula "17"))
                              (rule "andLeft" (formula "17"))
                              (rule "polySimp_addComm1" (formula "19") (term "1"))
                              (rule "add_literals" (formula "19") (term "0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "18"))
                              (rule "inEqSimp_homoInEq1" (formula "19"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "19") (term "0"))
                              (rule "applyEq" (formula "21") (term "1,0,0") (ifseqformula "17"))
                              (rule "applyEq" (formula "20") (term "1") (ifseqformula "17"))
                              (rule "mod_axiom" (formula "21") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,0"))
                              (rule "polySimp_homoEq" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "0,1,0"))
                              (rule "mul_literals" (formula "21") (term "0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "21") (term "0"))
                              (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "21") (term "0,0,0"))
                              (rule "add_literals" (formula "21") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "21") (term "0,0,0"))
                              (rule "polySimp_sepPosMonomial" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1"))
                              (rule "polySimp_rightDist" (formula "21") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                              (rule "polySimp_mulAssoc" (formula "21") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "21") (term "0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "21") (term "0,1"))
                              (rule "applyEq" (formula "26") (term "0,1,0,0") (ifseqformula "21"))
                              (rule "applyEq" (formula "26") (term "1,1,0,0,1,0") (ifseqformula "21"))
                              (rule "polySimp_addAssoc" (formula "26") (term "1,0,0,1,0"))
                              (rule "applyEq" (formula "16") (term "0") (ifseqformula "21"))
                              (rule "inEqSimp_homoInEq1" (formula "16"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0"))
                              (rule "applyEq" (formula "15") (term "0") (ifseqformula "21"))
                              (rule "inEqSimp_homoInEq0" (formula "15"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "15") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1"))
                              (rule "polySimp_rightDist" (formula "19") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                              (rule "mul_literals" (formula "19") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "16"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1"))
                              (rule "polySimp_rightDist" (formula "16") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                              (rule "mul_literals" (formula "16") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1"))
                              (rule "polySimp_rightDist" (formula "15") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                              (rule "mul_literals" (formula "15") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "19"))
                              (rule "mul_literals" (formula "13") (term "0,0"))
                              (rule "add_zero_left" (formula "13") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                              (rule "mul_literals" (formula "13") (term "1"))
                              (rule "elimGcdGeq_antec" (formula "13") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "13") (term "0,0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addLiterals" (formula "13") (term "0,0,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
                              (rule "add_literals" (formula "13") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "13") (term "1,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0"))
                              (rule "leq_literals" (formula "13") (term "0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "11"))
                              (rule "polySimp_mulAssoc" (formula "19") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "19") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "19"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                              (rule "elimGcdLeq_antec" (formula "19") (inst "elimGcdRightDiv=Z(1(3(4(4(5(5(3(3(#)))))))))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
                              (rule "leq_literals" (formula "19") (term "0,0"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0"))
                              (rule "neg_literal" (formula "19") (term "0,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addLiterals" (formula "19") (term "0,0,0,0"))
                              (rule "add_literals" (formula "19") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "19") (term "0,0"))
                              (rule "add_literals" (formula "19") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "19") (term "1,0,0"))
                              (rule "add_literals" (formula "19") (term "0,0"))
                              (rule "qeq_literals" (formula "19") (term "0"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "div_axiom" (formula "23") (term "0,1,1") (inst "quotient=quotient_3"))
                              (rule "mul_literals" (formula "23") (term "1,1,1,1,1"))
                              (rule "qeq_literals" (formula "23") (term "0,1,1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "equal_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "andLeft" (formula "23"))
                              (rule "andLeft" (formula "23"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "polySimp_addComm1" (formula "25") (term "1"))
                              (rule "add_literals" (formula "25") (term "0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "24"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "24") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "25") (term "0"))
                              (rule "applyEq" (formula "31") (term "0,1,1,0,0,1,0") (ifseqformula "23"))
                              (rule "polySimp_addComm1" (formula "31") (term "1,0,0,1,0"))
                              (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "23"))
                              (rule "inEqSimp_homoInEq0" (formula "17"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "17") (term "0"))
                              (rule "applyEqRigid" (formula "16") (term "0,0") (ifseqformula "22"))
                              (rule "inEqSimp_homoInEq1" (formula "16"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,0"))
                              (rule "polySimp_addComm1" (formula "16") (term "0"))
                              (rule "applyEqRigid" (formula "29") (term "0,1,0,1,0,0") (ifseqformula "21"))
                              (rule "polySimp_addComm0" (formula "29") (term "0,1,0,0"))
                              (rule "applyEqRigid" (formula "24") (term "0,1,1") (ifseqformula "21"))
                              (rule "polySimp_addComm0" (formula "24") (term "1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "22"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1"))
                              (rule "polySimp_rightDist" (formula "22") (term "1"))
                              (rule "mul_literals" (formula "22") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1"))
                              (rule "polySimp_rightDist" (formula "23") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                              (rule "mul_literals" (formula "23") (term "0,1"))
                              (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "23"))
                              (rule "mul_literals" (formula "13") (term "0,0"))
                              (rule "add_zero_left" (formula "13") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                              (rule "mul_literals" (formula "13") (term "1"))
                              (rule "elimGcdGeq_antec" (formula "13") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,1,0"))
                              (rule "leq_literals" (formula "13") (term "0,0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addLiterals" (formula "13") (term "0,0,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
                              (rule "add_literals" (formula "13") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "13") (term "1,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0"))
                              (rule "leq_literals" (formula "13") (term "0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "18"))
                              (rule "polySimp_rightDist" (formula "23") (term "0,0"))
                              (rule "mul_literals" (formula "23") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "23") (term "0"))
                              (rule "add_literals" (formula "23") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "23"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "0"))
                              (rule "elimGcdLeq_antec" (formula "23") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0"))
                              (rule "leq_literals" (formula "23") (term "0,0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "neg_literal" (formula "23") (term "0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
                              (rule "polySimp_addLiterals" (formula "23") (term "0,0,0,0"))
                              (rule "add_literals" (formula "23") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0"))
                              (rule "add_literals" (formula "23") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "23") (term "1,0,0"))
                              (rule "add_literals" (formula "23") (term "0,0"))
                              (rule "qeq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_antiSymm" (formula "13") (ifseqformula "23"))
                              (rule "applyEq" (formula "25") (term "0,1,1") (ifseqformula "13"))
                              (rule "mul_literals" (formula "25") (term "1,1"))
                              (rule "add_literals" (formula "25") (term "1"))
                              (rule "applyEqRigid" (formula "26") (term "0,1,1") (ifseqformula "13"))
                              (rule "mul_literals" (formula "26") (term "1,1"))
                              (rule "add_literals" (formula "26") (term "1"))
                              (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
                              (rule "qeq_literals" (formula "14"))
                              (rule "true_left" (formula "14"))
                              (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "13"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEqRigid" (formula "30") (term "0,1,0,1,0,0,1,0") (ifseqformula "13"))
                              (rule "mul_literals" (formula "30") (term "1,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "30") (term "0,1,0,0,1,0"))
                              (rule "applyEq" (formula "30") (term "0,0,0,1,0,0") (ifseqformula "13"))
                              (rule "mul_literals" (formula "30") (term "0,0,1,0,0"))
                              (rule "add_zero_left" (formula "30") (term "0,1,0,0"))
                              (rule "applyEqRigid" (formula "22") (term "1") (ifseqformula "13"))
                              (rule "applyEq" (formula "25") (term "0,0,1") (ifseqformula "13"))
                              (rule "mul_literals" (formula "25") (term "0,1"))
                              (rule "add_zero_left" (formula "25") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "23") (ifseqformula "14"))
                              (rule "leq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "18"))
                              (rule "leq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "ifElseSplit" (formula "28"))
                              (branch "if x_18 true"
                                  (builtin "One Step Simplification" (formula "29"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "inEqSimp_geqRight" (formula "25"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "assignment" (formula "29") (term "1"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1"))
                                 (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
                                 (rule "mul_literals" (formula "6") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                 (rule "mul_literals" (formula "6") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "6"))
                                 (rule "leq_literals" (formula "16") (term "0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "methodCallReturn" (formula "29") (term "1"))
                                 (rule "assignment" (formula "29") (term "1"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "methodCallEmpty" (formula "29") (term "1"))
                                 (rule "tryEmpty" (formula "29") (term "1"))
                                 (rule "emptyModality" (formula "29") (term "1"))
                                  (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "17")))
                                 (rule "notRight" (formula "29"))
                                 (rule "Class_invariant_axiom_for_BitSet" (formula "18") (inst "x=x_22") (inst "x_0=x_0") (inst "i=i") (ifseqformula "13"))
                                 (rule "expand_inInt" (formula "18") (term "1,0,0,1,0"))
                                 (rule "expand_inInt" (formula "18") (term "1,0,0,1,0,0"))
                                 (rule "expand_inInt" (formula "18") (term "1,0,0,1"))
                                 (rule "replace_int_MIN" (formula "18") (term "0,1,1,0,0,1,0"))
                                 (rule "replace_int_MAX" (formula "18") (term "1,0,1,0,0,1,0"))
                                 (rule "replace_int_MIN" (formula "18") (term "0,1,1,0,0,1,0,0"))
                                 (rule "replace_int_MAX" (formula "18") (term "1,0,1,0,0,1,0,0"))
                                 (rule "replace_int_MIN" (formula "18") (term "0,1,1,0,0,1"))
                                 (rule "replace_int_MAX" (formula "18") (term "1,0,1,0,0,1"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "notLeft" (formula "18"))
                                 (rule "eqSymm" (formula "22") (term "1,0"))
                                 (rule "translateJavaSubInt" (formula "20") (term "0,2,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "23") (term "1,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "21") (term "1,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "18"))
                                 (rule "applyEq" (formula "20") (term "0,0,2,0,0,1") (ifseqformula "3"))
                                 (rule "applyEq" (formula "21") (term "1,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "19") (term "0") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq0" (formula "19"))
                                 (rule "polySimp_pullOutFactor1" (formula "19") (term "0"))
                                 (rule "add_literals" (formula "19") (term "1,0"))
                                 (rule "times_zero_1" (formula "19") (term "0"))
                                 (rule "qeq_literals" (formula "19"))
                                 (rule "true_left" (formula "19"))
                                 (rule "applyEq" (formula "19") (term "0,0,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "18") (term "0") (ifseqformula "3"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_contradEq7" (formula "19") (term "0,0") (ifseqformula "8"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "19") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "19"))
                                 (rule "notLeft" (formula "19"))
                                 (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "8"))
                                 (rule "leq_literals" (formula "18") (term "0"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "nnf_imp2or" (formula "20") (term "0"))
                                 (rule "nnf_imp2or" (formula "19") (term "0"))
                                 (rule "expand_subJint" (formula "29") (term "0,2,0"))
                                 (rule "polySimp_elimSub" (formula "29") (term "0,0,2,0"))
                                 (rule "mul_literals" (formula "29") (term "1,0,0,2,0"))
                                 (rule "polySimp_addComm0" (formula "29") (term "0,0,2,0"))
                                 (rule "nnf_imp2or" (formula "18") (term "0"))
                                 (rule "expand_moduloInteger" (formula "29") (term "0,2,0"))
                                 (rule "replace_int_MIN" (formula "29") (term "0,0,2,0"))
                                 (rule "replace_int_RANGE" (formula "29") (term "1,1,0,2,0"))
                                 (rule "replace_int_HALFRANGE" (formula "29") (term "0,0,1,0,2,0"))
                                 (rule "polySimp_addAssoc" (formula "29") (term "0,1,0,2,0"))
                                 (rule "add_literals" (formula "29") (term "0,0,1,0,2,0"))
                                 (rule "mod_axiom" (formula "29") (term "1,0,2,0"))
                                 (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,2,0"))
                                 (rule "polySimp_addAssoc" (formula "29") (term "0,2,0"))
                                 (rule "polySimp_addAssoc" (formula "29") (term "0,0,2,0"))
                                 (rule "add_literals" (formula "29") (term "0,0,0,2,0"))
                                 (rule "applyEq" (formula "29") (term "0,1,0,2,0") (ifseqformula "10"))
                                 (rule "mul_literals" (formula "29") (term "1,0,2,0"))
                                 (rule "add_zero_right" (formula "29") (term "0,2,0"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "20") (term "1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "20") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "20") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "20") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "19") (term "1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "19") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "19") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "19") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "18") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "true_left" (formula "18"))
                                 (rule "commute_or" (formula "19") (term "1,0,0"))
                                 (rule "commute_or" (formula "18") (term "1,0,0"))
                                 (rule "shift_paren_or" (formula "19") (term "0,0"))
                                 (rule "commute_or_2" (formula "19") (term "0"))
                                 (rule "inEqSimp_or_subsumption3" (formula "19") (term "0"))
                                 (rule "qeq_literals" (formula "19") (term "0,1,0"))
                                  (builtin "One Step Simplification" (formula "19"))
                                 (rule "shift_paren_or" (formula "18") (term "0,0"))
                                 (rule "commute_or_2" (formula "18") (term "0"))
                                 (rule "commute_or_2" (formula "18") (term "0,0"))
                                 (rule "commute_or" (formula "18") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "18") (term "0,0"))
                                 (rule "inEqSimp_or_subsumption1" (formula "18") (term "0,0"))
                                 (rule "qeq_literals" (formula "18") (term "0,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "ifthenelse_to_or_left" (formula "18") (term "0,0,0"))
                                 (rule "eqSymm" (formula "18") (term "1,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "eqSymm" (formula "18") (term "1,0,0,0,0"))
                                 (rule "commute_or" (formula "18") (term "0,0"))
                                 (rule "commute_or_2" (formula "18") (term "0"))
                                 (rule "commute_or" (formula "18") (term "0,1,0"))
                                 (rule "commute_or" (formula "18") (term "1,1,0"))
                                 (rule "cnf_rightDist" (formula "18") (term "0"))
                                 (rule "distr_forallAnd" (formula "18"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "commute_or_2" (formula "18") (term "0"))
                                 (rule "shift_paren_or" (formula "19") (term "0"))
                                 (rule "commute_or" (formula "18") (term "0,0"))
                                 (rule "allLeft" (formula "18") (inst "t=bitIndex"))
                                 (rule "replace_known_left" (formula "18") (term "0,1,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "Query_axiom_for_get_int__in_BitSet" (formula "18") (term "0,0,0") (inst "get_sk=get_sk_0") (inst "#p0=x_1") (inst "#self=b") (inst "#res=x") (ifseqformula "13"))
                                 (rule "eqSymm" (formula "18") (term "0,1"))
                                 (rule "inEqSimp_contradInEq0" (formula "19") (term "1") (ifseqformula "14"))
                                 (rule "qeq_literals" (formula "19") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "19"))
                                 (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "19") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "19"))
                                 (rule "applyEqRigid" (formula "18") (term "1,0,1") (ifseqformula "19"))
                                 (rule "boxToDiamond" (formula "18") (term "1"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "notLeft" (formula "18"))
                                 (rule "methodBodyExpand" (formula "30") (term "1") (newnames "heapBefore_get_0,savedHeapBefore_get_0"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "ifUnfold" (formula "30") (term "1") (inst "#boolv=x_2"))
                                 (rule "variableDeclaration" (formula "30") (term "1") (newnames "x_22"))
                                 (rule "less_than_comparison_simple" (formula "30") (term "1"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,1,0"))
                                 (rule "mul_literals" (formula "30") (term "1,0,0,0,0,1,0"))
                                 (rule "add_literals" (formula "30") (term "0,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,1,0"))
                                 (rule "mul_literals" (formula "30") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0,1,0") (ifseqformula "17"))
                                 (rule "qeq_literals" (formula "30") (term "0,0,0,1,0"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "ifSplit" (formula "30"))
                                 (branch "if x_22 true"
                                     (builtin "One Step Simplification" (formula "31"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if x_22 false"
                                     (builtin "One Step Simplification" (formula "31"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                     (builtin "Use Operation Contract" (formula "30") (newnames "heapBefore_checkInvariants_0,exc_1,heapAfter_checkInvariants,anon_heap_checkInvariants") (contract "BitSet[BitSet::checkInvariants()].JML exceptional_behavior operation contract.0#BitSet[BitSet::checkInvariants()].JML normal_behavior operation contract.0"))
                                    (branch "Post (checkInvariants)"
                                        (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "35")) (ifInst ""  (formula "3")) (ifInst ""  (formula "35")) (ifInst ""  (formula "3")))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "andLeft" (formula "31"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "typeEqDerived" (formula "33") (term "0,0,0,1,1,0") (ifseqformula "32"))
                                       (rule "typeEqDerived" (formula "33") (term "0,1,1,1,1,0") (ifseqformula "32"))
                                       (rule "typeEqDerived" (formula "33") (term "0,0,1,1,1,0") (ifseqformula "32"))
                                        (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "32")) (ifInst ""  (formula "32")))
                                       (rule "notLeft" (formula "33"))
                                       (rule "orRight" (formula "33"))
                                       (rule "notRight" (formula "33"))
                                       (rule "notRight" (formula "34"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "translateJavaSubInt" (formula "3") (term "0,2,0,0,1"))
                                       (rule "variableDeclarationAssign" (formula "36") (term "1"))
                                       (rule "variableDeclaration" (formula "36") (term "1") (newnames "wordIndex_1"))
                                       (rule "applyEq" (formula "3") (term "0,0,2,0,0,1") (ifseqformula "6"))
                                       (rule "applyEq" (formula "1") (term "0") (ifseqformula "6"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "6"))
                                       (rule "inEqSimp_homoInEq0" (formula "2"))
                                       (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "1,0"))
                                       (rule "times_zero_1" (formula "2") (term "0"))
                                       (rule "qeq_literals" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "5"))
                                       (rule "inEqSimp_contradEq7" (formula "2") (term "0") (ifseqformula "10"))
                                       (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,0"))
                                       (rule "leq_literals" (formula "2") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "9"))
                                       (rule "leq_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "expand_subJint" (formula "33") (term "0,2,0"))
                                       (rule "polySimp_elimSub" (formula "33") (term "0,0,2,0"))
                                       (rule "mul_literals" (formula "33") (term "1,0,0,2,0"))
                                       (rule "polySimp_addComm0" (formula "33") (term "0,0,2,0"))
                                       (rule "expand_moduloInteger" (formula "33") (term "0,2,0"))
                                       (rule "replace_int_HALFRANGE" (formula "33") (term "0,0,1,0,2,0"))
                                       (rule "replace_int_RANGE" (formula "33") (term "1,1,0,2,0"))
                                       (rule "replace_int_MIN" (formula "33") (term "0,0,2,0"))
                                       (rule "polySimp_addAssoc" (formula "33") (term "0,1,0,2,0"))
                                       (rule "add_literals" (formula "33") (term "0,0,1,0,2,0"))
                                       (rule "mod_axiom" (formula "33") (term "1,0,2,0"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,2,0"))
                                       (rule "polySimp_addAssoc" (formula "33") (term "0,2,0"))
                                       (rule "polySimp_addAssoc" (formula "33") (term "0,0,2,0"))
                                       (rule "add_literals" (formula "33") (term "0,0,0,2,0"))
                                       (rule "applyEq" (formula "33") (term "0,1,0,2,0") (ifseqformula "10"))
                                       (rule "mul_literals" (formula "33") (term "1,0,2,0"))
                                       (rule "add_zero_right" (formula "33") (term "0,2,0"))
                                        (builtin "Use Operation Contract" (formula "33") (newnames "heapBefore_wordIndex_0,result_wordIndex_0,exc_2") (contract "BitSet[BitSet::wordIndex(int)].JML normal_behavior operation contract.0"))
                                       (branch "Post (wordIndex)"
                                           (builtin "One Step Simplification" (formula "33"))
                                          (rule "expand_inInt" (formula "33") (term "1,0"))
                                          (rule "replace_int_MAX" (formula "33") (term "1,0,1,0"))
                                          (rule "replace_int_MIN" (formula "33") (term "0,1,1,0"))
                                          (rule "andLeft" (formula "33"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "33"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "33"))
                                          (rule "translateJavaDivInt" (formula "36") (term "1,1"))
                                          (rule "eqSymm" (formula "36") (term "1"))
                                          (rule "inEqSimp_commuteLeq" (formula "34"))
                                          (rule "assignment" (formula "38") (term "1"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "inEqSimp_contradEq7" (formula "36") (term "0,0") (ifseqformula "17"))
                                          (rule "add_zero_left" (formula "36") (term "0,0,0,0"))
                                          (rule "mul_literals" (formula "36") (term "0,0,0,0"))
                                          (rule "leq_literals" (formula "36") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "inEqSimp_contradEq7" (formula "35") (term "0") (ifseqformula "17"))
                                          (rule "add_zero_left" (formula "35") (term "0,0,0"))
                                          (rule "mul_literals" (formula "35") (term "0,0,0"))
                                          (rule "leq_literals" (formula "35") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "true_left" (formula "35"))
                                          (rule "expand_divJint" (formula "35") (term "0"))
                                          (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "26"))
                                          (rule "expand_moduloInteger" (formula "35") (term "0"))
                                          (rule "replace_int_HALFRANGE" (formula "35") (term "0,0,1,0"))
                                          (rule "replace_int_RANGE" (formula "35") (term "1,1,0"))
                                          (rule "replace_int_MIN" (formula "35") (term "0,0"))
                                          (rule "polySimp_homoEq" (formula "35"))
                                          (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                                          (rule "mul_literals" (formula "35") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "35") (term "0"))
                                          (rule "polySimp_addComm0" (formula "35") (term "0,0"))
                                          (rule "mod_axiom" (formula "35") (term "0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "35") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "0,1,0"))
                                          (rule "mul_literals" (formula "35") (term "0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "35") (term "0"))
                                          (rule "polySimp_addAssoc" (formula "35") (term "0,0"))
                                          (rule "polySimp_addAssoc" (formula "35") (term "0,0,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,0"))
                                          (rule "add_zero_left" (formula "35") (term "0,0,0"))
                                          (rule "applyEq" (formula "35") (term "0,1,0,0") (ifseqformula "27"))
                                          (rule "mul_literals" (formula "35") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "35") (term "0,0"))
                                          (rule "polySimp_sepPosMonomial" (formula "35"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1"))
                                          (rule "applyEq" (formula "34") (term "0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "35"))
                                          (rule "applyEq" (formula "33") (term "0") (ifseqformula "35"))
                                          (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "34") (term "0"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "inEqSimp_subsumption0" (formula "33") (ifseqformula "23"))
                                          (rule "leq_literals" (formula "33") (term "0"))
                                           (builtin "One Step Simplification" (formula "33"))
                                          (rule "true_left" (formula "33"))
                                          (rule "returnUnfold" (formula "35") (term "1") (inst "#v0=x_2"))
                                          (rule "variableDeclarationAssign" (formula "35") (term "1"))
                                          (rule "variableDeclaration" (formula "35") (term "1") (newnames "x_23"))
                                          (rule "compound_assignment_3_nonsimple" (formula "35") (term "1"))
                                          (rule "ifElseUnfold" (formula "35") (term "1") (inst "#boolv=x_24"))
                                          (rule "variableDeclaration" (formula "35") (term "1") (newnames "x_24"))
                                          (rule "compound_assignment_2" (formula "35") (term "1") (inst "#v=x_25"))
                                          (rule "variableDeclarationAssign" (formula "35") (term "1"))
                                          (rule "variableDeclaration" (formula "35") (term "1") (newnames "x_25"))
                                          (rule "remove_parentheses_right" (formula "35") (term "1"))
                                          (rule "compound_less_than_comparison_2" (formula "35") (term "1") (inst "#v1=x_27") (inst "#v0=x_26"))
                                          (rule "variableDeclarationAssign" (formula "35") (term "1"))
                                          (rule "variableDeclaration" (formula "35") (term "1") (newnames "x_26"))
                                          (rule "assignment" (formula "35") (term "1"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "variableDeclarationAssign" (formula "35") (term "1"))
                                          (rule "variableDeclaration" (formula "35") (term "1") (newnames "x_27"))
                                          (rule "assignment_read_attribute_this" (formula "35") (term "1"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "pullOutSelect" (formula "35") (term "0,1,0") (inst "selectSK=BitSet_wordsInUse_0"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")) (ifInst ""  (formula "13")))
                                          (rule "applyEqReverse" (formula "36") (term "0,1,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "applyEq" (formula "35") (term "0,1,0") (ifseqformula "3"))
                                          (rule "less_than_comparison_simple" (formula "35") (term "1"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,1,0"))
                                          (rule "polySimp_addComm1" (formula "35") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "0,0,0,1,0"))
                                          (rule "inEqSimp_contradInEq0" (formula "35") (term "0,0,1,0") (ifseqformula "2"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "0,0,0,1,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,0,0,1,0"))
                                          (rule "add_literals" (formula "35") (term "1,1,0,0,0,0,1,0"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,0,0,1,0"))
                                          (rule "add_literals" (formula "35") (term "0,0,0,0,1,0"))
                                          (rule "leq_literals" (formula "35") (term "0,0,0,1,0"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "compound_assignment_1_new" (formula "35") (term "1"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "ifElseSplit" (formula "35"))
                                          (branch "if x_24 true"
                                              (builtin "One Step Simplification" (formula "36"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "assignment" (formula "35") (term "1"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "methodCallReturn" (formula "35") (term "1"))
                                             (rule "assignment" (formula "35") (term "1"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "methodCallEmpty" (formula "35") (term "1"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "emptyModality" (formula "35") (term "1"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "closeTrue" (formula "35"))
                                          )
                                          (branch "if x_24 false"
                                              (builtin "One Step Simplification" (formula "36"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "Exceptional Post (wordIndex)"
                                           (builtin "One Step Simplification" (formula "33"))
                                          (rule "andLeft" (formula "33"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "33"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "notLeft" (formula "33"))
                                          (rule "close" (formula "37") (ifseqformula "36"))
                                       )
                                       (branch "Pre (wordIndex)"
                                           (builtin "One Step Simplification" (formula "33"))
                                          (rule "wellFormedAnonEQ" (formula "33") (term "0,1") (ifseqformula "31"))
                                          (rule "expand_inInt" (formula "33") (term "1,1"))
                                          (rule "replace_int_MAX" (formula "33") (term "1,0,1,1"))
                                          (rule "replace_int_MIN" (formula "33") (term "0,1,1,1"))
                                          (rule "replace_known_left" (formula "33") (term "1,0,1") (ifseqformula "30"))
                                           (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "11")) (ifInst ""  (formula "14")))
                                          (rule "inEqSimp_commuteLeq" (formula "33") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "33") (term "1"))
                                          (rule "inEqSimp_subsumption1" (formula "33") (term "1") (ifseqformula "17"))
                                          (rule "leq_literals" (formula "33") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "33"))
                                          (rule "inEqSimp_geqRight" (formula "33"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "18"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                    (branch "Exceptional Post (checkInvariants)"
                                        (builtin "One Step Simplification" (formula "32"))
                                        (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "35")) (ifInst ""  (formula "3")) (ifInst ""  (formula "35")) (ifInst ""  (formula "3")))
                                       (rule "andLeft" (formula "31"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "andLeft" (formula "32"))
                                       (rule "andLeft" (formula "34"))
                                       (rule "notLeft" (formula "32"))
                                       (rule "translateJavaSubInt" (formula "34") (term "0,2,0,0,1,0,0"))
                                       (rule "translateJavaSubInt" (formula "33") (term "0,2,0,0,1,0,0,0"))
                                       (rule "replace_known_right" (formula "33") (term "0,0,1") (ifseqformula "35"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "replace_known_right" (formula "34") (term "1") (ifseqformula "35"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "notLeft" (formula "34"))
                                       (rule "inEqSimp_ltToLeq" (formula "33") (term "1,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1,1,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "33") (term "0,1,0,1"))
                                       (rule "mul_literals" (formula "33") (term "1,0,0,0,1,0,1"))
                                       (rule "add_literals" (formula "33") (term "0,0,0,1,0,1"))
                                       (rule "applyEq" (formula "34") (term "0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,0,1") (ifseqformula "3"))
                                       (rule "applyEq" (formula "33") (term "0,0,0,1,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "34") (term "0,1,1") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq0" (formula "34") (term "1,1"))
                                       (rule "polySimp_pullOutFactor1" (formula "34") (term "0,1,1"))
                                       (rule "add_literals" (formula "34") (term "1,0,1,1"))
                                       (rule "times_zero_1" (formula "34") (term "0,1,1"))
                                       (rule "qeq_literals" (formula "34") (term "1,1"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "applyEq" (formula "33") (term "0,0,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "33") (term "0,0,2,0,0,1,0,0,0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "33") (term "0,1,0,1,0") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq0" (formula "33") (term "1,0,1,0"))
                                       (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0,1,0"))
                                       (rule "add_literals" (formula "33") (term "1,0,1,0,1,0"))
                                       (rule "times_zero_1" (formula "33") (term "0,1,0,1,0"))
                                       (rule "qeq_literals" (formula "33") (term "1,0,1,0"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "applyEq" (formula "34") (term "0,0,2,0,0,1,0") (ifseqformula "3"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,1,0,1"))
                                       (rule "mul_literals" (formula "33") (term "1,0,1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "33") (term "1,1,1,0,1"))
                                       (rule "polySimp_rightDist" (formula "33") (term "1,1,1,0,1"))
                                       (rule "mul_literals" (formula "33") (term "0,1,1,1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1,1,0,1"))
                                       (rule "polySimp_elimOne" (formula "33") (term "1,1,1,1,0,1"))
                                       (rule "inEqSimp_contradEq7" (formula "34") (term "0,0") (ifseqformula "8"))
                                       (rule "mul_literals" (formula "34") (term "1,0,0,0,0"))
                                       (rule "add_literals" (formula "34") (term "0,0,0,0"))
                                       (rule "leq_literals" (formula "34") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "inEqSimp_contradEq7" (formula "33") (term "0,0,0,0") (ifseqformula "8"))
                                       (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "33") (term "0,0,0,0,0,0"))
                                       (rule "leq_literals" (formula "33") (term "0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "inEqSimp_subsumption1" (formula "33") (term "0,1,0") (ifseqformula "8"))
                                       (rule "leq_literals" (formula "33") (term "0,0,1,0"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "inEqSimp_subsumption1" (formula "34") (term "1") (ifseqformula "8"))
                                       (rule "leq_literals" (formula "34") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "notRight" (formula "34"))
                                       (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "andLeft" (formula "34"))
                                       (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=java_lang_Object_created__0"))
                                       (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "32"))
                                        (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "37")))
                                       (rule "ifthenelse_negated" (formula "33") (term "0"))
                                       (rule "applyEqRigid" (formula "33") (term "1") (ifseqformula "34"))
                                       (rule "ifEqualsTRUE" (formula "33"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "pullOutSelect" (formula "35") (term "1,1,1,1") (inst "selectSK=BitSet_wordsInUse_0"))
                                       (rule "applyEq" (formula "36") (term "0,0,1") (ifseqformula "35"))
                                       (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "32"))
                                        (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "41")) (ifInst ""  (formula "13")))
                                       (rule "applyEqReverse" (formula "36") (term "1,1,1,1") (ifseqformula "35"))
                                       (rule "applyEqReverse" (formula "36") (term "0,0,1") (ifseqformula "35"))
                                       (rule "hideAuxiliaryEq" (formula "35"))
                                       (rule "applyEq" (formula "35") (term "0,0,1") (ifseqformula "4"))
                                       (rule "applyEq" (formula "35") (term "1,1,1,1") (ifseqformula "4"))
                                       (rule "inEqSimp_contradInEq1" (formula "35") (term "0,1") (ifseqformula "9"))
                                       (rule "qeq_literals" (formula "35") (term "0,0,1"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "pullOutSelect" (formula "35") (term "0,0,1") (inst "selectSK=BitSet_words_0"))
                                       (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "32"))
                                        (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "41")) (ifInst ""  (formula "13")))
                                       (rule "applyEqReverse" (formula "36") (term "0,0,1") (ifseqformula "35"))
                                       (rule "hideAuxiliaryEq" (formula "35"))
                                       (rule "inEqSimp_homoInEq0" (formula "35") (term "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,1"))
                                       (rule "add_literals" (formula "35") (term "1,1,0,1"))
                                       (rule "times_zero_1" (formula "35") (term "1,0,1"))
                                       (rule "add_literals" (formula "35") (term "0,1"))
                                       (rule "qeq_literals" (formula "35") (term "1"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "notLeft" (formula "35"))
                                       (rule "replace_known_right" (formula "35") (term "1") (ifseqformula "36"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "instanceof_not_compatible_5" (formula "36") (ifseqformula "35"))
                                       (rule "expand_subJint" (formula "1") (term "0,2,0"))
                                       (rule "polySimp_elimSub" (formula "1") (term "0,0,2,0"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0,2,0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0,0,2,0"))
                                       (rule "hideAuxiliaryEqConcrete" (formula "34"))
                                       (rule "expand_moduloInteger" (formula "1") (term "0,2,0"))
                                       (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0,2,0"))
                                       (rule "replace_int_MIN" (formula "1") (term "0,0,2,0"))
                                       (rule "replace_int_RANGE" (formula "1") (term "1,1,0,2,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,2,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,1,0,2,0"))
                                       (rule "mod_axiom" (formula "1") (term "1,0,2,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,2,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,2,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,2,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,2,0"))
                                       (rule "applyEq" (formula "1") (term "0,1,0,2,0") (ifseqformula "11"))
                                       (rule "times_zero_2" (formula "1") (term "1,0,2,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,2,0"))
                                       (rule "close" (formula "37") (ifseqformula "1"))
                                    )
                                    (branch "Pre (checkInvariants)"
                                        (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "33")) (ifInst ""  (formula "3")) (ifInst ""  (formula "33")) (ifInst ""  (formula "3")) (ifInst ""  (formula "11")))
                                       (rule "orRight" (formula "30"))
                                       (rule "orRight" (formula "30"))
                                       (rule "notRight" (formula "31"))
                                       (rule "notRight" (formula "31"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "translateJavaSubInt" (formula "33") (term "0,2,0,0,1,0"))
                                       (rule "translateJavaSubInt" (formula "1") (term "0,2,0,0,1"))
                                       (rule "replace_known_left" (formula "33") (term "0,1") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "1")) (ifInst ""  (formula "3")))
                                       (rule "closeTrue" (formula "33"))
                                    )
                                 )
                              )
                              (branch "if x_18 false"
                                  (builtin "One Step Simplification" (formula "29"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "4"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "20"))
                                 (rule "leq_literals" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "remove_parentheses_right" (formula "29") (term "1"))
                                 (rule "compound_inequality_comparison_1" (formula "29") (term "1") (inst "#v0=x_18"))
                                 (rule "variableDeclarationAssign" (formula "29") (term "1"))
                                 (rule "variableDeclaration" (formula "29") (term "1") (newnames "x_22"))
                                 (rule "remove_parentheses_right" (formula "29") (term "1"))
                                 (rule "compound_binary_AND_2" (formula "29") (term "1") (inst "#v1=x_24") (inst "#v0=x_23"))
                                 (rule "variableDeclarationAssign" (formula "29") (term "1"))
                                 (rule "variableDeclaration" (formula "29") (term "1") (newnames "x_23"))
                                 (rule "eval_order_array_access4" (formula "29") (term "1") (inst "#v0=x_arr"))
                                 (rule "variableDeclarationAssign" (formula "29") (term "1"))
                                 (rule "variableDeclaration" (formula "29") (term "1") (newnames "x_arr_4"))
                                 (rule "assignment_read_attribute_this" (formula "29") (term "1"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "assignment_array2" (formula "29") (term "1"))
                                 (branch "Normal Execution (x_arr_4 != null)"
                                     (builtin "One Step Simplification" (formula "30"))
                                     (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "28")))
                                    (rule "orRight" (formula "29"))
                                    (rule "inEqSimp_ltRight" (formula "30"))
                                    (rule "times_zero_1" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "29"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "variableDeclarationAssign" (formula "30") (term "1"))
                                    (rule "variableDeclaration" (formula "30") (term "1") (newnames "x_24"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "remove_parentheses_right" (formula "29") (term "1"))
                                    (rule "assignmentShiftLeftLong" (formula "29") (term "1"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "translateJavaShiftLeftLong" (formula "29") (term "0,1,0"))
                                    (rule "javaShiftLeftLongDef" (formula "29") (term "0,1,0"))
                                    (rule "shiftLeftDef" (formula "29") (term "0,0,1,0"))
                                    (rule "polySimp_elimNeg" (formula "29") (term "1,1,0,0,1,0"))
                                    (rule "shiftLeftPositiveShiftDef" (formula "29") (term "2,0,0,1,0"))
                                    (rule "polySimp_elimOneLeft0" (formula "29") (term "2,0,0,1,0"))
                                    (rule "shiftRightPositiveShiftDef" (formula "29") (term "1,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,0,1,0"))
                                    (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,1,0"))
                                    (rule "add_literals" (formula "29") (term "0,0,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,1,0"))
                                    (rule "mul_literals" (formula "29") (term "1,0,0,0,1,0"))
                                    (rule "expand_moduloLong" (formula "29") (term "0,1,0"))
                                    (rule "replace_long_RANGE" (formula "29") (term "1,1,0,1,0"))
                                    (rule "replace_long_MIN" (formula "29") (term "0,0,1,0"))
                                    (rule "replace_long_HALFRANGE" (formula "29") (term "0,0,1,0,1,0"))
                                    (rule "assignmentBitwiseAndLong3" (formula "29") (term "1"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "translateJavaBitwiseAndLong" (formula "29") (term "0,1,0"))
                                    (rule "andJLongDef" (formula "29") (term "0,1,0"))
                                    (rule "expand_moduloLong" (formula "29") (term "0,1,0"))
                                    (rule "replace_long_MIN" (formula "29") (term "0,0,1,0"))
                                    (rule "replace_long_RANGE" (formula "29") (term "1,1,0,1,0"))
                                    (rule "replace_long_HALFRANGE" (formula "29") (term "0,0,1,0,1,0"))
                                    (rule "inequality_comparison_simple" (formula "29") (term "1"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "blockEmpty" (formula "29") (term "1"))
                                    (rule "polySimp_sepPosMonomial" (formula "29") (term "0,0,1,0"))
                                    (rule "mul_literals" (formula "29") (term "1,0,0,1,0"))
                                    (rule "methodCallReturn" (formula "29") (term "1"))
                                    (rule "assignment" (formula "29") (term "1"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "methodCallEmpty" (formula "29") (term "1"))
                                    (rule "tryEmpty" (formula "29") (term "1"))
                                    (rule "emptyModality" (formula "29") (term "1"))
                                     (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "17")))
                                    (rule "eqSymm" (formula "29"))
                                    (rule "mod_axiom" (formula "29") (term "0,0,1,0,1,1,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0,1,0,1,1,1,0,0,0,0"))
                                    (rule "inEqSimp_homoInEq0" (formula "29") (term "0,1,0,1,1,1,0,0,0,0"))
                                    (rule "eqSymm" (formula "29"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,1,1,1,0,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,1,1,1,0,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,1,0,1,1,1,0,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "0,1,0,0,1,0,1,1,1,0,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,1,1,1,0,0,0,1"))
                                    (rule "applyEq" (formula "29") (term "0,1,0,0,1,0,1,1,1,0,0,0,1") (ifseqformula "18"))
                                    (rule "polySimp_addComm1" (formula "29") (term "0,0,1,0,1,1,1,0,0,0,1"))
                                    (rule "mod_axiom" (formula "29") (term "1,2,1,0,1,1,1,0,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,1,2,1,0,1,1,1,0,0,0,1"))
                                    (rule "applyEq" (formula "29") (term "0,1,1,2,1,0,1,1,1,0,0,0,1") (ifseqformula "18"))
                                    (rule "polySimp_addComm0" (formula "29") (term "1,2,1,0,1,1,1,0,0,0,1"))
                                    (rule "mod_axiom" (formula "29") (term "0,1,1,1,1,0,1,1,1,0,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,1,1,1,0,1,1,1,0,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,1,1,1,0,1,1,1,0,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "29") (term "1,1,1,1,0,1,1,1,0,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,1,1,0,1,1,1,0,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "0,1,1,1,1,0,1,1,1,0,0,0,1"))
                                    (rule "applyEq" (formula "29") (term "0,1,1,1,1,1,0,1,1,1,0,0,0,1") (ifseqformula "18"))
                                    (rule "polySimp_addComm0" (formula "29") (term "1,1,1,1,0,1,1,1,0,0,0,1"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "29") (term "0,1,0,1,1,1,0,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "0,0,1,0,1,1,1,0,0,0,1"))
                                    (rule "eqSymm" (formula "29"))
                                    (rule "polySimp_elimOne" (formula "29") (term "0,0,1,0,1,1,1,0,0,0,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "29") (term "0,1,0,1,1,1,0,0,0,0") (ifseqformula "20"))
                                    (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0,1,0,1,1,1,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,1,0,1,1,1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,1,0,1,1,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "29") (term "0,1,0,0,0,1,0,1,1,1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,1,0,1,1,1,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1,0,1,1,1,0,0,0,0"))
                                    (rule "polySimp_addComm0" (formula "29") (term "0,0,0,0,1,0,1,1,1,0,0,0,0"))
                                    (rule "polySimp_pullOutFactor0b" (formula "29") (term "0,0,0,1,0,1,1,1,0,0,0,0"))
                                    (rule "add_literals" (formula "29") (term "1,1,0,0,0,1,0,1,1,1,0,0,0,0"))
                                    (rule "times_zero_1" (formula "29") (term "1,0,0,0,1,0,1,1,1,0,0,0,0"))
                                    (rule "add_literals" (formula "29") (term "0,0,0,1,0,1,1,1,0,0,0,0"))
                                    (rule "leq_literals" (formula "29") (term "0,0,1,0,1,1,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "eqSymm" (formula "29"))
                                    (rule "mod_axiom" (formula "29") (term "1,1,1,0,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,1,0,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "29") (term "1,1,0,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "29") (term "0,1,1,0,0,0,1"))
                                    (rule "add_literals" (formula "29") (term "0,0,1,1,0,0,0,1"))
                                    (rule "add_zero_left" (formula "29") (term "0,1,1,0,0,0,1"))
                                    (rule "Class_invariant_axiom_for_BitSet" (formula "17") (inst "x=x_25") (inst "x_0=x_0") (inst "i=i") (ifseqformula "11"))
                                    (rule "expand_inInt" (formula "17") (term "1,0,0,1"))
                                    (rule "expand_inInt" (formula "17") (term "1,0,0,1,0"))
                                    (rule "expand_inInt" (formula "17") (term "1,0,0,1,0,0"))
                                    (rule "replace_int_MAX" (formula "17") (term "1,0,1,0,0,1"))
                                    (rule "replace_int_MIN" (formula "17") (term "0,1,1,0,0,1"))
                                    (rule "replace_int_MAX" (formula "17") (term "1,0,1,0,0,1,0"))
                                    (rule "replace_int_MIN" (formula "17") (term "0,1,1,0,0,1,0"))
                                    (rule "replace_int_MAX" (formula "17") (term "1,0,1,0,0,1,0,0"))
                                    (rule "replace_int_MIN" (formula "17") (term "0,1,1,0,0,1,0,0"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "andLeft" (formula "18"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "eqSymm" (formula "21") (term "1,0"))
                                    (rule "translateJavaSubInt" (formula "19") (term "0,2,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "20") (term "1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "17"))
                                    (rule "applyEq" (formula "20") (term "1,0,0,0,0") (ifseqformula "2"))
                                    (rule "applyEq" (formula "17") (term "0") (ifseqformula "2"))
                                    (rule "applyEq" (formula "18") (term "0") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq0" (formula "18"))
                                    (rule "polySimp_pullOutFactor1" (formula "18") (term "0"))
                                    (rule "add_literals" (formula "18") (term "1,0"))
                                    (rule "times_zero_1" (formula "18") (term "0"))
                                    (rule "qeq_literals" (formula "18"))
                                    (rule "true_left" (formula "18"))
                                    (rule "applyEq" (formula "18") (term "0,0,0") (ifseqformula "2"))
                                    (rule "applyEq" (formula "18") (term "0,0,2,0,0,1") (ifseqformula "2"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0"))
                                    (rule "inEqSimp_contradEq7" (formula "18") (term "0,0") (ifseqformula "6"))
                                    (rule "mul_literals" (formula "18") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "18") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "18") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "notLeft" (formula "18"))
                                    (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "6"))
                                    (rule "leq_literals" (formula "17") (term "0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "true_left" (formula "17"))
                                    (rule "nnf_imp2or" (formula "19") (term "0"))
                                    (rule "nnf_imp2or" (formula "18") (term "0"))
                                    (rule "expand_subJint" (formula "28") (term "0,2,0"))
                                    (rule "polySimp_elimSub" (formula "28") (term "0,0,2,0"))
                                    (rule "mul_literals" (formula "28") (term "1,0,0,2,0"))
                                    (rule "polySimp_addComm0" (formula "28") (term "0,0,2,0"))
                                    (rule "nnf_imp2or" (formula "17") (term "0"))
                                    (rule "expand_moduloInteger" (formula "28") (term "0,2,0"))
                                    (rule "replace_int_RANGE" (formula "28") (term "1,1,0,2,0"))
                                    (rule "replace_int_HALFRANGE" (formula "28") (term "0,0,1,0,2,0"))
                                    (rule "replace_int_MIN" (formula "28") (term "0,0,2,0"))
                                    (rule "polySimp_addAssoc" (formula "28") (term "0,1,0,2,0"))
                                    (rule "add_literals" (formula "28") (term "0,0,1,0,2,0"))
                                    (rule "mod_axiom" (formula "28") (term "1,0,2,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,2,0"))
                                    (rule "polySimp_addAssoc" (formula "28") (term "0,2,0"))
                                    (rule "polySimp_addAssoc" (formula "28") (term "0,0,2,0"))
                                    (rule "add_literals" (formula "28") (term "0,0,0,2,0"))
                                    (rule "applyEq" (formula "28") (term "0,1,0,2,0") (ifseqformula "8"))
                                    (rule "mul_literals" (formula "28") (term "1,0,2,0"))
                                    (rule "add_zero_right" (formula "28") (term "0,2,0"))
                                    (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                    (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0"))
                                    (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "18") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                    (rule "mul_literals" (formula "18") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                    (rule "nnf_notAnd" (formula "19") (term "1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "19") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "19") (term "1,0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "19") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "19") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "19") (term "1,0,0,1,1,0,0"))
                                    (rule "add_literals" (formula "19") (term "0,0,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "19") (term "1,1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "18") (term "1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "18") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "18") (term "1,0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "18") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "18") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "18") (term "1,0,0,1,1,0,0"))
                                    (rule "add_literals" (formula "18") (term "0,0,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "18") (term "1,1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "17") (term "0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "true_left" (formula "17"))
                                    (rule "commute_or" (formula "18") (term "1,0,0"))
                                    (rule "commute_or" (formula "17") (term "1,0,0"))
                                    (rule "shift_paren_or" (formula "18") (term "0,0"))
                                    (rule "commute_or_2" (formula "18") (term "0"))
                                    (rule "inEqSimp_or_subsumption3" (formula "18") (term "0"))
                                    (rule "qeq_literals" (formula "18") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "shift_paren_or" (formula "17") (term "0,0"))
                                    (rule "commute_or_2" (formula "17") (term "0"))
                                    (rule "commute_or_2" (formula "17") (term "0,0"))
                                    (rule "commute_or" (formula "17") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "17") (term "0,0"))
                                    (rule "inEqSimp_or_subsumption1" (formula "17") (term "0,0"))
                                    (rule "qeq_literals" (formula "17") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "div_axiom" (formula "30") (term "0,1,1,1,0,0,0,1") (inst "quotient=quotient_4"))
                                    (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                                    (rule "qeq_literals" (formula "1") (term "0,1,1"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "equal_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                                    (rule "add_literals" (formula "3") (term "0,0,1"))
                                    (rule "polySimp_addComm1" (formula "3") (term "1"))
                                    (rule "add_literals" (formula "3") (term "0,1"))
                                    (rule "inEqSimp_homoInEq0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "inEqSimp_homoInEq1" (formula "3"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                    (rule "polySimp_addComm1" (formula "3") (term "0"))
                                    (rule "applyEq" (formula "33") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
                                    (rule "polySimp_addComm0" (formula "33") (term "1,1,0,0,0,1"))
                                    (rule "mod_axiom" (formula "33") (term "0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0,1"))
                                    (rule "polySimp_homoEq" (formula "33") (term "0,1"))
                                    (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "33") (term "0,1,0,0,1"))
                                    (rule "mul_literals" (formula "33") (term "0,0,1,0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "33") (term "0,0,1"))
                                    (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,1"))
                                    (rule "add_literals" (formula "33") (term "0,0,0,0,1"))
                                    (rule "add_zero_left" (formula "33") (term "0,0,0,1"))
                                    (rule "polySimp_sepPosMonomial" (formula "33") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1"))
                                    (rule "polySimp_elimOne" (formula "33") (term "1,0,1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                    (rule "mul_literals" (formula "2") (term "0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                    (rule "mul_literals" (formula "3") (term "0,1"))
                                    (rule "ifthenelse_split" (formula "33") (term "0"))
                                    (branch "in(bitIndex, self.iSet) TRUE"
                                       (rule "eqSymm" (formula "34"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "notRight" (formula "34"))
                                       (rule "newSym_eq" (formula "1") (inst "l=l_0") (inst "newSymDef=mul(binaryAnd(int::select(heap,
                          long[]::select(heap,
                                         self,
                                         BitSet::$words),
                          arr(quotient_2)),
              add(mul(quotient_4,
                      Z(neglit(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#))))))))))))))))))))))),
                  pow(Z(2(#)),
                      add(mul(quotient_2,
                              Z(neglit(4(6(#))))),
                          bitIndex)))),
    Z(0(#)))"))
                                       (rule "times_zero_1" (formula "1") (term "1,1"))
                                       (rule "add_zero_right" (formula "1") (term "1"))
                                       (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
                                       (rule "eqSymm" (formula "2"))
                                       (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "2"))
                                       (rule "polyDiv_pullOut" (formula "1") (term "0") (inst "polyDivCoeff=l_0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
                                       (rule "equal_literals" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "div_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "ifthenelse_to_or_left" (formula "22") (term "0,0,0"))
                                       (rule "eqSymm" (formula "22") (term "1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "eqSymm" (formula "22") (term "1,0,0,0,0"))
                                       (rule "commute_or" (formula "22") (term "0,0"))
                                       (rule "commute_or_2" (formula "22") (term "0"))
                                       (rule "commute_or" (formula "22") (term "0,1,0"))
                                       (rule "commute_or" (formula "22") (term "1,1,0"))
                                       (rule "cnf_rightDist" (formula "22") (term "0"))
                                       (rule "distr_forallAnd" (formula "22"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "commute_or_2" (formula "22") (term "0"))
                                       (rule "shift_paren_or" (formula "23") (term "0"))
                                       (rule "commute_or" (formula "22") (term "0,0"))
                                       (rule "allLeft" (formula "22") (inst "t=bitIndex"))
                                       (rule "replace_known_left" (formula "22") (term "0,1,0,0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "Query_axiom_for_get_int__in_BitSet" (formula "22") (term "0,0,0") (inst "get_sk=get_sk_0") (inst "#p0=x_1") (inst "#self=b") (inst "#res=x") (ifseqformula "16"))
                                       (rule "eqSymm" (formula "22") (term "0,1"))
                                       (rule "inEqSimp_contradInEq0" (formula "23") (term "1") (ifseqformula "17"))
                                       (rule "qeq_literals" (formula "23") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "21"))
                                       (rule "qeq_literals" (formula "23") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "applyEqRigid" (formula "22") (term "1,0,1") (ifseqformula "23"))
                                       (rule "boxToDiamond" (formula "22") (term "1"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "notLeft" (formula "22"))
                                       (rule "methodBodyExpand" (formula "34") (term "1") (newnames "heapBefore_get_0,savedHeapBefore_get_0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "ifUnfold" (formula "34") (term "1") (inst "#boolv=x_2"))
                                       (rule "variableDeclaration" (formula "34") (term "1") (newnames "x_25"))
                                       (rule "less_than_comparison_simple" (formula "34") (term "1"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,1,0"))
                                       (rule "mul_literals" (formula "34") (term "1,0,0,0,0,1,0"))
                                       (rule "add_literals" (formula "34") (term "0,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,1,0"))
                                       (rule "mul_literals" (formula "34") (term "1,0,0,1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "34") (term "0,0,1,0") (ifseqformula "21"))
                                       (rule "qeq_literals" (formula "34") (term "0,0,0,1,0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "ifSplit" (formula "34"))
                                       (branch "if x_25 true"
                                           (builtin "One Step Simplification" (formula "35"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "if x_25 false"
                                           (builtin "One Step Simplification" (formula "35"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                           (builtin "Use Operation Contract" (formula "34") (newnames "heapBefore_checkInvariants_0,exc_1,heapAfter_checkInvariants,anon_heap_checkInvariants") (contract "BitSet[BitSet::checkInvariants()].JML exceptional_behavior operation contract.0#BitSet[BitSet::checkInvariants()].JML normal_behavior operation contract.0"))
                                          (branch "Post (checkInvariants)"
                                              (builtin "One Step Simplification" (formula "36"))
                                              (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "39")) (ifInst ""  (formula "7")) (ifInst ""  (formula "39")) (ifInst ""  (formula "7")))
                                             (rule "andLeft" (formula "35"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "typeEqDerived" (formula "37") (term "0,0,0,1,1,0") (ifseqformula "36"))
                                             (rule "typeEqDerived" (formula "37") (term "0,1,1,1,1,0") (ifseqformula "36"))
                                             (rule "typeEqDerived" (formula "37") (term "0,0,1,1,1,0") (ifseqformula "36"))
                                              (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "36")) (ifInst ""  (formula "36")))
                                             (rule "notLeft" (formula "37"))
                                             (rule "orRight" (formula "37"))
                                             (rule "notRight" (formula "37"))
                                             (rule "notRight" (formula "38"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "translateJavaSubInt" (formula "3") (term "0,2,0,0,1"))
                                             (rule "variableDeclarationAssign" (formula "40") (term "1"))
                                             (rule "variableDeclaration" (formula "40") (term "1") (newnames "wordIndex_1"))
                                             (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
                                             (rule "applyEq" (formula "2") (term "0") (ifseqformula "10"))
                                             (rule "inEqSimp_homoInEq0" (formula "2"))
                                             (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
                                             (rule "add_literals" (formula "2") (term "1,0"))
                                             (rule "times_zero_1" (formula "2") (term "0"))
                                             (rule "qeq_literals" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "applyEq" (formula "2") (term "0,0,2,0,0,1") (ifseqformula "9"))
                                             (rule "inEqSimp_contradEq7" (formula "2") (term "0") (ifseqformula "13"))
                                             (rule "mul_literals" (formula "2") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "2") (term "0,0,0"))
                                             (rule "leq_literals" (formula "2") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "12"))
                                             (rule "leq_literals" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "expand_subJint" (formula "37") (term "0,2,0"))
                                             (rule "polySimp_elimSub" (formula "37") (term "0,0,2,0"))
                                             (rule "mul_literals" (formula "37") (term "1,0,0,2,0"))
                                             (rule "polySimp_addComm0" (formula "37") (term "0,0,2,0"))
                                             (rule "expand_moduloInteger" (formula "37") (term "0,2,0"))
                                             (rule "replace_int_MIN" (formula "37") (term "0,0,2,0"))
                                             (rule "replace_int_RANGE" (formula "37") (term "1,1,0,2,0"))
                                             (rule "replace_int_HALFRANGE" (formula "37") (term "0,0,1,0,2,0"))
                                             (rule "polySimp_addAssoc" (formula "37") (term "0,1,0,2,0"))
                                             (rule "add_literals" (formula "37") (term "0,0,1,0,2,0"))
                                             (rule "mod_axiom" (formula "37") (term "1,0,2,0"))
                                             (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,2,0"))
                                             (rule "polySimp_addAssoc" (formula "37") (term "0,2,0"))
                                             (rule "polySimp_addAssoc" (formula "37") (term "0,0,2,0"))
                                             (rule "add_literals" (formula "37") (term "0,0,0,2,0"))
                                             (rule "applyEq" (formula "37") (term "0,1,0,2,0") (ifseqformula "13"))
                                             (rule "mul_literals" (formula "37") (term "1,0,2,0"))
                                             (rule "add_zero_right" (formula "37") (term "0,2,0"))
                                              (builtin "Use Operation Contract" (formula "37") (newnames "heapBefore_wordIndex_0,result_wordIndex_0,exc_2") (contract "BitSet[BitSet::wordIndex(int)].JML normal_behavior operation contract.0"))
                                             (branch "Post (wordIndex)"
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "expand_inInt" (formula "37") (term "1,0"))
                                                (rule "replace_int_MAX" (formula "37") (term "1,0,1,0"))
                                                (rule "replace_int_MIN" (formula "37") (term "0,1,1,0"))
                                                (rule "andLeft" (formula "37"))
                                                (rule "andLeft" (formula "38"))
                                                (rule "andLeft" (formula "37"))
                                                (rule "andLeft" (formula "38"))
                                                (rule "andLeft" (formula "37"))
                                                (rule "eqSymm" (formula "40") (term "1"))
                                                (rule "translateJavaDivInt" (formula "40") (term "0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "38"))
                                                (rule "assignment" (formula "42") (term "1"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "inEqSimp_contradEq7" (formula "39") (term "0") (ifseqformula "21"))
                                                (rule "mul_literals" (formula "39") (term "1,0,0,0"))
                                                (rule "add_literals" (formula "39") (term "0,0,0"))
                                                (rule "leq_literals" (formula "39") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "true_left" (formula "39"))
                                                (rule "inEqSimp_contradEq7" (formula "39") (term "0,0") (ifseqformula "21"))
                                                (rule "add_zero_left" (formula "39") (term "0,0,0,0"))
                                                (rule "mul_literals" (formula "39") (term "0,0,0,0"))
                                                (rule "leq_literals" (formula "39") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "expand_divJint" (formula "39") (term "0"))
                                                (rule "applyEq" (formula "39") (term "0,0") (ifseqformula "30"))
                                                (rule "expand_moduloInteger" (formula "39") (term "0"))
                                                (rule "replace_int_HALFRANGE" (formula "39") (term "0,0,1,0"))
                                                (rule "replace_int_RANGE" (formula "39") (term "1,1,0"))
                                                (rule "replace_int_MIN" (formula "39") (term "0,0"))
                                                (rule "polySimp_homoEq" (formula "39"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1,0"))
                                                (rule "mul_literals" (formula "39") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "39") (term "0"))
                                                (rule "polySimp_addComm0" (formula "39") (term "0,0"))
                                                (rule "mod_axiom" (formula "39") (term "0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0"))
                                                (rule "polySimp_rightDist" (formula "39") (term "0,1,0"))
                                                (rule "mul_literals" (formula "39") (term "0,0,1,0"))
                                                (rule "polySimp_addComm1" (formula "39") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "39") (term "0,0"))
                                                (rule "polySimp_addAssoc" (formula "39") (term "0,0,0"))
                                                (rule "add_literals" (formula "39") (term "0,0,0,0"))
                                                (rule "add_zero_left" (formula "39") (term "0,0,0"))
                                                (rule "applyEqRigid" (formula "39") (term "0,1,0,0") (ifseqformula "31"))
                                                (rule "mul_literals" (formula "39") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "39") (term "0,0"))
                                                (rule "polySimp_sepPosMonomial" (formula "39"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1"))
                                                (rule "polySimp_elimOne" (formula "39") (term "1"))
                                                (rule "applyEq" (formula "41") (term "0,1,0") (ifseqformula "39"))
                                                (rule "applyEq" (formula "37") (term "0") (ifseqformula "39"))
                                                (rule "applyEq" (formula "38") (term "0") (ifseqformula "39"))
                                                (rule "inEqSimp_subsumption0" (formula "37") (ifseqformula "27"))
                                                (rule "leq_literals" (formula "37") (term "0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "true_left" (formula "37"))
                                                (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "20"))
                                                (rule "leq_literals" (formula "37") (term "0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "true_left" (formula "37"))
                                                (rule "returnUnfold" (formula "39") (term "1") (inst "#v0=x_2"))
                                                (rule "variableDeclarationAssign" (formula "39") (term "1"))
                                                (rule "variableDeclaration" (formula "39") (term "1") (newnames "x_26"))
                                                (rule "compound_assignment_3_nonsimple" (formula "39") (term "1"))
                                                (rule "ifElseUnfold" (formula "39") (term "1") (inst "#boolv=x_27"))
                                                (rule "variableDeclaration" (formula "39") (term "1") (newnames "x_27"))
                                                (rule "compound_assignment_2" (formula "39") (term "1") (inst "#v=x_28"))
                                                (rule "variableDeclarationAssign" (formula "39") (term "1"))
                                                (rule "variableDeclaration" (formula "39") (term "1") (newnames "x_28"))
                                                (rule "remove_parentheses_right" (formula "39") (term "1"))
                                                (rule "compound_less_than_comparison_2" (formula "39") (term "1") (inst "#v1=x_30") (inst "#v0=x_29"))
                                                (rule "variableDeclarationAssign" (formula "39") (term "1"))
                                                (rule "variableDeclaration" (formula "39") (term "1") (newnames "x_29"))
                                                (rule "assignment" (formula "39") (term "1"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "variableDeclarationAssign" (formula "39") (term "1"))
                                                (rule "variableDeclaration" (formula "39") (term "1") (newnames "x_30"))
                                                (rule "assignment_read_attribute_this" (formula "39") (term "1"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "pullOutSelect" (formula "39") (term "0,1,0") (inst "selectSK=BitSet_wordsInUse_0"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")) (ifInst ""  (formula "16")))
                                                (rule "applyEqReverse" (formula "40") (term "0,1,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "applyEq" (formula "39") (term "0,1,0") (ifseqformula "7"))
                                                (rule "less_than_comparison_simple" (formula "39") (term "1"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,1,0"))
                                                (rule "polySimp_addComm1" (formula "39") (term "0,0,0,1,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "39") (term "0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "39") (term "0,0,0,1,0"))
                                                (rule "replace_known_left" (formula "39") (term "0,0,1,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "compound_assignment_1_new" (formula "39") (term "1"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "ifElseSplit" (formula "39"))
                                                (branch "if x_27 true"
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch "if x_27 false"
                                                    (builtin "One Step Simplification" (formula "1"))
                                                    (builtin "One Step Simplification" (formula "40"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "remove_parentheses_right" (formula "39") (term "1"))
                                                   (rule "compound_inequality_comparison_1" (formula "39") (term "1") (inst "#v0=x_27"))
                                                   (rule "variableDeclarationAssign" (formula "39") (term "1"))
                                                   (rule "variableDeclaration" (formula "39") (term "1") (newnames "x_31"))
                                                   (rule "remove_parentheses_right" (formula "39") (term "1"))
                                                   (rule "compound_binary_AND_2" (formula "39") (term "1") (inst "#v1=x_33") (inst "#v0=x_32"))
                                                   (rule "variableDeclarationAssign" (formula "39") (term "1"))
                                                   (rule "variableDeclaration" (formula "39") (term "1") (newnames "x_32"))
                                                   (rule "eval_order_array_access4" (formula "39") (term "1") (inst "#v0=x_arr"))
                                                   (rule "variableDeclarationAssign" (formula "39") (term "1"))
                                                   (rule "variableDeclaration" (formula "39") (term "1") (newnames "x_arr_5"))
                                                   (rule "assignment_read_attribute_this" (formula "39") (term "1"))
                                                    (builtin "One Step Simplification" (formula "39"))
                                                   (rule "pullOutSelect" (formula "39") (term "0,1,0") (inst "selectSK=BitSet_words_0"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")) (ifInst ""  (formula "16")))
                                                   (rule "applyEqReverse" (formula "40") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "assignment_array2" (formula "39") (term "1"))
                                                   (branch "Normal Execution (x_arr_5 != null)"
                                                       (builtin "One Step Simplification" (formula "40"))
                                                       (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "43")))
                                                      (rule "orRight" (formula "39"))
                                                      (rule "inEqSimp_ltRight" (formula "40"))
                                                      (rule "times_zero_1" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_leqRight" (formula "39"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "pullOutSelect" (formula "40") (term "0,1,0") (inst "selectSK=arr_0"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "12")))
                                                      (rule "applyEqReverse" (formula "41") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "variableDeclarationAssign" (formula "40") (term "1"))
                                                      (rule "variableDeclaration" (formula "40") (term "1") (newnames "x_33"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                      (rule "mul_literals" (formula "1") (term "0,1"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                      (rule "remove_parentheses_right" (formula "39") (term "1"))
                                                      (rule "assignmentShiftLeftLong" (formula "39") (term "1"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "translateJavaShiftLeftLong" (formula "39") (term "0,1,0"))
                                                      (rule "javaShiftLeftLongDef" (formula "39") (term "0,1,0"))
                                                      (rule "shiftLeftDef" (formula "39") (term "0,0,1,0"))
                                                      (rule "polySimp_elimNeg" (formula "39") (term "1,1,0,0,1,0"))
                                                      (rule "shiftLeftPositiveShiftDef" (formula "39") (term "2,0,0,1,0"))
                                                      (rule "polySimp_elimOneLeft0" (formula "39") (term "2,0,0,1,0"))
                                                      (rule "shiftRightPositiveShiftDef" (formula "39") (term "1,0,0,1,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,0,1,0"))
                                                      (rule "times_zero_1" (formula "39") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "add_literals" (formula "39") (term "0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "39") (term "1,0,0,0,1,0"))
                                                      (rule "expand_moduloLong" (formula "39") (term "0,1,0"))
                                                      (rule "replace_long_RANGE" (formula "39") (term "1,1,0,1,0"))
                                                      (rule "replace_long_HALFRANGE" (formula "39") (term "0,0,1,0,1,0"))
                                                      (rule "replace_long_MIN" (formula "39") (term "0,0,1,0"))
                                                      (rule "assignmentBitwiseAndLong3" (formula "39") (term "1"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "translateJavaBitwiseAndLong" (formula "39") (term "0,1,0"))
                                                      (rule "andJLongDef" (formula "39") (term "0,1,0"))
                                                      (rule "expand_moduloLong" (formula "39") (term "0,1,0"))
                                                      (rule "replace_long_RANGE" (formula "39") (term "1,1,0,1,0"))
                                                      (rule "replace_long_HALFRANGE" (formula "39") (term "0,0,1,0,1,0"))
                                                      (rule "replace_long_MIN" (formula "39") (term "0,0,1,0"))
                                                      (rule "inequality_comparison_simple" (formula "39") (term "1"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "blockEmpty" (formula "39") (term "1"))
                                                      (rule "polySimp_sepPosMonomial" (formula "39") (term "0,0,1,0"))
                                                      (rule "mul_literals" (formula "39") (term "1,0,0,1,0"))
                                                      (rule "methodCallReturn" (formula "39") (term "1"))
                                                      (rule "assignment" (formula "39") (term "1"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "methodCallEmpty" (formula "39") (term "1"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "emptyModality" (formula "39") (term "1"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "mod_axiom" (formula "39") (term "0,0,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,1,0,1,1,1,0,0"))
                                                      (rule "inEqSimp_homoInEq0" (formula "39") (term "0,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "39") (term "0,1,0,0,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,1,1,1,0,0"))
                                                      (rule "applyEq" (formula "39") (term "0,1,0,0,1,0,1,1,1,0,0") (ifseqformula "26"))
                                                      (rule "polySimp_addComm1" (formula "39") (term "0,0,1,0,1,1,1,0,0"))
                                                      (rule "mod_axiom" (formula "39") (term "0,1,1,1,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "39") (term "1,0,1,1,1,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "39") (term "1,1,1,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "39") (term "1,1,1,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,1,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "39") (term "0,1,1,1,1,0,1,1,1,0,0"))
                                                      (rule "applyEq" (formula "39") (term "0,1,1,1,1,1,0,1,1,1,0,0") (ifseqformula "26"))
                                                      (rule "polySimp_addComm0" (formula "39") (term "1,1,1,1,0,1,1,1,0,0"))
                                                      (rule "mod_axiom" (formula "39") (term "1,2,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "39") (term "1,1,2,1,0,1,1,1,0,0"))
                                                      (rule "applyEq" (formula "39") (term "0,1,1,2,1,0,1,1,1,0,0") (ifseqformula "26"))
                                                      (rule "polySimp_addComm0" (formula "39") (term "1,2,1,0,1,1,1,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "39") (term "0,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "39") (term "0,0,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "39") (term "0,0,1,0,1,1,1,0,0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (term "0,1,0,1,1,1,0,0") (ifseqformula "28"))
                                                      (rule "inEqSimp_homoInEq1" (formula "39") (term "0,0,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0,1,0,1,1,1,0,0"))
                                                      (rule "mul_literals" (formula "39") (term "0,1,0,0,0,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_addComm0" (formula "39") (term "0,0,0,0,1,0,1,1,1,0,0"))
                                                      (rule "polySimp_pullOutFactor0b" (formula "39") (term "0,0,0,1,0,1,1,1,0,0"))
                                                      (rule "add_literals" (formula "39") (term "1,1,0,0,0,1,0,1,1,1,0,0"))
                                                      (rule "times_zero_1" (formula "39") (term "1,0,0,0,1,0,1,1,1,0,0"))
                                                      (rule "add_literals" (formula "39") (term "0,0,0,1,0,1,1,1,0,0"))
                                                      (rule "leq_literals" (formula "39") (term "0,0,1,0,1,1,1,0,0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "mod_axiom" (formula "39") (term "1,1,1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "39") (term "1,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "39") (term "0,1,1,0,0"))
                                                      (rule "add_literals" (formula "39") (term "0,0,1,1,0,0"))
                                                      (rule "add_zero_left" (formula "39") (term "0,1,1,0,0"))
                                                      (rule "applyEq" (formula "39") (term "0,1,1,1,0,0") (ifseqformula "3"))
                                                      (rule "polySimp_addComm0" (formula "39") (term "1,1,0,0"))
                                                      (rule "applyEq" (formula "39") (term "1,0,0") (ifseqformula "1"))
                                                      (rule "mod_axiom" (formula "39") (term "0"))
                                                      (rule "polySimp_mulLiterals" (formula "39") (term "1,0"))
                                                      (rule "polySimp_homoEq" (formula "39"))
                                                      (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "39") (term "1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0"))
                                                      (rule "polySimp_rightDist" (formula "39") (term "0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "39") (term "1,0,1,0"))
                                                      (rule "mul_literals" (formula "39") (term "0,0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "39") (term "0"))
                                                      (rule "polySimp_addAssoc" (formula "39") (term "0,0"))
                                                      (rule "add_literals" (formula "39") (term "0,0,0"))
                                                      (rule "add_zero_left" (formula "39") (term "0,0"))
                                                      (rule "polySimp_sepPosMonomial" (formula "39"))
                                                      (rule "polySimp_mulLiterals" (formula "39") (term "1"))
                                                      (rule "elimGcdEq" (formula "39") (inst "elimGcdRightDiv=l_0") (inst "elimGcdLeftDiv=div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
        mul(l_0,
            Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#))))))))))))))))))))))),
    Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#))))))))))))))))))))))") (inst "elimGcd=Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "mul_literals" (formula "39") (term "0,1,0,1,0"))
                                                      (rule "add_literals" (formula "39") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "39") (term "0,1,0,0,1"))
                                                      (rule "mul_literals" (formula "39") (term "0,1,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,0"))
                                                      (rule "polySimp_pullOutFactor0" (formula "39") (term "0,1,0"))
                                                      (rule "add_literals" (formula "39") (term "1,0,1,0"))
                                                      (rule "times_zero_1" (formula "39") (term "0,1,0"))
                                                      (rule "qeq_literals" (formula "39") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                                      (rule "polySimp_pullOutFactor0" (formula "39") (term "0,0"))
                                                      (rule "add_literals" (formula "39") (term "1,0,0"))
                                                      (rule "times_zero_1" (formula "39") (term "0,0"))
                                                      (rule "leq_literals" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                                      (rule "polySimp_pullOutFactor0" (formula "39") (term "0,0"))
                                                      (rule "add_literals" (formula "39") (term "1,0,0"))
                                                      (rule "times_zero_1" (formula "39") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "polyDiv_pullOut" (formula "39") (term "0") (inst "polyDivCoeff=l_0"))
                                                      (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,2,0"))
                                                      (rule "equal_literals" (formula "39") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "polySimp_pullOutFactor0b" (formula "39") (term "0,0,0"))
                                                      (rule "add_literals" (formula "39") (term "1,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "39") (term "1,0,0,0"))
                                                      (rule "add_literals" (formula "39") (term "0,0,0"))
                                                      (rule "div_literals" (formula "39") (term "0,0"))
                                                      (rule "add_zero_left" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "closeTrue" (formula "39"))
                                                   )
                                                   (branch "Null Reference (x_arr_5 = null)"
                                                       (builtin "One Step Simplification" (formula "40"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch "Index Out of Bounds (x_arr_5 != null, but wordIndex_1 Out of Bounds!)"
                                                       (builtin "One Step Simplification" (formula "40"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
                                                      (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "1") (term "0,0,1"))
                                                      (rule "blockThrow" (formula "40") (term "1"))
                                                       (builtin "One Step Simplification" (formula "40"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                                      (rule "mul_literals" (formula "1") (term "1,1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "7"))
                                                      (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                                      (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                                      (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0"))
                                                      (rule "leq_literals" (formula "1") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "inEqSimp_subsumption0" (formula "28") (ifseqformula "1"))
                                                      (rule "leq_literals" (formula "28") (term "0"))
                                                       (builtin "One Step Simplification" (formula "28"))
                                                      (rule "true_left" (formula "28"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "21"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                )
                                             )
                                             (branch "Exceptional Post (wordIndex)"
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "andLeft" (formula "37"))
                                                (rule "andLeft" (formula "38"))
                                                (rule "andLeft" (formula "37"))
                                                (rule "andLeft" (formula "39"))
                                                (rule "notLeft" (formula "37"))
                                                (rule "close" (formula "41") (ifseqformula "40"))
                                             )
                                             (branch "Pre (wordIndex)"
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "wellFormedAnonEQ" (formula "37") (term "0,1") (ifseqformula "35"))
                                                (rule "expand_inInt" (formula "37") (term "1,1"))
                                                (rule "replace_int_MAX" (formula "37") (term "1,0,1,1"))
                                                (rule "replace_int_MIN" (formula "37") (term "0,1,1,1"))
                                                (rule "replace_known_left" (formula "37") (term "1,0,1") (ifseqformula "34"))
                                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "14")) (ifInst ""  (formula "17")))
                                                (rule "inEqSimp_commuteLeq" (formula "37") (term "1"))
                                                (rule "inEqSimp_commuteLeq" (formula "37") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "37") (term "1") (ifseqformula "21"))
                                                (rule "leq_literals" (formula "37") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "inEqSimp_geqRight" (formula "37"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "inEqSimp_subsumption0" (formula "18") (ifseqformula "1"))
                                                (rule "leq_literals" (formula "18") (term "0"))
                                                 (builtin "One Step Simplification" (formula "18"))
                                                (rule "true_left" (formula "18"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "21"))
                                                (rule "qeq_literals" (formula "1") (term "0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                          )
                                          (branch "Exceptional Post (checkInvariants)"
                                              (builtin "One Step Simplification" (formula "36"))
                                              (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "39")) (ifInst ""  (formula "7")) (ifInst ""  (formula "39")) (ifInst ""  (formula "7")))
                                             (rule "andLeft" (formula "35"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "andLeft" (formula "38"))
                                             (rule "notLeft" (formula "36"))
                                             (rule "translateJavaSubInt" (formula "38") (term "0,2,0,0,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "37") (term "0,2,0,0,1,0,0,0"))
                                             (rule "replace_known_right" (formula "37") (term "0,0,1") (ifseqformula "39"))
                                              (builtin "One Step Simplification" (formula "37"))
                                             (rule "replace_known_right" (formula "38") (term "1") (ifseqformula "39"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "notLeft" (formula "38"))
                                             (rule "inEqSimp_ltToLeq" (formula "37") (term "1,1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,1,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "37") (term "0,1,0,1"))
                                             (rule "times_zero_1" (formula "37") (term "1,0,0,0,1,0,1"))
                                             (rule "add_literals" (formula "37") (term "0,0,0,1,0,1"))
                                             (rule "applyEq" (formula "38") (term "0,1,1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq0" (formula "38") (term "1,1"))
                                             (rule "polySimp_pullOutFactor1" (formula "38") (term "0,1,1"))
                                             (rule "add_literals" (formula "38") (term "1,0,1,1"))
                                             (rule "times_zero_1" (formula "38") (term "0,1,1"))
                                             (rule "qeq_literals" (formula "38") (term "1,1"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "applyEq" (formula "37") (term "0,1,0,1,0") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq0" (formula "37") (term "1,0,1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "37") (term "0,1,0,1,0"))
                                             (rule "add_literals" (formula "37") (term "1,0,1,0,1,0"))
                                             (rule "times_zero_1" (formula "37") (term "0,1,0,1,0"))
                                             (rule "qeq_literals" (formula "37") (term "1,0,1,0"))
                                              (builtin "One Step Simplification" (formula "37"))
                                             (rule "applyEq" (formula "37") (term "0,0,0,0,0") (ifseqformula "7"))
                                             (rule "applyEq" (formula "38") (term "0,1") (ifseqformula "7"))
                                             (rule "applyEq" (formula "37") (term "0,0,1,0") (ifseqformula "7"))
                                             (rule "applyEq" (formula "38") (term "0,0,2,0,0,1,0") (ifseqformula "7"))
                                             (rule "applyEq" (formula "37") (term "0,0,2,0,0,1,0,0,0") (ifseqformula "7"))
                                             (rule "applyEq" (formula "38") (term "0,0,0") (ifseqformula "7"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,1,0,1"))
                                             (rule "mul_literals" (formula "37") (term "1,0,1,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "37") (term "1,1,1,0,1"))
                                             (rule "polySimp_rightDist" (formula "37") (term "1,1,1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,1,0,1"))
                                             (rule "mul_literals" (formula "37") (term "0,1,1,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "37") (term "1,1,1,1,0,1"))
                                             (rule "inEqSimp_contradEq7" (formula "37") (term "0,0,0,0") (ifseqformula "11"))
                                             (rule "mul_literals" (formula "37") (term "1,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "37") (term "0,0,0,0,0,0"))
                                             (rule "leq_literals" (formula "37") (term "0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "37"))
                                             (rule "inEqSimp_contradEq7" (formula "38") (term "0,0") (ifseqformula "11"))
                                             (rule "mul_literals" (formula "38") (term "1,0,0,0,0"))
                                             (rule "add_literals" (formula "38") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "38") (term "0,0,0"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "inEqSimp_subsumption1" (formula "38") (term "1") (ifseqformula "11"))
                                             (rule "leq_literals" (formula "38") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "notRight" (formula "38"))
                                             (rule "replace_known_left" (formula "38") (term "0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "andLeft" (formula "38"))
                                             (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=java_lang_Object_created__0"))
                                             (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "36"))
                                              (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "41")))
                                             (rule "ifthenelse_negated" (formula "37") (term "0"))
                                             (rule "applyEq" (formula "37") (term "1") (ifseqformula "38"))
                                             (rule "ifEqualsTRUE" (formula "37"))
                                              (builtin "One Step Simplification" (formula "37"))
                                             (rule "pullOutSelect" (formula "39") (term "0,0,1,1") (inst "selectSK=BitSet_words_0"))
                                             (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "36"))
                                              (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "45")) (ifInst ""  (formula "16")))
                                             (rule "applyEqReverse" (formula "40") (term "0,0,1,1") (ifseqformula "39"))
                                             (rule "hideAuxiliaryEq" (formula "39"))
                                             (rule "inEqSimp_homoInEq0" (formula "39") (term "1,1"))
                                             (rule "polySimp_addComm1" (formula "39") (term "0,1,1"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,1"))
                                             (rule "polySimp_mulComm0" (formula "39") (term "1,1,1"))
                                             (rule "polySimp_rightDist" (formula "39") (term "1,1,1"))
                                             (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,1"))
                                             (rule "mul_literals" (formula "39") (term "0,1,1,1"))
                                             (rule "polySimp_elimOne" (formula "39") (term "1,1,1,1"))
                                             (rule "pullOutSelect" (formula "39") (term "0,0,1") (inst "selectSK=BitSet_wordsInUse_0"))
                                             (rule "applyEq" (formula "40") (term "0,1,1") (ifseqformula "39"))
                                             (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "36"))
                                              (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "45")) (ifInst ""  (formula "16")))
                                             (rule "applyEqReverse" (formula "40") (term "0,0,1") (ifseqformula "39"))
                                             (rule "applyEqReverse" (formula "40") (term "0,1,1") (ifseqformula "39"))
                                             (rule "hideAuxiliaryEq" (formula "39"))
                                             (rule "applyEq" (formula "39") (term "0,1,1") (ifseqformula "8"))
                                             (rule "inEqSimp_homoInEq1" (formula "39") (term "1,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,1,1"))
                                             (rule "add_literals" (formula "39") (term "1,1,0,1,1"))
                                             (rule "times_zero_1" (formula "39") (term "1,0,1,1"))
                                             (rule "add_zero_right" (formula "39") (term "0,1,1"))
                                             (rule "leq_literals" (formula "39") (term "1,1"))
                                              (builtin "One Step Simplification" (formula "39"))
                                             (rule "applyEq" (formula "39") (term "0,1") (ifseqformula "8"))
                                             (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "12"))
                                             (rule "qeq_literals" (formula "39") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "39"))
                                             (rule "notLeft" (formula "39"))
                                             (rule "replace_known_right" (formula "39") (term "1") (ifseqformula "40"))
                                              (builtin "One Step Simplification" (formula "39"))
                                             (rule "instanceof_not_compatible_5" (formula "40") (ifseqformula "39"))
                                             (rule "expand_subJint" (formula "1") (term "0,2,0"))
                                             (rule "polySimp_elimSub" (formula "1") (term "0,0,2,0"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0,2,0"))
                                             (rule "polySimp_addComm0" (formula "1") (term "0,0,2,0"))
                                             (rule "hideAuxiliaryEqConcrete" (formula "38"))
                                             (rule "expand_moduloInteger" (formula "1") (term "0,2,0"))
                                             (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0,2,0"))
                                             (rule "replace_int_RANGE" (formula "1") (term "1,1,0,2,0"))
                                             (rule "replace_int_MIN" (formula "1") (term "0,0,2,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,2,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,1,0,2,0"))
                                             (rule "mod_axiom" (formula "1") (term "1,0,2,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,2,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,2,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0,2,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0,2,0"))
                                             (rule "applyEq" (formula "1") (term "0,1,0,2,0") (ifseqformula "14"))
                                             (rule "times_zero_2" (formula "1") (term "1,0,2,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,2,0"))
                                             (rule "close" (formula "41") (ifseqformula "1"))
                                          )
                                          (branch "Pre (checkInvariants)"
                                              (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "37")) (ifInst ""  (formula "7")) (ifInst ""  (formula "37")) (ifInst ""  (formula "7")) (ifInst ""  (formula "14")))
                                             (rule "orRight" (formula "34"))
                                             (rule "orRight" (formula "34"))
                                             (rule "notRight" (formula "34"))
                                             (rule "notRight" (formula "35"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "translateJavaSubInt" (formula "37") (term "0,2,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "3") (term "0,2,0,0,1"))
                                             (rule "replace_known_left" (formula "37") (term "1,1") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "3")) (ifInst ""  (formula "1")))
                                             (rule "closeTrue" (formula "37"))
                                          )
                                       )
                                    )
                                    (branch "in(bitIndex, self.iSet) FALSE"
                                       (rule "eqSymm" (formula "34"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "ifthenelse_to_or_left" (formula "20") (term "0,0,0"))
                                       (rule "eqSymm" (formula "20") (term "1,1,0,0,0"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "eqSymm" (formula "20") (term "1,0,0,0,0"))
                                       (rule "commute_or" (formula "20") (term "0,0"))
                                       (rule "commute_or_2" (formula "20") (term "0"))
                                       (rule "commute_or" (formula "20") (term "1,1,0"))
                                       (rule "commute_or" (formula "20") (term "0,1,0"))
                                       (rule "cnf_rightDist" (formula "20") (term "0"))
                                       (rule "distr_forallAnd" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "commute_or_2" (formula "20") (term "0"))
                                       (rule "shift_paren_or" (formula "21") (term "0"))
                                       (rule "commute_or" (formula "20") (term "0,0"))
                                       (rule "div_axiom" (formula "35") (term "0,0") (inst "quotient=quotient_5"))
                                       (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                                       (rule "qeq_literals" (formula "1") (term "0,1,1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "equal_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                                       (rule "add_literals" (formula "3") (term "0,0,1"))
                                       (rule "polySimp_addComm1" (formula "3") (term "1"))
                                       (rule "add_literals" (formula "3") (term "0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "applyEq" (formula "38") (term "0,0") (ifseqformula "1"))
                                       (rule "eqSymm" (formula "38"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1"))
                                       (rule "mul_literals" (formula "2") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1"))
                                       (rule "mul_literals" (formula "3") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                       (rule "allLeft" (formula "24") (inst "t=bitIndex"))
                                       (rule "replace_known_right" (formula "24") (term "1,0,0") (ifseqformula "38"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "Query_axiom_for_get_int__in_BitSet" (formula "24") (term "0,0,0,0") (inst "get_sk=get_sk_0") (inst "#p0=x_1") (inst "#self=b") (inst "#res=x") (ifseqformula "17"))
                                       (rule "eqSymm" (formula "24") (term "0,1"))
                                       (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "22"))
                                       (rule "qeq_literals" (formula "25") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "inEqSimp_contradInEq0" (formula "25") (term "1") (ifseqformula "18"))
                                       (rule "qeq_literals" (formula "25") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "25"))
                                       (rule "notLeft" (formula "25"))
                                       (rule "apply_eq_boolean_rigid" (formula "24") (term "1,0,1") (ifseqformula "35"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "boxToDiamond" (formula "24") (term "1"))
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "notLeft" (formula "24"))
                                       (rule "methodBodyExpand" (formula "34") (term "1") (newnames "heapBefore_get_0,savedHeapBefore_get_0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "ifUnfold" (formula "34") (term "1") (inst "#boolv=x_2"))
                                       (rule "variableDeclaration" (formula "34") (term "1") (newnames "x_25"))
                                       (rule "less_than_comparison_simple" (formula "34") (term "1"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,1,0"))
                                       (rule "mul_literals" (formula "34") (term "1,0,0,0,0,1,0"))
                                       (rule "add_literals" (formula "34") (term "0,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,1,0"))
                                       (rule "mul_literals" (formula "34") (term "1,0,0,1,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "34") (term "0,0,1,0") (ifseqformula "22"))
                                       (rule "qeq_literals" (formula "34") (term "0,0,0,1,0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "ifSplit" (formula "34"))
                                       (branch "if x_25 true"
                                           (builtin "One Step Simplification" (formula "1") (userinteraction))
                                          (rule "closeFalse" (formula "1") (userinteraction))
                                       )
                                       (branch "if x_25 false"
                                           (builtin "One Step Simplification" (formula "35"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                           (builtin "Use Operation Contract" (formula "34") (newnames "heapBefore_checkInvariants_0,exc_1,heapAfter_checkInvariants,anon_heap_checkInvariants") (contract "BitSet[BitSet::checkInvariants()].JML exceptional_behavior operation contract.0#BitSet[BitSet::checkInvariants()].JML normal_behavior operation contract.0"))
                                          (branch "Post (checkInvariants)"
                                              (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "40")) (ifInst ""  (formula "8")) (ifInst ""  (formula "40")) (ifInst ""  (formula "8")) (userinteraction))
                                              (builtin "One Step Simplification" (formula "36") (userinteraction))
                                             (rule "variableDeclarationAssign" (formula "36") (term "1") (userinteraction))
                                             (rule "variableDeclaration" (formula "36") (term "1") (newnames "wordIndex_1") (userinteraction))
                                             (rule "methodCallWithAssignmentWithinClass" (formula "36") (term "1") (inst "#v0=x_2") (userinteraction))
                                             (rule "variableDeclaration" (formula "36") (term "1") (newnames "x_26") (userinteraction))
                                             (rule "variableDeclarationAssign" (formula "36") (term "1") (userinteraction))
                                             (rule "variableDeclaration" (formula "36") (term "1") (newnames "bitIndex_1") (userinteraction))
                                             (rule "assignment" (formula "36") (term "1") (userinteraction))
                                             (rule "methodBodyExpand" (formula "36") (term "1,1") (newnames "heapBefore_wordIndex_0,savedHeapBefore_wordIndex") (userinteraction))
                                             (rule "returnUnfold" (formula "36") (term "1,1,1") (inst "#v0=x_27") (userinteraction))
                                             (rule "variableDeclarationAssign" (formula "36") (term "1,1,1") (userinteraction))
                                             (rule "variableDeclaration" (formula "36") (term "1,1,1") (newnames "x_27") (userinteraction))
                                             (rule "assignmentShiftRightInt" (formula "36") (term "1,1,1") (userinteraction))
                                             (rule "methodCallReturn" (formula "36") (term "1,1,1,1") (userinteraction))
                                             (rule "assignment" (formula "36") (term "1,1,1,1") (userinteraction))
                                             (rule "methodCallEmpty" (formula "36") (term "1,1,1,1,1") (userinteraction))
                                             (rule "blockEmpty" (formula "36") (term "1,1,1,1,1") (userinteraction))
                                             (rule "assignment" (formula "36") (term "1,1,1,1,1") (userinteraction))
                                             (rule "returnUnfold" (formula "36") (term "1,1,1,1,1,1") (inst "#v0=x_2") (userinteraction))
                                             (rule "variableDeclarationAssign" (formula "36") (term "1,1,1,1,1,1") (userinteraction))
                                             (rule "variableDeclaration" (formula "36") (term "1,1,1,1,1,1") (newnames "x_28") (userinteraction))
                                             (rule "compound_assignment_3_nonsimple" (formula "36") (term "1,1,1,1,1,1") (userinteraction))
                                             (rule "ifElseUnfold" (formula "36") (term "1,1,1,1,1,1") (inst "#boolv=x_29") (userinteraction))
                                             (rule "variableDeclaration" (formula "36") (term "1,1,1,1,1,1") (newnames "x_29") (userinteraction))
                                             (rule "compound_assignment_2" (formula "36") (term "1,1,1,1,1,1") (inst "#v=x_30") (userinteraction))
                                             (rule "variableDeclarationAssign" (formula "36") (term "1,1,1,1,1,1") (userinteraction))
                                             (rule "variableDeclaration" (formula "36") (term "1,1,1,1,1,1") (newnames "x_30") (userinteraction))
                                             (rule "remove_parentheses_right" (formula "36") (term "1,1,1,1,1,1") (userinteraction))
                                             (rule "compound_less_than_comparison_2" (formula "36") (term "1,1,1,1,1,1") (inst "#v1=x_32") (inst "#v0=x_31") (userinteraction))
                                             (rule "variableDeclarationAssign" (formula "36") (term "1,1,1,1,1,1") (userinteraction))
                                             (rule "variableDeclaration" (formula "36") (term "1,1,1,1,1,1") (newnames "x_31") (userinteraction))
                                             (rule "assignment" (formula "36") (term "1,1,1,1,1,1") (userinteraction))
                                             (rule "variableDeclarationAssign" (formula "36") (term "1,1,1,1,1,1,1") (userinteraction))
                                             (rule "variableDeclaration" (formula "36") (term "1,1,1,1,1,1,1") (newnames "x_32") (userinteraction))
                                             (rule "assignment_read_attribute_this" (formula "36") (term "1,1,1,1,1,1,1") (userinteraction))
                                             (rule "less_than_comparison_simple" (formula "36") (term "1,1,1,1,1,1,1,1") (userinteraction))
                                             (rule "compound_assignment_1_new" (formula "36") (term "1,1,1,1,1,1,1,1,1") (userinteraction))
                                             (rule "ifElse" (formula "36") (term "1,1,1,1,1,1,1,1,1,1") (userinteraction))
                                             (rule "assignment" (formula "36") (term "1,1,1,1,1,1,1,1,1,1,1") (userinteraction))
                                              (builtin "One Step Simplification" (formula "36") (userinteraction))
                                             (rule "methodCallReturn" (formula "36") (term "1,1") (userinteraction))
                                             (rule "assignment" (formula "36") (term "1,1") (userinteraction))
                                             (rule "methodCallEmpty" (formula "36") (term "1,1,1") (userinteraction))
                                             (rule "emptyModality" (formula "36") (term "1,1,1") (userinteraction))
                                             (rule "remove_parentheses_right" (formula "36") (term "1,2") (userinteraction))
                                             (rule "compound_inequality_comparison_1" (formula "36") (term "1,2") (inst "#v0=x_29") (userinteraction))
                                             (rule "variableDeclarationAssign" (formula "36") (term "1,2") (userinteraction))
                                             (rule "variableDeclaration" (formula "36") (term "1,2") (newnames "x_33") (userinteraction))
                                             (rule "remove_parentheses_right" (formula "36") (term "1,2") (userinteraction))
                                             (rule "compound_binary_AND_2" (formula "36") (term "1,2") (inst "#v1=x_35") (inst "#v0=x_34") (userinteraction))
                                             (rule "variableDeclarationAssign" (formula "36") (term "1,2") (userinteraction))
                                             (rule "variableDeclaration" (formula "36") (term "1,2") (newnames "x_34") (userinteraction))
                                             (rule "eval_order_array_access4" (formula "36") (term "1,2") (inst "#v0=x_arr") (userinteraction))
                                             (rule "variableDeclarationAssign" (formula "36") (term "1,2") (userinteraction))
                                             (rule "variableDeclaration" (formula "36") (term "1,2") (newnames "x_arr_5") (userinteraction))
                                             (rule "assignment_read_attribute_this" (formula "36") (term "1,2") (userinteraction))
                                             (rule "assignment_array2" (formula "36") (term "1,1,2") (userinteraction))
                                             (branch "Normal Execution (x_arr_5 != null)"
                                                (rule "variableDeclarationAssign" (formula "37") (term "1,1,1,2") (userinteraction))
                                                (rule "variableDeclaration" (formula "37") (term "1,1,1,2") (newnames "x_35") (userinteraction))
                                                (rule "remove_parentheses_right" (formula "37") (term "1,1,1,2") (userinteraction))
                                                (rule "assignmentShiftLeftLong" (formula "37") (term "1,1,1,2") (userinteraction))
                                                (rule "assignmentBitwiseAndLong3" (formula "37") (term "1,1,1,1,2") (userinteraction))
                                                (rule "inequality_comparison_simple" (formula "37") (term "1,1,1,1,1,2") (userinteraction))
                                                (rule "blockEmpty" (formula "37") (term "1,1,1,1,1,1,2") (userinteraction))
                                                (rule "methodCallReturn" (formula "37") (term "1,1,1,1,1,1,2") (userinteraction))
                                                (rule "assignment" (formula "37") (term "1,1,1,1,1,1,2") (userinteraction))
                                                (rule "methodCallEmpty" (formula "37") (term "1,1,1,1,1,1,1,2") (userinteraction))
                                                (rule "emptyModality" (formula "37") (term "1,1,1,1,1,1,1,2") (userinteraction))
                                                 (builtin "One Step Simplification" (formula "37") (userinteraction))
                                                 (builtin "One Step Simplification" (formula "36") (userinteraction))
                                                (rule "ifthenelse_negated_for" (formula "37") (userinteraction))
                                                (rule "ifthenelse_to_or_for" (formula "37") (userinteraction))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "orRight" (formula "37"))
                                                (rule "andLeft" (formula "36"))
                                                (rule "typeEqDerived" (formula "37") (term "0,0,0,1,1,0") (ifseqformula "36"))
                                                (rule "typeEqDerived" (formula "37") (term "0,1,1,1,1,0") (ifseqformula "36"))
                                                (rule "typeEqDerived" (formula "37") (term "0,0,1,1,1,0") (ifseqformula "36"))
                                                 (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "36")) (ifInst ""  (formula "36")))
                                                (rule "orRight" (formula "38"))
                                                (rule "notLeft" (formula "37"))
                                                (rule "orRight" (formula "37"))
                                                (rule "notRight" (formula "38"))
                                                (rule "notRight" (formula "38"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "translateJavaShiftRightInt" (formula "43") (term "0,1"))
                                                (rule "translateJavaShiftLeftLong" (formula "43") (term "1,0,0,1,0"))
                                                (rule "translateJavaShiftRightInt" (formula "43") (term "0,0,0,0"))
                                                (rule "translateJavaShiftRightInt" (formula "43") (term "0,2,0,0,0,1,0"))
                                                (rule "translateJavaShiftRightInt" (formula "42") (term "0"))
                                                (rule "translateJavaShiftRightInt" (formula "41") (term "1"))
                                                (rule "translateJavaSubInt" (formula "1") (term "0,2,0,0,1"))
                                                (rule "translateJavaBitwiseAndLong" (formula "43") (term "0,0,1,0"))
                                                (rule "andJLongDef" (formula "43") (term "0,0,1,0"))
                                                (rule "inEqSimp_ltRight" (formula "42"))
                                                (rule "mul_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_leqRight" (formula "42"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "43") (term "1"))
                                                (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1"))
                                                (rule "polySimp_addComm1" (formula "43") (term "0,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "43") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "43") (term "0,0,0,0"))
                                                (rule "applyEq" (formula "3") (term "0,0,2,0,0,1") (ifseqformula "13"))
                                                (rule "applyEq" (formula "4") (term "0") (ifseqformula "13"))
                                                (rule "applyEq" (formula "5") (term "0") (ifseqformula "13"))
                                                (rule "inEqSimp_homoInEq0" (formula "5"))
                                                (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                                                (rule "add_literals" (formula "5") (term "1,0"))
                                                (rule "times_zero_1" (formula "5") (term "0"))
                                                (rule "qeq_literals" (formula "5"))
                                                (rule "true_left" (formula "5"))
                                                (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "12"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                (rule "mul_literals" (formula "1") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "42") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "42") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "42") (term "0,1"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "42") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "42") (term "0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "42") (term "0,0,0,0"))
                                                (rule "inEqSimp_contradEq7" (formula "3") (term "0") (ifseqformula "16"))
                                                (rule "mul_literals" (formula "3") (term "1,0,0,0"))
                                                (rule "add_literals" (formula "3") (term "0,0,0"))
                                                (rule "leq_literals" (formula "3") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "notLeft" (formula "3"))
                                                (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "15"))
                                                (rule "leq_literals" (formula "3") (term "0"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "true_left" (formula "3"))
                                                (rule "javaShiftRightIntDef" (formula "41") (term "0,2,0,0,0,0,1,0"))
                                                (rule "mod_axiom" (formula "41") (term "1,0,0,2,0,0,0,0,1,0"))
                                                (rule "div_literals" (formula "41") (term "0,0,1,1,0,0,2,0,0,0,0,1,0"))
                                                (rule "times_zero_2" (formula "41") (term "0,1,1,0,0,2,0,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "41") (term "1,1,0,0,2,0,0,0,0,1,0"))
                                                (rule "add_literals" (formula "41") (term "1,0,0,2,0,0,0,0,1,0"))
                                                (rule "javaShiftLeftLongDef" (formula "41") (term "1,0,0,0,1,0"))
                                                (rule "mod_axiom" (formula "41") (term "1,0,1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,1,0,0,0,1,0"))
                                                (rule "applyEq" (formula "41") (term "0,1,1,0,1,0,0,0,1,0") (ifseqformula "28"))
                                                (rule "polySimp_addComm0" (formula "41") (term "1,0,1,0,0,0,1,0"))
                                                (rule "javaShiftRightIntDef" (formula "2") (term "0"))
                                                (rule "mod_axiom" (formula "2") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                                                (rule "div_literals" (formula "2") (term "0,1,1,0,0"))
                                                (rule "mul_literals" (formula "2") (term "1,1,0,0"))
                                                (rule "add_literals" (formula "2") (term "1,0,0"))
                                                (rule "javaShiftRightIntDef" (formula "1") (term "1,1"))
                                                (rule "mod_axiom" (formula "1") (term "1,0,1,1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,1"))
                                                (rule "div_literals" (formula "1") (term "0,1,1,0,1,1"))
                                                (rule "times_zero_2" (formula "1") (term "1,1,0,1,1"))
                                                (rule "add_literals" (formula "1") (term "1,0,1,1"))
                                                (rule "javaShiftRightIntDef" (formula "41") (term "1,1,1"))
                                                (rule "mod_axiom" (formula "41") (term "1,0,1,1,1"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,1,1,1"))
                                                (rule "div_literals" (formula "41") (term "0,1,1,0,1,1,1"))
                                                (rule "mul_literals" (formula "41") (term "1,1,0,1,1,1"))
                                                (rule "add_literals" (formula "41") (term "1,0,1,1,1"))
                                                (rule "javaShiftRightIntDef" (formula "41") (term "1,1,0,0,0"))
                                                (rule "mod_axiom" (formula "41") (term "1,0,1,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,1,1,0,0,0"))
                                                (rule "div_literals" (formula "41") (term "0,1,1,0,1,1,0,0,0"))
                                                (rule "mul_literals" (formula "41") (term "1,1,0,1,1,0,0,0"))
                                                (rule "add_literals" (formula "41") (term "1,0,1,1,0,0,0"))
                                                (rule "shiftRightDef" (formula "41") (term "0,0,2,0,0,0,0,1,0"))
                                                (rule "neg_literal" (formula "41") (term "1,1,0,0,2,0,0,0,0,1,0"))
                                                (rule "less_literals" (formula "41") (term "0,0,0,2,0,0,0,0,1,0"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "shiftRightPositiveShiftDef" (formula "41") (term "0,0,2,0,0,0,0,1,0"))
                                                (rule "pow_literals" (formula "41") (term "1,0,0,2,0,0,0,0,1,0"))
                                                (rule "applyEq" (formula "41") (term "0,0,2,0,0,0,0,1,0") (ifseqformula "28"))
                                                (rule "shiftRightDef" (formula "2") (term "0,0"))
                                                (rule "less_literals" (formula "2") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "shiftRightPositiveShiftDef" (formula "2") (term "0,0"))
                                                (rule "pow_literals" (formula "2") (term "1,0,0"))
                                                (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "28"))
                                                (rule "shiftRightDef" (formula "1") (term "0,1,1"))
                                                (rule "less_literals" (formula "1") (term "0,0,1,1"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "shiftRightPositiveShiftDef" (formula "1") (term "0,1,1"))
                                                (rule "pow_literals" (formula "1") (term "1,0,1,1"))
                                                (rule "applyEq" (formula "1") (term "0,1,1") (ifseqformula "28"))
                                                (rule "shiftLeftDef" (formula "41") (term "0,1,0,0,0,1,0"))
                                                (rule "polySimp_elimNeg" (formula "41") (term "1,1,0,1,0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "41") (term "1,1,0,1,0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "0,1,1,0,1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "0,1,1,0,1,0,0,0,1,0"))
                                                (rule "shiftLeftPositiveShiftDef" (formula "41") (term "2,0,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOneLeft0" (formula "41") (term "2,0,1,0,0,0,1,0"))
                                                (rule "shiftRightPositiveShiftDef" (formula "41") (term "1,0,1,0,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "41") (term "0,0,1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "41") (term "1,0,0,0,0,1,0,0,0,1,0"))
                                                (rule "add_literals" (formula "41") (term "0,0,0,0,1,0,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "41") (term "0,0,0,1,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,1,0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,0,1,0"))
                                                (rule "inEqSimp_contradInEq1" (formula "41") (term "0,0,1,0,0,0,1,0") (ifseqformula "30"))
                                                (rule "inEqSimp_homoInEq1" (formula "41") (term "0,0,0,1,0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0,0,1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "41") (term "1,0,0,0,0,1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "41") (term "0,1,0,0,0,0,1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,0,0,1,0,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "41") (term "0,0,0,0,1,0,0,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "41") (term "0,0,0,0,0,1,0,0,0,1,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "41") (term "0,0,0,0,1,0,0,0,1,0"))
                                                (rule "add_literals" (formula "41") (term "1,1,0,0,0,0,1,0,0,0,1,0"))
                                                (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,1,0,0,0,1,0"))
                                                (rule "add_literals" (formula "41") (term "0,0,0,0,1,0,0,0,1,0"))
                                                (rule "leq_literals" (formula "41") (term "0,0,0,1,0,0,0,1,0"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "pullOutSelect" (formula "40") (term "0") (inst "selectSK=BitSet_words_0"))
                                                (rule "applyEq" (formula "42") (term "1,0,0,0,0,1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "19")))
                                                (rule "applyEqReverse" (formula "41") (term "0") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "41") (term "1,0,0,0,0,1,0") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "shiftRightDef" (formula "40") (term "0,1,1,1"))
                                                (rule "less_literals" (formula "40") (term "0,0,1,1,1"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "shiftRightPositiveShiftDef" (formula "40") (term "0,1,1,1"))
                                                (rule "pow_literals" (formula "40") (term "1,0,1,1,1"))
                                                (rule "applyEq" (formula "40") (term "0,1,1,1") (ifseqformula "28"))
                                                (rule "shiftRightDef" (formula "40") (term "0,1,1,0,0,0"))
                                                (rule "neg_literal" (formula "40") (term "1,1,0,1,1,0,0,0"))
                                                (rule "less_literals" (formula "40") (term "0,0,1,1,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "shiftRightPositiveShiftDef" (formula "40") (term "0,1,1,0,0,0"))
                                                (rule "pow_literals" (formula "40") (term "1,0,1,1,0,0,0"))
                                                (rule "applyEq" (formula "40") (term "0,1,1,0,0,0") (ifseqformula "28"))
                                                (rule "pullOutSelect" (formula "40") (term "0,0,0,0,1,0") (inst "selectSK=arr_0"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "14")))
                                                (rule "applyEqReverse" (formula "41") (term "0,0,0,0,1,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "pullOutSelect" (formula "40") (term "0,1") (inst "selectSK=BitSet_wordsInUse_0"))
                                                (rule "applyEq" (formula "41") (term "0,0,0,0") (ifseqformula "1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "19")))
                                                (rule "applyEqReverse" (formula "41") (term "0,1") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "41") (term "0,0,0,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "applyEq" (formula "40") (term "0,0,0,0") (ifseqformula "10"))
                                                (rule "replace_known_left" (formula "40") (term "0,0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "applyEq" (formula "40") (term "0,1") (ifseqformula "10"))
                                                (rule "replace_known_left" (formula "40") (term "1") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "notRight" (formula "40"))
                                                (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "13"))
                                                (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                                (rule "mul_literals" (formula "2") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                (rule "add_literals" (formula "2") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                (rule "expand_subJint" (formula "41") (term "0,2,0"))
                                                (rule "polySimp_elimSub" (formula "41") (term "0,0,2,0"))
                                                (rule "mul_literals" (formula "41") (term "1,0,0,2,0"))
                                                (rule "polySimp_addComm0" (formula "41") (term "0,0,2,0"))
                                                (rule "expand_moduloInteger" (formula "4") (term "0"))
                                                (rule "replace_int_RANGE" (formula "4") (term "1,1,0"))
                                                (rule "replace_int_HALFRANGE" (formula "4") (term "0,0,1,0"))
                                                (rule "replace_int_MIN" (formula "4") (term "0,0"))
                                                (rule "mod_axiom" (formula "4") (term "1,0"))
                                                (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
                                                (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                                                (rule "add_literals" (formula "4") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "4") (term "0,0"))
                                                (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "35"))
                                                (rule "times_zero_2" (formula "4") (term "1,0"))
                                                (rule "add_zero_right" (formula "4") (term "0"))
                                                (rule "expand_moduloInteger" (formula "3") (term "1,1"))
                                                (rule "replace_int_RANGE" (formula "3") (term "1,1,1,1"))
                                                (rule "replace_int_MIN" (formula "3") (term "0,1,1"))
                                                (rule "replace_int_HALFRANGE" (formula "3") (term "0,0,1,1,1"))
                                                (rule "polySimp_addAssoc" (formula "3") (term "1"))
                                                (rule "add_literals" (formula "3") (term "0,1"))
                                                (rule "mod_axiom" (formula "3") (term "1,1"))
                                                (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1"))
                                                (rule "polySimp_addAssoc" (formula "3") (term "1"))
                                                (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                                                (rule "add_literals" (formula "3") (term "0,0,1"))
                                                (rule "applyEq" (formula "3") (term "0,1,1") (ifseqformula "34"))
                                                (rule "times_zero_2" (formula "3") (term "1,1"))
                                                (rule "add_zero_right" (formula "3") (term "1"))
                                                (rule "expand_moduloLong" (formula "1") (term "1,0,0"))
                                                (rule "replace_long_MIN" (formula "1") (term "0,1,0,0"))
                                                (rule "replace_long_RANGE" (formula "1") (term "1,1,1,0,0"))
                                                (rule "replace_long_HALFRANGE" (formula "1") (term "0,0,1,1,0,0"))
                                                (rule "mod_axiom" (formula "1") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,1,0,0"))
                                                (rule "applyEq" (formula "1") (term "0,1,1,0,0") (ifseqformula "6"))
                                                (rule "polySimp_addComm0" (formula "1") (term "1,0,0"))
                                                (rule "expand_moduloInteger" (formula "1") (term "0,2,0,0,0"))
                                                (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0,2,0,0,0"))
                                                (rule "replace_int_RANGE" (formula "1") (term "1,1,0,2,0,0,0"))
                                                (rule "replace_int_MIN" (formula "1") (term "0,0,2,0,0,0"))
                                                (rule "mod_axiom" (formula "1") (term "1,0,2,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,2,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,2,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0,2,0,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0,2,0,0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,0,2,0,0,0"))
                                                (rule "applyEqRigid" (formula "1") (term "0,1,0,2,0,0,0") (ifseqformula "33"))
                                                (rule "times_zero_2" (formula "1") (term "1,0,2,0,0,0"))
                                                (rule "add_zero_right" (formula "1") (term "0,2,0,0,0"))
                                                (rule "expand_moduloInteger" (formula "2") (term "0"))
                                                (rule "replace_int_MIN" (formula "2") (term "0,0"))
                                                (rule "replace_int_HALFRANGE" (formula "2") (term "0,0,1,0"))
                                                (rule "replace_int_RANGE" (formula "2") (term "1,1,0"))
                                                (rule "inEqSimp_homoInEq0" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                (rule "mul_literals" (formula "2") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                (rule "add_literals" (formula "2") (term "0,0"))
                                                (rule "mod_axiom" (formula "2") (term "0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                                                (rule "polySimp_rightDist" (formula "2") (term "0,1,0"))
                                                (rule "mul_literals" (formula "2") (term "0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                (rule "add_literals" (formula "2") (term "0,0,0"))
                                                (rule "applyEqRigid" (formula "2") (term "0,1,0") (ifseqformula "33"))
                                                (rule "times_zero_2" (formula "2") (term "1,0"))
                                                (rule "add_zero_right" (formula "2") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "29"))
                                                (rule "leq_literals" (formula "2") (term "0"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "expand_moduloInteger" (formula "38") (term "0,2,0"))
                                                (rule "replace_int_RANGE" (formula "38") (term "1,1,0,2,0"))
                                                (rule "replace_int_HALFRANGE" (formula "38") (term "0,0,1,0,2,0"))
                                                (rule "replace_int_MIN" (formula "38") (term "0,0,2,0"))
                                                (rule "polySimp_addAssoc" (formula "38") (term "0,1,0,2,0"))
                                                (rule "add_literals" (formula "38") (term "0,0,1,0,2,0"))
                                                (rule "mod_axiom" (formula "38") (term "1,0,2,0"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,2,0"))
                                                (rule "polySimp_addAssoc" (formula "38") (term "0,2,0"))
                                                (rule "polySimp_addAssoc" (formula "38") (term "0,0,2,0"))
                                                (rule "add_literals" (formula "38") (term "0,0,0,2,0"))
                                                (rule "applyEq" (formula "38") (term "0,1,0,2,0") (ifseqformula "15"))
                                                (rule "times_zero_2" (formula "38") (term "1,0,2,0"))
                                                (rule "add_zero_right" (formula "38") (term "0,2,0"))
                                                (rule "expand_moduloLong" (formula "1") (term "0"))
                                                (rule "replace_long_HALFRANGE" (formula "1") (term "0,0,1,0"))
                                                (rule "replace_long_RANGE" (formula "1") (term "1,1,0"))
                                                (rule "replace_long_MIN" (formula "1") (term "0,0"))
                                                (rule "mod_axiom" (formula "1") (term "1,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,0"))
                                                (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "2"))
                                                (rule "polySimp_addComm0" (formula "1") (term "0"))
                                                (rule "polySimp_sepPosMonomial" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                (rule "close" (formula "43") (ifseqformula "1"))
                                             )
                                             (branch "Null Reference (x_arr_5 = null)"
                                                 (builtin "One Step Simplification" (formula "1"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "andLeft" (formula "36"))
                                                (rule "andLeft" (formula "37"))
                                                (rule "typeEqDerived" (formula "38") (term "0,0,0,1,1,0") (ifseqformula "37"))
                                                (rule "typeEqDerived" (formula "38") (term "0,1,1,1,1,0") (ifseqformula "37"))
                                                (rule "typeEqDerived" (formula "38") (term "0,0,1,1,1,0") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "37")) (ifInst ""  (formula "37")))
                                                (rule "notLeft" (formula "38"))
                                                (rule "orRight" (formula "38"))
                                                (rule "notRight" (formula "39"))
                                                (rule "notRight" (formula "39"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "translateJavaShiftRightInt" (formula "41") (term "0,0,0"))
                                                (rule "translateJavaSubInt" (formula "1") (term "0,2,0,0,1"))
                                                (rule "ifthenelse_negated_for" (formula "41"))
                                                (rule "inEqSimp_ltToLeq" (formula "41") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                (rule "applyEq" (formula "1") (term "0,0,2,0,0,1") (ifseqformula "12"))
                                                (rule "applyEq" (formula "3") (term "0") (ifseqformula "12"))
                                                (rule "inEqSimp_homoInEq0" (formula "3"))
                                                (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                                (rule "add_literals" (formula "3") (term "1,0"))
                                                (rule "times_zero_1" (formula "3") (term "0"))
                                                (rule "qeq_literals" (formula "3"))
                                                (rule "true_left" (formula "3"))
                                                (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "11"))
                                                (rule "applyEq" (formula "2") (term "0") (ifseqformula "11"))
                                                (rule "blockThrow" (formula "40") (term "1,1"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "40") (term "0"))
                                                (rule "polySimp_mulLiterals" (formula "40") (term "0,0"))
                                                (rule "polySimp_elimOne" (formula "40") (term "0,0"))
                                                (rule "inEqSimp_contradEq7" (formula "1") (term "0") (ifseqformula "15"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0"))
                                                (rule "leq_literals" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "14"))
                                                (rule "leq_literals" (formula "1") (term "0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "javaShiftRightIntDef" (formula "39") (term "1,1,0"))
                                                (rule "mod_axiom" (formula "39") (term "1,0,1,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,1,1,0"))
                                                (rule "div_literals" (formula "39") (term "0,1,1,0,1,1,0"))
                                                (rule "mul_literals" (formula "39") (term "1,1,0,1,1,0"))
                                                (rule "add_literals" (formula "39") (term "1,0,1,1,0"))
                                                (rule "shiftRightDef" (formula "39") (term "0,1,1,0"))
                                                (rule "less_literals" (formula "39") (term "0,0,1,1,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "shiftRightPositiveShiftDef" (formula "39") (term "0,1,1,0"))
                                                (rule "pow_literals" (formula "39") (term "1,0,1,1,0"))
                                                (rule "applyEq" (formula "39") (term "0,1,1,0") (ifseqformula "27"))
                                                (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=BitSet_words_0"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "18")))
                                                (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                                                (rule "close" (formula "44") (ifseqformula "2"))
                                             )
                                             (branch "Index Out of Bounds (x_arr_5 != null, but wordIndex_1 Out of Bounds!)"
                                                 (builtin "One Step Simplification" (formula "1"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "andLeft" (formula "36"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "andLeft" (formula "38"))
                                                (rule "typeEqDerived" (formula "39") (term "0,0,0,1,1,0") (ifseqformula "38"))
                                                (rule "typeEqDerived" (formula "39") (term "0,1,1,1,1,0") (ifseqformula "38"))
                                                (rule "typeEqDerived" (formula "39") (term "0,0,1,1,1,0") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "38")) (ifInst ""  (formula "38")))
                                                (rule "notLeft" (formula "1"))
                                                (rule "notLeft" (formula "38"))
                                                (rule "orRight" (formula "38"))
                                                (rule "notRight" (formula "39"))
                                                (rule "notRight" (formula "39"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "translateJavaShiftRightInt" (formula "42") (term "0,0,0"))
                                                (rule "translateJavaShiftRightInt" (formula "4") (term "0,1"))
                                                (rule "translateJavaShiftRightInt" (formula "4") (term "1,0"))
                                                (rule "translateJavaSubInt" (formula "1") (term "0,2,0,0,1"))
                                                (rule "ifthenelse_negated_for" (formula "42"))
                                                (rule "inEqSimp_ltToLeq" (formula "4") (term "1"))
                                                (rule "mul_literals" (formula "4") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "4") (term "0,0,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "42") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "42") (term "0,0"))
                                                (rule "applyEq" (formula "1") (term "0,0,2,0,0,1") (ifseqformula "12"))
                                                (rule "applyEq" (formula "2") (term "0") (ifseqformula "12"))
                                                (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "12"))
                                                (rule "applyEq" (formula "3") (term "0") (ifseqformula "12"))
                                                (rule "inEqSimp_homoInEq0" (formula "3"))
                                                (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                                (rule "add_literals" (formula "3") (term "1,0"))
                                                (rule "times_zero_1" (formula "3") (term "0"))
                                                (rule "qeq_literals" (formula "3"))
                                                (rule "true_left" (formula "3"))
                                                (rule "blockThrow" (formula "41") (term "1,1"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1"))
                                                (rule "mul_literals" (formula "3") (term "1,1"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "41") (term "0"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "0,0"))
                                                (rule "polySimp_elimOne" (formula "41") (term "0,0"))
                                                (rule "inEqSimp_contradEq7" (formula "1") (term "0") (ifseqformula "15"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0"))
                                                (rule "leq_literals" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "14"))
                                                (rule "leq_literals" (formula "1") (term "0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "javaShiftRightIntDef" (formula "1") (term "1,0"))
                                                (rule "mod_axiom" (formula "1") (term "1,0,1,0"))
                                                (rule "div_literals" (formula "1") (term "0,0,1,1,0,1,0"))
                                                (rule "times_zero_2" (formula "1") (term "0,1,1,0,1,0"))
                                                (rule "times_zero_2" (formula "1") (term "1,1,0,1,0"))
                                                (rule "add_literals" (formula "1") (term "1,0,1,0"))
                                                (rule "javaShiftRightIntDef" (formula "1") (term "0,1"))
                                                (rule "mod_axiom" (formula "1") (term "1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1"))
                                                (rule "div_literals" (formula "1") (term "0,1,1,0,0,1"))
                                                (rule "mul_literals" (formula "1") (term "1,1,0,0,1"))
                                                (rule "add_literals" (formula "1") (term "1,0,0,1"))
                                                (rule "javaShiftRightIntDef" (formula "40") (term "1,1,0"))
                                                (rule "mod_axiom" (formula "40") (term "1,0,1,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,1,1,0"))
                                                (rule "div_literals" (formula "40") (term "0,1,1,0,1,1,0"))
                                                (rule "times_zero_2" (formula "40") (term "1,1,0,1,1,0"))
                                                (rule "add_zero_right" (formula "40") (term "1,0,1,1,0"))
                                                (rule "shiftRightDef" (formula "1") (term "0,1,0"))
                                                (rule "neg_literal" (formula "1") (term "1,1,0,1,0"))
                                                (rule "less_literals" (formula "1") (term "0,0,1,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "shiftRightPositiveShiftDef" (formula "1") (term "0,1,0"))
                                                (rule "pow_literals" (formula "1") (term "1,0,1,0"))
                                                (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "27"))
                                                (rule "shiftRightDef" (formula "40") (term "0,1,1,0"))
                                                (rule "neg_literal" (formula "40") (term "1,1,0,1,1,0"))
                                                (rule "less_literals" (formula "40") (term "0,0,1,1,0"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "shiftRightPositiveShiftDef" (formula "40") (term "0,1,1,0"))
                                                (rule "pow_literals" (formula "40") (term "1,0,1,1,0"))
                                                (rule "applyEq" (formula "40") (term "0,1,1,0") (ifseqformula "27"))
                                                (rule "shiftRightDef" (formula "1") (term "0,0,1"))
                                                (rule "less_literals" (formula "1") (term "0,0,0,1"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "shiftRightPositiveShiftDef" (formula "1") (term "0,0,1"))
                                                (rule "pow_literals" (formula "1") (term "1,0,0,1"))
                                                (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "27"))
                                                (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=BitSet_words_0"))
                                                (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "18")))
                                                (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "2") (term "0,0,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "pullOutSelect" (formula "39") (term "0,0") (inst "selectSK=BitSet_wordsInUse_0"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "18")))
                                                (rule "applyEqReverse" (formula "40") (term "0,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "applyEq" (formula "39") (term "0,0") (ifseqformula "9"))
                                                (rule "expand_subJint" (formula "38") (term "0,2,0"))
                                                (rule "polySimp_elimSub" (formula "38") (term "0,0,2,0"))
                                                (rule "mul_literals" (formula "38") (term "1,0,0,2,0"))
                                                (rule "polySimp_addComm0" (formula "38") (term "0,0,2,0"))
                                                (rule "expand_moduloInteger" (formula "39") (term "1,1,0"))
                                                (rule "replace_int_HALFRANGE" (formula "39") (term "0,0,1,1,1,0"))
                                                (rule "replace_int_MIN" (formula "39") (term "0,1,1,0"))
                                                (rule "replace_int_RANGE" (formula "39") (term "1,1,1,1,0"))
                                                (rule "polySimp_addAssoc" (formula "39") (term "1,0"))
                                                (rule "add_literals" (formula "39") (term "0,1,0"))
                                                (rule "mod_axiom" (formula "39") (term "1,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1,0"))
                                                (rule "polySimp_addAssoc" (formula "39") (term "1,0"))
                                                (rule "polySimp_addAssoc" (formula "39") (term "0,1,0"))
                                                (rule "add_literals" (formula "39") (term "0,0,1,0"))
                                                (rule "applyEqRigid" (formula "39") (term "0,1,1,0") (ifseqformula "32"))
                                                (rule "mul_literals" (formula "39") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "39") (term "1,0"))
                                                (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "8"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "expand_moduloInteger" (formula "1") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "1") (term "0,1,0"))
                                                (rule "replace_int_RANGE" (formula "1") (term "1,1,1,0"))
                                                (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,1,0"))
                                                (rule "mod_axiom" (formula "1") (term "1,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "1,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,1,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,1,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,1,0"))
                                                (rule "applyEqRigid" (formula "1") (term "0,1,1,0") (ifseqformula "32"))
                                                (rule "mul_literals" (formula "1") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "1") (term "1,0"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "8"))
                                                (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                                (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                                (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0"))
                                                (rule "leq_literals" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "expand_moduloInteger" (formula "38") (term "0,2,0"))
                                                (rule "replace_int_RANGE" (formula "38") (term "1,1,0,2,0"))
                                                (rule "replace_int_HALFRANGE" (formula "38") (term "0,0,1,0,2,0"))
                                                (rule "replace_int_MIN" (formula "38") (term "0,0,2,0"))
                                                (rule "polySimp_addAssoc" (formula "38") (term "0,1,0,2,0"))
                                                (rule "add_literals" (formula "38") (term "0,0,1,0,2,0"))
                                                (rule "mod_axiom" (formula "38") (term "1,0,2,0"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,2,0"))
                                                (rule "polySimp_addAssoc" (formula "38") (term "0,2,0"))
                                                (rule "polySimp_addAssoc" (formula "38") (term "0,0,2,0"))
                                                (rule "add_literals" (formula "38") (term "0,0,0,2,0"))
                                                (rule "applyEq" (formula "38") (term "0,1,0,2,0") (ifseqformula "15"))
                                                (rule "times_zero_2" (formula "38") (term "1,0,2,0"))
                                                (rule "add_zero_right" (formula "38") (term "0,2,0"))
                                                (rule "expand_moduloInteger" (formula "1") (term "0"))
                                                (rule "replace_int_MIN" (formula "1") (term "0,0"))
                                                (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0"))
                                                (rule "replace_int_RANGE" (formula "1") (term "1,1,0"))
                                                (rule "inEqSimp_homoInEq0" (formula "1"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                                (rule "mul_literals" (formula "1") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "mod_axiom" (formula "1") (term "0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                                (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                                                (rule "mul_literals" (formula "1") (term "0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0"))
                                                (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "32"))
                                                (rule "mul_literals" (formula "1") (term "1,0"))
                                                (rule "add_zero_right" (formula "1") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "22"))
                                                (rule "qeq_literals" (formula "1") (term "0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                          )
                                          (branch "Exceptional Post (checkInvariants)"
                                              (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "40")) (ifInst ""  (formula "8")) (ifInst ""  (formula "40")) (ifInst ""  (formula "8")))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "andLeft" (formula "35"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "andLeft" (formula "38"))
                                             (rule "notLeft" (formula "36"))
                                             (rule "translateJavaSubInt" (formula "38") (term "0,2,0,0,1,0,0"))
                                             (rule "translateJavaSubInt" (formula "37") (term "0,2,0,0,1,0,0,0"))
                                             (rule "replace_known_right" (formula "37") (term "0,0,1") (ifseqformula "39"))
                                              (builtin "One Step Simplification" (formula "37"))
                                             (rule "replace_known_right" (formula "38") (term "1") (ifseqformula "39"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "notLeft" (formula "38"))
                                             (rule "inEqSimp_ltToLeq" (formula "37") (term "1,1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,1,0,1"))
                                             (rule "inEqSimp_ltToLeq" (formula "37") (term "0,1,0,1"))
                                             (rule "mul_literals" (formula "37") (term "1,0,0,0,1,0,1"))
                                             (rule "add_zero_right" (formula "37") (term "0,0,0,1,0,1"))
                                             (rule "applyEq" (formula "37") (term "0,0,2,0,0,1,0,0,0") (ifseqformula "8"))
                                             (rule "applyEq" (formula "37") (term "0,1,0,1,0") (ifseqformula "8"))
                                             (rule "inEqSimp_homoInEq0" (formula "37") (term "1,0,1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "37") (term "0,1,0,1,0"))
                                             (rule "add_literals" (formula "37") (term "1,0,1,0,1,0"))
                                             (rule "times_zero_1" (formula "37") (term "0,1,0,1,0"))
                                             (rule "qeq_literals" (formula "37") (term "1,0,1,0"))
                                              (builtin "One Step Simplification" (formula "37"))
                                             (rule "applyEq" (formula "38") (term "0,0,0") (ifseqformula "8"))
                                             (rule "applyEq" (formula "38") (term "0,1,1") (ifseqformula "8"))
                                             (rule "inEqSimp_homoInEq0" (formula "38") (term "1,1"))
                                             (rule "polySimp_pullOutFactor1" (formula "38") (term "0,1,1"))
                                             (rule "add_literals" (formula "38") (term "1,0,1,1"))
                                             (rule "times_zero_1" (formula "38") (term "0,1,1"))
                                             (rule "qeq_literals" (formula "38") (term "1,1"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "applyEq" (formula "37") (term "0,0,1,0") (ifseqformula "8"))
                                             (rule "applyEq" (formula "37") (term "0,0,0,0,0") (ifseqformula "8"))
                                             (rule "applyEq" (formula "38") (term "0,0,2,0,0,1,0") (ifseqformula "8"))
                                             (rule "applyEq" (formula "38") (term "0,1") (ifseqformula "8"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,1,0,1"))
                                             (rule "mul_literals" (formula "37") (term "1,0,1,0,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,1,0,1"))
                                             (rule "polySimp_mulComm0" (formula "37") (term "1,1,1,0,1"))
                                             (rule "polySimp_rightDist" (formula "37") (term "1,1,1,0,1"))
                                             (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,1,0,1"))
                                             (rule "mul_literals" (formula "37") (term "0,1,1,1,0,1"))
                                             (rule "polySimp_elimOne" (formula "37") (term "1,1,1,1,0,1"))
                                             (rule "inEqSimp_contradEq7" (formula "38") (term "0,0") (ifseqformula "12"))
                                             (rule "mul_literals" (formula "38") (term "1,0,0,0,0"))
                                             (rule "add_zero_right" (formula "38") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "38") (term "0,0,0"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "inEqSimp_contradEq7" (formula "37") (term "0,0,0,0") (ifseqformula "12"))
                                             (rule "mul_literals" (formula "37") (term "1,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "37") (term "0,0,0,0,0,0"))
                                             (rule "leq_literals" (formula "37") (term "0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "37"))
                                             (rule "inEqSimp_subsumption1" (formula "38") (term "1") (ifseqformula "12"))
                                             (rule "leq_literals" (formula "38") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "notRight" (formula "38"))
                                             (rule "replace_known_left" (formula "38") (term "0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "andLeft" (formula "38"))
                                             (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=java_lang_Object_created__0"))
                                             (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "36"))
                                              (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "41")))
                                             (rule "ifthenelse_negated" (formula "37") (term "0"))
                                             (rule "applyEq" (formula "37") (term "1") (ifseqformula "38"))
                                             (rule "ifEqualsTRUE" (formula "37"))
                                              (builtin "One Step Simplification" (formula "37"))
                                             (rule "pullOutSelect" (formula "39") (term "0,0,1") (inst "selectSK=BitSet_wordsInUse_0"))
                                             (rule "applyEq" (formula "40") (term "1,1,1,1") (ifseqformula "39"))
                                             (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "36"))
                                              (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "46")) (ifInst ""  (formula "17")))
                                             (rule "applyEqReverse" (formula "40") (term "0,0,1") (ifseqformula "39"))
                                             (rule "applyEqReverse" (formula "40") (term "1,1,1,1") (ifseqformula "39"))
                                             (rule "hideAuxiliaryEq" (formula "39"))
                                             (rule "applyEq" (formula "39") (term "0,0,1") (ifseqformula "9"))
                                             (rule "applyEq" (formula "39") (term "1,1,1,1") (ifseqformula "9"))
                                             (rule "inEqSimp_contradInEq1" (formula "39") (term "0,1") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "39") (term "0,0,1"))
                                              (builtin "One Step Simplification" (formula "39"))
                                             (rule "pullOutSelect" (formula "39") (term "0,0,1") (inst "selectSK=BitSet_words_0"))
                                             (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "36"))
                                              (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "46")) (ifInst ""  (formula "17")))
                                             (rule "applyEqReverse" (formula "40") (term "0,0,1") (ifseqformula "39"))
                                             (rule "hideAuxiliaryEq" (formula "39"))
                                             (rule "inEqSimp_homoInEq0" (formula "39") (term "1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,1"))
                                             (rule "add_literals" (formula "39") (term "1,1,0,1"))
                                             (rule "methodCallParamThrow" (formula "42") (term "1") (userinteraction))
                                             (rule "throwDiamond" (formula "42") (term "1") (userinteraction))
                                              (builtin "One Step Simplification" (formula "42") (userinteraction))
                                             (rule "false_right" (formula "42") (userinteraction))
                                             (rule "times_zero_1" (formula "39") (term "1,0,1"))
                                             (rule "add_zero_right" (formula "39") (term "0,1"))
                                             (rule "qeq_literals" (formula "39") (term "1"))
                                              (builtin "One Step Simplification" (formula "39"))
                                             (rule "notLeft" (formula "39"))
                                             (rule "replace_known_right" (formula "39") (term "1") (ifseqformula "40"))
                                              (builtin "One Step Simplification" (formula "39"))
                                             (rule "instanceof_not_compatible_5" (formula "40") (ifseqformula "39"))
                                             (rule "expand_subJint" (formula "1") (term "0,2,0"))
                                             (rule "polySimp_elimSub" (formula "1") (term "0,0,2,0"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0,2,0"))
                                             (rule "polySimp_addComm0" (formula "1") (term "0,0,2,0"))
                                             (rule "hideAuxiliaryEqConcrete" (formula "38"))
                                             (rule "expand_moduloInteger" (formula "1") (term "0,2,0"))
                                             (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0,2,0"))
                                             (rule "replace_int_MIN" (formula "1") (term "0,0,2,0"))
                                             (rule "replace_int_RANGE" (formula "1") (term "1,1,0,2,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,2,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,1,0,2,0"))
                                             (rule "mod_axiom" (formula "1") (term "1,0,2,0"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,2,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,2,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0,2,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0,2,0"))
                                             (rule "applyEq" (formula "1") (term "0,1,0,2,0") (ifseqformula "15"))
                                             (rule "times_zero_2" (formula "1") (term "1,0,2,0"))
                                             (rule "add_zero_right" (formula "1") (term "0,2,0"))
                                             (rule "close" (formula "41") (ifseqformula "1"))
                                          )
                                          (branch "Pre (checkInvariants)"
                                              (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "38")) (ifInst ""  (formula "8")) (ifInst ""  (formula "38")) (ifInst ""  (formula "8")) (ifInst ""  (formula "15")))
                                             (rule "orRight" (formula "34"))
                                             (rule "orRight" (formula "34"))
                                             (rule "notRight" (formula "35"))
                                             (rule "notRight" (formula "35"))
                                             (rule "andLeft" (formula "2"))
                                             (rule "translateJavaSubInt" (formula "37") (term "0,2,0,0,1,0"))
                                             (rule "translateJavaSubInt" (formula "1") (term "0,2,0,0,1"))
                                             (rule "replace_known_left" (formula "37") (term "1,1") (ifseqformula "3"))
                                              (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
                                             (rule "closeTrue" (formula "37"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "Null Reference (x_arr_4 = null)"
                                     (builtin "One Step Simplification" (formula "30"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "Index Out of Bounds (x_arr_4 != null, but wordIndex Out of Bounds!)"
                                     (builtin "One Step Simplification" (formula "30"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
                                    (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0,1"))
                                    (rule "add_literals" (formula "1") (term "0,0,1"))
                                    (rule "blockThrow" (formula "30") (term "1"))
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "leq_literals" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_subsumption0" (formula "20") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "20") (term "0"))
                                     (builtin "One Step Simplification" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "16"))
                                    (rule "qeq_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                           )
                           (branch "Exceptional Post (wordIndex)"
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "andLeft" (formula "15"))
                              (rule "andLeft" (formula "16"))
                              (rule "andLeft" (formula "15"))
                              (rule "andLeft" (formula "17"))
                              (rule "notLeft" (formula "15"))
                              (rule "close" (formula "19") (ifseqformula "18"))
                           )
                           (branch "Pre (wordIndex)"
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "8")))
                              (rule "expand_inInt" (formula "18") (term "1"))
                              (rule "replace_int_MAX" (formula "18") (term "1,0,1"))
                              (rule "replace_int_MIN" (formula "18") (term "0,1,1"))
                              (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "11"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "18") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "18") (term "0") (ifseqformula "13"))
                              (rule "leq_literals" (formula "18") (term "0,0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "inEqSimp_geqRight" (formula "18"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "1"))
                              (rule "leq_literals" (formula "12") (term "0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "13") (term "0"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "closeFalse" (formula "13"))
                           )
                        )
                        (branch "Assertion (x_13) Failure"
                            (builtin "One Step Simplification" (formula "18"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "if x_14 false"
                         (builtin "One Step Simplification" (formula "20"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "16"))
                        (rule "inEqSimp_contradEq3" (formula "16") (ifseqformula "1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0"))
                        (rule "add_literals" (formula "16") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "16") (term "1,0,0"))
                        (rule "add_zero_right" (formula "16") (term "0,0"))
                        (rule "qeq_literals" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "false_right" (formula "16"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                        (rule "mul_literals" (formula "3") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "3"))
                        (rule "leq_literals" (formula "7") (term "0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "compound_equality_comparison_1" (formula "19") (term "1") (inst "#v0=x_14"))
                        (rule "variableDeclarationAssign" (formula "19") (term "1"))
                        (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_17"))
                        (rule "eval_order_array_access4" (formula "19") (term "1") (inst "#v0=x_arr"))
                        (rule "variableDeclarationAssign" (formula "19") (term "1"))
                        (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_arr_4"))
                        (rule "assignment_read_attribute_this" (formula "19") (term "1"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "eval_order_array_access5" (formula "19") (term "1") (inst "#v1=x_18") (inst "#ar1=x_arr_5"))
                        (rule "variableDeclarationAssign" (formula "19") (term "1"))
                        (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_arr_5"))
                        (rule "assignment" (formula "19") (term "1"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "variableDeclarationAssign" (formula "19") (term "1"))
                        (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_18"))
                        (rule "assignment_read_attribute_this" (formula "19") (term "1"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "assignment_array2" (formula "19") (term "1"))
                        (branch "Normal Execution (x_arr_5 != null)"
                            (builtin "One Step Simplification" (formula "20"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "18")))
                           (rule "orRight" (formula "19"))
                           (rule "inEqSimp_leqRight" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_ltRight" (formula "20"))
                           (rule "mul_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
                           (rule "leq_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "equality_comparison_simple" (formula "19") (term "1"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "blockEmpty" (formula "19") (term "1"))
                           (rule "assert" (formula "19") (term "1"))
                           (branch "Assertion (x_13) OK"
                               (builtin "One Step Simplification" (formula "20"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "methodCallEmpty" (formula "20") (term "1"))
                              (rule "blockEmpty" (formula "20") (term "1"))
                              (rule "variableDeclarationAssign" (formula "20") (term "1"))
                              (rule "variableDeclaration" (formula "20") (term "1") (newnames "wordIndex"))
                               (builtin "Use Operation Contract" (formula "20") (newnames "heapBefore_wordIndex,result_wordIndex,exc_0") (contract "BitSet[BitSet::wordIndex(int)].JML normal_behavior operation contract.0"))
                              (branch "Post (wordIndex)"
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "expand_inInt" (formula "17") (term "1,0"))
                                 (rule "replace_int_MAX" (formula "17") (term "1,0,1,0"))
                                 (rule "replace_int_MIN" (formula "17") (term "0,1,1,0"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "eqSymm" (formula "20") (term "1"))
                                 (rule "translateJavaDivInt" (formula "20") (term "0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "18"))
                                 (rule "assignment" (formula "25") (term "1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_contradEq7" (formula "20") (term "0,0") (ifseqformula "15"))
                                 (rule "add_zero_left" (formula "20") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "20") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "20") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "inEqSimp_contradEq7" (formula "19") (term "0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0"))
                                 (rule "leq_literals" (formula "19") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "19"))
                                 (rule "true_left" (formula "19"))
                                 (rule "expand_divJint" (formula "19") (term "0"))
                                 (rule "expand_moduloInteger" (formula "19") (term "0"))
                                 (rule "replace_int_MIN" (formula "19") (term "0,0"))
                                 (rule "replace_int_RANGE" (formula "19") (term "1,1,0"))
                                 (rule "replace_int_HALFRANGE" (formula "19") (term "0,0,1,0"))
                                 (rule "polySimp_homoEq" (formula "19"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,0"))
                                 (rule "mul_literals" (formula "19") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0"))
                                 (rule "polySimp_addComm0" (formula "19") (term "0,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "19"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                                 (rule "polySimp_elimOne" (formula "19") (term "0"))
                                 (rule "returnUnfold" (formula "24") (term "1") (inst "#v0=x"))
                                 (rule "variableDeclarationAssign" (formula "24") (term "1"))
                                 (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_19"))
                                 (rule "compound_assignment_3_nonsimple" (formula "24") (term "1"))
                                 (rule "jdiv_axiom" (formula "19") (term "1,0,0"))
                                 (rule "eqSymm" (formula "19"))
                                 (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "19"))
                                 (rule "eqSymm" (formula "19"))
                                 (rule "applyEq" (formula "20") (term "1,0,0") (ifseqformula "19"))
                                 (rule "ifElseUnfold" (formula "25") (term "1") (inst "#boolv=x_20"))
                                 (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_20"))
                                 (rule "compound_assignment_2" (formula "25") (term "1") (inst "#v=x_21"))
                                 (rule "variableDeclarationAssign" (formula "25") (term "1"))
                                 (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_21"))
                                 (rule "remove_parentheses_right" (formula "25") (term "1"))
                                 (rule "compound_less_than_comparison_2" (formula "25") (term "1") (inst "#v1=x_23") (inst "#v0=x_22"))
                                 (rule "variableDeclarationAssign" (formula "25") (term "1"))
                                 (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_22"))
                                 (rule "assignment" (formula "25") (term "1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "variableDeclarationAssign" (formula "25") (term "1"))
                                 (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_23"))
                                 (rule "assignment_read_attribute_this" (formula "25") (term "1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "less_than_comparison_simple" (formula "25") (term "1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "25") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "25") (term "0,0,0,1,0"))
                                 (rule "compound_assignment_1_new" (formula "25") (term "1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "div_axiom" (formula "19") (term "1") (inst "quotient=quotient_1"))
                                 (rule "equal_literals" (formula "19") (term "0"))
                                  (builtin "One Step Simplification" (formula "19"))
                                 (rule "qeq_literals" (formula "19") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "19"))
                                 (rule "mul_literals" (formula "19") (term "1,1,1"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "polySimp_addComm1" (formula "21") (term "1"))
                                 (rule "add_literals" (formula "21") (term "0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "20"))
                                 (rule "inEqSimp_homoInEq1" (formula "21"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "21") (term "0"))
                                 (rule "applyEq" (formula "23") (term "1,0,0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "22") (term "1") (ifseqformula "19"))
                                 (rule "mod_axiom" (formula "23") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,0"))
                                 (rule "polySimp_homoEq" (formula "23"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "0,1,0"))
                                 (rule "mul_literals" (formula "23") (term "0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "23") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "23") (term "0,0,0"))
                                 (rule "add_literals" (formula "23") (term "0,0,0,0"))
                                 (rule "add_zero_left" (formula "23") (term "0,0,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "23"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "1"))
                                 (rule "polySimp_rightDist" (formula "23") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                                 (rule "polySimp_mulAssoc" (formula "23") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "23") (term "0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "23") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "23") (term "0,1"))
                                 (rule "applyEq" (formula "18") (term "0") (ifseqformula "23"))
                                 (rule "inEqSimp_homoInEq1" (formula "18"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0"))
                                 (rule "applyEq" (formula "17") (term "0") (ifseqformula "23"))
                                 (rule "inEqSimp_homoInEq0" (formula "17"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "17") (term "0"))
                                 (rule "applyEq" (formula "28") (term "0,1,0,0") (ifseqformula "23"))
                                 (rule "applyEq" (formula "28") (term "1,1,0,0,1,0") (ifseqformula "23"))
                                 (rule "polySimp_addAssoc" (formula "28") (term "1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "21"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1"))
                                 (rule "mul_literals" (formula "21") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "18"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                                 (rule "mul_literals" (formula "18") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
                                 (rule "mul_literals" (formula "17") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "21"))
                                 (rule "mul_literals" (formula "15") (term "0,0"))
                                 (rule "add_zero_left" (formula "15") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                 (rule "mul_literals" (formula "15") (term "1"))
                                 (rule "elimGcdGeq_antec" (formula "15") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(4(6(#)))"))
                                 (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,1,0"))
                                 (rule "leq_literals" (formula "15") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0"))
                                 (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_addLiterals" (formula "15") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
                                 (rule "add_literals" (formula "15") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "15") (term "1,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0"))
                                 (rule "leq_literals" (formula "15") (term "0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "13"))
                                 (rule "polySimp_mulAssoc" (formula "21") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "21") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "21"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                                 (rule "elimGcdLeq_antec" (formula "21") (inst "elimGcdRightDiv=Z(1(3(4(4(5(5(3(3(#)))))))))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(4(6(#)))"))
                                 (rule "neg_literal" (formula "21") (term "0,0,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,1,0"))
                                 (rule "leq_literals" (formula "21") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0"))
                                 (rule "polySimp_addLiterals" (formula "21") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0"))
                                 (rule "add_literals" (formula "21") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "21") (term "1,0,0"))
                                 (rule "add_literals" (formula "21") (term "0,0"))
                                 (rule "qeq_literals" (formula "21") (term "0"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "div_axiom" (formula "25") (term "0,1,1") (inst "quotient=quotient_2"))
                                 (rule "mul_literals" (formula "25") (term "1,1,1,1,1"))
                                 (rule "qeq_literals" (formula "25") (term "0,1,1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "equal_literals" (formula "25") (term "0"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "andLeft" (formula "25"))
                                 (rule "polySimp_addAssoc" (formula "27") (term "0,1"))
                                 (rule "add_literals" (formula "27") (term "0,0,1"))
                                 (rule "polySimp_addComm1" (formula "27") (term "1"))
                                 (rule "add_literals" (formula "27") (term "0,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "26"))
                                 (rule "polySimp_mulLiterals" (formula "26") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "26") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "27"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "27") (term "0"))
                                 (rule "applyEq" (formula "33") (term "0,1,0,1,0,0") (ifseqformula "25"))
                                 (rule "polySimp_addComm0" (formula "33") (term "0,1,0,0"))
                                 (rule "applyEqRigid" (formula "18") (term "0,0") (ifseqformula "25"))
                                 (rule "inEqSimp_homoInEq1" (formula "18"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0"))
                                 (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "24"))
                                 (rule "inEqSimp_homoInEq0" (formula "18"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "18") (term "0"))
                                 (rule "applyEqRigid" (formula "31") (term "0,1,1,0,0,1,0") (ifseqformula "23"))
                                 (rule "polySimp_addComm1" (formula "31") (term "1,0,0,1,0"))
                                 (rule "applyEq" (formula "26") (term "0,1,1") (ifseqformula "23"))
                                 (rule "polySimp_addComm0" (formula "26") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                                 (rule "polySimp_mulComm0" (formula "24") (term "1"))
                                 (rule "polySimp_rightDist" (formula "24") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                                 (rule "mul_literals" (formula "24") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "25"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1"))
                                 (rule "mul_literals" (formula "25") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "19"))
                                 (rule "polySimp_rightDist" (formula "24") (term "0,0"))
                                 (rule "mul_literals" (formula "24") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "24") (term "0"))
                                 (rule "add_literals" (formula "24") (term "0,0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "24"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "0"))
                                 (rule "elimGcdLeq_antec" (formula "24") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,0,1,0"))
                                 (rule "neg_literal" (formula "24") (term "0,0,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0,0,1,0"))
                                 (rule "leq_literals" (formula "24") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_addLiterals" (formula "24") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "24") (term "0,0"))
                                 (rule "add_literals" (formula "24") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "24") (term "1,0,0"))
                                 (rule "add_literals" (formula "24") (term "0,0"))
                                 (rule "qeq_literals" (formula "24") (term "0"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "26"))
                                 (rule "mul_literals" (formula "15") (term "0,0"))
                                 (rule "add_zero_left" (formula "15") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                 (rule "mul_literals" (formula "15") (term "1"))
                                 (rule "elimGcdGeq_antec" (formula "15") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
                                 (rule "leq_literals" (formula "15") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_addLiterals" (formula "15") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
                                 (rule "add_literals" (formula "15") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "15") (term "1,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0"))
                                 (rule "leq_literals" (formula "15") (term "0"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "inEqSimp_antiSymm" (formula "15") (ifseqformula "25"))
                                 (rule "applyEq" (formula "28") (term "0,1,1") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "28") (term "1,1"))
                                 (rule "add_literals" (formula "28") (term "1"))
                                 (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
                                 (rule "qeq_literals" (formula "16"))
                                 (rule "true_left" (formula "16"))
                                 (rule "applyEq" (formula "26") (term "0,1,1") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "26") (term "1,1"))
                                 (rule "add_literals" (formula "26") (term "1"))
                                 (rule "applyEqRigid" (formula "25") (term "0") (ifseqformula "15"))
                                 (rule "leq_literals" (formula "25"))
                                 (rule "true_left" (formula "25"))
                                 (rule "applyEqRigid" (formula "24") (term "1") (ifseqformula "15"))
                                 (rule "applyEqRigid" (formula "32") (term "0,0,0,1,0,0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "32") (term "0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "32") (term "0,1,0,0"))
                                 (rule "applyEq" (formula "32") (term "0,1,0,1,0,0,1,0") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "32") (term "1,0,1,0,0,1,0"))
                                 (rule "add_literals" (formula "32") (term "0,1,0,0,1,0"))
                                 (rule "applyEqRigid" (formula "27") (term "0,0,1") (ifseqformula "15"))
                                 (rule "mul_literals" (formula "27") (term "0,1"))
                                 (rule "add_zero_left" (formula "27") (term "1"))
                                 (rule "inEqSimp_subsumption0" (formula "26") (ifseqformula "20"))
                                 (rule "leq_literals" (formula "26") (term "0"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "16"))
                                 (rule "leq_literals" (formula "25") (term "0"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "true_left" (formula "25"))
                                 (rule "ifElseSplit" (formula "30"))
                                 (branch "if x_20 true"
                                     (builtin "One Step Simplification" (formula "1"))
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "inEqSimp_geqRight" (formula "27"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "assignment" (formula "31") (term "1"))
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
                                    (rule "mul_literals" (formula "6") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                    (rule "mul_literals" (formula "6") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "18") (ifseqformula "6"))
                                    (rule "leq_literals" (formula "18") (term "0"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "true_left" (formula "18"))
                                    (rule "methodCallReturn" (formula "31") (term "1"))
                                    (rule "assignment" (formula "31") (term "1"))
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "methodCallEmpty" (formula "31") (term "1"))
                                    (rule "tryEmpty" (formula "31") (term "1"))
                                    (rule "emptyModality" (formula "31") (term "1"))
                                     (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "19")))
                                    (rule "notRight" (formula "31"))
                                    (rule "Class_invariant_axiom_for_BitSet" (formula "20") (inst "x=x_24") (inst "x_0=x_0") (inst "i=i") (ifseqformula "15"))
                                    (rule "expand_inInt" (formula "20") (term "1,0,0,1"))
                                    (rule "expand_inInt" (formula "20") (term "1,0,0,1,0"))
                                    (rule "expand_inInt" (formula "20") (term "1,0,0,1,0,0"))
                                    (rule "replace_int_MIN" (formula "20") (term "0,1,1,0,0,1"))
                                    (rule "replace_int_MAX" (formula "20") (term "1,0,1,0,0,1"))
                                    (rule "replace_int_MIN" (formula "20") (term "0,1,1,0,0,1,0"))
                                    (rule "replace_int_MAX" (formula "20") (term "1,0,1,0,0,1,0"))
                                    (rule "replace_int_MIN" (formula "20") (term "0,1,1,0,0,1,0,0"))
                                    (rule "replace_int_MAX" (formula "20") (term "1,0,1,0,0,1,0,0"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "20"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "eqSymm" (formula "24") (term "1,0"))
                                    (rule "translateJavaSubInt" (formula "22") (term "0,2,0,0,1"))
                                    (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "23") (term "1,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "20"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0"))
                                    (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0"))
                                    (rule "inEqSimp_contradEq7" (formula "22") (term "0,0") (ifseqformula "8"))
                                    (rule "mul_literals" (formula "22") (term "1,0,0,0,0"))
                                    (rule "add_literals" (formula "22") (term "0,0,0,0"))
                                    (rule "leq_literals" (formula "22") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "notLeft" (formula "22"))
                                    (rule "inEqSimp_subsumption0" (formula "21") (ifseqformula "4"))
                                    (rule "inEqSimp_homoInEq0" (formula "21") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                                    (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                                    (rule "polySimp_addComm0" (formula "21") (term "0,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0"))
                                    (rule "add_literals" (formula "21") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "21") (term "1,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0"))
                                    (rule "qeq_literals" (formula "21") (term "0"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "8"))
                                    (rule "leq_literals" (formula "20") (term "0"))
                                     (builtin "One Step Simplification" (formula "20"))
                                    (rule "true_left" (formula "20"))
                                    (rule "nnf_imp2or" (formula "22") (term "0"))
                                    (rule "nnf_imp2or" (formula "21") (term "0"))
                                    (rule "expand_subJint" (formula "31") (term "0,2,0"))
                                    (rule "polySimp_elimSub" (formula "31") (term "0,0,2,0"))
                                    (rule "mul_literals" (formula "31") (term "1,0,0,2,0"))
                                    (rule "polySimp_addComm0" (formula "31") (term "0,0,2,0"))
                                    (rule "nnf_imp2or" (formula "20") (term "0"))
                                    (rule "expand_moduloInteger" (formula "31") (term "0,2,0"))
                                    (rule "replace_int_HALFRANGE" (formula "31") (term "0,0,1,0,2,0"))
                                    (rule "replace_int_RANGE" (formula "31") (term "1,1,0,2,0"))
                                    (rule "replace_int_MIN" (formula "31") (term "0,0,2,0"))
                                    (rule "polySimp_addAssoc" (formula "31") (term "0,1,0,2,0"))
                                    (rule "add_literals" (formula "31") (term "0,0,1,0,2,0"))
                                    (rule "mod_axiom" (formula "31") (term "1,0,2,0"))
                                    (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,2,0"))
                                    (rule "polySimp_addAssoc" (formula "31") (term "0,2,0"))
                                    (rule "polySimp_addAssoc" (formula "31") (term "0,0,2,0"))
                                    (rule "add_literals" (formula "31") (term "0,0,0,2,0"))
                                    (rule "applyEq" (formula "31") (term "0,1,0,2,0") (ifseqformula "11"))
                                    (rule "mul_literals" (formula "31") (term "1,0,2,0"))
                                    (rule "add_zero_right" (formula "31") (term "0,2,0"))
                                    (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                    (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                    (rule "nnf_notAnd" (formula "22") (term "1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "22") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "22") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "22") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0"))
                                    (rule "add_literals" (formula "22") (term "0,0,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "21") (term "1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "21") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "21") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,0,0,1,1,0,0"))
                                    (rule "add_literals" (formula "21") (term "0,0,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "21") (term "1,1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "20") (term "1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "20") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "1,0,0,0,1,0,0"))
                                    (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "1,0,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "20") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "1,0,0,1,1,0,0"))
                                    (rule "add_literals" (formula "20") (term "0,0,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "20") (term "1,1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "20") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0"))
                                    (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0"))
                                    (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0"))
                                    (rule "shift_paren_or" (formula "22") (term "0,0"))
                                    (rule "shift_paren_or" (formula "21") (term "0,0"))
                                    (rule "commute_or_2" (formula "21") (term "0"))
                                    (rule "commute_or_2" (formula "20") (term "0,0"))
                                    (rule "commute_or_2" (formula "22") (term "0,0"))
                                    (rule "commute_or_2" (formula "22") (term "0"))
                                    (rule "inEqSimp_or_subsumption3" (formula "22") (term "0"))
                                    (rule "qeq_literals" (formula "22") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "commute_or_2" (formula "21") (term "0,0"))
                                    (rule "commute_or_2" (formula "21") (term "0"))
                                    (rule "commute_or" (formula "20") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "20") (term "0,0"))
                                    (rule "commute_or" (formula "21") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "21") (term "0,0"))
                                    (rule "inEqSimp_or_subsumption1" (formula "21") (term "0,0"))
                                    (rule "qeq_literals" (formula "21") (term "0,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "commute_or" (formula "20") (term "0,0,0,0"))
                                    (rule "ifthenelse_to_or_left" (formula "21") (term "0,0,0"))
                                    (rule "eqSymm" (formula "21") (term "1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "eqSymm" (formula "21") (term "1,0,0,0,0"))
                                    (rule "commute_or" (formula "21") (term "0,0"))
                                    (rule "commute_or_2" (formula "21") (term "0"))
                                    (rule "commute_or" (formula "21") (term "1,1,0"))
                                    (rule "commute_or" (formula "21") (term "0,1,0"))
                                    (rule "cnf_rightDist" (formula "21") (term "0"))
                                    (rule "distr_forallAnd" (formula "21"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "commute_or_2" (formula "21") (term "0"))
                                    (rule "shift_paren_or" (formula "22") (term "0"))
                                    (rule "commute_or" (formula "21") (term "0,0"))
                                    (rule "allLeft" (formula "21") (inst "t=bitIndex"))
                                    (rule "replace_known_left" (formula "21") (term "0,1,0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "Query_axiom_for_get_int__in_BitSet" (formula "21") (term "0,0,0") (inst "get_sk=get_sk_0") (inst "#p0=x_1") (inst "#self=b") (inst "#res=x") (ifseqformula "15"))
                                    (rule "eqSymm" (formula "21") (term "0,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "19"))
                                    (rule "qeq_literals" (formula "22") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "inEqSimp_contradInEq0" (formula "22") (term "1") (ifseqformula "16"))
                                    (rule "qeq_literals" (formula "22") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "applyEqRigid" (formula "21") (term "1,0,1") (ifseqformula "22"))
                                    (rule "boxToDiamond" (formula "21") (term "1"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "notLeft" (formula "21"))
                                    (rule "methodBodyExpand" (formula "33") (term "1") (newnames "heapBefore_get_0,savedHeapBefore_get_0"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "ifUnfold" (formula "33") (term "1") (inst "#boolv=x_2"))
                                    (rule "variableDeclaration" (formula "33") (term "1") (newnames "x_24"))
                                    (rule "less_than_comparison_simple" (formula "33") (term "1"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0,1,0"))
                                    (rule "mul_literals" (formula "33") (term "1,0,0,0,0,1,0"))
                                    (rule "add_literals" (formula "33") (term "0,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,1,0"))
                                    (rule "mul_literals" (formula "33") (term "1,0,0,1,0"))
                                    (rule "inEqSimp_contradInEq1" (formula "33") (term "0,0,1,0") (ifseqformula "19"))
                                    (rule "qeq_literals" (formula "33") (term "0,0,0,1,0"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "ifSplit" (formula "33"))
                                    (branch "if x_24 true"
                                        (builtin "One Step Simplification" (formula "34"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if x_24 false"
                                        (builtin "One Step Simplification" (formula "34"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                        (builtin "Use Operation Contract" (formula "33") (newnames "heapBefore_checkInvariants_0,exc_1,heapAfter_checkInvariants,anon_heap_checkInvariants") (contract "BitSet[BitSet::checkInvariants()].JML exceptional_behavior operation contract.0#BitSet[BitSet::checkInvariants()].JML normal_behavior operation contract.0"))
                                       (branch "Post (checkInvariants)"
                                           (builtin "One Step Simplification" (formula "35"))
                                           (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "38")) (ifInst ""  (formula "3")) (ifInst ""  (formula "38")) (ifInst ""  (formula "3")))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "typeEqDerived" (formula "36") (term "0,0,0,1,1,0") (ifseqformula "35"))
                                          (rule "typeEqDerived" (formula "36") (term "0,1,1,1,1,0") (ifseqformula "35"))
                                          (rule "typeEqDerived" (formula "36") (term "0,0,1,1,1,0") (ifseqformula "35"))
                                           (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "35")) (ifInst ""  (formula "35")))
                                          (rule "notLeft" (formula "36"))
                                          (rule "orRight" (formula "36"))
                                          (rule "notRight" (formula "36"))
                                          (rule "notRight" (formula "37"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "translateJavaSubInt" (formula "3") (term "0,2,0,0,1"))
                                          (rule "variableDeclarationAssign" (formula "39") (term "1"))
                                          (rule "variableDeclaration" (formula "39") (term "1") (newnames "wordIndex_1"))
                                          (rule "inEqSimp_contradEq7" (formula "3") (term "0") (ifseqformula "11"))
                                          (rule "mul_literals" (formula "3") (term "1,0,0,0"))
                                          (rule "add_literals" (formula "3") (term "0,0,0"))
                                          (rule "leq_literals" (formula "3") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "notLeft" (formula "3"))
                                          (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "6"))
                                          (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                                          (rule "mul_literals" (formula "2") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "2") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                                          (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "2") (term "0,0"))
                                          (rule "qeq_literals" (formula "2") (term "0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "9"))
                                          (rule "leq_literals" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "expand_subJint" (formula "36") (term "0,2,0"))
                                          (rule "polySimp_elimSub" (formula "36") (term "0,0,2,0"))
                                          (rule "mul_literals" (formula "36") (term "1,0,0,2,0"))
                                          (rule "polySimp_addComm0" (formula "36") (term "0,0,2,0"))
                                          (rule "expand_moduloInteger" (formula "36") (term "0,2,0"))
                                          (rule "replace_int_MIN" (formula "36") (term "0,0,2,0"))
                                          (rule "replace_int_HALFRANGE" (formula "36") (term "0,0,1,0,2,0"))
                                          (rule "replace_int_RANGE" (formula "36") (term "1,1,0,2,0"))
                                          (rule "polySimp_addAssoc" (formula "36") (term "0,1,0,2,0"))
                                          (rule "add_literals" (formula "36") (term "0,0,1,0,2,0"))
                                          (rule "mod_axiom" (formula "36") (term "1,0,2,0"))
                                          (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,2,0"))
                                          (rule "polySimp_addAssoc" (formula "36") (term "0,2,0"))
                                          (rule "polySimp_addAssoc" (formula "36") (term "0,0,2,0"))
                                          (rule "add_literals" (formula "36") (term "0,0,0,2,0"))
                                          (rule "applyEq" (formula "36") (term "0,1,0,2,0") (ifseqformula "11"))
                                          (rule "mul_literals" (formula "36") (term "1,0,2,0"))
                                          (rule "add_zero_right" (formula "36") (term "0,2,0"))
                                           (builtin "Use Operation Contract" (formula "36") (newnames "heapBefore_wordIndex_0,result_wordIndex_0,exc_2") (contract "BitSet[BitSet::wordIndex(int)].JML normal_behavior operation contract.0"))
                                          (branch "Post (wordIndex)"
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "expand_inInt" (formula "36") (term "1,0"))
                                             (rule "replace_int_MAX" (formula "36") (term "1,0,1,0"))
                                             (rule "replace_int_MIN" (formula "36") (term "0,1,1,0"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "andLeft" (formula "37"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "andLeft" (formula "37"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "eqSymm" (formula "39") (term "1"))
                                             (rule "translateJavaDivInt" (formula "39") (term "0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "37"))
                                             (rule "assignment" (formula "41") (term "1"))
                                              (builtin "One Step Simplification" (formula "41"))
                                             (rule "inEqSimp_contradEq7" (formula "38") (term "0") (ifseqformula "19"))
                                             (rule "mul_literals" (formula "38") (term "1,0,0,0"))
                                             (rule "add_literals" (formula "38") (term "0,0,0"))
                                             (rule "leq_literals" (formula "38") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "true_left" (formula "38"))
                                             (rule "inEqSimp_contradEq7" (formula "38") (term "0,0") (ifseqformula "19"))
                                             (rule "mul_literals" (formula "38") (term "1,0,0,0,0"))
                                             (rule "add_literals" (formula "38") (term "0,0,0,0"))
                                             (rule "leq_literals" (formula "38") (term "0,0,0"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "expand_divJint" (formula "38") (term "0"))
                                             (rule "applyEq" (formula "38") (term "0,0") (ifseqformula "29"))
                                             (rule "expand_moduloInteger" (formula "38") (term "0"))
                                             (rule "replace_int_MIN" (formula "38") (term "0,0"))
                                             (rule "replace_int_RANGE" (formula "38") (term "1,1,0"))
                                             (rule "replace_int_HALFRANGE" (formula "38") (term "0,0,1,0"))
                                             (rule "polySimp_homoEq" (formula "38"))
                                             (rule "polySimp_mulComm0" (formula "38") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "38") (term "1,0"))
                                             (rule "mul_literals" (formula "38") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "38") (term "0"))
                                             (rule "polySimp_addComm0" (formula "38") (term "0,0"))
                                             (rule "mod_axiom" (formula "38") (term "0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "38") (term "1,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "38") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "38") (term "1,0"))
                                             (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0"))
                                             (rule "polySimp_rightDist" (formula "38") (term "0,1,0"))
                                             (rule "mul_literals" (formula "38") (term "0,0,1,0"))
                                             (rule "polySimp_addComm1" (formula "38") (term "0"))
                                             (rule "polySimp_addAssoc" (formula "38") (term "0,0"))
                                             (rule "polySimp_addAssoc" (formula "38") (term "0,0,0"))
                                             (rule "add_literals" (formula "38") (term "0,0,0,0"))
                                             (rule "add_zero_left" (formula "38") (term "0,0,0"))
                                             (rule "applyEq" (formula "38") (term "0,1,0,0") (ifseqformula "30"))
                                             (rule "mul_literals" (formula "38") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "38") (term "0,0"))
                                             (rule "polySimp_sepPosMonomial" (formula "38"))
                                             (rule "polySimp_mulLiterals" (formula "38") (term "1"))
                                             (rule "polySimp_elimOne" (formula "38") (term "1"))
                                             (rule "applyEq" (formula "40") (term "0,1,0") (ifseqformula "38"))
                                             (rule "applyEq" (formula "37") (term "0") (ifseqformula "38"))
                                             (rule "applyEq" (formula "36") (term "0") (ifseqformula "38"))
                                             (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                             (rule "leq_literals" (formula "37") (term "0"))
                                              (builtin "One Step Simplification" (formula "37"))
                                             (rule "true_left" (formula "37"))
                                             (rule "inEqSimp_subsumption0" (formula "36") (ifseqformula "26"))
                                             (rule "leq_literals" (formula "36") (term "0"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "true_left" (formula "36"))
                                             (rule "returnUnfold" (formula "38") (term "1") (inst "#v0=x_2"))
                                             (rule "variableDeclarationAssign" (formula "38") (term "1"))
                                             (rule "variableDeclaration" (formula "38") (term "1") (newnames "x_25"))
                                             (rule "compound_assignment_3_nonsimple" (formula "38") (term "1"))
                                             (rule "ifElseUnfold" (formula "38") (term "1") (inst "#boolv=x_26"))
                                             (rule "variableDeclaration" (formula "38") (term "1") (newnames "x_26"))
                                             (rule "compound_assignment_2" (formula "38") (term "1") (inst "#v=x_27"))
                                             (rule "variableDeclarationAssign" (formula "38") (term "1"))
                                             (rule "variableDeclaration" (formula "38") (term "1") (newnames "x_27"))
                                             (rule "remove_parentheses_right" (formula "38") (term "1"))
                                             (rule "compound_less_than_comparison_2" (formula "38") (term "1") (inst "#v1=x_29") (inst "#v0=x_28"))
                                             (rule "variableDeclarationAssign" (formula "38") (term "1"))
                                             (rule "variableDeclaration" (formula "38") (term "1") (newnames "x_28"))
                                             (rule "assignment" (formula "38") (term "1"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "variableDeclarationAssign" (formula "38") (term "1"))
                                             (rule "variableDeclaration" (formula "38") (term "1") (newnames "x_29"))
                                             (rule "assignment_read_attribute_this" (formula "38") (term "1"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "pullOutSelect" (formula "38") (term "0,1,0") (inst "selectSK=BitSet_wordsInUse_0"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")) (ifInst ""  (formula "15")))
                                             (rule "applyEqReverse" (formula "39") (term "0,1,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "less_than_comparison_simple" (formula "38") (term "1"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,1,0"))
                                             (rule "polySimp_addComm1" (formula "38") (term "0,0,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "38") (term "0,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "38") (term "0,0,0,1,0"))
                                             (rule "inEqSimp_contradInEq0" (formula "38") (term "0,0,1,0") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "38") (term "0,0,0,1,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,0,0,1,0"))
                                             (rule "add_literals" (formula "38") (term "1,1,0,0,0,0,1,0"))
                                             (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,1,0"))
                                             (rule "add_literals" (formula "38") (term "0,0,0,0,1,0"))
                                             (rule "leq_literals" (formula "38") (term "0,0,0,1,0"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "compound_assignment_1_new" (formula "38") (term "1"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "ifElseSplit" (formula "38"))
                                             (branch "if x_26 true"
                                                 (builtin "One Step Simplification" (formula "1"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "true_left" (formula "1"))
                                                (rule "assignment" (formula "38") (term "1"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "methodCallReturn" (formula "38") (term "1"))
                                                (rule "assignment" (formula "38") (term "1"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "methodCallEmpty" (formula "38") (term "1"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "emptyModality" (formula "38") (term "1"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "closeTrue" (formula "38"))
                                             )
                                             (branch "if x_26 false"
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                          )
                                          (branch "Exceptional Post (wordIndex)"
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "andLeft" (formula "37"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "andLeft" (formula "38"))
                                             (rule "notLeft" (formula "36"))
                                             (rule "close" (formula "40") (ifseqformula "39"))
                                          )
                                          (branch "Pre (wordIndex)"
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "wellFormedAnonEQ" (formula "36") (term "0,1") (ifseqformula "34"))
                                             (rule "expand_inInt" (formula "36") (term "1,1"))
                                             (rule "replace_int_MAX" (formula "36") (term "1,0,1,1"))
                                             (rule "replace_int_MIN" (formula "36") (term "0,1,1,1"))
                                             (rule "replace_known_left" (formula "36") (term "1,0,1") (ifseqformula "33"))
                                              (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "13")) (ifInst ""  (formula "16")))
                                             (rule "inEqSimp_commuteLeq" (formula "36") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "36") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "36") (term "1") (ifseqformula "19"))
                                             (rule "leq_literals" (formula "36") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "inEqSimp_geqRight" (formula "36"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "mul_literals" (formula "1") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "20"))
                                             (rule "qeq_literals" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                       )
                                       (branch "Exceptional Post (checkInvariants)"
                                           (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "38")) (ifInst ""  (formula "3")) (ifInst ""  (formula "38")) (ifInst ""  (formula "3")))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "35"))
                                          (rule "andLeft" (formula "37"))
                                          (rule "notLeft" (formula "35"))
                                          (rule "translateJavaSubInt" (formula "37") (term "0,2,0,0,1,0,0"))
                                          (rule "translateJavaSubInt" (formula "36") (term "0,2,0,0,1,0,0,0"))
                                          (rule "replace_known_right" (formula "36") (term "0,0,1") (ifseqformula "38"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "replace_known_right" (formula "37") (term "1") (ifseqformula "38"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "notLeft" (formula "37"))
                                          (rule "inEqSimp_ltToLeq" (formula "36") (term "1,1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,1,0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "36") (term "0,1,0,1"))
                                          (rule "times_zero_1" (formula "36") (term "1,0,0,0,1,0,1"))
                                          (rule "add_literals" (formula "36") (term "0,0,0,1,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,1,0,1"))
                                          (rule "polySimp_mulComm0" (formula "36") (term "1,1,1,0,1"))
                                          (rule "polySimp_rightDist" (formula "36") (term "1,1,1,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,1,0,1"))
                                          (rule "mul_literals" (formula "36") (term "0,1,1,1,0,1"))
                                          (rule "polySimp_elimOne" (formula "36") (term "1,1,1,1,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "0,1,0,1"))
                                          (rule "mul_literals" (formula "36") (term "1,0,1,0,1"))
                                          (rule "inEqSimp_contradEq7" (formula "36") (term "0,0,0,0") (ifseqformula "8"))
                                          (rule "mul_literals" (formula "36") (term "1,0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "36") (term "0,0,0,0,0,0"))
                                          (rule "leq_literals" (formula "36") (term "0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "inEqSimp_contradEq7" (formula "37") (term "0,0") (ifseqformula "8"))
                                          (rule "mul_literals" (formula "37") (term "1,0,0,0,0"))
                                          (rule "add_literals" (formula "37") (term "0,0,0,0"))
                                          (rule "leq_literals" (formula "37") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "inEqSimp_subsumption0" (formula "36") (term "1,0,1,0") (ifseqformula "4"))
                                          (rule "inEqSimp_homoInEq0" (formula "36") (term "0,1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,1,0"))
                                          (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,1,0"))
                                          (rule "polySimp_addComm0" (formula "36") (term "0,0,0,1,0,1,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1,0,1,0"))
                                          (rule "add_literals" (formula "36") (term "1,1,0,0,1,0,1,0"))
                                          (rule "times_zero_1" (formula "36") (term "1,0,0,1,0,1,0"))
                                          (rule "add_literals" (formula "36") (term "0,0,1,0,1,0"))
                                          (rule "qeq_literals" (formula "36") (term "0,1,0,1,0"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "inEqSimp_subsumption0" (formula "37") (term "1,1") (ifseqformula "4"))
                                          (rule "inEqSimp_homoInEq0" (formula "37") (term "0,1,1"))
                                          (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,1"))
                                          (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,1"))
                                          (rule "mul_literals" (formula "37") (term "0,1,0,0,1,1"))
                                          (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,1"))
                                          (rule "polySimp_addComm0" (formula "37") (term "0,0,0,1,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1,1"))
                                          (rule "add_literals" (formula "37") (term "1,1,0,0,1,1"))
                                          (rule "times_zero_1" (formula "37") (term "1,0,0,1,1"))
                                          (rule "add_literals" (formula "37") (term "0,0,1,1"))
                                          (rule "qeq_literals" (formula "37") (term "0,1,1"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "inEqSimp_subsumption1" (formula "36") (term "0,1,0") (ifseqformula "8"))
                                          (rule "leq_literals" (formula "36") (term "0,0,1,0"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "inEqSimp_subsumption1" (formula "37") (term "1") (ifseqformula "8"))
                                          (rule "leq_literals" (formula "37") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "notRight" (formula "37"))
                                          (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "andLeft" (formula "37"))
                                          (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=java_lang_Object_created__0"))
                                          (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "35"))
                                           (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "40")))
                                          (rule "ifthenelse_negated" (formula "36") (term "0"))
                                          (rule "applyEqRigid" (formula "36") (term "1") (ifseqformula "37"))
                                          (rule "ifEqualsTRUE" (formula "36"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "pullOutSelect" (formula "38") (term "1,1,1,1") (inst "selectSK=BitSet_wordsInUse_0"))
                                          (rule "applyEq" (formula "39") (term "0,0,1") (ifseqformula "38"))
                                          (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "35"))
                                           (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "44")) (ifInst ""  (formula "15")))
                                          (rule "applyEqReverse" (formula "39") (term "1,1,1,1") (ifseqformula "38"))
                                          (rule "applyEqReverse" (formula "39") (term "0,0,1") (ifseqformula "38"))
                                          (rule "hideAuxiliaryEq" (formula "38"))
                                          (rule "inEqSimp_contradInEq1" (formula "38") (term "0,1") (ifseqformula "9"))
                                          (rule "qeq_literals" (formula "38") (term "0,0,1"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "pullOutSelect" (formula "38") (term "0,0,1") (inst "selectSK=BitSet_words_0"))
                                          (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "35"))
                                           (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "44")) (ifInst ""  (formula "15")))
                                          (rule "applyEqReverse" (formula "39") (term "0,0,1") (ifseqformula "38"))
                                          (rule "hideAuxiliaryEq" (formula "38"))
                                          (rule "inEqSimp_homoInEq0" (formula "38") (term "1"))
                                          (rule "polySimp_addComm1" (formula "38") (term "0,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,1"))
                                          (rule "polySimp_rightDist" (formula "38") (term "1,1"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1"))
                                          (rule "mul_literals" (formula "38") (term "0,1,1"))
                                          (rule "polySimp_elimOne" (formula "38") (term "1,1,1"))
                                          (rule "inEqSimp_contradInEq0" (formula "38") (term "1") (ifseqformula "5"))
                                          (rule "inEqSimp_homoInEq1" (formula "38") (term "0,1"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1"))
                                          (rule "mul_literals" (formula "38") (term "0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "38") (term "0,0,1"))
                                          (rule "polySimp_addComm1" (formula "38") (term "0,0,0,1"))
                                          (rule "add_literals" (formula "38") (term "0,0,0,0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0,1"))
                                          (rule "add_literals" (formula "38") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "38") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "38") (term "0,0,1"))
                                          (rule "leq_literals" (formula "38") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "notLeft" (formula "38"))
                                          (rule "replace_known_right" (formula "38") (term "1") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "instanceof_not_compatible_5" (formula "39") (ifseqformula "38"))
                                          (rule "expand_subJint" (formula "1") (term "0,2,0"))
                                          (rule "polySimp_elimSub" (formula "1") (term "0,0,2,0"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0,2,0"))
                                          (rule "polySimp_addComm0" (formula "1") (term "0,0,2,0"))
                                          (rule "hideAuxiliaryEqConcrete" (formula "37"))
                                          (rule "expand_moduloInteger" (formula "1") (term "0,2,0"))
                                          (rule "replace_int_RANGE" (formula "1") (term "1,1,0,2,0"))
                                          (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0,2,0"))
                                          (rule "replace_int_MIN" (formula "1") (term "0,0,2,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,2,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,1,0,2,0"))
                                          (rule "mod_axiom" (formula "1") (term "1,0,2,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,2,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,2,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0,2,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0,2,0"))
                                          (rule "applyEq" (formula "1") (term "0,1,0,2,0") (ifseqformula "12"))
                                          (rule "times_zero_2" (formula "1") (term "1,0,2,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,2,0"))
                                          (rule "close" (formula "40") (ifseqformula "1"))
                                       )
                                       (branch "Pre (checkInvariants)"
                                           (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "36")) (ifInst ""  (formula "3")) (ifInst ""  (formula "36")) (ifInst ""  (formula "3")) (ifInst ""  (formula "13")))
                                          (rule "orRight" (formula "33"))
                                          (rule "orRight" (formula "33"))
                                          (rule "notRight" (formula "33"))
                                          (rule "notRight" (formula "34"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "translateJavaSubInt" (formula "36") (term "0,2,0,0,1,0"))
                                          (rule "translateJavaSubInt" (formula "3") (term "0,2,0,0,1"))
                                          (rule "replace_known_left" (formula "36") (term "0,1") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "3")) (ifInst ""  (formula "2")))
                                          (rule "closeTrue" (formula "36"))
                                       )
                                    )
                                 )
                                 (branch "if x_20 false"
                                     (builtin "One Step Simplification" (formula "1"))
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "3"))
                                    (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1"))
                                    (rule "mul_literals" (formula "1") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                    (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "11"))
                                    (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                    (rule "mul_literals" (formula "2") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "add_literals" (formula "2") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "23"))
                                    (rule "leq_literals" (formula "2") (term "0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "8"))
                                    (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "23"))
                                    (rule "leq_literals" (formula "1") (term "0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "remove_parentheses_right" (formula "32") (term "1"))
                                    (rule "compound_inequality_comparison_1" (formula "32") (term "1") (inst "#v0=x_20"))
                                    (rule "variableDeclarationAssign" (formula "32") (term "1"))
                                    (rule "variableDeclaration" (formula "32") (term "1") (newnames "x_24"))
                                    (rule "remove_parentheses_right" (formula "32") (term "1"))
                                    (rule "compound_binary_AND_2" (formula "32") (term "1") (inst "#v1=x_26") (inst "#v0=x_25"))
                                    (rule "variableDeclarationAssign" (formula "32") (term "1"))
                                    (rule "variableDeclaration" (formula "32") (term "1") (newnames "x_25"))
                                    (rule "eval_order_array_access4" (formula "32") (term "1") (inst "#v0=x_arr"))
                                    (rule "variableDeclarationAssign" (formula "32") (term "1"))
                                    (rule "variableDeclaration" (formula "32") (term "1") (newnames "x_arr_6"))
                                    (rule "assignment_read_attribute_this" (formula "32") (term "1"))
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "assignment_array2" (formula "32") (term "1"))
                                    (branch "Normal Execution (x_arr_6 != null)"
                                        (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "31")))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "orRight" (formula "32"))
                                       (rule "inEqSimp_leqRight" (formula "32"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_ltRight" (formula "33"))
                                       (rule "mul_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "variableDeclarationAssign" (formula "33") (term "1"))
                                       (rule "variableDeclaration" (formula "33") (term "1") (newnames "x_26"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "remove_parentheses_right" (formula "32") (term "1"))
                                       (rule "assignmentShiftLeftLong" (formula "32") (term "1"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "translateJavaShiftLeftLong" (formula "32") (term "0,1,0"))
                                       (rule "javaShiftLeftLongDef" (formula "32") (term "0,1,0"))
                                       (rule "shiftLeftDef" (formula "32") (term "0,0,1,0"))
                                       (rule "polySimp_elimNeg" (formula "32") (term "1,1,0,0,1,0"))
                                       (rule "shiftLeftPositiveShiftDef" (formula "32") (term "2,0,0,1,0"))
                                       (rule "polySimp_elimOneLeft0" (formula "32") (term "2,0,0,1,0"))
                                       (rule "shiftRightPositiveShiftDef" (formula "32") (term "1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,0,1,0"))
                                       (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0,1,0"))
                                       (rule "add_literals" (formula "32") (term "0,0,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,1,0"))
                                       (rule "mul_literals" (formula "32") (term "1,0,0,0,1,0"))
                                       (rule "expand_moduloLong" (formula "32") (term "0,1,0"))
                                       (rule "replace_long_RANGE" (formula "32") (term "1,1,0,1,0"))
                                       (rule "replace_long_HALFRANGE" (formula "32") (term "0,0,1,0,1,0"))
                                       (rule "replace_long_MIN" (formula "32") (term "0,0,1,0"))
                                       (rule "assignmentBitwiseAndLong3" (formula "32") (term "1"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "translateJavaBitwiseAndLong" (formula "32") (term "0,1,0"))
                                       (rule "andJLongDef" (formula "32") (term "0,1,0"))
                                       (rule "expand_moduloLong" (formula "32") (term "0,1,0"))
                                       (rule "replace_long_RANGE" (formula "32") (term "1,1,0,1,0"))
                                       (rule "replace_long_HALFRANGE" (formula "32") (term "0,0,1,0,1,0"))
                                       (rule "replace_long_MIN" (formula "32") (term "0,0,1,0"))
                                       (rule "inequality_comparison_simple" (formula "32") (term "1"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "blockEmpty" (formula "32") (term "1"))
                                       (rule "polySimp_sepPosMonomial" (formula "32") (term "0,0,1,0"))
                                       (rule "mul_literals" (formula "32") (term "1,0,0,1,0"))
                                       (rule "methodCallReturn" (formula "32") (term "1"))
                                       (rule "assignment" (formula "32") (term "1"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "methodCallEmpty" (formula "32") (term "1"))
                                       (rule "tryEmpty" (formula "32") (term "1"))
                                       (rule "emptyModality" (formula "32") (term "1"))
                                        (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "20")))
                                       (rule "eqSymm" (formula "32"))
                                       (rule "mod_axiom" (formula "32") (term "1,2,1,0,1,1,1,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "1,1,2,1,0,1,1,1,0,0,0,0"))
                                       (rule "applyEq" (formula "32") (term "0,1,1,2,1,0,1,1,1,0,0,0,0") (ifseqformula "21"))
                                       (rule "polySimp_addComm0" (formula "32") (term "1,2,1,0,1,1,1,0,0,0,0"))
                                       (rule "mod_axiom" (formula "32") (term "0,0,1,0,1,1,1,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0,1,0,1,1,1,0,0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "32") (term "0,1,0,1,1,1,0,0,0,0"))
                                       (rule "eqSymm" (formula "32"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,1,1,1,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,1,1,1,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,1,0,1,1,1,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "0,1,0,0,1,0,1,1,1,0,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,1,1,1,0,0,0,1"))
                                       (rule "applyEq" (formula "32") (term "0,1,0,0,1,0,1,1,1,0,0,0,1") (ifseqformula "21"))
                                       (rule "polySimp_addComm1" (formula "32") (term "0,0,1,0,1,1,1,0,0,0,1"))
                                       (rule "mod_axiom" (formula "32") (term "0,1,1,1,1,0,1,1,1,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "1,0,1,1,1,1,0,1,1,1,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "1,1,1,1,0,1,1,1,0,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "32") (term "1,1,1,1,0,1,1,1,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,1,1,0,1,1,1,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "0,1,1,1,1,0,1,1,1,0,0,0,1"))
                                       (rule "applyEq" (formula "32") (term "0,1,1,1,1,1,0,1,1,1,0,0,0,1") (ifseqformula "21"))
                                       (rule "polySimp_addComm0" (formula "32") (term "1,1,1,1,0,1,1,1,0,0,0,1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "32") (term "0,1,0,1,1,1,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "0,0,1,0,1,1,1,0,0,0,1"))
                                       (rule "eqSymm" (formula "32"))
                                       (rule "polySimp_elimOne" (formula "32") (term "0,0,1,0,1,1,1,0,0,0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "32") (term "0,1,0,1,1,1,0,0,0,0") (ifseqformula "23"))
                                       (rule "inEqSimp_homoInEq1" (formula "32") (term "0,0,1,0,1,1,1,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,1,0,1,1,1,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,1,0,1,1,1,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,1,0,1,1,1,0,0,0,0"))
                                       (rule "mul_literals" (formula "32") (term "0,1,0,0,0,1,0,1,1,1,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,1,0,1,1,1,0,0,0,0"))
                                       (rule "polySimp_addComm0" (formula "32") (term "0,0,0,0,1,0,1,1,1,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "32") (term "0,0,0,1,0,1,1,1,0,0,0,0"))
                                       (rule "add_literals" (formula "32") (term "1,1,0,0,0,1,0,1,1,1,0,0,0,0"))
                                       (rule "times_zero_1" (formula "32") (term "1,0,0,0,1,0,1,1,1,0,0,0,0"))
                                       (rule "add_literals" (formula "32") (term "0,0,0,1,0,1,1,1,0,0,0,0"))
                                       (rule "leq_literals" (formula "32") (term "0,0,1,0,1,1,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "eqSymm" (formula "32"))
                                       (rule "mod_axiom" (formula "32") (term "1,1,1,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,1,0,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "32") (term "1,1,0,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "32") (term "0,1,1,0,0,0,1"))
                                       (rule "add_literals" (formula "32") (term "0,0,1,1,0,0,0,1"))
                                       (rule "add_zero_left" (formula "32") (term "0,1,1,0,0,0,1"))
                                       (rule "Class_invariant_axiom_for_BitSet" (formula "20") (inst "x=x_27") (inst "x_0=x_0") (inst "i=i") (ifseqformula "14"))
                                       (rule "expand_inInt" (formula "20") (term "1,0,0,1"))
                                       (rule "expand_inInt" (formula "20") (term "1,0,0,1,0"))
                                       (rule "expand_inInt" (formula "20") (term "1,0,0,1,0,0"))
                                       (rule "replace_int_MAX" (formula "20") (term "1,0,1,0,0,1"))
                                       (rule "replace_int_MIN" (formula "20") (term "0,1,1,0,0,1"))
                                       (rule "replace_int_MAX" (formula "20") (term "1,0,1,0,0,1,0"))
                                       (rule "replace_int_MIN" (formula "20") (term "0,1,1,0,0,1,0"))
                                       (rule "replace_int_MAX" (formula "20") (term "1,0,1,0,0,1,0,0"))
                                       (rule "replace_int_MIN" (formula "20") (term "0,1,1,0,0,1,0,0"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "20"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "notLeft" (formula "20"))
                                       (rule "eqSymm" (formula "24") (term "1,0"))
                                       (rule "translateJavaSubInt" (formula "22") (term "0,2,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "23") (term "1,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "20"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0"))
                                       (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0"))
                                       (rule "inEqSimp_contradEq7" (formula "22") (term "0,0") (ifseqformula "7"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,0,0"))
                                       (rule "add_literals" (formula "22") (term "0,0,0,0"))
                                       (rule "leq_literals" (formula "22") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "notLeft" (formula "22"))
                                       (rule "inEqSimp_subsumption0" (formula "21") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq0" (formula "21") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "21") (term "1,0,0"))
                                       (rule "mul_literals" (formula "21") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "21") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0"))
                                       (rule "add_literals" (formula "21") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "21") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "21") (term "0,0"))
                                       (rule "qeq_literals" (formula "21") (term "0"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "7"))
                                       (rule "leq_literals" (formula "20") (term "0"))
                                        (builtin "One Step Simplification" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "nnf_imp2or" (formula "22") (term "0"))
                                       (rule "nnf_imp2or" (formula "21") (term "0"))
                                       (rule "expand_subJint" (formula "31") (term "0,2,0"))
                                       (rule "polySimp_elimSub" (formula "31") (term "0,0,2,0"))
                                       (rule "mul_literals" (formula "31") (term "1,0,0,2,0"))
                                       (rule "polySimp_addComm0" (formula "31") (term "0,0,2,0"))
                                       (rule "nnf_imp2or" (formula "20") (term "0"))
                                       (rule "expand_moduloInteger" (formula "31") (term "0,2,0"))
                                       (rule "replace_int_HALFRANGE" (formula "31") (term "0,0,1,0,2,0"))
                                       (rule "replace_int_MIN" (formula "31") (term "0,0,2,0"))
                                       (rule "replace_int_RANGE" (formula "31") (term "1,1,0,2,0"))
                                       (rule "polySimp_addAssoc" (formula "31") (term "0,1,0,2,0"))
                                       (rule "add_literals" (formula "31") (term "0,0,1,0,2,0"))
                                       (rule "mod_axiom" (formula "31") (term "1,0,2,0"))
                                       (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,2,0"))
                                       (rule "polySimp_addAssoc" (formula "31") (term "0,2,0"))
                                       (rule "polySimp_addAssoc" (formula "31") (term "0,0,2,0"))
                                       (rule "add_literals" (formula "31") (term "0,0,0,2,0"))
                                       (rule "applyEq" (formula "31") (term "0,1,0,2,0") (ifseqformula "10"))
                                       (rule "mul_literals" (formula "31") (term "1,0,2,0"))
                                       (rule "add_zero_right" (formula "31") (term "0,2,0"))
                                       (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "21") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "20") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "22") (term "1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "22") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "22") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "22") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "21") (term "1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "21") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "21") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "21") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "21") (term "1,0,1,0,0"))
                                       (rule "nnf_notAnd" (formula "20") (term "1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "20") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "20") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "20") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "20") (term "1,0,1,0,0"))
                                       (rule "nnf_notAnd" (formula "20") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0"))
                                       (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "20") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "20") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0"))
                                       (rule "commute_or" (formula "22") (term "1,0,0"))
                                       (rule "commute_or" (formula "21") (term "1,0,0"))
                                       (rule "commute_or_2" (formula "20") (term "0,0"))
                                       (rule "shift_paren_or" (formula "22") (term "0,0"))
                                       (rule "commute_or_2" (formula "22") (term "0"))
                                       (rule "inEqSimp_or_subsumption3" (formula "22") (term "0"))
                                       (rule "qeq_literals" (formula "22") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "ifthenelse_to_or_left" (formula "21") (term "1,0"))
                                       (rule "eqSymm" (formula "21") (term "1,0,1,0"))
                                       (rule "eqSymm" (formula "21") (term "1,1,1,0"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "commute_or" (formula "20") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "20") (term "0,0"))
                                       (rule "shift_paren_or" (formula "21") (term "0,0"))
                                       (rule "commute_or" (formula "21") (term "1,1,0"))
                                       (rule "commute_or" (formula "21") (term "0,1,0"))
                                       (rule "commute_or" (formula "21") (term "0,0,0"))
                                       (rule "inEqSimp_or_subsumption0" (formula "21") (term "0,0,0"))
                                       (rule "qeq_literals" (formula "21") (term "0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "cnf_rightDist" (formula "21") (term "0"))
                                       (rule "distr_forallAnd" (formula "21"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "commute_or_2" (formula "21") (term "0"))
                                       (rule "shift_paren_or" (formula "22") (term "0"))
                                       (rule "commute_or" (formula "21") (term "0,0"))
                                       (rule "commute_or" (formula "20") (term "0,0,0,0"))
                                       (rule "div_axiom" (formula "35") (term "0,1,1,1,0,0,0,1") (inst "quotient=quotient_3"))
                                       (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                                       (rule "qeq_literals" (formula "1") (term "0,1,1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "equal_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                                       (rule "add_literals" (formula "3") (term "0,0,1"))
                                       (rule "polySimp_addComm1" (formula "3") (term "1"))
                                       (rule "add_literals" (formula "3") (term "0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "applyEq" (formula "38") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
                                       (rule "polySimp_addComm0" (formula "38") (term "1,1,0,0,0,1"))
                                       (rule "mod_axiom" (formula "38") (term "0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "1,0,0,1"))
                                       (rule "polySimp_homoEq" (formula "38") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "38") (term "0,1,0,0,1"))
                                       (rule "mul_literals" (formula "38") (term "0,0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "38") (term "0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,1"))
                                       (rule "add_literals" (formula "38") (term "0,0,0,0,1"))
                                       (rule "add_zero_left" (formula "38") (term "0,0,0,1"))
                                       (rule "polySimp_sepPosMonomial" (formula "38") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "38") (term "1,0,1"))
                                       (rule "polySimp_elimOne" (formula "38") (term "1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1"))
                                       (rule "mul_literals" (formula "2") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                       (rule "mul_literals" (formula "3") (term "0,1"))
                                       (rule "ifthenelse_split" (formula "38") (term "0"))
                                       (branch "in(bitIndex, self.iSet) TRUE"
                                          (rule "eqSymm" (formula "39"))
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "notRight" (formula "39"))
                                          (rule "newSym_eq" (formula "1") (inst "l=l_0") (inst "newSymDef=mul(binaryAnd(int::select(heap,
                          long[]::select(heap,
                                         self,
                                         BitSet::$words),
                          arr(quotient_1)),
              add(mul(quotient_3,
                      Z(neglit(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#))))))))))))))))))))))),
                  pow(Z(2(#)),
                      add(mul(quotient_1,
                              Z(neglit(4(6(#))))),
                          bitIndex)))),
    Z(0(#)))"))
                                          (rule "times_zero_1" (formula "1") (term "1,1"))
                                          (rule "add_zero_right" (formula "1") (term "1"))
                                          (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
                                          (rule "eqSymm" (formula "2"))
                                          (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "2"))
                                          (rule "polyDiv_pullOut" (formula "1") (term "0") (inst "polyDivCoeff=l_0"))
                                          (rule "equal_literals" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
                                          (rule "polySimp_homoEq" (formula "1"))
                                          (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0,1,0"))
                                          (rule "add_literals" (formula "1") (term "1,1,0,0,0,1,0"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0,0,1,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
                                          (rule "div_literals" (formula "1") (term "0,0,1,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,1,0"))
                                          (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "1,0"))
                                          (rule "times_zero_1" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "allLeft" (formula "26") (inst "t=bitIndex"))
                                          (rule "replace_known_left" (formula "26") (term "0,1,0,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "Query_axiom_for_get_int__in_BitSet" (formula "26") (term "0,0,0") (inst "get_sk=get_sk_0") (inst "#p0=x_1") (inst "#self=b") (inst "#res=x") (ifseqformula "19"))
                                          (rule "eqSymm" (formula "26") (term "0,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0") (ifseqformula "24"))
                                          (rule "qeq_literals" (formula "27") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "inEqSimp_contradInEq0" (formula "27") (term "1") (ifseqformula "20"))
                                          (rule "qeq_literals" (formula "27") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "applyEqRigid" (formula "26") (term "1,0,1") (ifseqformula "27"))
                                          (rule "boxToDiamond" (formula "26") (term "1"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "notLeft" (formula "26"))
                                          (rule "methodBodyExpand" (formula "38") (term "1") (newnames "heapBefore_get_0,savedHeapBefore_get_0"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "ifUnfold" (formula "38") (term "1") (inst "#boolv=x_2"))
                                          (rule "variableDeclaration" (formula "38") (term "1") (newnames "x_27"))
                                          (rule "less_than_comparison_simple" (formula "38") (term "1"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,1,0"))
                                          (rule "mul_literals" (formula "38") (term "1,0,0,0,0,1,0"))
                                          (rule "add_literals" (formula "38") (term "0,0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,1,0"))
                                          (rule "mul_literals" (formula "38") (term "1,0,0,1,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "38") (term "0,0,1,0") (ifseqformula "24"))
                                          (rule "qeq_literals" (formula "38") (term "0,0,0,1,0"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "ifSplit" (formula "38"))
                                          (branch "if x_27 true"
                                              (builtin "One Step Simplification" (formula "39"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "if x_27 false"
                                              (builtin "One Step Simplification" (formula "39"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                              (builtin "Use Operation Contract" (formula "38") (newnames "heapBefore_checkInvariants_0,exc_1,heapAfter_checkInvariants,anon_heap_checkInvariants") (contract "BitSet[BitSet::checkInvariants()].JML exceptional_behavior operation contract.0#BitSet[BitSet::checkInvariants()].JML normal_behavior operation contract.0"))
                                             (branch "Post (checkInvariants)"
                                                 (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "43")) (ifInst ""  (formula "8")) (ifInst ""  (formula "43")) (ifInst ""  (formula "8")))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "andLeft" (formula "39"))
                                                (rule "andLeft" (formula "40"))
                                                (rule "typeEqDerived" (formula "41") (term "0,0,0,1,1,0") (ifseqformula "40"))
                                                (rule "typeEqDerived" (formula "41") (term "0,1,1,1,1,0") (ifseqformula "40"))
                                                (rule "typeEqDerived" (formula "41") (term "0,0,1,1,1,0") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "40")) (ifInst ""  (formula "40")))
                                                (rule "notLeft" (formula "41"))
                                                (rule "orRight" (formula "41"))
                                                (rule "notRight" (formula "41"))
                                                (rule "notRight" (formula "42"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "translateJavaSubInt" (formula "3") (term "0,2,0,0,1"))
                                                (rule "variableDeclarationAssign" (formula "44") (term "1"))
                                                (rule "variableDeclaration" (formula "44") (term "1") (newnames "wordIndex_1"))
                                                (rule "inEqSimp_contradEq7" (formula "3") (term "0") (ifseqformula "15"))
                                                (rule "mul_literals" (formula "3") (term "1,0,0,0"))
                                                (rule "add_literals" (formula "3") (term "0,0,0"))
                                                (rule "leq_literals" (formula "3") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "notLeft" (formula "3"))
                                                (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "11"))
                                                (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                                                (rule "mul_literals" (formula "2") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "2") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                                                (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "2") (term "0,0"))
                                                (rule "qeq_literals" (formula "2") (term "0"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "13"))
                                                (rule "leq_literals" (formula "1") (term "0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "expand_subJint" (formula "41") (term "0,2,0"))
                                                (rule "polySimp_elimSub" (formula "41") (term "0,0,2,0"))
                                                (rule "mul_literals" (formula "41") (term "1,0,0,2,0"))
                                                (rule "polySimp_addComm0" (formula "41") (term "0,0,2,0"))
                                                (rule "expand_moduloInteger" (formula "41") (term "0,2,0"))
                                                (rule "replace_int_MIN" (formula "41") (term "0,0,2,0"))
                                                (rule "replace_int_HALFRANGE" (formula "41") (term "0,0,1,0,2,0"))
                                                (rule "replace_int_RANGE" (formula "41") (term "1,1,0,2,0"))
                                                (rule "polySimp_addAssoc" (formula "41") (term "0,1,0,2,0"))
                                                (rule "add_literals" (formula "41") (term "0,0,1,0,2,0"))
                                                (rule "mod_axiom" (formula "41") (term "1,0,2,0"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,2,0"))
                                                (rule "polySimp_addAssoc" (formula "41") (term "0,2,0"))
                                                (rule "polySimp_addAssoc" (formula "41") (term "0,0,2,0"))
                                                (rule "add_literals" (formula "41") (term "0,0,0,2,0"))
                                                (rule "applyEq" (formula "41") (term "0,1,0,2,0") (ifseqformula "15"))
                                                (rule "mul_literals" (formula "41") (term "1,0,2,0"))
                                                (rule "add_zero_right" (formula "41") (term "0,2,0"))
                                                 (builtin "Use Operation Contract" (formula "41") (newnames "heapBefore_wordIndex_0,result_wordIndex_0,exc_2") (contract "BitSet[BitSet::wordIndex(int)].JML normal_behavior operation contract.0"))
                                                (branch "Post (wordIndex)"
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "expand_inInt" (formula "41") (term "1,0"))
                                                   (rule "replace_int_MAX" (formula "41") (term "1,0,1,0"))
                                                   (rule "replace_int_MIN" (formula "41") (term "0,1,1,0"))
                                                   (rule "andLeft" (formula "41"))
                                                   (rule "andLeft" (formula "42"))
                                                   (rule "andLeft" (formula "41"))
                                                   (rule "andLeft" (formula "42"))
                                                   (rule "andLeft" (formula "41"))
                                                   (rule "eqSymm" (formula "44") (term "1"))
                                                   (rule "translateJavaDivInt" (formula "44") (term "0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "42"))
                                                   (rule "assignment" (formula "46") (term "1"))
                                                    (builtin "One Step Simplification" (formula "46"))
                                                   (rule "inEqSimp_contradEq7" (formula "43") (term "0") (ifseqformula "24"))
                                                   (rule "add_zero_left" (formula "43") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,0,0"))
                                                   (rule "leq_literals" (formula "43") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "true_left" (formula "43"))
                                                   (rule "inEqSimp_contradEq7" (formula "43") (term "0,0") (ifseqformula "24"))
                                                   (rule "mul_literals" (formula "43") (term "1,0,0,0,0"))
                                                   (rule "add_literals" (formula "43") (term "0,0,0,0"))
                                                   (rule "leq_literals" (formula "43") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "expand_divJint" (formula "43") (term "0"))
                                                   (rule "applyEq" (formula "43") (term "0,0") (ifseqformula "34"))
                                                   (rule "expand_moduloInteger" (formula "43") (term "0"))
                                                   (rule "replace_int_RANGE" (formula "43") (term "1,1,0"))
                                                   (rule "replace_int_MIN" (formula "43") (term "0,0"))
                                                   (rule "replace_int_HALFRANGE" (formula "43") (term "0,0,1,0"))
                                                   (rule "polySimp_homoEq" (formula "43"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "43") (term "0,0"))
                                                   (rule "mod_axiom" (formula "43") (term "0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "0,1,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,0,1,0"))
                                                   (rule "polySimp_addComm1" (formula "43") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0,0"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0,0,0"))
                                                   (rule "add_literals" (formula "43") (term "0,0,0,0"))
                                                   (rule "add_zero_left" (formula "43") (term "0,0,0"))
                                                   (rule "applyEq" (formula "43") (term "0,1,0,0") (ifseqformula "35"))
                                                   (rule "mul_literals" (formula "43") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "43") (term "0,0"))
                                                   (rule "polySimp_sepPosMonomial" (formula "43"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1"))
                                                   (rule "applyEq" (formula "41") (term "0") (ifseqformula "43"))
                                                   (rule "applyEq" (formula "45") (term "0,1,0") (ifseqformula "43"))
                                                   (rule "applyEq" (formula "42") (term "0") (ifseqformula "43"))
                                                   (rule "inEqSimp_subsumption0" (formula "41") (ifseqformula "31"))
                                                   (rule "leq_literals" (formula "41") (term "0"))
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "true_left" (formula "41"))
                                                   (rule "inEqSimp_subsumption1" (formula "41") (ifseqformula "23"))
                                                   (rule "leq_literals" (formula "41") (term "0"))
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "true_left" (formula "41"))
                                                   (rule "returnUnfold" (formula "43") (term "1") (inst "#v0=x_2"))
                                                   (rule "variableDeclarationAssign" (formula "43") (term "1"))
                                                   (rule "variableDeclaration" (formula "43") (term "1") (newnames "x_28"))
                                                   (rule "compound_assignment_3_nonsimple" (formula "43") (term "1"))
                                                   (rule "ifElseUnfold" (formula "43") (term "1") (inst "#boolv=x_29"))
                                                   (rule "variableDeclaration" (formula "43") (term "1") (newnames "x_29"))
                                                   (rule "compound_assignment_2" (formula "43") (term "1") (inst "#v=x_30"))
                                                   (rule "variableDeclarationAssign" (formula "43") (term "1"))
                                                   (rule "variableDeclaration" (formula "43") (term "1") (newnames "x_30"))
                                                   (rule "remove_parentheses_right" (formula "43") (term "1"))
                                                   (rule "compound_less_than_comparison_2" (formula "43") (term "1") (inst "#v1=x_32") (inst "#v0=x_31"))
                                                   (rule "variableDeclarationAssign" (formula "43") (term "1"))
                                                   (rule "variableDeclaration" (formula "43") (term "1") (newnames "x_31"))
                                                   (rule "assignment" (formula "43") (term "1"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "variableDeclarationAssign" (formula "43") (term "1"))
                                                   (rule "variableDeclaration" (formula "43") (term "1") (newnames "x_32"))
                                                   (rule "assignment_read_attribute_this" (formula "43") (term "1"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "pullOutSelect" (formula "43") (term "0,1,0") (inst "selectSK=BitSet_wordsInUse_0"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "19")))
                                                   (rule "applyEqReverse" (formula "44") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "less_than_comparison_simple" (formula "43") (term "1"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "inEqSimp_ltToLeq" (formula "43") (term "0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,1,0"))
                                                   (rule "polySimp_addComm1" (formula "43") (term "0,0,0,1,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "43") (term "0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "0,0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "0,0,0,1,0"))
                                                   (rule "replace_known_left" (formula "43") (term "0,0,1,0") (ifseqformula "7"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "compound_assignment_1_new" (formula "43") (term "1"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "ifElseSplit" (formula "43"))
                                                   (branch "if x_29 true"
                                                       (builtin "One Step Simplification" (formula "44"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch "if x_29 false"
                                                       (builtin "One Step Simplification" (formula "44"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "remove_parentheses_right" (formula "43") (term "1"))
                                                      (rule "compound_inequality_comparison_1" (formula "43") (term "1") (inst "#v0=x_29"))
                                                      (rule "variableDeclarationAssign" (formula "43") (term "1"))
                                                      (rule "variableDeclaration" (formula "43") (term "1") (newnames "x_33"))
                                                      (rule "remove_parentheses_right" (formula "43") (term "1"))
                                                      (rule "compound_binary_AND_2" (formula "43") (term "1") (inst "#v1=x_35") (inst "#v0=x_34"))
                                                      (rule "variableDeclarationAssign" (formula "43") (term "1"))
                                                      (rule "variableDeclaration" (formula "43") (term "1") (newnames "x_34"))
                                                      (rule "eval_order_array_access4" (formula "43") (term "1") (inst "#v0=x_arr"))
                                                      (rule "variableDeclarationAssign" (formula "43") (term "1"))
                                                      (rule "variableDeclaration" (formula "43") (term "1") (newnames "x_arr_7"))
                                                      (rule "assignment_read_attribute_this" (formula "43") (term "1"))
                                                       (builtin "One Step Simplification" (formula "43"))
                                                      (rule "pullOutSelect" (formula "43") (term "0,1,0") (inst "selectSK=BitSet_words_0"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")) (ifInst ""  (formula "19")))
                                                      (rule "applyEqReverse" (formula "44") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "assignment_array2" (formula "43") (term "1"))
                                                      (branch "Normal Execution (x_arr_7 != null)"
                                                          (builtin "One Step Simplification" (formula "44"))
                                                          (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "47")))
                                                         (rule "orRight" (formula "43"))
                                                         (rule "inEqSimp_ltRight" (formula "44"))
                                                         (rule "times_zero_1" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_leqRight" (formula "43"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                         (rule "pullOutSelect" (formula "44") (term "0,1,0") (inst "selectSK=arr_0"))
                                                         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "41"))
                                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")) (ifInst ""  (formula "16")))
                                                         (rule "applyEqReverse" (formula "45") (term "0,1,0") (ifseqformula "1"))
                                                         (rule "hideAuxiliaryEq" (formula "1"))
                                                         (rule "variableDeclarationAssign" (formula "44") (term "1"))
                                                         (rule "variableDeclaration" (formula "44") (term "1") (newnames "x_35"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                         (rule "mul_literals" (formula "1") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                         (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "7"))
                                                         (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                         (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                                                         (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "qeq_literals" (formula "1") (term "0"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "remove_parentheses_right" (formula "43") (term "1"))
                                                         (rule "assignmentShiftLeftLong" (formula "43") (term "1"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "translateJavaShiftLeftLong" (formula "43") (term "0,1,0"))
                                                         (rule "javaShiftLeftLongDef" (formula "43") (term "0,1,0"))
                                                         (rule "shiftLeftDef" (formula "43") (term "0,0,1,0"))
                                                         (rule "polySimp_elimNeg" (formula "43") (term "1,1,0,0,1,0"))
                                                         (rule "shiftLeftPositiveShiftDef" (formula "43") (term "2,0,0,1,0"))
                                                         (rule "polySimp_elimOneLeft0" (formula "43") (term "2,0,0,1,0"))
                                                         (rule "shiftRightPositiveShiftDef" (formula "43") (term "1,0,0,1,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "43") (term "0,0,0,1,0"))
                                                         (rule "times_zero_1" (formula "43") (term "1,0,0,0,0,0,1,0"))
                                                         (rule "add_literals" (formula "43") (term "0,0,0,0,0,1,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,1,0"))
                                                         (rule "mul_literals" (formula "43") (term "1,0,0,0,1,0"))
                                                         (rule "expand_moduloLong" (formula "43") (term "0,1,0"))
                                                         (rule "replace_long_RANGE" (formula "43") (term "1,1,0,1,0"))
                                                         (rule "replace_long_HALFRANGE" (formula "43") (term "0,0,1,0,1,0"))
                                                         (rule "replace_long_MIN" (formula "43") (term "0,0,1,0"))
                                                         (rule "assignmentBitwiseAndLong3" (formula "43") (term "1"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "translateJavaBitwiseAndLong" (formula "43") (term "0,1,0"))
                                                         (rule "andJLongDef" (formula "43") (term "0,1,0"))
                                                         (rule "expand_moduloLong" (formula "43") (term "0,1,0"))
                                                         (rule "replace_long_RANGE" (formula "43") (term "1,1,0,1,0"))
                                                         (rule "replace_long_HALFRANGE" (formula "43") (term "0,0,1,0,1,0"))
                                                         (rule "replace_long_MIN" (formula "43") (term "0,0,1,0"))
                                                         (rule "inequality_comparison_simple" (formula "43") (term "1"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "blockEmpty" (formula "43") (term "1"))
                                                         (rule "polySimp_sepPosMonomial" (formula "43") (term "0,0,1,0"))
                                                         (rule "mul_literals" (formula "43") (term "1,0,0,1,0"))
                                                         (rule "methodCallReturn" (formula "43") (term "1"))
                                                         (rule "assignment" (formula "43") (term "1"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "methodCallEmpty" (formula "43") (term "1"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "emptyModality" (formula "43") (term "1"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "mod_axiom" (formula "43") (term "0,1,1,1,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "43") (term "1,0,1,1,1,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "43") (term "1,1,1,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "43") (term "1,1,1,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,1,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "43") (term "0,1,1,1,1,0,1,1,1,0,0"))
                                                         (rule "applyEq" (formula "43") (term "0,1,1,1,1,1,0,1,1,1,0,0") (ifseqformula "30"))
                                                         (rule "polySimp_addComm0" (formula "43") (term "1,1,1,1,0,1,1,1,0,0"))
                                                         (rule "mod_axiom" (formula "43") (term "1,2,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "43") (term "1,1,2,1,0,1,1,1,0,0"))
                                                         (rule "applyEq" (formula "43") (term "0,1,1,2,1,0,1,1,1,0,0") (ifseqformula "30"))
                                                         (rule "polySimp_addComm0" (formula "43") (term "1,2,1,0,1,1,1,0,0"))
                                                         (rule "mod_axiom" (formula "43") (term "0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "43") (term "1,0,0,1,0,1,1,1,0,0"))
                                                         (rule "inEqSimp_homoInEq0" (formula "43") (term "0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "43") (term "0,1,0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,1,1,1,0,0"))
                                                         (rule "applyEq" (formula "43") (term "0,1,0,0,1,0,1,1,1,0,0") (ifseqformula "30"))
                                                         (rule "polySimp_addComm1" (formula "43") (term "0,0,1,0,1,1,1,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "43") (term "0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "43") (term "0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "43") (term "0,0,1,0,1,1,1,0,0"))
                                                         (rule "inEqSimp_contradInEq1" (formula "43") (term "0,1,0,1,1,1,0,0") (ifseqformula "32"))
                                                         (rule "inEqSimp_homoInEq1" (formula "43") (term "0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "mul_literals" (formula "43") (term "0,1,0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "43") (term "0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_addComm0" (formula "43") (term "0,0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_pullOutFactor0b" (formula "43") (term "0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "add_literals" (formula "43") (term "1,1,0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "times_zero_1" (formula "43") (term "1,0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "add_literals" (formula "43") (term "0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "leq_literals" (formula "43") (term "0,0,1,0,1,1,1,0,0"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "mod_axiom" (formula "43") (term "1,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "43") (term "1,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "43") (term "0,1,1,0,0"))
                                                         (rule "add_literals" (formula "43") (term "0,0,1,1,0,0"))
                                                         (rule "add_zero_left" (formula "43") (term "0,1,1,0,0"))
                                                         (rule "applyEq" (formula "43") (term "0,1,1,1,0,0") (ifseqformula "3"))
                                                         (rule "polySimp_addComm0" (formula "43") (term "1,1,0,0"))
                                                         (rule "applyEq" (formula "43") (term "1,0,0") (ifseqformula "1"))
                                                         (rule "mod_axiom" (formula "43") (term "0"))
                                                         (rule "polySimp_mulLiterals" (formula "43") (term "1,0"))
                                                         (rule "polySimp_homoEq" (formula "43"))
                                                         (rule "polySimp_mulComm0" (formula "43") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "43") (term "1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0"))
                                                         (rule "polySimp_rightDist" (formula "43") (term "0,1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "43") (term "1,0,1,0"))
                                                         (rule "mul_literals" (formula "43") (term "0,0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "43") (term "0"))
                                                         (rule "polySimp_addAssoc" (formula "43") (term "0,0"))
                                                         (rule "add_literals" (formula "43") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "43") (term "0,0"))
                                                         (rule "polySimp_sepPosMonomial" (formula "43"))
                                                         (rule "polySimp_mulLiterals" (formula "43") (term "1"))
                                                         (rule "elimGcdEq" (formula "43") (inst "elimGcdRightDiv=l_0") (inst "elimGcdLeftDiv=div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
        mul(l_0,
            Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#))))))))))))))))))))))),
    Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#))))))))))))))))))))))") (inst "elimGcd=Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "mul_literals" (formula "43") (term "0,1,0,1,0"))
                                                         (rule "add_literals" (formula "43") (term "1,0,0"))
                                                         (rule "mul_literals" (formula "43") (term "0,1,0,0,1"))
                                                         (rule "mul_literals" (formula "43") (term "0,1,0,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "43") (term "1,0,1,0"))
                                                         (rule "polySimp_pullOutFactor0" (formula "43") (term "0,1,0"))
                                                         (rule "add_literals" (formula "43") (term "1,0,1,0"))
                                                         (rule "times_zero_1" (formula "43") (term "0,1,0"))
                                                         (rule "qeq_literals" (formula "43") (term "1,0"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                                                         (rule "polySimp_pullOutFactor0" (formula "43") (term "0,0"))
                                                         (rule "add_literals" (formula "43") (term "1,0,0"))
                                                         (rule "times_zero_1" (formula "43") (term "0,0"))
                                                         (rule "leq_literals" (formula "43") (term "0"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                                                         (rule "polySimp_pullOutFactor0" (formula "43") (term "0,0"))
                                                         (rule "add_literals" (formula "43") (term "1,0,0"))
                                                         (rule "times_zero_1" (formula "43") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "polyDiv_pullOut" (formula "43") (term "0") (inst "polyDivCoeff=l_0"))
                                                         (rule "polySimp_mulLiterals" (formula "43") (term "1,0,0,2,0"))
                                                         (rule "equal_literals" (formula "43") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "polySimp_homoEq" (formula "43"))
                                                         (rule "polySimp_pullOutFactor0b" (formula "43") (term "0,0,0,1,0"))
                                                         (rule "add_literals" (formula "43") (term "1,1,0,0,0,1,0"))
                                                         (rule "times_zero_1" (formula "43") (term "1,0,0,0,1,0"))
                                                         (rule "add_literals" (formula "43") (term "0,0,0,1,0"))
                                                         (rule "div_literals" (formula "43") (term "0,0,1,0"))
                                                         (rule "add_zero_left" (formula "43") (term "0,1,0"))
                                                         (rule "polySimp_pullOutFactor1" (formula "43") (term "0"))
                                                         (rule "add_literals" (formula "43") (term "1,0"))
                                                         (rule "times_zero_1" (formula "43") (term "0"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "closeTrue" (formula "43"))
                                                      )
                                                      (branch "Null Reference (x_arr_7 = null)"
                                                          (builtin "One Step Simplification" (formula "44"))
                                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                      (branch "Index Out of Bounds (x_arr_7 != null, but wordIndex_1 Out of Bounds!)"
                                                          (builtin "One Step Simplification" (formula "44"))
                                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                                                         (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "1") (term "0,0,1"))
                                                         (rule "blockThrow" (formula "44") (term "1"))
                                                          (builtin "One Step Simplification" (formula "44"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                                         (rule "mul_literals" (formula "1") (term "1,1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "7"))
                                                         (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                                         (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                                         (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0,0"))
                                                         (rule "leq_literals" (formula "1") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "inEqSimp_contradInEq0" (formula "24") (ifseqformula "1"))
                                                         (rule "qeq_literals" (formula "24") (term "0"))
                                                          (builtin "One Step Simplification" (formula "24"))
                                                         (rule "closeFalse" (formula "24"))
                                                      )
                                                   )
                                                )
                                                (branch "Exceptional Post (wordIndex)"
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "andLeft" (formula "41"))
                                                   (rule "andLeft" (formula "42"))
                                                   (rule "andLeft" (formula "41"))
                                                   (rule "andLeft" (formula "43"))
                                                   (rule "notLeft" (formula "41"))
                                                   (rule "close" (formula "45") (ifseqformula "44"))
                                                )
                                                (branch "Pre (wordIndex)"
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "wellFormedAnonEQ" (formula "41") (term "0,1") (ifseqformula "39"))
                                                   (rule "expand_inInt" (formula "41") (term "1,1"))
                                                   (rule "replace_int_MAX" (formula "41") (term "1,0,1,1"))
                                                   (rule "replace_int_MIN" (formula "41") (term "0,1,1,1"))
                                                   (rule "replace_known_left" (formula "41") (term "0,1,1") (ifseqformula "20"))
                                                    (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "17")) (ifInst ""  (formula "38")))
                                                   (rule "inEqSimp_commuteLeq" (formula "41") (term "0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "41") (term "1"))
                                                   (rule "inEqSimp_subsumption1" (formula "41") (term "0") (ifseqformula "24"))
                                                   (rule "leq_literals" (formula "41") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "inEqSimp_geqRight" (formula "41"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1"))
                                                   (rule "inEqSimp_subsumption0" (formula "21") (ifseqformula "1"))
                                                   (rule "leq_literals" (formula "21") (term "0"))
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "true_left" (formula "21"))
                                                   (rule "inEqSimp_contradInEq0" (formula "24") (ifseqformula "1"))
                                                   (rule "qeq_literals" (formula "24") (term "0"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "closeFalse" (formula "24"))
                                                )
                                             )
                                             (branch "Exceptional Post (checkInvariants)"
                                                 (builtin "One Step Simplification" (formula "40"))
                                                 (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "43")) (ifInst ""  (formula "8")) (ifInst ""  (formula "43")) (ifInst ""  (formula "8")))
                                                (rule "andLeft" (formula "39"))
                                                (rule "andLeft" (formula "40"))
                                                (rule "andLeft" (formula "40"))
                                                (rule "andLeft" (formula "42"))
                                                (rule "notLeft" (formula "40"))
                                                (rule "translateJavaSubInt" (formula "41") (term "0,2,0,0,1,0,0,0"))
                                                (rule "translateJavaSubInt" (formula "42") (term "0,2,0,0,1,0,0"))
                                                (rule "replace_known_right" (formula "41") (term "0,0,1") (ifseqformula "43"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "replace_known_right" (formula "42") (term "1") (ifseqformula "43"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "notLeft" (formula "42"))
                                                (rule "inEqSimp_ltToLeq" (formula "41") (term "1,1,0,1"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,1,0,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "41") (term "0,1,0,1"))
                                                (rule "mul_literals" (formula "41") (term "1,0,0,0,1,0,1"))
                                                (rule "add_literals" (formula "41") (term "0,0,0,1,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,1,0,1"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,1,1,0,1"))
                                                (rule "polySimp_rightDist" (formula "41") (term "1,1,1,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,1,0,1"))
                                                (rule "mul_literals" (formula "41") (term "0,1,1,1,0,1"))
                                                (rule "polySimp_elimOne" (formula "41") (term "1,1,1,1,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,1,0,1"))
                                                (rule "mul_literals" (formula "41") (term "1,0,1,0,1"))
                                                (rule "inEqSimp_contradEq7" (formula "42") (term "0,0") (ifseqformula "12"))
                                                (rule "mul_literals" (formula "42") (term "1,0,0,0,0"))
                                                (rule "add_literals" (formula "42") (term "0,0,0,0"))
                                                (rule "leq_literals" (formula "42") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "inEqSimp_contradEq7" (formula "41") (term "0,0,0,0") (ifseqformula "12"))
                                                (rule "mul_literals" (formula "41") (term "1,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "41") (term "0,0,0,0,0,0"))
                                                (rule "leq_literals" (formula "41") (term "0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "inEqSimp_subsumption0" (formula "41") (term "1,0,1,0") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq0" (formula "41") (term "0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,1,0"))
                                                (rule "polySimp_addComm0" (formula "41") (term "0,0,0,1,0,1,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0,1,0,1,0"))
                                                (rule "add_literals" (formula "41") (term "1,1,0,0,1,0,1,0"))
                                                (rule "times_zero_1" (formula "41") (term "1,0,0,1,0,1,0"))
                                                (rule "add_literals" (formula "41") (term "0,0,1,0,1,0"))
                                                (rule "qeq_literals" (formula "41") (term "0,1,0,1,0"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "inEqSimp_subsumption1" (formula "42") (term "0,1") (ifseqformula "12"))
                                                (rule "leq_literals" (formula "42") (term "0,0,1"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "inEqSimp_subsumption0" (formula "42") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq0" (formula "42") (term "0,1"))
                                                (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1"))
                                                (rule "mul_literals" (formula "42") (term "0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "42") (term "0,0,1"))
                                                (rule "polySimp_addComm0" (formula "42") (term "0,0,0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0,1"))
                                                (rule "add_literals" (formula "42") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "42") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "42") (term "0,0,1"))
                                                (rule "qeq_literals" (formula "42") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "notRight" (formula "42"))
                                                (rule "replace_known_left" (formula "42") (term "0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "andLeft" (formula "42"))
                                                (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=java_lang_Object_created__0"))
                                                (rule "simplifySelectOfAnonEQ" (formula "41") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "45")))
                                                (rule "ifthenelse_negated" (formula "41") (term "0"))
                                                (rule "applyEq" (formula "41") (term "1") (ifseqformula "42"))
                                                (rule "ifEqualsTRUE" (formula "41"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "pullOutSelect" (formula "43") (term "0,0,1") (inst "selectSK=BitSet_wordsInUse_0"))
                                                (rule "applyEq" (formula "44") (term "1,1,1,1") (ifseqformula "43"))
                                                (rule "simplifySelectOfAnonEQ" (formula "43") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "49")) (ifInst ""  (formula "19")))
                                                (rule "applyEqReverse" (formula "44") (term "0,0,1") (ifseqformula "43"))
                                                (rule "applyEqReverse" (formula "44") (term "1,1,1,1") (ifseqformula "43"))
                                                (rule "hideAuxiliaryEq" (formula "43"))
                                                (rule "inEqSimp_contradInEq1" (formula "43") (term "0,1") (ifseqformula "13"))
                                                (rule "qeq_literals" (formula "43") (term "0,0,1"))
                                                 (builtin "One Step Simplification" (formula "43"))
                                                (rule "pullOutSelect" (formula "43") (term "0,0,1") (inst "selectSK=BitSet_words_0"))
                                                (rule "simplifySelectOfAnonEQ" (formula "43") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "49")) (ifInst ""  (formula "19")))
                                                (rule "applyEqReverse" (formula "44") (term "0,0,1") (ifseqformula "43"))
                                                (rule "hideAuxiliaryEq" (formula "43"))
                                                (rule "inEqSimp_homoInEq0" (formula "43") (term "1"))
                                                (rule "polySimp_addComm1" (formula "43") (term "0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1"))
                                                (rule "polySimp_mulComm0" (formula "43") (term "1,1"))
                                                (rule "polySimp_rightDist" (formula "43") (term "1,1"))
                                                (rule "mul_literals" (formula "43") (term "0,1,1"))
                                                (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1"))
                                                (rule "polySimp_elimOne" (formula "43") (term "1,1,1"))
                                                (rule "inEqSimp_contradInEq0" (formula "43") (term "1") (ifseqformula "10"))
                                                (rule "inEqSimp_homoInEq1" (formula "43") (term "0,1"))
                                                (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1"))
                                                (rule "mul_literals" (formula "43") (term "0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "43") (term "0,0,1"))
                                                (rule "polySimp_addComm1" (formula "43") (term "0,0,0,1"))
                                                (rule "add_literals" (formula "43") (term "0,0,0,0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "43") (term "0,0,1"))
                                                (rule "add_literals" (formula "43") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "43") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "43") (term "0,0,1"))
                                                (rule "leq_literals" (formula "43") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "43"))
                                                (rule "notLeft" (formula "43"))
                                                (rule "replace_known_right" (formula "43") (term "1") (ifseqformula "44"))
                                                 (builtin "One Step Simplification" (formula "43"))
                                                (rule "instanceof_not_compatible_5" (formula "44") (ifseqformula "43"))
                                                (rule "expand_subJint" (formula "1") (term "0,2,0"))
                                                (rule "polySimp_elimSub" (formula "1") (term "0,0,2,0"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0,2,0"))
                                                (rule "polySimp_addComm0" (formula "1") (term "0,0,2,0"))
                                                (rule "hideAuxiliaryEqConcrete" (formula "42"))
                                                (rule "expand_moduloInteger" (formula "1") (term "0,2,0"))
                                                (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0,2,0"))
                                                (rule "replace_int_RANGE" (formula "1") (term "1,1,0,2,0"))
                                                (rule "replace_int_MIN" (formula "1") (term "0,0,2,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,2,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,1,0,2,0"))
                                                (rule "mod_axiom" (formula "1") (term "1,0,2,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,2,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,2,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0,2,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0,2,0"))
                                                (rule "applyEq" (formula "1") (term "0,1,0,2,0") (ifseqformula "16"))
                                                (rule "times_zero_2" (formula "1") (term "1,0,2,0"))
                                                (rule "add_zero_right" (formula "1") (term "0,2,0"))
                                                (rule "close" (formula "45") (ifseqformula "1"))
                                             )
                                             (branch "Pre (checkInvariants)"
                                                 (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "41")) (ifInst ""  (formula "8")) (ifInst ""  (formula "41")) (ifInst ""  (formula "8")) (ifInst ""  (formula "17")))
                                                (rule "orRight" (formula "38"))
                                                (rule "orRight" (formula "38"))
                                                (rule "notRight" (formula "38"))
                                                (rule "notRight" (formula "39"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "translateJavaSubInt" (formula "41") (term "0,2,0,0,1,0"))
                                                (rule "translateJavaSubInt" (formula "3") (term "0,2,0,0,1"))
                                                (rule "replace_known_left" (formula "41") (term "1,1") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "3")) (ifInst ""  (formula "1")))
                                                (rule "closeTrue" (formula "41"))
                                             )
                                          )
                                       )
                                       (branch "in(bitIndex, self.iSet) FALSE"
                                          (rule "eqSymm" (formula "39"))
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "div_axiom" (formula "39") (term "0,0") (inst "quotient=quotient_4"))
                                          (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                                          (rule "equal_literals" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "qeq_literals" (formula "1") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                                          (rule "add_literals" (formula "3") (term "0,0,1"))
                                          (rule "polySimp_addComm1" (formula "3") (term "1"))
                                          (rule "add_literals" (formula "3") (term "0,1"))
                                          (rule "inEqSimp_homoInEq0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                                          (rule "polySimp_addComm1" (formula "2") (term "0"))
                                          (rule "inEqSimp_homoInEq1" (formula "3"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                          (rule "polySimp_addComm1" (formula "3") (term "0"))
                                          (rule "applyEq" (formula "42") (term "0,0") (ifseqformula "1"))
                                          (rule "eqSymm" (formula "42"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                          (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                          (rule "polySimp_rightDist" (formula "2") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                          (rule "mul_literals" (formula "2") (term "0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                          (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                          (rule "polySimp_rightDist" (formula "3") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                          (rule "mul_literals" (formula "3") (term "0,1"))
                                          (rule "allLeft" (formula "28") (inst "t=bitIndex"))
                                          (rule "replace_known_right" (formula "28") (term "1,0,0") (ifseqformula "42"))
                                           (builtin "One Step Simplification" (formula "28"))
                                          (rule "Query_axiom_for_get_int__in_BitSet" (formula "28") (term "0,0,0,0") (inst "get_sk=get_sk_0") (inst "#p0=x_1") (inst "#self=b") (inst "#res=x") (ifseqformula "20"))
                                          (rule "eqSymm" (formula "28") (term "0,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "25"))
                                          (rule "qeq_literals" (formula "29") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "inEqSimp_contradInEq0" (formula "29") (term "1") (ifseqformula "21"))
                                          (rule "qeq_literals" (formula "29") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "notLeft" (formula "29"))
                                          (rule "apply_eq_boolean_rigid" (formula "28") (term "1,0,1") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "28"))
                                          (rule "boxToDiamond" (formula "28") (term "1"))
                                           (builtin "One Step Simplification" (formula "28"))
                                          (rule "notLeft" (formula "28"))
                                          (rule "methodBodyExpand" (formula "38") (term "1") (newnames "heapBefore_get_0,savedHeapBefore_get_0"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "ifUnfold" (formula "38") (term "1") (inst "#boolv=x_2"))
                                          (rule "variableDeclaration" (formula "38") (term "1") (newnames "x_27"))
                                          (rule "less_than_comparison_simple" (formula "38") (term "1"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,1,0"))
                                          (rule "times_zero_1" (formula "38") (term "1,0,0,0,0,1,0"))
                                          (rule "add_literals" (formula "38") (term "0,0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,1,0"))
                                          (rule "mul_literals" (formula "38") (term "1,0,0,1,0"))
                                          (rule "inEqSimp_contradInEq1" (formula "38") (term "0,0,1,0") (ifseqformula "25"))
                                          (rule "qeq_literals" (formula "38") (term "0,0,0,1,0"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "ifSplit" (formula "38"))
                                          (branch "if x_27 true"
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "if x_27 false"
                                              (builtin "One Step Simplification" (formula "1"))
                                              (builtin "One Step Simplification" (formula "39"))
                                             (rule "true_left" (formula "1"))
                                              (builtin "Use Operation Contract" (formula "38") (newnames "heapBefore_checkInvariants_0,exc_1,heapAfter_checkInvariants,anon_heap_checkInvariants") (contract "BitSet[BitSet::checkInvariants()].JML exceptional_behavior operation contract.0#BitSet[BitSet::checkInvariants()].JML normal_behavior operation contract.0"))
                                             (branch "Post (checkInvariants)"
                                                 (builtin "One Step Simplification" (formula "40"))
                                                 (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "44")) (ifInst ""  (formula "9")) (ifInst ""  (formula "44")) (ifInst ""  (formula "9")))
                                                (rule "andLeft" (formula "39"))
                                                (rule "andLeft" (formula "40"))
                                                (rule "typeEqDerived" (formula "41") (term "0,0,0,1,1,0") (ifseqformula "40"))
                                                (rule "typeEqDerived" (formula "41") (term "0,1,1,1,1,0") (ifseqformula "40"))
                                                (rule "typeEqDerived" (formula "41") (term "0,0,1,1,1,0") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "40")) (ifInst ""  (formula "40")))
                                                (rule "notLeft" (formula "41"))
                                                (rule "orRight" (formula "41"))
                                                (rule "notRight" (formula "42"))
                                                (rule "notRight" (formula "42"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "translateJavaSubInt" (formula "1") (term "0,2,0,0,1"))
                                                (rule "variableDeclarationAssign" (formula "44") (term "1"))
                                                (rule "variableDeclaration" (formula "44") (term "1") (newnames "wordIndex_1"))
                                                (rule "inEqSimp_contradEq7" (formula "1") (term "0") (ifseqformula "16"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                                (rule "add_zero_right" (formula "1") (term "0,0,0"))
                                                (rule "leq_literals" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "12"))
                                                (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                                                (rule "mul_literals" (formula "2") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "2") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                                                (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "2") (term "0,0"))
                                                (rule "qeq_literals" (formula "2") (term "0"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "14"))
                                                (rule "leq_literals" (formula "1") (term "0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "expand_subJint" (formula "41") (term "0,2,0"))
                                                (rule "polySimp_elimSub" (formula "41") (term "0,0,2,0"))
                                                (rule "mul_literals" (formula "41") (term "1,0,0,2,0"))
                                                (rule "polySimp_addComm0" (formula "41") (term "0,0,2,0"))
                                                (rule "expand_moduloInteger" (formula "41") (term "0,2,0"))
                                                (rule "replace_int_RANGE" (formula "41") (term "1,1,0,2,0"))
                                                (rule "replace_int_HALFRANGE" (formula "41") (term "0,0,1,0,2,0"))
                                                (rule "replace_int_MIN" (formula "41") (term "0,0,2,0"))
                                                (rule "polySimp_addAssoc" (formula "41") (term "0,1,0,2,0"))
                                                (rule "add_literals" (formula "41") (term "0,0,1,0,2,0"))
                                                (rule "mod_axiom" (formula "41") (term "1,0,2,0"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,2,0"))
                                                (rule "polySimp_addAssoc" (formula "41") (term "0,2,0"))
                                                (rule "polySimp_addAssoc" (formula "41") (term "0,0,2,0"))
                                                (rule "add_literals" (formula "41") (term "0,0,0,2,0"))
                                                (rule "applyEq" (formula "41") (term "0,1,0,2,0") (ifseqformula "16"))
                                                (rule "mul_literals" (formula "41") (term "1,0,2,0"))
                                                (rule "add_zero_right" (formula "41") (term "0,2,0"))
                                                 (builtin "Use Operation Contract" (formula "41") (newnames "heapBefore_wordIndex_0,result_wordIndex_0,exc_2") (contract "BitSet[BitSet::wordIndex(int)].JML normal_behavior operation contract.0"))
                                                (branch "Post (wordIndex)"
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "expand_inInt" (formula "41") (term "1,0"))
                                                   (rule "replace_int_MAX" (formula "41") (term "1,0,1,0"))
                                                   (rule "replace_int_MIN" (formula "41") (term "0,1,1,0"))
                                                   (rule "andLeft" (formula "41"))
                                                   (rule "andLeft" (formula "42"))
                                                   (rule "andLeft" (formula "41"))
                                                   (rule "andLeft" (formula "42"))
                                                   (rule "andLeft" (formula "41"))
                                                   (rule "eqSymm" (formula "44") (term "1"))
                                                   (rule "translateJavaDivInt" (formula "44") (term "0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "42"))
                                                   (rule "assignment" (formula "46") (term "1"))
                                                    (builtin "One Step Simplification" (formula "46"))
                                                   (rule "inEqSimp_contradEq7" (formula "44") (term "0,0") (ifseqformula "25"))
                                                   (rule "add_zero_left" (formula "44") (term "0,0,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "0,0,0,0"))
                                                   (rule "leq_literals" (formula "44") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "44"))
                                                   (rule "inEqSimp_contradEq7" (formula "43") (term "0") (ifseqformula "25"))
                                                   (rule "add_zero_left" (formula "43") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,0,0"))
                                                   (rule "leq_literals" (formula "43") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "true_left" (formula "43"))
                                                   (rule "expand_divJint" (formula "43") (term "0"))
                                                   (rule "applyEq" (formula "43") (term "0,0") (ifseqformula "34"))
                                                   (rule "expand_moduloInteger" (formula "43") (term "0"))
                                                   (rule "replace_int_RANGE" (formula "43") (term "1,1,0"))
                                                   (rule "replace_int_MIN" (formula "43") (term "0,0"))
                                                   (rule "replace_int_HALFRANGE" (formula "43") (term "0,0,1,0"))
                                                   (rule "polySimp_homoEq" (formula "43"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "43") (term "0,0"))
                                                   (rule "mod_axiom" (formula "43") (term "0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "0,1,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,0,1,0"))
                                                   (rule "polySimp_addComm1" (formula "43") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0,0"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0,0,0"))
                                                   (rule "add_literals" (formula "43") (term "0,0,0,0"))
                                                   (rule "add_zero_left" (formula "43") (term "0,0,0"))
                                                   (rule "applyEq" (formula "43") (term "0,1,0,0") (ifseqformula "35"))
                                                   (rule "mul_literals" (formula "43") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "43") (term "0,0"))
                                                   (rule "polySimp_sepPosMonomial" (formula "43"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "1"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "1"))
                                                   (rule "applyEq" (formula "42") (term "0") (ifseqformula "43"))
                                                   (rule "applyEq" (formula "45") (term "0,1,0") (ifseqformula "43"))
                                                   (rule "applyEq" (formula "41") (term "0") (ifseqformula "43"))
                                                   (rule "inEqSimp_subsumption0" (formula "41") (ifseqformula "31"))
                                                   (rule "leq_literals" (formula "41") (term "0"))
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "true_left" (formula "41"))
                                                   (rule "inEqSimp_subsumption1" (formula "41") (ifseqformula "24"))
                                                   (rule "leq_literals" (formula "41") (term "0"))
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "true_left" (formula "41"))
                                                   (rule "returnUnfold" (formula "43") (term "1") (inst "#v0=x_2"))
                                                   (rule "variableDeclarationAssign" (formula "43") (term "1"))
                                                   (rule "variableDeclaration" (formula "43") (term "1") (newnames "x_28"))
                                                   (rule "compound_assignment_3_nonsimple" (formula "43") (term "1"))
                                                   (rule "ifElseUnfold" (formula "43") (term "1") (inst "#boolv=x_29"))
                                                   (rule "variableDeclaration" (formula "43") (term "1") (newnames "x_29"))
                                                   (rule "compound_assignment_2" (formula "43") (term "1") (inst "#v=x_30"))
                                                   (rule "variableDeclarationAssign" (formula "43") (term "1"))
                                                   (rule "variableDeclaration" (formula "43") (term "1") (newnames "x_30"))
                                                   (rule "remove_parentheses_right" (formula "43") (term "1"))
                                                   (rule "compound_less_than_comparison_2" (formula "43") (term "1") (inst "#v1=x_32") (inst "#v0=x_31"))
                                                   (rule "variableDeclarationAssign" (formula "43") (term "1"))
                                                   (rule "variableDeclaration" (formula "43") (term "1") (newnames "x_31"))
                                                   (rule "assignment" (formula "43") (term "1"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "variableDeclarationAssign" (formula "43") (term "1"))
                                                   (rule "variableDeclaration" (formula "43") (term "1") (newnames "x_32"))
                                                   (rule "assignment_read_attribute_this" (formula "43") (term "1"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "pullOutSelect" (formula "43") (term "0,1,0") (inst "selectSK=BitSet_wordsInUse_0"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "20")))
                                                   (rule "applyEqReverse" (formula "44") (term "0,1,0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "less_than_comparison_simple" (formula "43") (term "1"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "inEqSimp_ltToLeq" (formula "43") (term "0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,1,0"))
                                                   (rule "polySimp_addComm1" (formula "43") (term "0,0,0,1,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "43") (term "0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "43") (term "0,0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "43") (term "0,0,0,1,0"))
                                                   (rule "replace_known_left" (formula "43") (term "0,0,1,0") (ifseqformula "8"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "compound_assignment_1_new" (formula "43") (term "1"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "ifElseSplit" (formula "43"))
                                                   (branch "if x_29 true"
                                                       (builtin "One Step Simplification" (formula "44"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch "if x_29 false"
                                                       (builtin "One Step Simplification" (formula "44"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "remove_parentheses_right" (formula "43") (term "1"))
                                                      (rule "compound_inequality_comparison_1" (formula "43") (term "1") (inst "#v0=x_29"))
                                                      (rule "variableDeclarationAssign" (formula "43") (term "1"))
                                                      (rule "variableDeclaration" (formula "43") (term "1") (newnames "x_33"))
                                                      (rule "remove_parentheses_right" (formula "43") (term "1"))
                                                      (rule "compound_binary_AND_2" (formula "43") (term "1") (inst "#v1=x_35") (inst "#v0=x_34"))
                                                      (rule "variableDeclarationAssign" (formula "43") (term "1"))
                                                      (rule "variableDeclaration" (formula "43") (term "1") (newnames "x_34"))
                                                      (rule "eval_order_array_access4" (formula "43") (term "1") (inst "#v0=x_arr"))
                                                      (rule "variableDeclarationAssign" (formula "43") (term "1"))
                                                      (rule "variableDeclaration" (formula "43") (term "1") (newnames "x_arr_7"))
                                                      (rule "assignment_read_attribute_this" (formula "43") (term "1"))
                                                       (builtin "One Step Simplification" (formula "43"))
                                                      (rule "pullOutSelect" (formula "43") (term "0,1,0") (inst "selectSK=BitSet_words_0"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")) (ifInst ""  (formula "20")))
                                                      (rule "applyEqReverse" (formula "44") (term "0,1,0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "assignment_array2" (formula "43") (term "1"))
                                                      (branch "Normal Execution (x_arr_7 != null)"
                                                          (builtin "One Step Simplification" (formula "44"))
                                                          (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "48")))
                                                         (rule "orRight" (formula "43"))
                                                         (rule "inEqSimp_ltRight" (formula "44"))
                                                         (rule "mul_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_leqRight" (formula "43"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                         (rule "pullOutSelect" (formula "44") (term "0,1,0") (inst "selectSK=arr_0"))
                                                         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "41"))
                                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "17")))
                                                         (rule "applyEqReverse" (formula "45") (term "0,1,0") (ifseqformula "1"))
                                                         (rule "hideAuxiliaryEq" (formula "1"))
                                                         (rule "variableDeclarationAssign" (formula "44") (term "1"))
                                                         (rule "variableDeclaration" (formula "44") (term "1") (newnames "x_35"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                         (rule "mul_literals" (formula "1") (term "0,1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                         (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "8"))
                                                         (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                         (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0,0,0"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                                                         (rule "add_literals" (formula "1") (term "1,1,0,0"))
                                                         (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                                         (rule "add_zero_right" (formula "1") (term "0,0"))
                                                         (rule "qeq_literals" (formula "1") (term "0"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "remove_parentheses_right" (formula "43") (term "1"))
                                                         (rule "assignmentShiftLeftLong" (formula "43") (term "1"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "translateJavaShiftLeftLong" (formula "43") (term "0,1,0"))
                                                         (rule "javaShiftLeftLongDef" (formula "43") (term "0,1,0"))
                                                         (rule "shiftLeftDef" (formula "43") (term "0,0,1,0"))
                                                         (rule "polySimp_elimNeg" (formula "43") (term "1,1,0,0,1,0"))
                                                         (rule "shiftLeftPositiveShiftDef" (formula "43") (term "2,0,0,1,0"))
                                                         (rule "polySimp_elimOneLeft0" (formula "43") (term "2,0,0,1,0"))
                                                         (rule "shiftRightPositiveShiftDef" (formula "43") (term "1,0,0,1,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "43") (term "0,0,0,1,0"))
                                                         (rule "times_zero_1" (formula "43") (term "1,0,0,0,0,0,1,0"))
                                                         (rule "add_literals" (formula "43") (term "0,0,0,0,0,1,0"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,1,0"))
                                                         (rule "mul_literals" (formula "43") (term "1,0,0,0,1,0"))
                                                         (rule "expand_moduloLong" (formula "43") (term "0,1,0"))
                                                         (rule "replace_long_RANGE" (formula "43") (term "1,1,0,1,0"))
                                                         (rule "replace_long_HALFRANGE" (formula "43") (term "0,0,1,0,1,0"))
                                                         (rule "replace_long_MIN" (formula "43") (term "0,0,1,0"))
                                                         (rule "assignmentBitwiseAndLong3" (formula "43") (term "1"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "translateJavaBitwiseAndLong" (formula "43") (term "0,1,0"))
                                                         (rule "andJLongDef" (formula "43") (term "0,1,0"))
                                                         (rule "expand_moduloLong" (formula "43") (term "0,1,0"))
                                                         (rule "replace_long_RANGE" (formula "43") (term "1,1,0,1,0"))
                                                         (rule "replace_long_MIN" (formula "43") (term "0,0,1,0"))
                                                         (rule "replace_long_HALFRANGE" (formula "43") (term "0,0,1,0,1,0"))
                                                         (rule "inequality_comparison_simple" (formula "43") (term "1"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "blockEmpty" (formula "43") (term "1"))
                                                         (rule "polySimp_sepPosMonomial" (formula "43") (term "0,0,1,0"))
                                                         (rule "mul_literals" (formula "43") (term "1,0,0,1,0"))
                                                         (rule "methodCallReturn" (formula "43") (term "1"))
                                                         (rule "assignment" (formula "43") (term "1"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "methodCallEmpty" (formula "43") (term "1"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "emptyModality" (formula "43") (term "1"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "notRight" (formula "43"))
                                                         (rule "mod_axiom" (formula "1") (term "0,1,1,1,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,1,1,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,1,1,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "0,1,1,1,1,0,1,1,1,0,0"))
                                                         (rule "applyEq" (formula "1") (term "0,1,1,1,1,1,0,1,1,1,0,0") (ifseqformula "31"))
                                                         (rule "polySimp_addComm0" (formula "1") (term "1,1,1,1,0,1,1,1,0,0"))
                                                         (rule "mod_axiom" (formula "1") (term "0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1,0,1,1,1,0,0"))
                                                         (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,1,1,1,0,0"))
                                                         (rule "applyEq" (formula "1") (term "0,1,0,0,1,0,1,1,1,0,0") (ifseqformula "31"))
                                                         (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,1,1,1,0,0"))
                                                         (rule "mod_axiom" (formula "1") (term "1,2,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,2,1,0,1,1,1,0,0"))
                                                         (rule "applyEq" (formula "1") (term "0,1,1,2,1,0,1,1,1,0,0") (ifseqformula "31"))
                                                         (rule "polySimp_addComm0" (formula "1") (term "1,2,1,0,1,1,1,0,0"))
                                                         (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "0,0,1,0,1,1,1,0,0"))
                                                         (rule "inEqSimp_contradInEq1" (formula "1") (term "0,1,0,1,1,1,0,0") (ifseqformula "33"))
                                                         (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,1,0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_addComm0" (formula "1") (term "0,0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "1,1,0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "times_zero_1" (formula "1") (term "1,0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0,0,1,0,1,1,1,0,0"))
                                                         (rule "leq_literals" (formula "1") (term "0,0,1,0,1,1,1,0,0"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "mod_axiom" (formula "1") (term "1,1,1,0,0"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "1,1,0,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,1,1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0,1,1,0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0,1,1,0,0"))
                                                         (rule "applyEq" (formula "1") (term "0,1,1,1,0,0") (ifseqformula "5"))
                                                         (rule "polySimp_addComm0" (formula "1") (term "1,1,0,0"))
                                                         (rule "mod_axiom" (formula "1") (term "0"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                                                         (rule "polySimp_homoEq" (formula "1"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                                         (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
                                                         (rule "mul_literals" (formula "1") (term "0,0,1,0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0,0"))
                                                         (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "2"))
                                                         (rule "polySimp_addComm0" (formula "1") (term "0"))
                                                         (rule "polySimp_sepNegMonomial" (formula "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                         (rule "close" (formula "49") (ifseqformula "1"))
                                                      )
                                                      (branch "Null Reference (x_arr_7 = null)"
                                                          (builtin "One Step Simplification" (formula "44"))
                                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                      (branch "Index Out of Bounds (x_arr_7 != null, but wordIndex_1 Out of Bounds!)"
                                                          (builtin "One Step Simplification" (formula "44"))
                                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "48")))
                                                         (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                                         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "1") (term "0,0,1"))
                                                         (rule "blockThrow" (formula "44") (term "1"))
                                                          (builtin "One Step Simplification" (formula "44"))
                                                         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                                         (rule "mul_literals" (formula "1") (term "1,1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "25"))
                                                         (rule "qeq_literals" (formula "1") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "1"))
                                                         (rule "andLeft" (formula "8"))
                                                         (rule "inEqSimp_homoInEq1" (formula "8"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
                                                         (rule "add_literals" (formula "8") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "8") (term "1,0"))
                                                         (rule "add_literals" (formula "8") (term "0"))
                                                         (rule "leq_literals" (formula "8"))
                                                         (rule "closeFalse" (formula "8"))
                                                      )
                                                   )
                                                )
                                                (branch "Exceptional Post (wordIndex)"
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "andLeft" (formula "41"))
                                                   (rule "andLeft" (formula "42"))
                                                   (rule "andLeft" (formula "41"))
                                                   (rule "andLeft" (formula "43"))
                                                   (rule "notLeft" (formula "41"))
                                                   (rule "close" (formula "45") (ifseqformula "44"))
                                                )
                                                (branch "Pre (wordIndex)"
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "wellFormedAnonEQ" (formula "41") (term "0,1") (ifseqformula "39"))
                                                   (rule "expand_inInt" (formula "41") (term "1,1"))
                                                   (rule "replace_int_MAX" (formula "41") (term "1,0,1,1"))
                                                   (rule "replace_int_MIN" (formula "41") (term "0,1,1,1"))
                                                   (rule "replace_known_left" (formula "41") (term "0,1,1") (ifseqformula "21"))
                                                    (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "18")) (ifInst ""  (formula "38")))
                                                   (rule "inEqSimp_commuteLeq" (formula "41") (term "0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "41") (term "1"))
                                                   (rule "inEqSimp_subsumption1" (formula "41") (term "1") (ifseqformula "25"))
                                                   (rule "leq_literals" (formula "41") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "inEqSimp_geqRight" (formula "41"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "26"))
                                                   (rule "qeq_literals" (formula "1") (term "0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                             )
                                             (branch "Exceptional Post (checkInvariants)"
                                                 (builtin "One Step Simplification" (formula "40"))
                                                 (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "44")) (ifInst ""  (formula "9")) (ifInst ""  (formula "44")) (ifInst ""  (formula "9")))
                                                (rule "andLeft" (formula "39"))
                                                (rule "andLeft" (formula "40"))
                                                (rule "andLeft" (formula "40"))
                                                (rule "andLeft" (formula "42"))
                                                (rule "notLeft" (formula "40"))
                                                (rule "translateJavaSubInt" (formula "42") (term "0,2,0,0,1,0,0"))
                                                (rule "translateJavaSubInt" (formula "41") (term "0,2,0,0,1,0,0,0"))
                                                (rule "replace_known_right" (formula "41") (term "0,0,1") (ifseqformula "43"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "replace_known_right" (formula "42") (term "1") (ifseqformula "43"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "notLeft" (formula "42"))
                                                (rule "inEqSimp_ltToLeq" (formula "41") (term "0,1,0,1"))
                                                (rule "times_zero_1" (formula "41") (term "1,0,0,0,1,0,1"))
                                                (rule "add_zero_right" (formula "41") (term "0,0,0,1,0,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "41") (term "1,1,0,1"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,1,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,1,0,1"))
                                                (rule "mul_literals" (formula "41") (term "1,0,1,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,1,0,1"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,1,1,0,1"))
                                                (rule "polySimp_rightDist" (formula "41") (term "1,1,1,0,1"))
                                                (rule "mul_literals" (formula "41") (term "0,1,1,1,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,1,0,1"))
                                                (rule "polySimp_elimOne" (formula "41") (term "1,1,1,1,0,1"))
                                                (rule "inEqSimp_contradEq7" (formula "41") (term "0,0,0,0") (ifseqformula "13"))
                                                (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "41") (term "0,0,0,0,0,0"))
                                                (rule "leq_literals" (formula "41") (term "0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "inEqSimp_contradEq7" (formula "42") (term "0,0") (ifseqformula "13"))
                                                (rule "mul_literals" (formula "42") (term "1,0,0,0,0"))
                                                (rule "add_zero_right" (formula "42") (term "0,0,0,0"))
                                                (rule "leq_literals" (formula "42") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "inEqSimp_subsumption1" (formula "41") (term "0,0,1,0") (ifseqformula "13"))
                                                (rule "leq_literals" (formula "41") (term "0,0,0,1,0"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "inEqSimp_subsumption0" (formula "42") (term "1,1") (ifseqformula "10"))
                                                (rule "inEqSimp_homoInEq0" (formula "42") (term "0,1,1"))
                                                (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,1"))
                                                (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,1"))
                                                (rule "mul_literals" (formula "42") (term "0,1,0,0,1,1"))
                                                (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,1"))
                                                (rule "polySimp_addComm0" (formula "42") (term "0,0,0,1,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0,1,1"))
                                                (rule "add_literals" (formula "42") (term "1,1,0,0,1,1"))
                                                (rule "times_zero_1" (formula "42") (term "1,0,0,1,1"))
                                                (rule "add_literals" (formula "42") (term "0,0,1,1"))
                                                (rule "qeq_literals" (formula "42") (term "0,1,1"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "inEqSimp_subsumption1" (formula "42") (term "1") (ifseqformula "13"))
                                                (rule "leq_literals" (formula "42") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "notRight" (formula "42"))
                                                (rule "replace_known_left" (formula "42") (term "0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "andLeft" (formula "42"))
                                                (rule "pullOutSelect" (formula "41") (term "0") (inst "selectSK=java_lang_Object_created__0"))
                                                (rule "simplifySelectOfAnonEQ" (formula "41") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "45")))
                                                (rule "ifthenelse_negated" (formula "41") (term "0"))
                                                (rule "applyEqRigid" (formula "41") (term "1") (ifseqformula "42"))
                                                (rule "ifEqualsTRUE" (formula "41"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "pullOutSelect" (formula "43") (term "0,0,1") (inst "selectSK=BitSet_wordsInUse_0"))
                                                (rule "applyEq" (formula "44") (term "1,1,1,1") (ifseqformula "43"))
                                                (rule "simplifySelectOfAnonEQ" (formula "43") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "50")) (ifInst ""  (formula "20")))
                                                (rule "applyEqReverse" (formula "44") (term "0,0,1") (ifseqformula "43"))
                                                (rule "applyEqReverse" (formula "44") (term "1,1,1,1") (ifseqformula "43"))
                                                (rule "hideAuxiliaryEq" (formula "43"))
                                                (rule "inEqSimp_contradInEq1" (formula "43") (term "0,1") (ifseqformula "14"))
                                                (rule "qeq_literals" (formula "43") (term "0,0,1"))
                                                 (builtin "One Step Simplification" (formula "43"))
                                                (rule "pullOutSelect" (formula "43") (term "0,0,1") (inst "selectSK=BitSet_words_0"))
                                                (rule "simplifySelectOfAnonEQ" (formula "43") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "50")) (ifInst ""  (formula "20")))
                                                (rule "applyEqReverse" (formula "44") (term "0,0,1") (ifseqformula "43"))
                                                (rule "hideAuxiliaryEq" (formula "43"))
                                                (rule "inEqSimp_homoInEq0" (formula "43") (term "1"))
                                                (rule "polySimp_addComm1" (formula "43") (term "0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1"))
                                                (rule "polySimp_mulComm0" (formula "43") (term "1,1"))
                                                (rule "polySimp_rightDist" (formula "43") (term "1,1"))
                                                (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1"))
                                                (rule "mul_literals" (formula "43") (term "0,1,1"))
                                                (rule "polySimp_elimOne" (formula "43") (term "1,1,1"))
                                                (rule "inEqSimp_contradInEq0" (formula "43") (term "1") (ifseqformula "11"))
                                                (rule "inEqSimp_homoInEq1" (formula "43") (term "0,1"))
                                                (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1"))
                                                (rule "mul_literals" (formula "43") (term "0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "43") (term "0,0,1"))
                                                (rule "polySimp_addComm1" (formula "43") (term "0,0,0,1"))
                                                (rule "add_literals" (formula "43") (term "0,0,0,0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "43") (term "0,0,1"))
                                                (rule "add_literals" (formula "43") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "43") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "43") (term "0,0,1"))
                                                (rule "leq_literals" (formula "43") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "43"))
                                                (rule "notLeft" (formula "43"))
                                                (rule "replace_known_right" (formula "43") (term "1") (ifseqformula "44"))
                                                 (builtin "One Step Simplification" (formula "43"))
                                                (rule "instanceof_not_compatible_5" (formula "44") (ifseqformula "43"))
                                                (rule "expand_subJint" (formula "1") (term "0,2,0"))
                                                (rule "polySimp_elimSub" (formula "1") (term "0,0,2,0"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0,2,0"))
                                                (rule "polySimp_addComm0" (formula "1") (term "0,0,2,0"))
                                                (rule "hideAuxiliaryEqConcrete" (formula "42"))
                                                (rule "expand_moduloInteger" (formula "1") (term "0,2,0"))
                                                (rule "replace_int_RANGE" (formula "1") (term "1,1,0,2,0"))
                                                (rule "replace_int_MIN" (formula "1") (term "0,0,2,0"))
                                                (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0,2,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,2,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,1,0,2,0"))
                                                (rule "mod_axiom" (formula "1") (term "1,0,2,0"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,2,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,2,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0,2,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0,2,0"))
                                                (rule "applyEq" (formula "1") (term "0,1,0,2,0") (ifseqformula "17"))
                                                (rule "times_zero_2" (formula "1") (term "1,0,2,0"))
                                                (rule "add_zero_right" (formula "1") (term "0,2,0"))
                                                (rule "close" (formula "46") (ifseqformula "1"))
                                             )
                                             (branch "Pre (checkInvariants)"
                                                 (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "42")) (ifInst ""  (formula "9")) (ifInst ""  (formula "42")) (ifInst ""  (formula "9")) (ifInst ""  (formula "18")))
                                                (rule "orRight" (formula "38"))
                                                (rule "orRight" (formula "38"))
                                                (rule "notRight" (formula "39"))
                                                (rule "notRight" (formula "39"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "translateJavaSubInt" (formula "41") (term "0,2,0,0,1,0"))
                                                (rule "translateJavaSubInt" (formula "1") (term "0,2,0,0,1"))
                                                (rule "replace_known_left" (formula "41") (term "0,1") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "1")) (ifInst ""  (formula "3")))
                                                (rule "closeTrue" (formula "41"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "Null Reference (x_arr_6 = null)"
                                        (builtin "One Step Simplification" (formula "33"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "Index Out of Bounds (x_arr_6 != null, but wordIndex Out of Bounds!)"
                                        (builtin "One Step Simplification" (formula "33"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                                       (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "1") (term "0,0,1"))
                                       (rule "blockThrow" (formula "33") (term "1"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                                       (rule "mul_literals" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "leq_literals" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "19") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "19") (term "0"))
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "closeFalse" (formula "19"))
                                    )
                                 )
                              )
                              (branch "Exceptional Post (wordIndex)"
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "18"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "19"))
                                 (rule "notLeft" (formula "17"))
                                 (rule "close" (formula "21") (ifseqformula "20"))
                              )
                              (branch "Pre (wordIndex)"
                                  (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "10")))
                                 (rule "expand_inInt" (formula "20") (term "1"))
                                 (rule "replace_int_MIN" (formula "20") (term "0,1,1"))
                                 (rule "replace_int_MAX" (formula "20") (term "1,0,1"))
                                 (rule "replace_known_left" (formula "20") (term "0,1") (ifseqformula "13"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "inEqSimp_commuteLeq" (formula "20") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "20") (term "1"))
                                 (rule "inEqSimp_subsumption1" (formula "20") (term "0") (ifseqformula "15"))
                                 (rule "leq_literals" (formula "20") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "inEqSimp_geqRight" (formula "20"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "16"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "Assertion (x_13) Failure"
                               (builtin "One Step Simplification" (formula "20"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "throwUnfold" (formula "20") (term "1") (inst "#v0=a"))
                              (rule "variableDeclarationAssign" (formula "20") (term "1"))
                              (rule "variableDeclaration" (formula "20") (term "1") (newnames "a"))
                              (rule "instanceCreationAssignment" (formula "20") (term "1") (inst "#v0=a_1"))
                              (rule "variableDeclarationAssign" (formula "20") (term "1"))
                              (rule "variableDeclaration" (formula "20") (term "1") (newnames "a_1"))
                              (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "20") (term "1") (inst "#v0=a_2"))
                              (rule "variableDeclaration" (formula "20") (term "1") (newnames "a_2"))
                              (rule "methodBodyExpand" (formula "20") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "variableDeclaration" (formula "20") (term "1") (newnames "__NEW__"))
                              (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "20") (term "1") (inst "#v0=a_3"))
                              (rule "variableDeclaration" (formula "20") (term "1") (newnames "a_3"))
                              (rule "allocateInstance" (formula "20"))
                               (builtin "One Step Simplification" (formula "21"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "notLeft" (formula "1"))
                              (rule "blockEmpty" (formula "23") (term "1"))
                              (rule "assignment" (formula "23") (term "1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "assignment_write_attribute_this" (formula "23") (term "1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "methodCallWithinClass" (formula "23") (term "1"))
                              (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "methodCallSuper" (formula "23") (term "1"))
                              (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "methodCallSuper" (formula "23") (term "1"))
                              (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "methodCallSuper" (formula "23") (term "1"))
                              (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "methodCallEmpty" (formula "23") (term "1"))
                              (rule "blockEmpty" (formula "23") (term "1"))
                              (rule "assignment_write_attribute_this" (formula "23") (term "1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "assignment_write_attribute_this" (formula "23") (term "1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "methodCallEmpty" (formula "23") (term "1"))
                              (rule "methodCallEmpty" (formula "23") (term "1"))
                              (rule "methodCallEmpty" (formula "23") (term "1"))
                              (rule "blockEmpty" (formula "23") (term "1"))
                              (rule "methodCallReturnIgnoreResult" (formula "23") (term "1"))
                              (rule "methodCallReturn" (formula "23") (term "1"))
                              (rule "assignment" (formula "23") (term "1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "methodCallEmpty" (formula "23") (term "1"))
                              (rule "blockEmpty" (formula "23") (term "1"))
                              (rule "assignment" (formula "23") (term "1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "methodCallSuper" (formula "23") (term "1"))
                              (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "methodCallSuper" (formula "23") (term "1"))
                              (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "methodCallSuper" (formula "23") (term "1"))
                              (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "methodCallEmpty" (formula "23") (term "1"))
                              (rule "blockEmpty" (formula "23") (term "1"))
                              (rule "assignment_write_attribute_this" (formula "23") (term "1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "assignment_write_attribute_this" (formula "23") (term "1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "methodCallEmpty" (formula "23") (term "1"))
                              (rule "methodCallEmpty" (formula "23") (term "1"))
                              (rule "methodCallEmpty" (formula "23") (term "1"))
                              (rule "blockEmpty" (formula "23") (term "1"))
                              (rule "assignment_write_attribute" (formula "23") (term "1"))
                              (branch "Normal Execution (a_1 != null)"
                                  (builtin "One Step Simplification" (formula "24"))
                                  (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "17")))
                                 (rule "false_right" (formula "23"))
                                 (rule "assignment" (formula "23") (term "1"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "methodCallThrow" (formula "23") (term "1"))
                                 (rule "blockThrow" (formula "23") (term "1"))
                                 (rule "methodCallParamThrow" (formula "23") (term "1"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "tryCatchThrow" (formula "23") (term "1"))
                                 (rule "ifElseUnfold" (formula "23") (term "1") (inst "#boolv=x"))
                                 (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_19"))
                                 (rule "equality_comparison_simple" (formula "23") (term "1"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "replace_known_right" (formula "23") (term "0,0,1,0") (ifseqformula "17"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "ifElseSplit" (formula "23"))
                                 (branch "if x_19 true"
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if x_19 false"
                                     (builtin "One Step Simplification" (formula "1"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "true_left" (formula "1"))
                                    (rule "elim_double_block" (formula "23") (term "1"))
                                    (rule "ifElseSplit" (formula "23"))
                                    (branch "if a instanceof java.lang.Throwable true"
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                                       (rule "true_left" (formula "1"))
                                       (rule "variableDeclaration" (formula "23") (term "1") (newnames "e"))
                                       (rule "delete_unnecessary_cast" (formula "23") (term "1"))
                                        (builtin "One Step Simplification" (formula "24"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "assignment" (formula "23") (term "1"))
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "emptyModality" (formula "23") (term "1"))
                                        (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "17")))
                                       (rule "false_right" (formula "23"))
                                       (rule "Class_invariant_axiom_for_BitSet" (formula "16") (inst "x=x_20") (inst "x_0=x_0") (inst "i=i") (ifseqformula "12"))
                                       (rule "expand_inInt" (formula "16") (term "1,0,0,1,0,0"))
                                       (rule "expand_inInt" (formula "16") (term "1,0,0,1,0"))
                                       (rule "expand_inInt" (formula "16") (term "1,0,0,1"))
                                       (rule "replace_int_MAX" (formula "16") (term "1,0,1,0,0,1,0,0"))
                                       (rule "replace_int_MIN" (formula "16") (term "0,1,1,0,0,1,0,0"))
                                       (rule "replace_int_MAX" (formula "16") (term "1,0,1,0,0,1,0"))
                                       (rule "replace_int_MIN" (formula "16") (term "0,1,1,0,0,1,0"))
                                       (rule "replace_int_MIN" (formula "16") (term "0,1,1,0,0,1"))
                                       (rule "replace_int_MAX" (formula "16") (term "1,0,1,0,0,1"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "andLeft" (formula "16"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "notLeft" (formula "16"))
                                       (rule "eqSymm" (formula "20") (term "1,0"))
                                       (rule "translateJavaSubInt" (formula "18") (term "0,2,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "21") (term "1,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "20") (term "1,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "19") (term "1,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "16"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0"))
                                       (rule "inEqSimp_contradEq7" (formula "18") (term "0,0") (ifseqformula "5"))
                                       (rule "mul_literals" (formula "18") (term "1,0,0,0,0"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,0"))
                                       (rule "leq_literals" (formula "18") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "notLeft" (formula "18"))
                                       (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq0" (formula "17") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "17") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0"))
                                       (rule "add_literals" (formula "17") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "17") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "17") (term "0,0"))
                                       (rule "qeq_literals" (formula "17") (term "0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "5"))
                                       (rule "leq_literals" (formula "16") (term "0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "true_left" (formula "16"))
                                       (rule "nnf_imp2or" (formula "18") (term "0"))
                                       (rule "nnf_imp2or" (formula "17") (term "0"))
                                       (rule "expand_subJint" (formula "19") (term "0,2,0"))
                                       (rule "polySimp_elimSub" (formula "19") (term "0,0,2,0"))
                                       (rule "mul_literals" (formula "19") (term "1,0,0,2,0"))
                                       (rule "polySimp_addComm0" (formula "19") (term "0,0,2,0"))
                                       (rule "nnf_imp2or" (formula "16") (term "0"))
                                       (rule "expand_moduloInteger" (formula "19") (term "0,2,0"))
                                       (rule "replace_int_HALFRANGE" (formula "19") (term "0,0,1,0,2,0"))
                                       (rule "replace_int_RANGE" (formula "19") (term "1,1,0,2,0"))
                                       (rule "replace_int_MIN" (formula "19") (term "0,0,2,0"))
                                       (rule "polySimp_addAssoc" (formula "19") (term "0,1,0,2,0"))
                                       (rule "add_literals" (formula "19") (term "0,0,1,0,2,0"))
                                       (rule "mod_axiom" (formula "19") (term "1,0,2,0"))
                                       (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,2,0"))
                                       (rule "polySimp_addAssoc" (formula "19") (term "0,2,0"))
                                       (rule "polySimp_addAssoc" (formula "19") (term "0,0,2,0"))
                                       (rule "add_literals" (formula "19") (term "0,0,0,2,0"))
                                       (rule "applyEq" (formula "19") (term "0,1,0,2,0") (ifseqformula "8"))
                                       (rule "mul_literals" (formula "19") (term "1,0,2,0"))
                                       (rule "add_zero_right" (formula "19") (term "0,2,0"))
                                       (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0"))
                                       (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0"))
                                       (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                       (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                       (rule "nnf_notAnd" (formula "18") (term "1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "18") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "18") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "18") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "18") (term "1,1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "17") (term "1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "17") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "1,0,1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "17") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "17") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "17") (term "1,1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0"))
                                       (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "16") (term "1,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "16") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,0,0,1,1,0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "16") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,0,0,0,1,0,0"))
                                       (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,1,0,0"))
                                       (rule "mul_literals" (formula "16") (term "1,0,1,0,0"))
                                       (rule "commute_or" (formula "18") (term "1,0,0"))
                                       (rule "commute_or" (formula "17") (term "1,0,0"))
                                       (rule "commute_or_2" (formula "16") (term "0,0"))
                                       (rule "shift_paren_or" (formula "18") (term "0,0"))
                                       (rule "commute_or_2" (formula "18") (term "0"))
                                       (rule "inEqSimp_or_subsumption3" (formula "18") (term "0"))
                                       (rule "qeq_literals" (formula "18") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "ifthenelse_to_or_left" (formula "17") (term "1,0"))
                                       (rule "eqSymm" (formula "17") (term "1,1,1,0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "eqSymm" (formula "17") (term "1,0,1,0"))
                                       (rule "commute_or" (formula "16") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "16") (term "0,0"))
                                       (rule "shift_paren_or" (formula "17") (term "0,0"))
                                       (rule "commute_or" (formula "17") (term "1,1,0"))
                                       (rule "commute_or" (formula "17") (term "0,1,0"))
                                       (rule "commute_or" (formula "17") (term "0,0,0"))
                                       (rule "inEqSimp_or_subsumption0" (formula "17") (term "0,0,0"))
                                       (rule "qeq_literals" (formula "17") (term "0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "cnf_rightDist" (formula "17") (term "0"))
                                       (rule "distr_forallAnd" (formula "17"))
                                       (rule "andLeft" (formula "17"))
                                       (rule "commute_or_2" (formula "17") (term "0"))
                                       (rule "shift_paren_or" (formula "18") (term "0"))
                                       (rule "commute_or" (formula "17") (term "0,0"))
                                       (rule "commute_or" (formula "16") (term "0,0,0,0"))
                                       (rule "allLeft" (formula "16") (inst "t=int::select(heap, self, BitSet::$wordsInUse)"))
                                       (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "23"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "inEqSimp_homoInEq0" (formula "16") (term "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,1"))
                                       (rule "add_literals" (formula "16") (term "1,1,0,1"))
                                       (rule "times_zero_1" (formula "16") (term "1,0,1"))
                                       (rule "add_literals" (formula "16") (term "0,1"))
                                       (rule "qeq_literals" (formula "16") (term "1"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0") (ifseqformula "5"))
                                       (rule "qeq_literals" (formula "16") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "inEqSimp_contradInEq0" (formula "16") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "16") (term "0,0,1"))
                                       (rule "polySimp_addComm0" (formula "16") (term "0,0,0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                       (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "16") (term "0,0,1"))
                                       (rule "leq_literals" (formula "16") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "16"))
                                       (rule "leq_literals" (formula "5") (term "0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "inEqSimp_antiSymm" (formula "15") (ifseqformula "8"))
                                       (rule "applyEq" (formula "23") (term "0,2,0") (ifseqformula "15"))
                                       (rule "applyEq" (formula "7") (term "1,0,0") (ifseqformula "15"))
                                       (rule "add_literals" (formula "7") (term "0,0"))
                                       (rule "div_literals" (formula "7") (term "0"))
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "14"))
                                       (rule "inEqSimp_homoInEq0" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "0,0"))
                                       (rule "applyEq" (formula "7") (term "0") (ifseqformula "14"))
                                       (rule "leq_literals" (formula "7"))
                                       (rule "true_left" (formula "7"))
                                       (rule "applyEq" (formula "22") (term "1,0,2,0") (ifseqformula "13"))
                                       (rule "add_literals" (formula "22") (term "0,2,0"))
                                       (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
                                       (rule "qeq_literals" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "applyEq" (formula "14") (term "1,1,1,0,0") (ifseqformula "13"))
                                       (rule "add_literals" (formula "14") (term "1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "5") (term "0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "closeFalse" (formula "5"))
                                    )
                                    (branch "if a instanceof java.lang.Throwable false"
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                              )
                              (branch "Null Reference (a_1 = null)"
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                        )
                        (branch "Null Reference (x_arr_5 = null)"
                            (builtin "One Step Simplification" (formula "20"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Index Out of Bounds (x_arr_5 != null, but x_18 Out of Bounds!)"
                            (builtin "One Step Simplification" (formula "20"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,1"))
                           (rule "add_literals" (formula "1") (term "0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
                           (rule "blockThrow" (formula "20") (term "1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "1") (term "0,1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
                  (branch "Null Reference (x_arr_3 = null)"
                      (builtin "One Step Simplification" (formula "20"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Assertion (x_7) Failure"
                   (builtin "One Step Simplification" (formula "1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "notLeft" (formula "1"))
                  (rule "inEqSimp_leqRight" (formula "17"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "9"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "6"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "mul_literals" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "1,1,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0"))
                  (rule "add_zero_right" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1"))
                  (rule "elimGcdGeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                  (rule "add_literals" (formula "2") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "leq_literals" (formula "2") (term "0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                  (rule "leq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
                  (rule "mul_literals" (formula "8") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0"))
                  (rule "add_literals" (formula "8") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "8"))
                  (rule "mul_literals" (formula "8") (term "1"))
                  (rule "inEqSimp_subsumption6" (formula "8") (ifseqformula "2"))
                  (rule "mul_literals" (formula "8") (term "1,1,0"))
                  (rule "greater_literals" (formula "8") (term "0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "leq_literals" (formula "8") (term "0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                  (rule "mul_literals" (formula "4") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor3b" (formula "4") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1"))
                  (rule "inEqSimp_subsumption6" (formula "4") (ifseqformula "2"))
                  (rule "mul_literals" (formula "4") (term "1,1,0"))
                  (rule "greater_literals" (formula "4") (term "0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "leq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "throwUnfold" (formula "22") (term "1") (inst "#v0=a"))
                  (rule "variableDeclarationAssign" (formula "22") (term "1"))
                  (rule "variableDeclaration" (formula "22") (term "1") (newnames "a"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "0,0") (ifseqformula "12"))
                  (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "instanceCreationAssignment" (formula "23") (term "1") (inst "#v0=a_1"))
                  (rule "variableDeclarationAssign" (formula "23") (term "1"))
                  (rule "variableDeclaration" (formula "23") (term "1") (newnames "a_1"))
                  (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "23") (term "1") (inst "#v0=a_2"))
                  (rule "variableDeclaration" (formula "23") (term "1") (newnames "a_2"))
                  (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "variableDeclaration" (formula "23") (term "1") (newnames "__NEW__"))
                  (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "23") (term "1") (inst "#v0=a_3"))
                  (rule "variableDeclaration" (formula "23") (term "1") (newnames "a_3"))
                  (rule "allocateInstance" (formula "23"))
                   (builtin "One Step Simplification" (formula "24"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "blockEmpty" (formula "26") (term "1"))
                  (rule "assignment" (formula "26") (term "1"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "assignment_write_attribute_this" (formula "26") (term "1"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "methodCallWithinClass" (formula "26") (term "1"))
                  (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "methodCallSuper" (formula "26") (term "1"))
                  (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "methodCallSuper" (formula "26") (term "1"))
                  (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "methodCallSuper" (formula "26") (term "1"))
                  (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "methodCallEmpty" (formula "26") (term "1"))
                  (rule "blockEmpty" (formula "26") (term "1"))
                  (rule "assignment_write_attribute_this" (formula "26") (term "1"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "assignment_write_attribute_this" (formula "26") (term "1"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "methodCallEmpty" (formula "26") (term "1"))
                  (rule "methodCallEmpty" (formula "26") (term "1"))
                  (rule "methodCallEmpty" (formula "26") (term "1"))
                  (rule "blockEmpty" (formula "26") (term "1"))
                  (rule "methodCallReturnIgnoreResult" (formula "26") (term "1"))
                  (rule "methodCallReturn" (formula "26") (term "1"))
                  (rule "assignment" (formula "26") (term "1"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "methodCallEmpty" (formula "26") (term "1"))
                  (rule "blockEmpty" (formula "26") (term "1"))
                  (rule "assignment" (formula "26") (term "1"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "methodCallSuper" (formula "26") (term "1"))
                  (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "methodCallSuper" (formula "26") (term "1"))
                  (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "methodCallSuper" (formula "26") (term "1"))
                  (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "methodCallEmpty" (formula "26") (term "1"))
                  (rule "blockEmpty" (formula "26") (term "1"))
                  (rule "assignment_write_attribute_this" (formula "26") (term "1"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "assignment_write_attribute_this" (formula "26") (term "1"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "methodCallEmpty" (formula "26") (term "1"))
                  (rule "methodCallEmpty" (formula "26") (term "1"))
                  (rule "methodCallEmpty" (formula "26") (term "1"))
                  (rule "blockEmpty" (formula "26") (term "1"))
                  (rule "assignment_write_attribute" (formula "26") (term "1"))
                  (branch "Normal Execution (a_1 != null)"
                      (builtin "One Step Simplification" (formula "27"))
                      (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "22")))
                     (rule "false_right" (formula "26"))
                     (rule "assignment" (formula "26") (term "1"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "methodCallThrow" (formula "26") (term "1"))
                     (rule "blockThrow" (formula "26") (term "1"))
                     (rule "methodCallParamThrow" (formula "26") (term "1"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "tryCatchThrow" (formula "26") (term "1"))
                     (rule "ifElseUnfold" (formula "26") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_13"))
                     (rule "equality_comparison_simple" (formula "26") (term "1"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "replace_known_right" (formula "26") (term "0,0,1,0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "ifElseSplit" (formula "26"))
                     (branch "if x_13 true"
                         (builtin "One Step Simplification" (formula "27"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if x_13 false"
                         (builtin "One Step Simplification" (formula "27"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "elim_double_block" (formula "26") (term "1"))
                        (rule "ifElseSplit" (formula "26"))
                        (branch "if a instanceof java.lang.Throwable true"
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                           (rule "true_left" (formula "1"))
                           (rule "variableDeclaration" (formula "26") (term "1") (newnames "e"))
                           (rule "delete_unnecessary_cast" (formula "26") (term "1"))
                            (builtin "One Step Simplification" (formula "27"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "assignment" (formula "26") (term "1"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "emptyModality" (formula "26") (term "1"))
                            (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "22")))
                           (rule "false_right" (formula "26"))
                           (rule "Class_invariant_axiom_for_BitSet" (formula "20") (inst "x=x_14") (inst "x_0=x_0") (inst "i=i") (ifseqformula "16"))
                           (rule "expand_inInt" (formula "20") (term "1,0,0,1"))
                           (rule "expand_inInt" (formula "20") (term "1,0,0,1,0"))
                           (rule "expand_inInt" (formula "20") (term "1,0,0,1,0,0"))
                           (rule "replace_int_MIN" (formula "20") (term "0,1,1,0,0,1"))
                           (rule "replace_int_MAX" (formula "20") (term "1,0,1,0,0,1"))
                           (rule "replace_int_MIN" (formula "20") (term "0,1,1,0,0,1,0"))
                           (rule "replace_int_MAX" (formula "20") (term "1,0,1,0,0,1,0"))
                           (rule "replace_int_MIN" (formula "20") (term "0,1,1,0,0,1,0,0"))
                           (rule "replace_int_MAX" (formula "20") (term "1,0,1,0,0,1,0,0"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "notLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "eqSymm" (formula "24") (term "1,0"))
                           (rule "translateJavaSubInt" (formula "22") (term "0,2,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "1,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0"))
                           (rule "inEqSimp_contradEq7" (formula "22") (term "0,0") (ifseqformula "6"))
                           (rule "mul_literals" (formula "22") (term "1,0,0,0,0"))
                           (rule "add_literals" (formula "22") (term "0,0,0,0"))
                           (rule "leq_literals" (formula "22") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "notLeft" (formula "22"))
                           (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "6"))
                           (rule "leq_literals" (formula "20") (term "0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "20"))
                           (rule "andLeft" (formula "4"))
                           (rule "inEqSimp_homoInEq1" (formula "4"))
                           (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "1,1,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "leq_literals" (formula "4"))
                           (rule "closeFalse" (formula "4"))
                        )
                        (branch "if a instanceof java.lang.Throwable false"
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
                  (branch "Null Reference (a_1 = null)"
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
            (branch "Null Reference (x_arr_2 = null)"
                (builtin "One Step Simplification" (formula "21"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Assertion (x_1) Failure"
          (builtin "One Step Simplification" (formula "15"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "mod_axiom" (formula "1") (term "1,0,2,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,2,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,2,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,2,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,2,0"))
         (rule "throwUnfold" (formula "15") (term "1") (inst "#v0=a"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "a"))
         (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
         (rule "mul_literals" (formula "4") (term "1,1,1,1,1"))
         (rule "qeq_literals" (formula "4") (term "0,1,1"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "equal_literals" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "andLeft" (formula "4"))
         (rule "andLeft" (formula "4"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
         (rule "add_literals" (formula "6") (term "0,0,1"))
         (rule "polySimp_addComm1" (formula "6") (term "1"))
         (rule "add_literals" (formula "6") (term "0,1"))
         (rule "inEqSimp_homoInEq0" (formula "5"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
         (rule "polySimp_addComm1" (formula "5") (term "0"))
         (rule "inEqSimp_homoInEq1" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
         (rule "polySimp_addComm1" (formula "6") (term "0"))
         (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq1" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0"))
         (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq0" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "applyEq" (formula "1") (term "0,1,0,2,0") (ifseqformula "4"))
         (rule "polySimp_addComm1" (formula "1") (term "0,2,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1"))
         (rule "polySimp_rightDist" (formula "5") (term "1"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
         (rule "mul_literals" (formula "5") (term "0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6"))
         (rule "polySimp_mulComm0" (formula "6") (term "1"))
         (rule "polySimp_rightDist" (formula "6") (term "1"))
         (rule "mul_literals" (formula "6") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1"))
         (rule "polySimp_rightDist" (formula "7") (term "1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
         (rule "mul_literals" (formula "7") (term "0,1"))
         (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
         (rule "inEqSimp_homoInEq0" (formula "5") (term "0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
         (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
         (rule "add_literals" (formula "5") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
         (rule "add_literals" (formula "5") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "5") (term "1,0,0"))
         (rule "add_literals" (formula "5") (term "0,0"))
         (rule "qeq_literals" (formula "5") (term "0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "2"))
         (rule "polySimp_rightDist" (formula "6") (term "0,0"))
         (rule "mul_literals" (formula "6") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0"))
         (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
         (rule "add_literals" (formula "6") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0"))
         (rule "add_literals" (formula "6") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6"))
         (rule "mul_literals" (formula "6") (term "1"))
         (rule "arrayLengthNotNegative" (formula "3") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
         (rule "leq_literals" (formula "3") (term "0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "arrayLengthIsAnInt" (formula "3") (term "0"))
         (rule "expand_inInt" (formula "3"))
         (rule "replace_int_MAX" (formula "3") (term "1,0"))
         (rule "replace_int_MIN" (formula "3") (term "0,1"))
         (rule "andLeft" (formula "3"))
         (rule "inEqSimp_commuteLeq" (formula "4"))
         (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "5"))
         (rule "leq_literals" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0,0") (ifseqformula "8"))
         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "instanceCreationAssignment" (formula "19") (term "1") (inst "#v0=a_1"))
         (rule "variableDeclarationAssign" (formula "19") (term "1"))
         (rule "variableDeclaration" (formula "19") (term "1") (newnames "a_1"))
         (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "19") (term "1") (inst "#v0=a_2"))
         (rule "variableDeclaration" (formula "19") (term "1") (newnames "a_2"))
         (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "variableDeclaration" (formula "19") (term "1") (newnames "__NEW__"))
         (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "19") (term "1") (inst "#v0=a_3"))
         (rule "variableDeclaration" (formula "19") (term "1") (newnames "a_3"))
         (rule "allocateInstance" (formula "19"))
          (builtin "One Step Simplification" (formula "20"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "blockEmpty" (formula "22") (term "1"))
         (rule "assignment" (formula "22") (term "1"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "assignment_write_attribute_this" (formula "22") (term "1"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "methodCallWithinClass" (formula "22") (term "1"))
         (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "methodCallSuper" (formula "22") (term "1"))
         (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "methodCallSuper" (formula "22") (term "1"))
         (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "methodCallSuper" (formula "22") (term "1"))
         (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "methodCallEmpty" (formula "22") (term "1"))
         (rule "blockEmpty" (formula "22") (term "1"))
         (rule "assignment_write_attribute_this" (formula "22") (term "1"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "assignment_write_attribute_this" (formula "22") (term "1"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "methodCallEmpty" (formula "22") (term "1"))
         (rule "methodCallEmpty" (formula "22") (term "1"))
         (rule "methodCallEmpty" (formula "22") (term "1"))
         (rule "blockEmpty" (formula "22") (term "1"))
         (rule "methodCallReturnIgnoreResult" (formula "22") (term "1"))
         (rule "methodCallReturn" (formula "22") (term "1"))
         (rule "assignment" (formula "22") (term "1"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "methodCallEmpty" (formula "22") (term "1"))
         (rule "blockEmpty" (formula "22") (term "1"))
         (rule "assignment" (formula "22") (term "1"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "methodCallSuper" (formula "22") (term "1"))
         (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "methodCallSuper" (formula "22") (term "1"))
         (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "methodCallSuper" (formula "22") (term "1"))
         (rule "methodBodyExpand" (formula "22") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "methodCallEmpty" (formula "22") (term "1"))
         (rule "blockEmpty" (formula "22") (term "1"))
         (rule "assignment_write_attribute_this" (formula "22") (term "1"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "assignment_write_attribute_this" (formula "22") (term "1"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "methodCallEmpty" (formula "22") (term "1"))
         (rule "methodCallEmpty" (formula "22") (term "1"))
         (rule "methodCallEmpty" (formula "22") (term "1"))
         (rule "blockEmpty" (formula "22") (term "1"))
         (rule "assignment_write_attribute" (formula "22") (term "1"))
         (branch "Normal Execution (a_1 != null)"
             (builtin "One Step Simplification" (formula "23"))
             (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "18")))
            (rule "false_right" (formula "22"))
            (rule "assignment" (formula "22") (term "1"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "methodCallThrow" (formula "22") (term "1"))
            (rule "blockThrow" (formula "22") (term "1"))
            (rule "methodCallParamThrow" (formula "22") (term "1"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "tryCatchThrow" (formula "22") (term "1"))
            (rule "ifElseUnfold" (formula "22") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_7"))
            (rule "equality_comparison_simple" (formula "22") (term "1"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "replace_known_right" (formula "22") (term "0,0,1,0") (ifseqformula "18"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "ifElseSplit" (formula "22"))
            (branch "if x_7 true"
                (builtin "One Step Simplification" (formula "23"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_7 false"
                (builtin "One Step Simplification" (formula "23"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "elim_double_block" (formula "22") (term "1"))
               (rule "ifElseSplit" (formula "22"))
               (branch "if a instanceof java.lang.Throwable true"
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
                  (rule "true_left" (formula "1"))
                  (rule "variableDeclaration" (formula "22") (term "1") (newnames "e"))
                  (rule "delete_unnecessary_cast" (formula "22") (term "1"))
                   (builtin "One Step Simplification" (formula "23"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "assignment" (formula "22") (term "1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "emptyModality" (formula "22") (term "1"))
                   (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "18")))
                  (rule "false_right" (formula "22"))
                  (rule "Class_invariant_axiom_for_BitSet" (formula "16") (inst "x=x_8") (inst "x_0=x_0") (inst "i=i") (ifseqformula "12"))
                  (rule "expand_inInt" (formula "16") (term "1,0,0,1"))
                  (rule "expand_inInt" (formula "16") (term "1,0,0,1,0"))
                  (rule "expand_inInt" (formula "16") (term "1,0,0,1,0,0"))
                  (rule "replace_int_MIN" (formula "16") (term "0,1,1,0,0,1"))
                  (rule "replace_int_MAX" (formula "16") (term "1,0,1,0,0,1"))
                  (rule "replace_int_MIN" (formula "16") (term "0,1,1,0,0,1,0"))
                  (rule "replace_int_MAX" (formula "16") (term "1,0,1,0,0,1,0"))
                  (rule "replace_int_MIN" (formula "16") (term "0,1,1,0,0,1,0,0"))
                  (rule "replace_int_MAX" (formula "16") (term "1,0,1,0,0,1,0,0"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "notLeft" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "eqSymm" (formula "20") (term "1,0"))
                  (rule "translateJavaSubInt" (formula "18") (term "0,2,0,0,1"))
                  (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "notLeft" (formula "18"))
                  (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "20") (term "1,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "19") (term "1,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "1,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "16"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_strengthen1" (formula "16") (ifseqformula "25"))
                  (rule "add_literals" (formula "16") (term "1"))
                  (rule "inEqSimp_contradEq7" (formula "25") (ifseqformula "16"))
                  (rule "mul_literals" (formula "25") (term "1,0,0"))
                  (rule "add_literals" (formula "25") (term "0,0"))
                  (rule "leq_literals" (formula "25") (term "0"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "false_right" (formula "25"))
                  (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "8"))
                  (rule "mul_literals" (formula "16") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0"))
                  (rule "add_literals" (formula "16") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                  (rule "mul_literals" (formula "16") (term "1"))
                  (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                  (rule "leq_literals" (formula "16") (term "0,0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                  (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                  (rule "add_literals" (formula "16") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "16") (term "1,0,0"))
                  (rule "add_literals" (formula "16") (term "0,0"))
                  (rule "leq_literals" (formula "16") (term "0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "18"))
                  (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1"))
                  (rule "polySimp_rightDist" (formula "9") (term "1"))
                  (rule "mul_literals" (formula "9") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "19"))
                  (rule "mul_literals" (formula "18") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                  (rule "mul_literals" (formula "18") (term "1"))
                  (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "3"))
                  (rule "mul_literals" (formula "18") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1"))
                  (rule "polySimp_rightDist" (formula "18") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                  (rule "mul_literals" (formula "18") (term "0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "4"))
                  (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                  (rule "mul_literals" (formula "9") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0"))
                  (rule "add_literals" (formula "9") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                  (rule "leq_literals" (formula "9") (term "0,0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "neg_literal" (formula "9") (term "0,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0"))
                  (rule "qeq_literals" (formula "9") (term "0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "4"))
                  (rule "polySimp_rightDist" (formula "19") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0"))
                  (rule "mul_literals" (formula "19") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "19") (term "0"))
                  (rule "add_literals" (formula "19") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                  (rule "mul_literals" (formula "19") (term "1"))
                  (rule "inEqSimp_subsumption6" (formula "19") (ifseqformula "18"))
                  (rule "greater_literals" (formula "19") (term "0,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "mul_literals" (formula "19") (term "1,0"))
                  (rule "leq_literals" (formula "19") (term "0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "9"))
                  (rule "applyEq" (formula "20") (term "0,1,1") (ifseqformula "18"))
                  (rule "mul_literals" (formula "20") (term "1,1"))
                  (rule "add_literals" (formula "20") (term "1"))
                  (rule "applyEq" (formula "8") (term "0,1,1") (ifseqformula "18"))
                  (rule "mul_literals" (formula "8") (term "1,1"))
                  (rule "add_literals" (formula "8") (term "1"))
                  (rule "applyEqRigid" (formula "10") (term "0,1,1") (ifseqformula "18"))
                  (rule "times_zero_2" (formula "10") (term "1,1"))
                  (rule "add_literals" (formula "10") (term "1"))
                  (rule "applyEqRigid" (formula "18") (term "0") (ifseqformula "17"))
                  (rule "qeq_literals" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "17"))
                  (rule "leq_literals" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "applyEq" (formula "9") (term "0,1,1") (ifseqformula "16"))
                  (rule "mul_literals" (formula "9") (term "1,1"))
                  (rule "add_literals" (formula "9") (term "1"))
                  (rule "applyEq" (formula "2") (term "0,1,0,0,2,0") (ifseqformula "15"))
                  (rule "mul_literals" (formula "2") (term "1,0,0,2,0"))
                  (rule "add_literals" (formula "2") (term "0,0,2,0"))
                  (rule "applyEq" (formula "7") (term "1") (ifseqformula "15"))
                  (rule "applyEqRigid" (formula "3") (term "0,0,1") (ifseqformula "15"))
                  (rule "mul_literals" (formula "3") (term "0,1"))
                  (rule "add_zero_left" (formula "3") (term "1"))
                  (rule "expand_subJint" (formula "20") (term "0,2,0"))
                  (rule "polySimp_elimSub" (formula "20") (term "0,0,2,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,2,0"))
                  (rule "polySimp_addComm0" (formula "20") (term "0,0,2,0"))
                  (rule "nnf_imp2or" (formula "19") (term "0"))
                  (rule "nnf_imp2or" (formula "18") (term "0"))
                  (rule "nnf_imp2or" (formula "17") (term "0"))
                  (rule "expand_moduloInteger" (formula "20") (term "0,2,0"))
                  (rule "replace_int_MIN" (formula "20") (term "0,0,2,0"))
                  (rule "replace_int_RANGE" (formula "20") (term "1,1,0,2,0"))
                  (rule "replace_int_HALFRANGE" (formula "20") (term "0,0,1,0,2,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,1,0,2,0"))
                  (rule "add_literals" (formula "20") (term "0,0,1,0,2,0"))
                  (rule "mod_axiom" (formula "20") (term "1,0,2,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,2,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,2,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,2,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,2,0"))
                  (rule "applyEq" (formula "20") (term "0,1,0,2,0") (ifseqformula "6"))
                  (rule "mul_literals" (formula "20") (term "1,0,2,0"))
                  (rule "add_zero_right" (formula "20") (term "0,2,0"))
                  (rule "close" (formula "20") (ifseqformula "2"))
               )
               (branch "if a instanceof java.lang.Throwable false"
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "Null Reference (a_1 = null)"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Null Reference (x_arr_1 = null)"
       (builtin "One Step Simplification" (formula "11"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "blockThrow" (formula "11") (term "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "2"))
      (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "throwUnfold" (formula "11") (term "1") (inst "#v0=n"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "n"))
       (builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_NullPointerException,self_0,exc_0,heapAfter_NullPointerException,anon_heap_NullPointerException") (contract "java.lang.NullPointerException[java.lang.NullPointerException::NullPointerException()].JML normal_behavior operation contract.0"))
      (branch "Post (NullPointerException)"
          (builtin "One Step Simplification" (formula "13"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "15"))
         (rule "notLeft" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "notLeft" (formula "12"))
         (rule "assignment" (formula "21") (term "1"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "pullOutSelect" (formula "14") (term "0") (inst "selectSK=java_lang_Throwable_message_0"))
         (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "19")) (ifInst ""  (formula "18")))
         (rule "applyEqReverse" (formula "15") (term "0") (ifseqformula "14"))
         (rule "hideAuxiliaryEq" (formula "14"))
         (rule "pullOutSelect" (formula "15") (term "0") (inst "selectSK=java_lang_Throwable_cause_0"))
         (rule "simplifySelectOfAnonEQ" (formula "15") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "19")) (ifInst ""  (formula "18")))
         (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "15"))
         (rule "hideAuxiliaryEq" (formula "15"))
         (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=java_lang_Object_created__0"))
         (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "19")) (ifInst ""  (formula "18")))
         (rule "applyEqReverse" (formula "13") (term "0") (ifseqformula "12"))
         (rule "hideAuxiliaryEq" (formula "12"))
         (rule "commuteUnion" (formula "10") (term "1,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0") (ifseqformula "9"))
         (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "16"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "true_left" (formula "15"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "0") (ifseqformula "9"))
         (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "true_left" (formula "14"))
         (rule "methodCallThrow" (formula "21") (term "1"))
         (rule "blockThrow" (formula "21") (term "1"))
         (rule "methodCallParamThrow" (formula "21") (term "1"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "tryCatchThrow" (formula "21") (term "1"))
         (rule "ifElseUnfold" (formula "21") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_7"))
         (rule "equality_comparison_simple" (formula "21") (term "1"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "replace_known_right" (formula "21") (term "0,0,1,0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "ifElseSplit" (formula "21"))
         (branch "if x_7 true"
             (builtin "One Step Simplification" (formula "22"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_7 false"
             (builtin "One Step Simplification" (formula "22"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "elim_double_block" (formula "21") (term "1"))
            (rule "ifElseSplit" (formula "21"))
            (branch "if n instanceof java.lang.Throwable true"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
               (rule "true_left" (formula "1"))
               (rule "variableDeclaration" (formula "21") (term "1") (newnames "e"))
               (rule "delete_unnecessary_cast" (formula "21") (term "1"))
                (builtin "One Step Simplification" (formula "22"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "21") (term "1"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "emptyModality" (formula "21") (term "1"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "18")))
               (rule "false_right" (formula "21"))
               (rule "Class_invariant_axiom_for_BitSet" (formula "8") (inst "x=x_8") (inst "x_0=x_0") (inst "i=i") (ifseqformula "4"))
               (rule "expand_inInt" (formula "8") (term "1,0,0,1,0"))
               (rule "expand_inInt" (formula "8") (term "1,0,0,1"))
               (rule "expand_inInt" (formula "8") (term "1,0,0,1,0,0"))
               (rule "replace_int_MAX" (formula "8") (term "1,0,1,0,0,1,0"))
               (rule "replace_int_MIN" (formula "8") (term "0,1,1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "8") (term "1,0,1,0,0,1"))
               (rule "replace_int_MIN" (formula "8") (term "0,1,1,0,0,1"))
               (rule "replace_int_MAX" (formula "8") (term "1,0,1,0,0,1,0,0"))
               (rule "replace_int_MIN" (formula "8") (term "0,1,1,0,0,1,0,0"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "9"))
               (rule "notLeft" (formula "8"))
               (rule "close" (formula "22") (ifseqformula "1"))
            )
            (branch "if n instanceof java.lang.Throwable false"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Exceptional Post (NullPointerException)"
          (builtin "One Step Simplification" (formula "10"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "15"))
         (rule "notLeft" (formula "11"))
         (rule "close" (formula "18") (ifseqformula "17"))
      )
      (branch "Pre (NullPointerException)"
          (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "2")))
         (rule "closeTrue" (formula "11"))
      )
   )
   (branch "Index Out of Bounds (x_arr_1 != null, but x_5 Out of Bounds!)"
       (builtin "One Step Simplification" (formula "11"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "1,0,0,1"))
      (rule "add_literals" (formula "1") (term "0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
      (rule "blockThrow" (formula "12") (term "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "1,1"))
      (rule "expand_subJint" (formula "1") (term "0,0"))
      (rule "polySimp_elimSub" (formula "1") (term "0,0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0,0,0"))
      (rule "expand_subJint" (formula "1") (term "0,1"))
      (rule "polySimp_elimSub" (formula "1") (term "0,0,1"))
      (rule "mul_literals" (formula "1") (term "1,0,0,1"))
      (rule "polySimp_addComm0" (formula "1") (term "0,0,1"))
      (rule "expand_moduloInteger" (formula "1") (term "0,0"))
      (rule "replace_int_MIN" (formula "1") (term "0,0,0"))
      (rule "replace_int_RANGE" (formula "1") (term "1,1,0,0"))
      (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
      (rule "inEqSimp_homoInEq1" (formula "1") (term "0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0,0,0"))
      (rule "mod_axiom" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0"))
      (rule "expand_moduloInteger" (formula "1") (term "0,1"))
      (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0,1"))
      (rule "replace_int_RANGE" (formula "1") (term "1,1,0,1"))
      (rule "replace_int_MIN" (formula "1") (term "0,0,1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,1"))
      (rule "add_literals" (formula "1") (term "0,0,1,0,1"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,1"))
      (rule "mul_literals" (formula "1") (term "0,1,0,1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
      (rule "add_literals" (formula "1") (term "0,0,1"))
      (rule "mod_axiom" (formula "1") (term "0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,1"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
      (rule "add_literals" (formula "1") (term "0,0,0,1"))
      (rule "add_zero_left" (formula "1") (term "0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "commute_or" (formula "1"))
      (rule "div_axiom" (formula "1") (term "0,0,1") (inst "quotient=quotient_0"))
      (rule "qeq_literals" (formula "1") (term "0,1,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "equal_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1,1,1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
      (rule "add_literals" (formula "3") (term "0,0,1"))
      (rule "polySimp_addComm1" (formula "3") (term "1"))
      (rule "add_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_homoInEq0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "applyEq" (formula "4") (term "0,0,1") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "4") (term "1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
      (rule "polySimp_addComm1" (formula "4") (term "0,1"))
      (rule "polySimp_addComm1" (formula "4") (term "0,0,1"))
      (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
      (rule "inEqSimp_commuteGeq" (formula "4") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1"))
      (rule "polySimp_rightDist" (formula "2") (term "1"))
      (rule "mul_literals" (formula "2") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "1"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,1"))
      (rule "polySimp_rightDist" (formula "4") (term "1,1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,1"))
      (rule "polySimp_rightDist" (formula "4") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,1"))
      (rule "mul_literals" (formula "4") (term "0,0,1,1"))
      (rule "arrayLengthIsAnInt" (formula "4") (term "1,1,1"))
      (rule "expand_inInt" (formula "4"))
      (rule "replace_int_MIN" (formula "4") (term "0,1"))
      (rule "replace_int_MAX" (formula "4") (term "1,0"))
      (rule "andLeft" (formula "4"))
      (rule "inEqSimp_commuteLeq" (formula "5"))
      (rule "arrayLengthNotNegative" (formula "6") (term "1,1,1"))
      (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "6"))
      (rule "leq_literals" (formula "5") (term "0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "0,1,1,1") (ifseqformula "7"))
      (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "throwUnfold" (formula "18") (term "1") (inst "#v0=a"))
      (rule "variableDeclarationAssign" (formula "18") (term "1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "a"))
      (rule "instanceCreationAssignment" (formula "18") (term "1") (inst "#v0=a_1"))
      (rule "variableDeclarationAssign" (formula "18") (term "1"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "a_1"))
      (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "18") (term "1") (inst "#v0=a_2"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "a_2"))
      (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "__NEW__"))
      (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "18") (term "1") (inst "#v0=a_3"))
      (rule "variableDeclaration" (formula "18") (term "1") (newnames "a_3"))
      (rule "allocateInstance" (formula "18"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
       (builtin "One Step Simplification" (formula "19"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "blockEmpty" (formula "21") (term "1"))
      (rule "assignment" (formula "21") (term "1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "assignment_write_attribute_this" (formula "21") (term "1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "methodCallWithinClass" (formula "21") (term "1"))
      (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "methodCallSuper" (formula "21") (term "1"))
      (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "methodCallSuper" (formula "21") (term "1"))
      (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "methodCallSuper" (formula "21") (term "1"))
      (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "methodCallSuper" (formula "21") (term "1"))
      (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "methodCallSuper" (formula "21") (term "1"))
      (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_<prepare>_3,savedHeapBefore_<prepare>_3"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "methodCallEmpty" (formula "21") (term "1"))
      (rule "blockEmpty" (formula "21") (term "1"))
      (rule "assignment_write_attribute_this" (formula "21") (term "1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "assignment_write_attribute_this" (formula "21") (term "1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "methodCallEmpty" (formula "21") (term "1"))
      (rule "methodCallEmpty" (formula "21") (term "1"))
      (rule "methodCallEmpty" (formula "21") (term "1"))
      (rule "methodCallEmpty" (formula "21") (term "1"))
      (rule "methodCallEmpty" (formula "21") (term "1"))
      (rule "blockEmpty" (formula "21") (term "1"))
      (rule "methodCallReturnIgnoreResult" (formula "21") (term "1"))
      (rule "methodCallReturn" (formula "21") (term "1"))
      (rule "assignment" (formula "21") (term "1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "methodCallEmpty" (formula "21") (term "1"))
      (rule "blockEmpty" (formula "21") (term "1"))
      (rule "assignment" (formula "21") (term "1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "methodCallSuper" (formula "21") (term "1"))
      (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "methodCallSuper" (formula "21") (term "1"))
      (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "methodCallSuper" (formula "21") (term "1"))
      (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "methodCallSuper" (formula "21") (term "1"))
      (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "methodCallSuper" (formula "21") (term "1"))
      (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_<init>_4,savedHeapBefore_<init>_4"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "methodCallEmpty" (formula "21") (term "1"))
      (rule "blockEmpty" (formula "21") (term "1"))
      (rule "assignment_write_attribute_this" (formula "21") (term "1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "assignment_write_attribute_this" (formula "21") (term "1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "methodCallEmpty" (formula "21") (term "1"))
      (rule "methodCallEmpty" (formula "21") (term "1"))
      (rule "methodCallEmpty" (formula "21") (term "1"))
      (rule "methodCallEmpty" (formula "21") (term "1"))
      (rule "methodCallEmpty" (formula "21") (term "1"))
      (rule "blockEmpty" (formula "21") (term "1"))
      (rule "assignment_write_attribute" (formula "21") (term "1"))
      (branch "Normal Execution (a_1 != null)"
          (builtin "One Step Simplification" (formula "22"))
          (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "17")))
         (rule "false_right" (formula "21"))
         (rule "assignment" (formula "21") (term "1"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "methodCallThrow" (formula "21") (term "1"))
         (rule "blockThrow" (formula "21") (term "1"))
         (rule "methodCallParamThrow" (formula "21") (term "1"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "tryCatchThrow" (formula "21") (term "1"))
         (rule "ifElseUnfold" (formula "21") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_7"))
         (rule "equality_comparison_simple" (formula "21") (term "1"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "replace_known_right" (formula "21") (term "0,0,1,0") (ifseqformula "17"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "ifElseSplit" (formula "21"))
         (branch "if x_7 true"
             (builtin "One Step Simplification" (formula "22"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_7 false"
             (builtin "One Step Simplification" (formula "22"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "elim_double_block" (formula "21") (term "1"))
            (rule "ifElseSplit" (formula "21"))
            (branch "if a instanceof java.lang.Throwable true"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
               (rule "true_left" (formula "1"))
               (rule "variableDeclaration" (formula "21") (term "1") (newnames "e"))
               (rule "delete_unnecessary_cast" (formula "21") (term "1"))
                (builtin "One Step Simplification" (formula "22"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "21") (term "1"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "emptyModality" (formula "21") (term "1"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "17")))
               (rule "false_right" (formula "21"))
               (rule "Class_invariant_axiom_for_BitSet" (formula "15") (inst "x=x_8") (inst "x_0=x_0") (inst "i=i") (ifseqformula "11"))
               (rule "expand_inInt" (formula "15") (term "1,0,0,1"))
               (rule "expand_inInt" (formula "15") (term "1,0,0,1,0,0"))
               (rule "expand_inInt" (formula "15") (term "1,0,0,1,0"))
               (rule "replace_int_MIN" (formula "15") (term "0,1,1,0,0,1"))
               (rule "replace_int_MAX" (formula "15") (term "1,0,1,0,0,1"))
               (rule "replace_int_MIN" (formula "15") (term "0,1,1,0,0,1,0,0"))
               (rule "replace_int_MAX" (formula "15") (term "1,0,1,0,0,1,0,0"))
               (rule "replace_int_MIN" (formula "15") (term "0,1,1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "15") (term "1,0,1,0,0,1,0"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "notLeft" (formula "15"))
               (rule "andLeft" (formula "15"))
               (rule "eqSymm" (formula "19") (term "1,0"))
               (rule "translateJavaSubInt" (formula "17") (term "0,2,0,0,1"))
               (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "notLeft" (formula "17"))
               (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "19") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "18") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "15"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0"))
               (rule "inEqSimp_strengthen1" (formula "15") (ifseqformula "25"))
               (rule "add_literals" (formula "15") (term "1"))
               (rule "inEqSimp_contradEq7" (formula "25") (ifseqformula "15"))
               (rule "mul_literals" (formula "25") (term "1,0,0"))
               (rule "add_literals" (formula "25") (term "0,0"))
               (rule "leq_literals" (formula "25") (term "0"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "false_right" (formula "25"))
               (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "16"))
               (rule "mul_literals" (formula "15") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15"))
               (rule "mul_literals" (formula "15") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "15"))
               (rule "leq_literals" (formula "6") (term "0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "16"))
               (rule "polySimp_rightDist" (formula "3") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
               (rule "mul_literals" (formula "3") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "mul_literals" (formula "3") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
               (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "5"))
               (rule "mul_literals" (formula "16") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0"))
               (rule "add_literals" (formula "16") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "16"))
               (rule "mul_literals" (formula "16") (term "1"))
               (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "16") (term "0,0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
               (rule "add_literals" (formula "16") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "16") (term "1,0,0"))
               (rule "add_literals" (formula "16") (term "0,0"))
               (rule "leq_literals" (formula "16") (term "0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "6"))
               (rule "polySimp_rightDist" (formula "3") (term "0,0"))
               (rule "mul_literals" (formula "3") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "add_literals" (formula "3") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
               (rule "neg_literal" (formula "3") (term "0,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "3") (term "0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
               (rule "add_literals" (formula "3") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
               (rule "add_literals" (formula "3") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "3") (term "1,0,0"))
               (rule "add_literals" (formula "3") (term "0,0"))
               (rule "qeq_literals" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "3"))
               (rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "17"))
               (rule "mul_literals" (formula "6") (term "1,1"))
               (rule "add_literals" (formula "6") (term "1"))
               (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "17"))
               (rule "mul_literals" (formula "4") (term "1,1"))
               (rule "add_literals" (formula "4") (term "1"))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "17"))
               (rule "leq_literals" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "16"))
               (rule "mul_literals" (formula "4") (term "1,1"))
               (rule "add_literals" (formula "4") (term "1"))
               (rule "applyEqRigid" (formula "8") (term "0,1,0") (ifseqformula "16"))
               (rule "mul_literals" (formula "8") (term "1,0"))
               (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "16"))
               (rule "qeq_literals" (formula "17"))
               (rule "true_left" (formula "17"))
               (rule "applyEqRigid" (formula "8") (term "0,1,0,1,1") (ifseqformula "16"))
               (rule "mul_literals" (formula "8") (term "1,0,1,1"))
               (rule "add_literals" (formula "8") (term "0,1,1"))
               (rule "applyEq" (formula "2") (term "1") (ifseqformula "16"))
               (rule "inEqSimp_contradInEq0" (formula "8") (term "1") (ifseqformula "18"))
               (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
               (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
               (rule "add_literals" (formula "8") (term "0,0,1"))
               (rule "leq_literals" (formula "8") (term "0,1"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "17"))
               (rule "leq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "14"))
               (rule "leq_literals" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "6"))
               (rule "qeq_literals" (formula "15") (term "0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "closeFalse" (formula "15"))
            )
            (branch "if a instanceof java.lang.Throwable false"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Null Reference (a_1 = null)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
)
}