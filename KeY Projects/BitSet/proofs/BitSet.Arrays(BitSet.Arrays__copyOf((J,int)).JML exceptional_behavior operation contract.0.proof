\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Mar 14 18:56:45 CET 2023
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:on , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:allow , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[Labels]UseOriginLabels=true
[NewSMT]Axiomatisations=false
[NewSMT]Presburger=false
[NewSMT]sqrtSMTTranslation=SMT
[SMTSettings]SelectedTaclets=
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]maxGenericSorts=2
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[Strategy]ActiveStrategy=JavaCardDLStrategy
[Strategy]MaximumNumberOfAutomaticApplications=7000
[Strategy]Timeout=-1
"
}

\javaSource "..";

\include "../taclets/intSet.key",  "../taclets/binaryAxiomsExtension.key",  "../taclets/bitwiseOperations.key";

\proofObligation "#Proof Obligation Settings
#Tue Mar 14 18:56:45 CET 2023
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
contract=BitSet.Arrays[BitSet.Arrays\\:\\:copyOf([J,int)].JML exceptional_behavior operation contract.0
name=BitSet.Arrays[BitSet.Arrays\\:\\:copyOf([J,int)].JML exceptional_behavior operation contract.0
";

\proof {
(keyLog "0" (keyUser "christianhein" ) (keyVersion "208396f69e"))

(autoModeTime "2124")

(branch "dummy ID"
(rule "expand_inInt" (formula "1") (term "1,1,0,0,0") (newnames "heapAtPre,o,f"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "3"))
(rule "eqSymm" (formula "7") (term "1,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,1,0,0,1"))
(rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0,1,0,0,1"))
(rule "add_zero_right" (formula "7") (term "0,0,1,0,0,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1"))
(rule "times_zero_1" (formula "6") (term "1,0,0,1"))
(rule "add_literals" (formula "6") (term "0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "1,1,1,0,1,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "4"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1"))
(rule "mul_literals" (formula "6") (term "1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,1,0,0,1"))
(rule "mul_literals" (formula "7") (term "1,1,0,0,1,0,0,1"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_copyOf,savedHeapBefore_copyOf"))
 (builtin "One Step Simplification" (formula "7"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "copy"))
(rule "arrayCreation" (formula "7") (term "1") (inst "#v0=x_arr"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x_arr"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "dim0"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "ifUnfold" (formula "7") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x"))
(rule "less_than_comparison_simple" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,1,0"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,1,0"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,1,0"))
(rule "mul_literals" (formula "7") (term "1,0,0,1,0"))
(rule "ifSplit" (formula "7"))
(branch "if x true"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "blockThrow" (formula "7") (term "1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "1"))
   (rule "leq_literals" (formula "4") (term "0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "throwUnfold" (formula "6") (term "1") (inst "#v0=n"))
   (rule "variableDeclarationAssign" (formula "6") (term "1"))
   (rule "variableDeclaration" (formula "6") (term "1") (newnames "n"))
   (rule "instanceCreationAssignment" (formula "6") (term "1") (inst "#v0=n_1"))
   (rule "variableDeclarationAssign" (formula "6") (term "1"))
   (rule "variableDeclaration" (formula "6") (term "1") (newnames "n_1"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "6") (term "1") (inst "#v0=n_2"))
   (rule "variableDeclaration" (formula "6") (term "1") (newnames "n_2"))
   (rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "variableDeclaration" (formula "6") (term "1") (newnames "__NEW__"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "6") (term "1") (inst "#v0=n_3"))
   (rule "variableDeclaration" (formula "6") (term "1") (newnames "n_3"))
   (rule "allocateInstance" (formula "6"))
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "2"))
   (rule "notLeft" (formula "1"))
   (rule "blockEmpty" (formula "9") (term "1"))
   (rule "assignment" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "assignment_write_attribute_this" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallWithinClass" (formula "9") (term "1"))
   (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallSuper" (formula "9") (term "1"))
   (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallSuper" (formula "9") (term "1"))
   (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallSuper" (formula "9") (term "1"))
   (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallSuper" (formula "9") (term "1"))
   (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallEmpty" (formula "9") (term "1"))
   (rule "blockEmpty" (formula "9") (term "1"))
   (rule "assignment_write_attribute_this" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "assignment_write_attribute_this" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallEmpty" (formula "9") (term "1"))
   (rule "methodCallEmpty" (formula "9") (term "1"))
   (rule "methodCallEmpty" (formula "9") (term "1"))
   (rule "methodCallEmpty" (formula "9") (term "1"))
   (rule "blockEmpty" (formula "9") (term "1"))
   (rule "methodCallReturnIgnoreResult" (formula "9") (term "1"))
   (rule "methodCallReturn" (formula "9") (term "1"))
   (rule "assignment" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallEmpty" (formula "9") (term "1"))
   (rule "blockEmpty" (formula "9") (term "1"))
   (rule "assignment" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallSuper" (formula "9") (term "1"))
   (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallSuper" (formula "9") (term "1"))
   (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallSuper" (formula "9") (term "1"))
   (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallSuper" (formula "9") (term "1"))
   (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallEmpty" (formula "9") (term "1"))
   (rule "blockEmpty" (formula "9") (term "1"))
   (rule "assignment_write_attribute_this" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "assignment_write_attribute_this" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "methodCallEmpty" (formula "9") (term "1"))
   (rule "methodCallEmpty" (formula "9") (term "1"))
   (rule "methodCallEmpty" (formula "9") (term "1"))
   (rule "methodCallEmpty" (formula "9") (term "1"))
   (rule "blockEmpty" (formula "9") (term "1"))
   (rule "assignment_write_attribute" (formula "9") (term "1"))
   (branch "Normal Execution (n_1 != null)"
       (builtin "One Step Simplification" (formula "10"))
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "7")))
      (rule "false_right" (formula "9"))
      (rule "assignment" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "methodCallParamThrow" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "tryCatchThrow" (formula "9") (term "1"))
      (rule "ifElseUnfold" (formula "9") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_1"))
      (rule "equality_comparison_simple" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "replace_known_right" (formula "9") (term "0,0,1,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "ifElseSplit" (formula "9"))
      (branch "if x_1 true"
          (builtin "One Step Simplification" (formula "10"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x_1 false"
          (builtin "One Step Simplification" (formula "10"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "elim_double_block" (formula "9") (term "1"))
         (rule "ifElseSplit" (formula "9"))
         (branch "if n instanceof java.lang.Throwable true"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
            (rule "true_left" (formula "1"))
            (rule "variableDeclaration" (formula "9") (term "1") (newnames "e"))
            (rule "delete_unnecessary_cast" (formula "9") (term "1"))
             (builtin "One Step Simplification" (formula "10"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment" (formula "9") (term "1"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "emptyModality" (formula "9") (term "1"))
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "7")) (ifInst ""  (formula "2")) (ifInst ""  (formula "7")))
            (rule "allRight" (formula "9") (inst "sk=f_0"))
            (rule "allRight" (formula "9") (inst "sk=o_0"))
            (rule "orRight" (formula "9"))
            (rule "eqSymm" (formula "10"))
            (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=f_0_0"))
            (rule "simplifySelectOfStore" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "11"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "eqSymm" (formula "1") (term "1,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
            (rule "simplifySelectOfStore" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "1") (term "1,0,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
            (rule "simplifySelectOfStore" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "1") (term "1,0,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
            (rule "simplifySelectOfCreate" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "commute_and" (formula "4") (term "0,0"))
            (rule "commute_and" (formula "3") (term "0,0"))
            (rule "commute_and" (formula "2") (term "0,0"))
            (rule "commute_and" (formula "1") (term "0,0"))
            (rule "cut_direct" (formula "8") (term "0"))
            (branch "CUT: original = null TRUE"
                (builtin "One Step Simplification" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch "f_0 = java.lang.Object::<created> & o_0 = n_3 TRUE"
                  (rule "andLeft" (formula "1"))
                  (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEq" (formula "14") (term "0,0,0") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "notRight" (formula "14"))
                  (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "15") (term "2,0") (ifseqformula "2"))
                  (rule "narrowSelectType" (formula "15") (term "0") (ifseqformula "9"))
                  (rule "eqSymm" (formula "15"))
                  (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                  (rule "hideAuxiliaryEq" (formula "5"))
                  (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "applyEqReverse" (formula "14") (term "0") (ifseqformula "5"))
                  (rule "hideAuxiliaryEq" (formula "5"))
                  (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "applyEqReverse" (formula "13") (term "0") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "eqSymm" (formula "12"))
                  (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                  (rule "close" (formula "11") (ifseqformula "1"))
               )
               (branch "f_0 = java.lang.Object::<created> & o_0 = n_3 FALSE"
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "ifthenelse_split" (formula "1") (term "0"))
                  (branch "f_0 = java.lang.Throwable::$cause & o_0 = n_3 TRUE"
                     (rule "andLeft" (formula "1"))
                     (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")))
                     (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "13") (term "1,0,0,1") (ifseqformula "2"))
                     (rule "replace_known_right" (formula "13") (term "0,1") (ifseqformula "12"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "notRight" (formula "13"))
                     (rule "applyEq" (formula "14") (term "2,0") (ifseqformula "2"))
                     (rule "narrowSelectType" (formula "14") (term "0") (ifseqformula "7"))
                     (rule "eqSymm" (formula "14"))
                     (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "applyEqReverse" (formula "14") (term "0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "eqSymm" (formula "13"))
                     (rule "applyEq" (formula "10") (term "0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "false_right" (formula "10"))
                     (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "3"))
                     (rule "close" (formula "10") (ifseqformula "3"))
                  )
                  (branch "f_0 = java.lang.Throwable::$cause & o_0 = n_3 FALSE"
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "f_0 = java.lang.Throwable::$message & o_0 = n_3 TRUE"
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "15") (term "1") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "false_right" (formula "10"))
                        (rule "applyEqRigid" (formula "13") (term "2,0") (ifseqformula "1"))
                        (rule "narrowSelectType" (formula "13") (term "0") (ifseqformula "5"))
                        (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "false_right" (formula "9"))
                        (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "2"))
                        (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "notRight" (formula "11"))
                        (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                        (rule "close" (formula "11") (ifseqformula "1"))
                     )
                     (branch "f_0 = java.lang.Throwable::$message & o_0 = n_3 FALSE"
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch "f_0 = java.lang.Object::<initialized> & o_0 = n_3 TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "applyEqReverse" (formula "16") (term "1") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "false_right" (formula "11"))
                           (rule "applyEqRigid" (formula "14") (term "2,0") (ifseqformula "1"))
                           (rule "narrowSelectType" (formula "14") (term "0") (ifseqformula "5"))
                           (rule "applyEq" (formula "13") (term "1,0,0,1") (ifseqformula "2"))
                           (rule "replace_known_right" (formula "13") (term "0,1") (ifseqformula "12"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "notRight" (formula "13"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "false_right" (formula "10"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "false_right" (formula "10"))
                           (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3"))
                           (rule "close" (formula "10") (ifseqformula "3"))
                        )
                        (branch "f_0 = java.lang.Object::<initialized> & o_0 = n_3 FALSE"
                           (rule "close" (formula "15") (ifseqformula "1"))
                        )
                     )
                  )
               )
            )
            (branch "CUT: original = null FALSE"
                (builtin "One Step Simplification" (formula "8"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch "f_0 = java.lang.Object::<created> & o_0 = n_3 TRUE"
                  (rule "andLeft" (formula "1"))
                  (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "applyEq" (formula "15") (term "1,0,0,1") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "15") (term "0,1") (ifseqformula "14"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "notRight" (formula "15"))
                  (rule "applyEq" (formula "16") (term "2,0") (ifseqformula "2"))
                  (rule "narrowSelectType" (formula "16") (term "0") (ifseqformula "9"))
                  (rule "eqSymm" (formula "16"))
                  (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "applyEqReverse" (formula "15") (term "0") (ifseqformula "5"))
                  (rule "hideAuxiliaryEq" (formula "5"))
                  (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "applyEqReverse" (formula "14") (term "0") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "eqSymm" (formula "13"))
                  (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
                  (rule "eqSymm" (formula "3"))
                  (rule "close" (formula "11") (ifseqformula "3"))
               )
               (branch "f_0 = java.lang.Object::<created> & o_0 = n_3 FALSE"
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "ifthenelse_split" (formula "1") (term "0"))
                  (branch "f_0 = java.lang.Throwable::$cause & o_0 = n_3 TRUE"
                     (rule "andLeft" (formula "1"))
                     (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")))
                     (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "applyEq" (formula "14") (term "0,0,0") (ifseqformula "2"))
                     (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "12"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "notRight" (formula "14"))
                     (rule "applyEq" (formula "15") (term "2,0") (ifseqformula "2"))
                     (rule "narrowSelectType" (formula "15") (term "0") (ifseqformula "7"))
                     (rule "eqSymm" (formula "15"))
                     (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "applyEqReverse" (formula "15") (term "0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "eqSymm" (formula "14"))
                     (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "false_right" (formula "10"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                     (rule "close" (formula "12") (ifseqformula "1"))
                  )
                  (branch "f_0 = java.lang.Throwable::$cause & o_0 = n_3 FALSE"
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "f_0 = java.lang.Throwable::$message & o_0 = n_3 TRUE"
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "applyEq" (formula "16") (term "2,0") (ifseqformula "1"))
                        (rule "narrowSelectType" (formula "16") (term "0") (ifseqformula "6"))
                        (rule "eqSymm" (formula "16"))
                        (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "eqSymm" (formula "15"))
                        (rule "applyEq" (formula "14") (term "1,0,0,1") (ifseqformula "2"))
                        (rule "replace_known_right" (formula "14") (term "0,1") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "notRight" (formula "14"))
                        (rule "applyEq" (formula "11") (term "0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "false_right" (formula "11"))
                        (rule "applyEq" (formula "10") (term "0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "false_right" (formula "10"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                        (rule "eqSymm" (formula "3"))
                        (rule "close" (formula "11") (ifseqformula "3"))
                     )
                     (branch "f_0 = java.lang.Throwable::$message & o_0 = n_3 FALSE"
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch "f_0 = java.lang.Object::<initialized> & o_0 = n_3 TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "applyEqReverse" (formula "17") (term "1") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "false_right" (formula "9"))
                           (rule "applyEq" (formula "14") (term "1,0,0,1") (ifseqformula "2"))
                           (rule "replace_known_right" (formula "14") (term "0,1") (ifseqformula "13"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "notRight" (formula "14"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "false_right" (formula "10"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "false_right" (formula "10"))
                           (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "3"))
                           (rule "applyEqRigid" (formula "13") (term "2,0") (ifseqformula "2"))
                           (rule "narrowSelectType" (formula "13") (term "0") (ifseqformula "6"))
                           (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3"))
                           (rule "close" (formula "11") (ifseqformula "3"))
                        )
                        (branch "f_0 = java.lang.Object::<initialized> & o_0 = n_3 FALSE"
                           (rule "close" (formula "16") (ifseqformula "1"))
                        )
                     )
                  )
               )
            )
         )
         (branch "if n instanceof java.lang.Throwable false"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Null Reference (n_1 = null)"
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "if x false"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "replace_known_right" (formula "6") (term "1") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "inEqSimp_leqRight" (formula "6"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "applyEq" (formula "7") (term "0,1,0,0,0,0") (ifseqformula "6"))
   (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
   (rule "leq_literals" (formula "4") (term "0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "6") (term "1") (inst "#v0=x_arr_1"))
   (rule "variableDeclaration" (formula "6") (term "1") (newnames "x_arr_1"))
   (rule "variableDeclarationAssign" (formula "6") (term "1"))
   (rule "variableDeclaration" (formula "6") (term "1") (newnames "length_1"))
   (rule "assignment" (formula "6") (term "1"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_<createArray>,savedHeapBefore_<createArray>"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "variableDeclaration" (formula "6") (term "1") (newnames "newObject"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "6") (term "1") (inst "#v0=x_arr_2"))
   (rule "variableDeclaration" (formula "6") (term "1") (newnames "x_arr_2"))
   (rule "variableDeclarationAssign" (formula "6") (term "1"))
   (rule "variableDeclaration" (formula "6") (term "1") (newnames "length_2"))
   (rule "assignment" (formula "6") (term "1"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "allocateInstanceWithLength" (formula "6"))
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "blockEmpty" (formula "10") (term "1"))
   (rule "assignment" (formula "10") (term "1"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "arrayLengthIsAnInt" (formula "1") (term "0"))
   (rule "expand_inInt" (formula "1"))
   (rule "replace_int_MIN" (formula "1") (term "0,1"))
   (rule "replace_int_MAX" (formula "1") (term "1,0"))
   (rule "andLeft" (formula "1"))
   (rule "inEqSimp_commuteLeq" (formula "2"))
   (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
   (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
   (rule "leq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "arrayLengthNotNegative" (formula "1") (term "0"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
   (rule "methodCall" (formula "10") (term "1"))
   (branch "Normal Execution (newObject != null )"
       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")))
      (rule "false_right" (formula "10"))
      (rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_<createArrayHelper>,savedHeapBefore_<createArrayHelper>"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "assignment_write_attribute_this" (formula "10") (term "1"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "methodCallWithinClass" (formula "10") (term "1"))
      (rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "arrayInitialisation" (formula "10") (term "1"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "polySimp_elimSub" (formula "10") (term "2,1,0,1,0"))
      (rule "mul_literals" (formula "10") (term "1,2,1,0,1,0"))
      (rule "polySimp_addComm0" (formula "10") (term "2,1,0,1,0"))
      (rule "applyEq" (formula "10") (term "1,2,1,0,1,0") (ifseqformula "1"))
      (rule "methodCallEmpty" (formula "10") (term "1"))
      (rule "blockEmpty" (formula "10") (term "1"))
      (rule "assignment_write_attribute_this" (formula "10") (term "1"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "methodCallReturnIgnoreResult" (formula "10") (term "1"))
      (rule "blockEmpty" (formula "10") (term "1"))
      (rule "methodCallReturn" (formula "10") (term "1"))
      (rule "assignment" (formula "10") (term "1"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "methodCallEmpty" (formula "10") (term "1"))
      (rule "blockEmpty" (formula "10") (term "1"))
      (rule "assignment" (formula "10") (term "1"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "blockEmpty" (formula "10") (term "1"))
      (rule "assignment" (formula "10") (term "1"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "methodCallUnfoldArguments" (formula "10") (term "1"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "var"))
      (rule "assignment" (formula "10") (term "1"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "var_1"))
      (rule "assignment" (formula "10") (term "1"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "var_2"))
      (rule "assignment" (formula "10") (term "1"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "var_3"))
      (rule "assignment" (formula "10") (term "1"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "var_4"))
      (rule "methodCallWithAssignmentUnfoldArguments" (formula "10") (term "1"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "var_5"))
      (rule "assignment_read_length" (formula "10") (term "1"))
      (branch "Normal Execution (_original != null)"
          (builtin "One Step Simplification" (formula "11"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "closeTrue" (formula "10"))
      )
      (branch "Null Reference (_original = null)"
          (builtin "One Step Simplification" (formula "11"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "blockThrow" (formula "10") (term "1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "blockThrow" (formula "10") (term "1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "throwUnfold" (formula "10") (term "1") (inst "#v0=n"))
         (rule "variableDeclarationAssign" (formula "10") (term "1"))
         (rule "variableDeclaration" (formula "10") (term "1") (newnames "n"))
          (builtin "Use Operation Contract" (formula "10") (newnames "heapBefore_NullPointerException,self,exc_0,heapAfter_NullPointerException,anon_heap_NullPointerException") (contract "java.lang.NullPointerException[java.lang.NullPointerException::NullPointerException()].JML normal_behavior operation contract.0"))
         (branch "Post (NullPointerException)"
             (builtin "One Step Simplification" (formula "9"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "10"))
            (rule "notLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "notLeft" (formula "10"))
            (rule "dismissNonSelectedField" (formula "16") (term "0"))
            (rule "assignment" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=java_lang_Throwable_message_0"))
            (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "18")))
            (rule "dismissNonSelectedField" (formula "12") (term "0,0,1,0,0"))
            (rule "replace_known_right" (formula "12") (term "0,1,0,0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "applyEqReverse" (formula "13") (term "0") (ifseqformula "12"))
            (rule "hideAuxiliaryEq" (formula "12"))
            (rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=java_lang_Throwable_cause_0"))
            (rule "simplifySelectOfAnonEQ" (formula "13") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "18")))
            (rule "dismissNonSelectedField" (formula "13") (term "0,0,1,0,0"))
            (rule "replace_known_right" (formula "13") (term "0,1,0,0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "applyEqReverse" (formula "14") (term "0") (ifseqformula "13"))
            (rule "hideAuxiliaryEq" (formula "13"))
            (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=java_lang_Object_created__0"))
            (rule "simplifySelectOfAnonEQ" (formula "10") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "18")))
            (rule "dismissNonSelectedField" (formula "10") (term "0,0,0,0"))
            (rule "replace_known_right" (formula "10") (term "0,0,0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "applyEqReverse" (formula "11") (term "0") (ifseqformula "10"))
            (rule "hideAuxiliaryEq" (formula "10"))
            (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=java_lang_Object_created__1"))
            (rule "simplifySelectOfMemset" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfStore" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfStore" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfStore" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfCreate" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
            (rule "applyEqReverse" (formula "17") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "commuteUnion" (formula "9") (term "1,0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "0") (ifseqformula "8"))
            (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0") (ifseqformula "8"))
            (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "methodCallParamThrow" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "tryCatchThrow" (formula "20") (term "1"))
            (rule "ifElseUnfold" (formula "20") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "20") (term "1") (newnames "x_1"))
            (rule "equality_comparison_simple" (formula "20") (term "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "replace_known_right" (formula "20") (term "0,0,1,0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "ifElseSplit" (formula "20"))
            (branch "if x_1 true"
                (builtin "One Step Simplification" (formula "21"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_1 false"
                (builtin "One Step Simplification" (formula "21"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "elim_double_block" (formula "20") (term "1"))
               (rule "ifElseSplit" (formula "20"))
               (branch "if n instanceof java.lang.Throwable true"
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                  (rule "true_left" (formula "1"))
                  (rule "variableDeclaration" (formula "20") (term "1") (newnames "e"))
                  (rule "delete_unnecessary_cast" (formula "20") (term "1"))
                   (builtin "One Step Simplification" (formula "21"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "assignment" (formula "20") (term "1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "emptyModality" (formula "20") (term "1"))
                   (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "17")) (ifInst ""  (formula "17")) (ifInst ""  (formula "7")) (ifInst ""  (formula "3")) (ifInst ""  (formula "17")))
                  (rule "allRight" (formula "20") (inst "sk=f_0"))
                  (rule "allRight" (formula "20") (inst "sk=o_0"))
                  (rule "orRight" (formula "20"))
                  (rule "eqSymm" (formula "21"))
                  (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=f_0_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "22"))
                  (rule "dismissNonSelectedField" (formula "1") (term "0,0,1,1,0,0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                  (rule "simplifySelectOfStore" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "pullOutSelect" (formula "2") (term "0,0,1,1,0,0") (inst "selectSK=java_lang_Object_created__2"))
                  (rule "simplifySelectOfMemset" (formula "2"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "simplifySelectOfStore" (formula "2"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "simplifySelectOfStore" (formula "2"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "simplifySelectOfStore" (formula "2"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "simplifySelectOfCreate" (formula "2"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "22")))
                  (rule "castDel" (formula "2") (term "1,0"))
                  (rule "eqSymm" (formula "2") (term "0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                  (rule "simplifySelectOfMemset" (formula "1"))
                  (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
                  (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                  (rule "simplifySelectOfStore" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
                  (rule "simplifySelectOfStore" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_5"))
                  (rule "simplifySelectOfStore" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_6"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_and" (formula "6") (term "0,0"))
                  (rule "commute_and" (formula "8") (term "1,0,0"))
                  (rule "commute_and" (formula "4") (term "0,0"))
                  (rule "commute_and" (formula "3") (term "0,0"))
                  (rule "commute_and" (formula "2") (term "0,0"))
                  (rule "commute_and" (formula "1") (term "0,0"))
                  (rule "commute_and" (formula "8") (term "0,0,0,0,0"))
                  (rule "commute_and" (formula "8") (term "1,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "8") (term "0,0,0,0"))
                  (rule "commute_or" (formula "8") (term "0,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "8") (term "1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "commute_or" (formula "8") (term "0,1,0,0,0,0"))
                  (rule "commute_and" (formula "8") (term "1,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "8") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "8") (term "0,0,0,0,0,0"))
                  (rule "commute_or" (formula "8") (term "1,0,0,0,0,0"))
                  (rule "commute_and_2" (formula "8") (term "0,0,0,0"))
                  (rule "shift_paren_and" (formula "8") (term "0,0,0,0,0"))
                  (rule "commute_and_2" (formula "8") (term "0,0,0"))
                  (rule "cnf_rightDist" (formula "8") (term "0,0"))
                  (rule "commute_or" (formula "8") (term "0,0,0"))
                  (rule "cnf_rightDist" (formula "8") (term "1,0,0"))
                  (rule "commute_or_2" (formula "8") (term "1,1,0,0"))
                  (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
                  (rule "commute_or_2" (formula "8") (term "1,0,0,0"))
                  (rule "commute_or" (formula "8") (term "0,1,0,0,0"))
                  (rule "cnf_rightDist" (formula "8") (term "0,1,0,0"))
                  (rule "cnf_rightDist" (formula "8") (term "0,0,0,0"))
                  (rule "commute_or" (formula "8") (term "1,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "8") (term "0,0,1,0,0"))
                  (rule "applyEq_or_gen1" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "eqSymm" (formula "8") (term "1,0,1,0,0,1,0,0"))
                  (rule "replace_known_right" (formula "8") (term "1,0,1,0,0,1,0,0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "cnf_rightDist" (formula "8") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "8") (term "1,0,0,0,0,0"))
                  (rule "commute_or" (formula "8") (term "0,1,0,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "applyEq_or_gen0" (formula "8") (term "1,0,0,0,1,0,0"))
                  (rule "eqSymm" (formula "8") (term "0,1,0,0,0,1,0,0"))
                  (rule "replace_known_right" (formula "8") (term "0,1,0,0,0,1,0,0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "commute_or" (formula "8") (term "0,0,0,0,1,0,0"))
                  (rule "commute_and" (formula "8") (term "0,0,0,1,0,0"))
                  (rule "cnf_rightDist" (formula "8") (term "0,0,0,0,0,0"))
                  (rule "commute_or" (formula "8") (term "1,0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0,0,0"))
                  (rule "shift_paren_and" (formula "8") (term "0,0"))
                  (rule "shift_paren_and" (formula "8") (term "0,0,0"))
                  (rule "shift_paren_and" (formula "8") (term "0,0,0,0"))
                  (rule "ifthenelse_split" (formula "7") (term "0"))
                  (branch "o_0 = x_arr_2 TRUE"
                     (rule "applyEqReverse" (formula "9") (term "0,0,0,1,0,0,0,0,0,0,0,0,0") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "applyEqReverse" (formula "9") (term "0,0,0,0,1,0,0,0,0,0,0,0,0") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "applyEqReverse" (formula "9") (term "0,0,0,0,1,0,0,0,0,0,0") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "applyEqReverse" (formula "9") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "applyEqReverse" (formula "9") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "hideAuxiliaryEq" (formula "8"))
                     (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "7"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "7"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "7"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "7"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "7"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "7"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "28") (term "0,0,0") (ifseqformula "7"))
                     (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "27"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "notRight" (formula "28"))
                     (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "9") (term "0,0,0,1,0,0,0,0,0") (ifseqformula "8"))
                     (rule "replace_known_right" (formula "9") (term "0,0,1,0,0,0,0,0") (ifseqformula "28"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "8"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "8"))
                     (rule "close" (formula "27") (ifseqformula "1"))
                  )
                  (branch "o_0 = x_arr_2 FALSE"
                     (rule "applyEqReverse" (formula "8") (term "0,0,0,0,1,0,0,0,0,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "8") (term "0,0,0,1,0,0,0,0,0,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "8") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "8") (term "0,0,0,0,1,0,0,0,0,0,0") (ifseqformula "7"))
                     (rule "applyEqReverse" (formula "8") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "7"))
                     (rule "hideAuxiliaryEq" (formula "7"))
                     (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "23"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "commute_and_2" (formula "1") (term "0,0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "1,0,0,0,0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "1,0,0,0,0,0,0,0,0,0"))
                     (rule "commute_or" (formula "1") (term "0,1,0,0,0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "cut_direct" (formula "22") (term "0,0"))
                     (branch "CUT: o_0 = null TRUE"
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "false_right" (formula "23"))
                        (rule "replace_known_left" (formula "2") (term "0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "23")))
                        (rule "closeFalse" (formula "2"))
                     )
                     (branch "CUT: o_0 = null FALSE"
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "notRight" (formula "23"))
                        (rule "replace_known_right" (formula "2") (term "0,1,0,1,0,0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "23")) (ifInst ""  (formula "23")) (ifInst ""  (formula "1")) (ifInst ""  (formula "23")) (ifInst ""  (formula "23")))
                        (rule "commute_and_2" (formula "2") (term "0,0,0"))
                        (rule "commute_and_2" (formula "2") (term "0,0,0,0"))
                        (rule "commute_and" (formula "2") (term "0,0,0,0,0"))
                        (rule "commute_and_2" (formula "2") (term "0,0,0,0"))
                        (rule "ifthenelse_split" (formula "2") (term "0"))
                        (branch " !f_0 = java.lang.Object::<created> & o_0 = self & ( f_0 = java.lang.Throwable::$cause | f_0 = java.lang.Throwable::$message) & (f_0 = java.lang.Throwable::$cause | o_0 = self) & (f_0 = java.lang.Throwable::$message | o_0 = self) TRUE"
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "6"))
                           (rule "hideAuxiliaryEq" (formula "6"))
                           (rule "eqSymm" (formula "28"))
                           (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "applyEq" (formula "26") (term "1,1") (ifseqformula "2"))
                           (rule "applyEq" (formula "26") (term "1,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "25") (term "0") (ifseqformula "2"))
                           (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                           (rule "close" (formula "21") (ifseqformula "1"))
                        )
                        (branch " !f_0 = java.lang.Object::<created> & o_0 = self & ( f_0 = java.lang.Throwable::$cause | f_0 = java.lang.Throwable::$message) & (f_0 = java.lang.Throwable::$cause | o_0 = self) & (f_0 = java.lang.Throwable::$message | o_0 = self) FALSE"
                           (rule "close" (formula "25") (ifseqformula "2"))
                        )
                     )
                  )
               )
               (branch "if n instanceof java.lang.Throwable false"
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "Exceptional Post (NullPointerException)"
             (builtin "One Step Simplification" (formula "9"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "12"))
            (rule "notLeft" (formula "10"))
            (rule "close" (formula "17") (ifseqformula "16"))
         )
         (branch "Pre (NullPointerException)"
             (builtin "One Step Simplification" (formula "10"))
            (rule "wellFormedStorePrimitive" (formula "10"))
            (rule "wellFormedMemsetArrayPrimitive" (formula "10"))
            (rule "wellFormedStorePrimitive" (formula "10"))
            (rule "wellFormedStorePrimitive" (formula "10"))
            (rule "wellFormedStorePrimitive" (formula "10"))
            (rule "wellFormedCreate" (formula "10"))
            (rule "close" (formula "10") (ifseqformula "4"))
         )
      )
   )
   (branch "Null Reference (newObject = null)"
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
      (rule "closeFalse" (formula "1"))
   )
)
)
}
