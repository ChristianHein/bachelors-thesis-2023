\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri May 12 09:47:05 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:on , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:allow , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "..";

\include "../taclets/intSet.key",  "../taclets/binaryAxiomsExtension.key",  "../taclets/bitwiseOperations.key";

\proofObligation "#Proof Obligation Settings
#Fri May 12 09:47:05 CEST 2023
contract=BitSet.Math[BitSet.Math\\:\\:min(int,int)].JML normal_behavior operation contract.0
name=BitSet.Math[BitSet.Math\\:\\:min(int,int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "christianhein" ) (keyVersion "208396f69e"))
(keyLog "1" (keyUser "christianhein" ) (keyVersion "208396f69e"))

(autoModeTime "298")

(branch "dummy ID"
(rule "expand_inInt" (formula "1") (term "1,1,0,0") (newnames "heapAtPre,o,f"))
(rule "expand_inInt" (formula "1") (term "0,1,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,1,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,1,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,0,1,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,0,1,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "4"))
(rule "eqSymm" (formula "7") (term "0,0,1,0,1"))
(rule "inEqSimp_commuteLeq" (formula "3"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_min,savedHeapBefore_min"))
 (builtin "One Step Simplification" (formula "7"))
(rule "returnUnfold" (formula "7") (term "1") (inst "#v0=x"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x"))
(rule "condition_not_simple" (formula "7") (term "1") (inst "#v0=x_1"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x_1"))
(rule "remove_parentheses_right" (formula "7") (term "1"))
(rule "less_equal_than_comparison_simple" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,1,0"))
(rule "condition_simple" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "methodCallReturn" (formula "7") (term "1"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "methodCallEmpty" (formula "7") (term "1"))
(rule "tryEmpty" (formula "7") (term "1"))
(rule "emptyModality" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "eqSymm" (formula "7") (term "1,1,0"))
(rule "inEqSimp_notGeq" (formula "7") (term "0,1,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,1,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,1,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,1,0"))
(rule "mul_literals" (formula "7") (term "0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,1,0"))
(rule "inEqSimp_or_subsumption6" (formula "7") (term "0,0"))
(rule "inEqSimp_gtToGeq" (formula "7") (term "0,1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,0,0"))
(rule "polySimp_pullOutFactor2b" (formula "7") (term "0,0,1,0,0"))
(rule "add_literals" (formula "7") (term "1,1,0,0,1,0,0"))
(rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0"))
(rule "add_zero_right" (formula "7") (term "0,0,1,0,0"))
(rule "qeq_literals" (formula "7") (term "0,1,0,0"))
 (builtin "One Step Simplification" (formula "7"))
(rule "inEqSimp_or_weaken0" (formula "7") (term "1,0"))
(rule "polySimp_addAssoc" (formula "7") (term "1,0,1,0"))
(rule "add_literals" (formula "7") (term "0,1,0,1,0"))
(rule "add_zero_left" (formula "7") (term "1,0,1,0"))
 (builtin "One Step Simplification" (formula "7"))
(rule "inEqSimp_or_tautInEq2" (formula "7") (term "0"))
(rule "inEqSimp_homoInEq1" (formula "7") (term "1,0"))
(rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1,0"))
(rule "add_literals" (formula "7") (term "1,1,0,1,0"))
(rule "times_zero_1" (formula "7") (term "1,0,1,0"))
(rule "add_zero_right" (formula "7") (term "0,1,0"))
(rule "leq_literals" (formula "7") (term "1,0"))
 (builtin "One Step Simplification" (formula "7"))
(rule "ifthenelse_split" (formula "7") (term "0,0"))
(branch "b ≥ a TRUE"
   (rule "replace_known_left" (formula "8") (term "0,0,1") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "1"))
   (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_leqRight" (formula "8"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,1,0"))
   (rule "times_zero_1" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "qeq_literals" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "b ≥ a FALSE"
   (rule "replace_known_right" (formula "8") (term "0,0,1") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_geqRight" (formula "7"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "8") (term "1"))
   (rule "polySimp_pullOutFactor1" (formula "8") (term "0,1"))
   (rule "add_literals" (formula "8") (term "1,0,1"))
   (rule "times_zero_1" (formula "8") (term "0,1"))
   (rule "qeq_literals" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_leqRight" (formula "8"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1"))
   (rule "polySimp_rightDist" (formula "2") (term "1"))
   (rule "mul_literals" (formula "2") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
   (rule "andLeft" (formula "2"))
   (rule "inEqSimp_homoInEq1" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "1,1,0"))
   (rule "times_zero_1" (formula "2") (term "1,0"))
   (rule "add_zero_right" (formula "2") (term "0"))
   (rule "leq_literals" (formula "2"))
   (rule "closeFalse" (formula "2"))
)
)
}
