\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri May 12 09:09:07 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:on , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:allow , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "..";

\include "../taclets/intSet.key",  "../taclets/binaryAxiomsExtension.key",  "../taclets/bitwiseOperations.key";

\proofObligation "#Proof Obligation Settings
#Fri May 12 09:09:07 CEST 2023
contract=BitSet[BitSet\\:\\:expandTo(int)].JML normal_behavior operation contract.2
name=BitSet[BitSet\\:\\:expandTo(int)].JML normal_behavior operation contract.2
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "christianhein" ) (keyVersion "208396f69e"))

(autoModeTime "1507")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "expand_inInt" (formula "1") (term "1,0,0,0,1,1,1,0,0,0,1,1"))
(rule "expand_inInt" (formula "1") (term "1,0,0,0,1,1,1,1,0,0,0,1,1"))
(rule "expand_inInt" (formula "1") (term "1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,0,1,1,1,0,0,0,1,1"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,0,1,1,1,0,0,0,1,1"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,0,1,1,1,1,0,0,0,1,1"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,0,1,1,1,1,0,0,0,1,1"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "12") (term "1,0,0,1,0,1"))
(rule "translateJavaAddInt" (formula "12") (term "1,0,1,1,1,1,1,0,0,0,1"))
(rule "eqSymm" (formula "12") (term "1,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_gtToGeq" (formula "12") (term "0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "assignment" (formula "12") (term "1"))
 (builtin "One Step Simplification" (formula "12"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "0,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "0,1,1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "0,1,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "12") (term "0,1,1,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_strengthen0" (formula "4") (ifseqformula "10"))
(rule "add_literals" (formula "4") (term "1"))
(rule "inEqSimp_contradEq3" (formula "10") (ifseqformula "4"))
(rule "mul_literals" (formula "10") (term "1,0,0"))
(rule "add_literals" (formula "10") (term "0,0"))
(rule "qeq_literals" (formula "10") (term "0"))
 (builtin "One Step Simplification" (formula "10"))
(rule "false_right" (formula "10"))
(rule "elementOfUnion" (formula "11") (term "0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "11") (term "1,0,0,0,0,1,0,1"))
(rule "elementOfUnion" (formula "11") (term "0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "11") (term "0,0,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "11") (term "1,0,0,0,0,0,1,0,1"))
(rule "expand_addJint" (formula "11") (term "1,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "11") (term "0,1,0,1,1,1,1,1,0,0,0,1"))
(rule "expand_moduloInteger" (formula "11") (term "1,0,1,1,1,1,1,0,0,0,1"))
(rule "replace_int_RANGE" (formula "11") (term "1,1,1,0,1,1,1,1,1,0,0,0,1"))
(rule "replace_int_HALFRANGE" (formula "11") (term "0,0,1,1,0,1,1,1,1,1,0,0,0,1"))
(rule "replace_int_MIN" (formula "11") (term "0,1,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "11") (term "0,1,1,0,1,1,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,1,1,0,1,1,1,1,1,0,0,0,1"))
(rule "polyMod_pullOut" (formula "11") (term "1,1,0,1,1,1,1,1,0,0,0,1") (inst "polyDivCoeff=Z(1(#))"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,1,0,1,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,1,1,0,1,1,1,1,1,0,0,0,1"))
(rule "polySimp_addComm1" (formula "11") (term "0,1,1,0,1,1,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,1,1,0,1,1,1,1,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "11") (term "0,0,1,1,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "11") (term "0,0,1,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "11") (term "0,0,0,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "11") (term "0,0,0,1,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "11") (term "0,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,0,1,1,1,0,0,0,1"))
(rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,0,1,1,1,0,0,0,1"))
(rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "11") (term "1,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "11") (term "0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "11") (term "1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,0,1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "11") (term "0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,1,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "11") (term "1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "11") (term "0,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "11") (term "1,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,1,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,1,1,0,0,0,1,1,1,1,0,0,0,1"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_expandTo,savedHeapBefore_expandTo"))
 (builtin "One Step Simplification" (formula "11"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "wordsRequired"))
(rule "assignmentAdditionInt" (formula "11") (term "1"))
 (builtin "One Step Simplification" (formula "11"))
(rule "translateJavaAddInt" (formula "11") (term "0,1,0"))
(rule "expand_addJint" (formula "11") (term "0,1,0"))
(rule "polySimp_addComm0" (formula "11") (term "0,0,1,0"))
(rule "expand_moduloInteger" (formula "11") (term "0,1,0"))
(rule "replace_int_RANGE" (formula "11") (term "1,1,0,1,0"))
(rule "replace_int_HALFRANGE" (formula "11") (term "0,0,1,0,1,0"))
(rule "replace_int_MIN" (formula "11") (term "0,0,1,0"))
(rule "polySimp_addAssoc" (formula "11") (term "0,1,0,1,0"))
(rule "add_literals" (formula "11") (term "0,0,1,0,1,0"))
(rule "polyMod_pullOut" (formula "11") (term "1,0,1,0") (inst "polyDivCoeff=Z(1(#))"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,1,0"))
(rule "mul_literals" (formula "11") (term "1,0,1,0,1,0"))
(rule "polySimp_addComm1" (formula "11") (term "0,1,0,1,0"))
(rule "add_literals" (formula "11") (term "0,0,1,0,1,0"))
(rule "arrayLengthNotNegative" (formula "7") (term "1"))
(rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "9"))
(rule "times_zero_1" (formula "7") (term "0,0"))
(rule "add_zero_left" (formula "7") (term "0"))
(rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
(rule "leq_literals" (formula "5") (term "0"))
 (builtin "One Step Simplification" (formula "5"))
(rule "true_left" (formula "5"))
(rule "arrayLengthIsAnInt" (formula "8") (term "1"))
(rule "expand_inInt" (formula "8"))
(rule "replace_int_MIN" (formula "8") (term "0,1"))
(rule "replace_int_MAX" (formula "8") (term "1,0"))
(rule "andLeft" (formula "8"))
(rule "inEqSimp_commuteLeq" (formula "9"))
(rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
(rule "leq_literals" (formula "9") (term "0"))
 (builtin "One Step Simplification" (formula "9"))
(rule "true_left" (formula "9"))
(rule "ifUnfold" (formula "13") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "x"))
(rule "compound_less_than_comparison_1" (formula "13") (term "1") (inst "#v0=x_1"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "x_1"))
(rule "assignment_read_attribute_this" (formula "13") (term "1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "less_than_comparison_simple" (formula "13") (term "1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,0"))
(rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,1,0"))
(rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1,0"))
(rule "add_literals" (formula "13") (term "0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1,0"))
(rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0"))
(rule "mul_literals" (formula "13") (term "0,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0"))
(rule "ifSplit" (formula "13"))
(branch "if x true"
    (builtin "One Step Simplification" (formula "14"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "mod_axiom" (formula "1") (term "1,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
    (builtin "Use Operation Contract" (formula "14") (newnames "heapBefore_ensureCapacity,exc_0,heapAfter_ensureCapacity,anon_heap_ensureCapacity") (contract "BitSet[BitSet::ensureCapacity(int)].JML normal_behavior operation contract.0#BitSet[BitSet::ensureCapacity(int)].JML normal_behavior operation contract.1"))
   (branch "Post (ensureCapacity)"
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")))
       (builtin "One Step Simplification" (formula "16"))
      (rule "expand_inInt" (formula "13") (term "1,0,0,0,1,1,1,0,1,1,1,1"))
      (rule "expand_inInt" (formula "13") (term "1,0,0,0,1,1,1,1,0,1,1,1,1"))
      (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,0,1,1,1,0,1,1,1,1"))
      (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,0,1,1,1,0,1,1,1,1"))
      (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,0,1,1,1,1,0,1,1,1,1"))
      (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,0,1,1,1,1,0,1,1,1,1"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "15"))
      (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,0,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
      (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,0"))
      (rule "add_literals" (formula "15") (term "0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0,1,1,1,1"))
      (rule "inEqSimp_gtToGeq" (formula "15") (term "0,1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,0,1,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1,0,0,0,1,1,1,1"))
      (rule "assignment_write_attribute_this" (formula "18") (term "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "mod_axiom" (formula "13") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,1,0,0,1,0"))
      (rule "mod_axiom" (formula "15") (term "1,1,0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,1,1,1"))
      (rule "polySimp_addAssoc" (formula "15") (term "1,0,1,1,1"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,1,1,1"))
      (rule "add_literals" (formula "15") (term "0,0,1,0,1,1,1"))
      (rule "mod_axiom" (formula "13") (term "0,1,0,0,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "13") (term "0,0,1,0,0,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1,1,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,1,0"))
      (rule "mod_axiom" (formula "15") (term "0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "15") (term "0,1,0,0,0"))
      (rule "mul_literals" (formula "15") (term "0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,0"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0"))
      (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,0,1,1,1,1"))
      (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,0,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,1,1"))
      (rule "mul_literals" (formula "15") (term "0,1,0,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "0,1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,1,1,0"))
      (rule "mul_literals" (formula "13") (term "0,0,1,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,0,1,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "15") (term "0,1,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
      (rule "mul_literals" (formula "15") (term "0,0,1,0"))
      (rule "polySimp_elimOne" (formula "15") (term "1,0,1,0"))
      (rule "pullOutSelect" (formula "15") (term "0,0,0,1") (inst "selectSK=BitSet_words_0"))
      (rule "applyEq" (formula "16") (term "0,1,1,1,0,0,0,0,1,1,1,1,1") (ifseqformula "15"))
      (rule "applyEq" (formula "16") (term "1,0,1,0,0,1,1,1,1") (ifseqformula "15"))
      (rule "applyEq" (formula "16") (term "1,0,1,0,0,1,1,1,1,1") (ifseqformula "15"))
      (rule "applyEq" (formula "16") (term "0,0,0,1,1") (ifseqformula "15"))
      (rule "applyEq" (formula "16") (term "0,0,0,1,1,1") (ifseqformula "15"))
      (rule "applyEq" (formula "16") (term "1,0,0,0,1,1,1,1,1,1,1") (ifseqformula "15"))
      (rule "applyEq" (formula "16") (term "0,0,1,1,1,1,1,1,1,1") (ifseqformula "15"))
      (rule "simplifySelectOfAnonEQ" (formula "15") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "17")) (ifInst ""  (formula "3")))
      (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1,1"))
      (rule "polySimp_addComm1" (formula "16") (term "0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,1,1"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,1"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,1,1"))
      (rule "mul_literals" (formula "16") (term "0,1,0,1,1"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,0,1,1"))
      (rule "elementOfIntersect" (formula "15") (term "0,0"))
      (rule "pullOutSelect" (formula "16") (term "0,0,0,1,1,1,1,1,1") (inst "selectSK=BitSet_sizeIsSticky_0"))
      (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "18")) (ifInst ""  (formula "3")))
      (rule "elementOfIntersect" (formula "16") (term "0,0"))
      (rule "commuteUnion" (formula "13") (term "1,1,1,0"))
      (rule "commuteUnion" (formula "15") (term "1,2,1,0,0"))
      (rule "commuteUnion" (formula "16") (term "1,2,1,0,0"))
      (rule "nnf_imp2or" (formula "17") (term "0,0,1,1,1,1"))
      (rule "nnf_imp2or" (formula "17") (term "0,0,1,1,1,1,1"))
      (rule "nnf_notAnd" (formula "17") (term "0,0,0,1,1,1,1"))
      (rule "nnf_notAnd" (formula "17") (term "0,0,0,1,1,1,1,1"))
      (rule "nnf_notAnd" (formula "17") (term "0,0,0,0,1,1,1,1"))
      (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,0,0,1,1,1,1"))
      (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,0,0,1,1,1,1"))
      (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0,0,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0,1,1,1,1"))
      (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,1,1,1,1"))
      (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0,0,1,1,1,1"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,0,1,1,1,1"))
      (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,0,1,1,1,1"))
      (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,0,0,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,1,1,1,1"))
      (rule "nnf_notAnd" (formula "17") (term "1,0,0,0,1,1,1,1"))
      (rule "inEqSimp_notLeq" (formula "17") (term "0,1,0,0,0,1,1,1,1"))
      (rule "mul_literals" (formula "17") (term "1,0,0,0,1,0,0,0,1,1,1,1"))
      (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,1,0,0,0,1,1,1,1"))
      (rule "mul_literals" (formula "17") (term "1,0,1,0,0,0,1,1,1,1"))
      (rule "inEqSimp_notGeq" (formula "17") (term "1,1,0,0,0,1,1,1,1"))
      (rule "mul_literals" (formula "17") (term "1,0,0,1,1,0,0,0,1,1,1,1"))
      (rule "add_literals" (formula "17") (term "0,0,1,1,0,0,0,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,1,0,0,0,1,1,1,1"))
      (rule "mul_literals" (formula "17") (term "1,1,1,0,0,0,1,1,1,1"))
      (rule "nnf_notAnd" (formula "17") (term "0,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,0,1,1,1,1,1"))
      (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,0,1,1,1,1,1"))
      (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,1,1,1,1,1"))
      (rule "nnf_notAnd" (formula "17") (term "1,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_notLeq" (formula "17") (term "0,1,0,0,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "17") (term "1,0,0,0,1,0,0,0,1,1,1,1,1"))
      (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,1,0,0,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "17") (term "1,0,1,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_notGeq" (formula "17") (term "1,1,0,0,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "17") (term "1,0,0,1,1,0,0,0,1,1,1,1,1"))
      (rule "add_literals" (formula "17") (term "0,0,1,1,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,1,0,0,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "17") (term "1,1,1,0,0,0,1,1,1,1,1"))
      (rule "methodCallEmpty" (formula "20") (term "1"))
      (rule "div_axiom" (formula "1") (term "0,1,1") (inst "quotient=quotient_0"))
      (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
      (rule "equal_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "qeq_literals" (formula "1") (term "0,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
      (rule "add_literals" (formula "3") (term "0,0,1"))
      (rule "polySimp_addComm1" (formula "3") (term "1"))
      (rule "add_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_homoInEq0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "applyEq" (formula "19") (term "0,1,1,0,2,0,0,0") (ifseqformula "1"))
      (rule "polySimp_addComm1" (formula "19") (term "1,0,2,0,0,0"))
      (rule "applyEq" (formula "16") (term "0,1,1,0,1,1,0") (ifseqformula "1"))
      (rule "polySimp_addComm1" (formula "16") (term "1,0,1,1,0"))
      (rule "applyEq" (formula "19") (term "0,1,1,0,2,1,0,0") (ifseqformula "1"))
      (rule "polySimp_addComm1" (formula "19") (term "1,0,2,1,0,0"))
      (rule "applyEq" (formula "20") (term "0,1,1,0") (ifseqformula "1"))
      (rule "polySimp_addComm1" (formula "20") (term "1,0"))
      (rule "applyEq" (formula "18") (term "0,1,1,0,2,1,0,0") (ifseqformula "1"))
      (rule "polySimp_addComm1" (formula "18") (term "1,0,2,1,0,0"))
      (rule "applyEq" (formula "18") (term "0,1,1,0,2,0,0,0") (ifseqformula "1"))
      (rule "polySimp_addComm1" (formula "18") (term "1,0,2,0,0,0"))
      (rule "applyEq" (formula "20") (term "0,1,1,0,1,1,1") (ifseqformula "1"))
      (rule "polySimp_addComm1" (formula "20") (term "1,0,1,1,1"))
      (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "1"))
      (rule "polySimp_addComm1" (formula "4") (term "1"))
      (rule "applyEq" (formula "16") (term "0,1,1,0,0,1,0") (ifseqformula "1"))
      (rule "polySimp_addComm1" (formula "16") (term "1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1"))
      (rule "polySimp_rightDist" (formula "2") (term "1"))
      (rule "mul_literals" (formula "2") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "8"))
      (rule "polySimp_rightDist" (formula "2") (term "0,0"))
      (rule "mul_literals" (formula "2") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "add_literals" (formula "2") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
      (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
      (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
      (rule "leq_literals" (formula "2") (term "0,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
      (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
      (rule "add_literals" (formula "2") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
      (rule "add_literals" (formula "2") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "2") (term "1,0,0"))
      (rule "add_literals" (formula "2") (term "0,0"))
      (rule "qeq_literals" (formula "2") (term "0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "4"))
      (rule "times_zero_1" (formula "11") (term "0,0"))
      (rule "add_zero_left" (formula "11") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11"))
      (rule "mul_literals" (formula "11") (term "1"))
      (rule "elimGcdGeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0"))
      (rule "leq_literals" (formula "11") (term "0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
      (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
      (rule "add_literals" (formula "11") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0"))
      (rule "add_literals" (formula "11") (term "0,0"))
      (rule "leq_literals" (formula "11") (term "0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "2"))
      (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "11"))
      (rule "mul_literals" (formula "4") (term "1,1"))
      (rule "add_literals" (formula "4") (term "1"))
      (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
      (rule "qeq_literals" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "10"))
      (rule "leq_literals" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "applyEq" (formula "2") (term "0,1,1") (ifseqformula "9"))
      (rule "mul_literals" (formula "2") (term "1,1"))
      (rule "add_literals" (formula "2") (term "1"))
      (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "9"))
      (rule "applyEqRigid" (formula "16") (term "0,1,0,1,0,0,1,0") (ifseqformula "9"))
      (rule "mul_literals" (formula "16") (term "1,0,1,0,0,1,0"))
      (rule "add_literals" (formula "16") (term "0,1,0,0,1,0"))
      (rule "applyEq" (formula "16") (term "0,1,0,1,0,1,1,0") (ifseqformula "9"))
      (rule "mul_literals" (formula "16") (term "1,0,1,0,1,1,0"))
      (rule "add_literals" (formula "16") (term "0,1,0,1,1,0"))
      (rule "add_zero_left" (formula "16") (term "1,0,1,1,0"))
      (rule "replace_known_left" (formula "16") (term "0,1,1,0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "applyEq" (formula "19") (term "0,1,0,1,0,2,0,0,0") (ifseqformula "9"))
      (rule "mul_literals" (formula "19") (term "1,0,1,0,2,0,0,0"))
      (rule "add_literals" (formula "19") (term "0,1,0,2,0,0,0"))
      (rule "applyEqRigid" (formula "18") (term "0,1,0,1,0,2,1,0,0") (ifseqformula "9"))
      (rule "mul_literals" (formula "18") (term "1,0,1,0,2,1,0,0"))
      (rule "add_literals" (formula "18") (term "0,1,0,2,1,0,0"))
      (rule "add_zero_left" (formula "18") (term "1,0,2,1,0,0"))
      (rule "replace_known_left" (formula "18") (term "0,2,1,0,0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "applyEqRigid" (formula "19") (term "0,1,0,1,0,2,1,0,0") (ifseqformula "9"))
      (rule "mul_literals" (formula "19") (term "1,0,1,0,2,1,0,0"))
      (rule "add_literals" (formula "19") (term "0,1,0,2,1,0,0"))
      (rule "add_zero_left" (formula "19") (term "1,0,2,1,0,0"))
      (rule "replace_known_left" (formula "19") (term "0,2,1,0,0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "applyEq" (formula "3") (term "0,1,0,1") (ifseqformula "9"))
      (rule "mul_literals" (formula "3") (term "1,0,1"))
      (rule "add_literals" (formula "3") (term "0,1"))
      (rule "add_zero_left" (formula "3") (term "1"))
      (rule "applyEqRigid" (formula "20") (term "0,1,0,1,0,1,1,1") (ifseqformula "9"))
      (rule "mul_literals" (formula "20") (term "1,0,1,0,1,1,1"))
      (rule "add_literals" (formula "20") (term "0,1,0,1,1,1"))
      (rule "applyEq" (formula "20") (term "0,1,0,1,0") (ifseqformula "9"))
      (rule "mul_literals" (formula "20") (term "1,0,1,0"))
      (rule "add_literals" (formula "20") (term "0,1,0"))
      (rule "add_zero_left" (formula "20") (term "1,0"))
      (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "notLeft" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "24"))
      (rule "notLeft" (formula "24"))
      (rule "andLeft" (formula "24"))
      (rule "notLeft" (formula "25"))
      (rule "notLeft" (formula "24"))
      (rule "apply_eq_boolean_rigid" (formula "19") (term "1") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "notLeft" (formula "19"))
      (rule "ifEqualsTRUE" (formula "23"))
      (rule "orRight" (formula "23"))
      (rule "applyEq" (formula "18") (term "0,1,0,1,0,2,0,0,0") (ifseqformula "9"))
      (rule "mul_literals" (formula "18") (term "1,0,1,0,2,0,0,0"))
      (rule "add_literals" (formula "18") (term "0,1,0,2,0,0,0"))
      (rule "inEqSimp_contradInEq0" (formula "18") (term "0,2,0,0,0") (ifseqformula "14"))
      (rule "inEqSimp_homoInEq1" (formula "18") (term "0,0,2,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,0,2,0,0,0"))
      (rule "add_literals" (formula "18") (term "1,1,0,0,0,2,0,0,0"))
      (rule "times_zero_1" (formula "18") (term "1,0,0,0,2,0,0,0"))
      (rule "add_literals" (formula "18") (term "0,0,0,2,0,0,0"))
      (rule "leq_literals" (formula "18") (term "0,0,2,0,0,0"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "inEqSimp_contradInEq0" (formula "24") (term "0,2,0,0,0") (ifseqformula "14"))
      (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0,2,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,0,2,0,0,0"))
      (rule "add_literals" (formula "24") (term "1,1,0,0,0,2,0,0,0"))
      (rule "times_zero_1" (formula "24") (term "1,0,0,0,2,0,0,0"))
      (rule "add_zero_right" (formula "24") (term "0,0,0,2,0,0,0"))
      (rule "leq_literals" (formula "24") (term "0,0,2,0,0,0"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "inEqSimp_contradInEq0" (formula "23") (term "0,2,0,0") (ifseqformula "14"))
      (rule "inEqSimp_homoInEq1" (formula "23") (term "0,0,2,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,0,2,0,0"))
      (rule "add_literals" (formula "23") (term "1,1,0,0,0,2,0,0"))
      (rule "times_zero_1" (formula "23") (term "1,0,0,0,2,0,0"))
      (rule "add_zero_right" (formula "23") (term "0,0,0,2,0,0"))
      (rule "leq_literals" (formula "23") (term "0,0,2,0,0"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "10"))
      (rule "leq_literals" (formula "2") (term "0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "inEqSimp_contradInEq0" (formula "15") (term "0,0,1,0") (ifseqformula "13"))
      (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0,0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0,0,1,0"))
      (rule "add_literals" (formula "15") (term "1,1,0,0,0,0,1,0"))
      (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "15") (term "0,0,0,0,1,0"))
      (rule "leq_literals" (formula "15") (term "0,0,0,1,0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "elementOfUnion" (formula "17") (term "0,0"))
      (rule "elementOfSingleton" (formula "17") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "elementOfSingleton" (formula "17") (term "0,0"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "applyEqReverse" (formula "18") (term "0,1,1") (ifseqformula "17"))
      (rule "applyEqReverse" (formula "19") (term "0,0") (ifseqformula "17"))
      (rule "applyEqReverse" (formula "24") (term "1,0") (ifseqformula "17"))
      (rule "applyEqReverse" (formula "21") (term "0,1,1,0,0,0") (ifseqformula "17"))
      (rule "applyEqReverse" (formula "20") (term "1,0,1,0") (ifseqformula "17"))
      (rule "applyEqReverse" (formula "21") (term "1,0,1,0") (ifseqformula "17"))
      (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "17"))
      (rule "hideAuxiliaryEq" (formula "17"))
      (rule "inEqSimp_homoInEq0" (formula "17"))
      (rule "polySimp_addComm1" (formula "17") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17"))
      (rule "polySimp_mulComm0" (formula "17") (term "1"))
      (rule "polySimp_rightDist" (formula "17") (term "1"))
      (rule "mul_literals" (formula "17") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1"))
      (rule "elementOfUnion" (formula "22") (term "0,0"))
      (rule "elementOfSingleton" (formula "22") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "false_right" (formula "22"))
      (rule "elementOfUnion" (formula "21") (term "0"))
      (rule "elementOfSingleton" (formula "21") (term "1,0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "elementOfSingleton" (formula "21") (term "0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "hideAuxiliaryEqConcrete2" (formula "23"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0,1") (ifseqformula "3"))
      (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "26"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "tryEmpty" (formula "27") (term "1"))
      (rule "commute_or_2" (formula "20") (term "0,0"))
      (rule "commute_or" (formula "21") (term "1,0,0"))
      (rule "commute_or_2" (formula "21") (term "0,0"))
      (rule "commute_or" (formula "21") (term "0,0,0"))
      (rule "shift_paren_or" (formula "20") (term "0,0,0"))
      (rule "commute_or_2" (formula "20") (term "0,0,0"))
      (rule "commute_or" (formula "20") (term "0,0,0,0"))
      (rule "inEqSimp_or_subsumption0" (formula "20") (term "0,0,0,0"))
      (rule "qeq_literals" (formula "20") (term "0,0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "emptyModality" (formula "27") (term "1"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "eqSymm" (formula "27") (term "1,0,0,1,1,1,0"))
      (rule "eqSymm" (formula "27") (term "1,0,0,1"))
      (rule "dismissNonSelectedField" (formula "27") (term "0,1,1,0,1,0"))
      (rule "replaceKnownSelect_taclet00_0" (formula "27") (term "0,1,1,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_2" (formula "27") (term "0,1,1,0,1,0"))
      (rule "dismissNonSelectedField" (formula "27") (term "1,0,1,0,0,1,1,1,1,0"))
      (rule "replaceKnownSelect_taclet00_0" (formula "27") (term "1,0,1,0,0,1,1,1,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_2" (formula "27") (term "1,0,1,0,0,1,1,1,1,0"))
      (rule "dismissNonSelectedField" (formula "27") (term "1,0,0,0,1,1,1,1,1,1,1,0"))
      (rule "replaceKnownSelect_taclet00_0" (formula "27") (term "1,0,0,0,1,1,1,1,1,1,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_2" (formula "27") (term "1,0,0,0,1,1,1,1,1,1,1,0"))
      (rule "replace_known_right" (formula "27") (term "0,0,1,1,1,1,1,1,1,0") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "dismissNonSelectedField" (formula "27") (term "0,1,0,0,1,1,1,1,0"))
      (rule "dismissNonSelectedField" (formula "27") (term "0,1,0,0,1,1,1,0"))
      (rule "dismissNonSelectedField" (formula "27") (term "0,0,0,0"))
      (rule "replaceKnownSelect_taclet00_0" (formula "27") (term "0,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_2" (formula "27") (term "0,0,0,0"))
      (rule "replace_known_right" (formula "27") (term "0,0,0") (ifseqformula "24"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "dismissNonSelectedField" (formula "27") (term "0,0,1,1,1,1,1,1,0"))
      (rule "replaceKnownSelect_taclet00_0" (formula "27") (term "0,0,1,1,1,1,1,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_2" (formula "27") (term "0,0,1,1,1,1,1,1,0"))
      (rule "replace_known_right" (formula "27") (term "0,1,1,1,1,1,1,0") (ifseqformula "24"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "dismissNonSelectedField" (formula "27") (term "1,0,1,0,0,1,1,0"))
      (rule "replaceKnownSelect_taclet00_0" (formula "27") (term "1,0,1,0,0,1,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_2" (formula "27") (term "1,0,1,0,0,1,1,0"))
      (rule "dismissNonSelectedField" (formula "27") (term "0,0,0,1,0"))
      (rule "replaceKnownSelect_taclet00_0" (formula "27") (term "0,0,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_2" (formula "27") (term "0,0,0,1,0"))
      (rule "replace_known_left" (formula "27") (term "0,1,0") (ifseqformula "19"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "dismissNonSelectedField" (formula "27") (term "0,1,1,0,0,0,0,1,1,0"))
      (rule "replaceKnownSelect_taclet00_0" (formula "27") (term "0,1,1,0,0,0,0,1,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_2" (formula "27") (term "0,1,1,0,0,0,0,1,1,0"))
      (rule "dismissNonSelectedField" (formula "27") (term "0,0,1,1,1,1,0"))
      (rule "replaceKnownSelect_taclet00_1" (formula "27") (term "0,0,1,1,1,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_3" (formula "27") (term "0,0,1,1,1,1,0"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "inEqSimp_homoInEq0" (formula "27") (term "0,0"))
      (rule "polySimp_addComm1" (formula "27") (term "0,0,0"))
      (rule "mod_axiom" (formula "27") (term "1,1,1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,1,1,1,0"))
      (rule "polySimp_addAssoc" (formula "27") (term "1,1,1,1,0"))
      (rule "polySimp_addAssoc" (formula "27") (term "0,1,1,1,1,0"))
      (rule "add_literals" (formula "27") (term "0,0,1,1,1,1,0"))
      (rule "applyEq" (formula "27") (term "0,1,1,1,1,1,0") (ifseqformula "1"))
      (rule "mul_literals" (formula "27") (term "1,1,1,1,1,0"))
      (rule "polySimp_addComm1" (formula "27") (term "1,1,1,1,0"))
      (rule "add_literals" (formula "27") (term "0,1,1,1,1,0"))
      (rule "mod_axiom" (formula "27") (term "1,3,0,0,1,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,3,0,0,1,1,1,0"))
      (rule "polySimp_addAssoc" (formula "27") (term "3,0,0,1,1,1,0"))
      (rule "polySimp_addAssoc" (formula "27") (term "0,3,0,0,1,1,1,0"))
      (rule "add_literals" (formula "27") (term "0,0,3,0,0,1,1,1,0"))
      (rule "applyEq" (formula "27") (term "0,1,3,0,0,1,1,1,0") (ifseqformula "1"))
      (rule "mul_literals" (formula "27") (term "1,3,0,0,1,1,1,0"))
      (rule "polySimp_addComm1" (formula "27") (term "3,0,0,1,1,1,0"))
      (rule "add_literals" (formula "27") (term "0,3,0,0,1,1,1,0"))
      (rule "mod_axiom" (formula "27") (term "1,3,0,0,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,3,0,0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "27") (term "3,0,0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "27") (term "0,3,0,0,1,0,0,1"))
      (rule "add_literals" (formula "27") (term "0,0,3,0,0,1,0,0,1"))
      (rule "applyEq" (formula "27") (term "0,1,3,0,0,1,0,0,1") (ifseqformula "1"))
      (rule "mul_literals" (formula "27") (term "1,3,0,0,1,0,0,1"))
      (rule "polySimp_addComm1" (formula "27") (term "3,0,0,1,0,0,1"))
      (rule "add_literals" (formula "27") (term "0,3,0,0,1,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "27") (term "1,0,0"))
      (rule "mul_literals" (formula "27") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
      (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "pullOutSelect" (formula "27") (term "0,1,1,0") (inst "selectSK=BitSet_wordsInUse_0"))
      (rule "simplifySelectOfStore" (formula "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "castDel" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "andRight" (formula "27"))
      (branch "Case 1"
         (rule "andRight" (formula "27"))
         (branch "Case 1"
            (rule "allRight" (formula "27") (inst "sk=i_0"))
            (rule "orRight" (formula "27"))
            (rule "cutUpperBound" (formula "27") (ifseqformula "20"))
            (branch "Case 1"
               (rule "crossInst" (formula "21") (inst "sk=i_1") (ifseqformula "28"))
               (rule "orRight" (formula "29"))
               (rule "andLeft" (formula "21"))
               (rule "orRight" (formula "31"))
               (rule "orRight" (formula "30"))
               (rule "eqSymm" (formula "1"))
               (rule "inEqSimp_leqRight" (formula "33"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "33"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_leqRight" (formula "32"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "33"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0"))
               (rule "applyEqRigid" (formula "26") (term "1,1,0") (ifseqformula "25"))
               (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "5"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "leq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Case 2"
               (rule "crossInst" (formula "21") (inst "sk=i_1") (ifseqformula "28"))
               (rule "orRight" (formula "29"))
               (rule "notLeft" (formula "1"))
               (rule "andLeft" (formula "20"))
               (rule "orRight" (formula "31"))
               (rule "orRight" (formula "30"))
               (rule "eqSymm" (formula "24"))
               (rule "inEqSimp_geqRight" (formula "32"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_leqRight" (formula "33"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_leqRight" (formula "32"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "33"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
               (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "24"))
               (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "24"))
               (rule "applyEq" (formula "25") (term "0,1,0,0") (ifseqformula "24"))
               (rule "applyEqRigid" (formula "25") (term "0,2,0,1") (ifseqformula "24"))
               (rule "applyEqRigid" (formula "25") (term "0,2,1,1") (ifseqformula "24"))
               (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "34"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_contradEq7" (formula "28") (ifseqformula "1"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0"))
               (rule "add_literals" (formula "28") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "28") (term "1,0,0"))
               (rule "add_zero_right" (formula "28") (term "0,0"))
               (rule "leq_literals" (formula "28") (term "0"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "false_right" (formula "28"))
               (rule "inEqSimp_contradInEq0" (formula "25") (term "1,0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "25") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "2"))
               (rule "leq_literals" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "24") (term "0,0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "1"))
               (rule "andLeft" (formula "24"))
               (rule "inEqSimp_homoInEq1" (formula "24"))
               (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
               (rule "add_literals" (formula "24") (term "1,1,0"))
               (rule "times_zero_1" (formula "24") (term "1,0"))
               (rule "add_zero_right" (formula "24") (term "0"))
               (rule "leq_literals" (formula "24"))
               (rule "closeFalse" (formula "24"))
            )
         )
         (branch "Case 2"
            (rule "allRight" (formula "27") (inst "sk=i_0"))
            (rule "orRight" (formula "27"))
            (rule "orRight" (formula "27"))
            (rule "orRight" (formula "27"))
            (rule "orRight" (formula "29"))
            (rule "inEqSimp_leqRight" (formula "27"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "28"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "30"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_geqRight" (formula "30"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0"))
            (rule "polySimp_elimOne" (formula "4") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=arr_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")) (ifInst ""  (formula "28")))
            (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "4"))
            (rule "mul_literals" (formula "14") (term "0,0"))
            (rule "add_zero_left" (formula "14") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "14"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "arrayLengthIsAnInt" (formula "23") (term "0"))
            (rule "expand_inInt" (formula "23"))
            (rule "replace_int_MIN" (formula "23") (term "0,1"))
            (rule "replace_int_MAX" (formula "23") (term "1,0"))
            (rule "andLeft" (formula "23"))
            (rule "inEqSimp_commuteLeq" (formula "24"))
            (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "23"))
            (rule "polySimp_rightDist" (formula "25") (term "0,0"))
            (rule "mul_literals" (formula "25") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "25") (term "0"))
            (rule "add_literals" (formula "25") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "25"))
            (rule "polySimp_mulLiterals" (formula "25") (term "0"))
            (rule "polySimp_elimOne" (formula "25") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "23"))
            (rule "polySimp_rightDist" (formula "22") (term "0,0"))
            (rule "mul_literals" (formula "22") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0"))
            (rule "add_literals" (formula "22") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "22"))
            (rule "polySimp_mulLiterals" (formula "22") (term "0"))
            (rule "polySimp_elimOne" (formula "22") (term "0"))
            (rule "inEqSimp_subsumption0" (formula "15") (ifseqformula "22"))
            (rule "leq_literals" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "23"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "2"))
            (rule "leq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "arrayLengthNotNegative" (formula "25") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "25"))
            (rule "leq_literals" (formula "24") (term "0"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "true_left" (formula "24"))
            (rule "allLeft" (formula "27") (inst "t=i_0"))
            (rule "replaceKnownSelect_taclet1000_6" (formula "27") (term "0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet1000_7" (formula "27") (term "0,1"))
            (rule "replace_known_right" (formula "27") (term "1") (ifseqformula "34"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
            (rule "inEqSimp_homoInEq0" (formula "27") (term "1,0"))
            (rule "polySimp_addComm1" (formula "27") (term "0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,1,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0"))
            (rule "mul_literals" (formula "27") (term "0,1,1,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0"))
            (rule "inEqSimp_contradInEq0" (formula "27") (term "1,0,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "27") (term "0,1,0,0"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "inEqSimp_contradInEq0" (formula "27") (term "1,0") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1,0"))
            (rule "add_literals" (formula "27") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "27") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "27") (term "0,0,1,0"))
            (rule "leq_literals" (formula "27") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "13"))
            (rule "qeq_literals" (formula "27") (term "0,0"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "2"))
            (rule "andLeft" (formula "27"))
            (rule "inEqSimp_homoInEq1" (formula "27"))
            (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
            (rule "add_literals" (formula "27") (term "1,1,0"))
            (rule "times_zero_1" (formula "27") (term "1,0"))
            (rule "add_zero_right" (formula "27") (term "0"))
            (rule "leq_literals" (formula "27"))
            (rule "closeFalse" (formula "27"))
         )
      )
      (branch "Case 2"
         (rule "allRight" (formula "27") (inst "sk=f_0"))
         (rule "allRight" (formula "27") (inst "sk=o_0"))
         (rule "orRight" (formula "27"))
         (rule "orRight" (formula "27"))
         (rule "orRight" (formula "27"))
         (rule "orRight" (formula "27"))
         (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=f_0_0"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "32"))
         (rule "eqSymm" (formula "1") (term "1,0,0"))
         (rule "eqSymm" (formula "1") (term "0,0,0"))
         (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "29"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
         (rule "elementOfUnion" (formula "1") (term "0,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
         (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "28"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
         (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "30"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Exceptional Post (ensureCapacity)"
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")))
       (builtin "One Step Simplification" (formula "16"))
      (rule "expand_inInt" (formula "13") (term "1,0,0,0,1,1,1,1,0,1,1,1,1"))
      (rule "expand_inInt" (formula "13") (term "1,0,0,0,1,1,1,0,1,1,1,1"))
      (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,0,1,1,1,1,0,1,1,1,1"))
      (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,0,1,1,1,1,0,1,1,1,1"))
      (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,0,1,1,1,0,1,1,1,1"))
      (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,0,1,1,1,0,1,1,1,1"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "16"))
      (rule "notLeft" (formula "14"))
      (rule "replace_known_right" (formula "16") (term "1,1") (ifseqformula "17"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "notLeft" (formula "16"))
      (rule "replace_known_right" (formula "13") (term "0,1,1,0") (ifseqformula "16"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "17"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "notLeft" (formula "15"))
      (rule "replace_known_right" (formula "13") (term "0,1,0") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_ltRight" (formula "16"))
      (rule "polySimp_rightDist" (formula "1") (term "0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,0"))
      (rule "inEqSimp_geqRight" (formula "16"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "mod_axiom" (formula "2") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0"))
      (rule "mul_literals" (formula "2") (term "0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
      (rule "add_literals" (formula "2") (term "0,0,0,0"))
      (rule "mod_axiom" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1"))
      (rule "polySimp_rightDist" (formula "2") (term "1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
      (rule "polySimp_rightDist" (formula "2") (term "0,1"))
      (rule "mul_literals" (formula "2") (term "0,0,1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
      (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1"))
      (rule "mul_literals" (formula "1") (term "0,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
      (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
      (rule "andLeft" (formula "2"))
      (rule "inEqSimp_homoInEq1" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
      (rule "polySimp_rightDist" (formula "2") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "2") (term "0,1,0"))
      (rule "mul_literals" (formula "2") (term "0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0"))
      (rule "polySimp_addComm1" (formula "2") (term "0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "2") (term "0"))
      (rule "add_literals" (formula "2") (term "1,1,0"))
      (rule "times_zero_1" (formula "2") (term "1,0"))
      (rule "add_zero_right" (formula "2") (term "0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0"))
      (rule "polySimp_addComm1" (formula "2") (term "0,0"))
      (rule "add_literals" (formula "2") (term "0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
      (rule "add_literals" (formula "2") (term "1,1,0"))
      (rule "times_zero_1" (formula "2") (term "1,0"))
      (rule "add_zero_right" (formula "2") (term "0"))
      (rule "leq_literals" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
   (branch "Pre (ensureCapacity)"
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "2")))
      (rule "expand_inInt" (formula "14") (term "1"))
      (rule "replace_int_MAX" (formula "14") (term "1,0,1"))
      (rule "replace_int_MIN" (formula "14") (term "0,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0"))
      (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "14") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1"))
      (rule "mul_literals" (formula "14") (term "0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,1"))
      (rule "add_literals" (formula "14") (term "0,0,0,1"))
      (rule "inEqSimp_homoInEq0" (formula "14") (term "1,1"))
      (rule "mul_literals" (formula "14") (term "1,0,1,1"))
      (rule "polySimp_addComm1" (formula "14") (term "0,1,1"))
      (rule "add_literals" (formula "14") (term "0,0,1,1"))
      (rule "add_zero_left" (formula "14") (term "0,1,1"))
      (rule "mod_axiom" (formula "14") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "1,0,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,0"))
      (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
      (rule "mod_axiom" (formula "14") (term "0,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "0,1,0,0,1,0"))
      (rule "mul_literals" (formula "14") (term "0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,0,1,0"))
      (rule "mod_axiom" (formula "14") (term "0,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "14") (term "0,1,0,0,1"))
      (rule "mul_literals" (formula "14") (term "0,0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,1"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1"))
      (rule "add_literals" (formula "14") (term "0,0,0,0,1"))
      (rule "mod_axiom" (formula "14") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,1,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "0,1,1,0"))
      (rule "mul_literals" (formula "14") (term "0,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "14") (term "1,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,1"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,1"))
      (rule "mul_literals" (formula "14") (term "0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,1"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,0,1"))
      (rule "inEqSimp_sepNegMonomial1" (formula "14") (term "1,1"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0,1,1"))
      (rule "inEqSimp_or_tautInEq2" (formula "14") (term "0"))
      (rule "polySimp_addAssoc" (formula "14") (term "1,1,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,1,1,0"))
      (rule "add_literals" (formula "14") (term "0,0,1,1,0"))
      (rule "inEqSimp_homoInEq1" (formula "14") (term "1,0"))
      (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,0"))
      (rule "add_literals" (formula "14") (term "1,0,1,0"))
      (rule "times_zero_1" (formula "14") (term "0,1,0"))
      (rule "leq_literals" (formula "14") (term "1,0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "div_axiom" (formula "1") (term "0,1,1") (inst "quotient=quotient_0"))
      (rule "equal_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "qeq_literals" (formula "1") (term "0,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1,1,1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
      (rule "add_literals" (formula "3") (term "0,0,1"))
      (rule "polySimp_addComm1" (formula "3") (term "1"))
      (rule "add_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_homoInEq0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "applyEq" (formula "17") (term "0,0,0") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq1" (formula "17") (term "0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "17") (term "0,0"))
      (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "inEqSimp_leqRight" (formula "17"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "applyEq" (formula "5") (term "0,1,1") (ifseqformula "2"))
      (rule "polySimp_addComm1" (formula "5") (term "1"))
      (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "2"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1"))
      (rule "polySimp_rightDist" (formula "4") (term "1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
      (rule "mul_literals" (formula "4") (term "0,1"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_homoInEq1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "leq_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "if x false"
    (builtin "One Step Simplification" (formula "14"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "inEqSimp_leqRight" (formula "11"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "mod_axiom" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "polySimp_rightDist" (formula "1") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
   (rule "mul_literals" (formula "1") (term "0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
   (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "10"))
   (rule "polySimp_rightDist" (formula "1") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
   (rule "mul_literals" (formula "1") (term "0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "polySimp_rightDist" (formula "1") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
   (rule "mul_literals" (formula "1") (term "0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
   (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "12"))
   (rule "polySimp_rightDist" (formula "1") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0"))
   (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
   (rule "mul_literals" (formula "1") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor2b" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "elimGcdGeq_antec" (formula "1") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=div(add(Z(neglit(7(4(6(3(8(4(7(4(1(2(#)))))))))))),
        wordIndex),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addLiterals" (formula "1") (term "0,0,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "leq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "11"))
   (rule "polySimp_rightDist" (formula "2") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "polySimp_rightDist" (formula "2") (term "0,0,0"))
   (rule "mul_literals" (formula "2") (term "0,0,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1"))
   (rule "polySimp_rightDist" (formula "2") (term "1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
   (rule "mul_literals" (formula "2") (term "0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1"))
   (rule "methodCallEmpty" (formula "17") (term "1"))
   (rule "tryEmpty" (formula "17") (term "1"))
   (rule "emptyModality" (formula "17") (term "1"))
    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")) (ifInst ""  (formula "16")))
   (rule "inEqSimp_homoInEq0" (formula "17") (term "0"))
   (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0"))
   (rule "add_literals" (formula "17") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "17") (term "1,0,0"))
   (rule "add_zero_right" (formula "17") (term "0,0"))
   (rule "qeq_literals" (formula "17") (term "0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "false_right" (formula "17"))
   (rule "div_axiom" (formula "4") (term "0,1,1") (inst "quotient=quotient_0"))
   (rule "mul_literals" (formula "4") (term "1,1,1,1,1"))
   (rule "qeq_literals" (formula "4") (term "0,1,1"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "equal_literals" (formula "4") (term "0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "4"))
   (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
   (rule "add_literals" (formula "6") (term "0,0,1"))
   (rule "polySimp_addComm1" (formula "6") (term "1"))
   (rule "add_literals" (formula "6") (term "0,1"))
   (rule "inEqSimp_homoInEq0" (formula "5"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
   (rule "polySimp_addComm1" (formula "5") (term "0"))
   (rule "inEqSimp_homoInEq1" (formula "6"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
   (rule "polySimp_addComm1" (formula "6") (term "0"))
   (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "4"))
   (rule "inEqSimp_homoInEq1" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
   (rule "applyEq" (formula "2") (term "0,1,1") (ifseqformula "3"))
   (rule "polySimp_addComm1" (formula "2") (term "1"))
   (rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "3"))
   (rule "polySimp_addComm1" (formula "6") (term "1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "4"))
   (rule "polySimp_mulComm0" (formula "4") (term "1"))
   (rule "polySimp_rightDist" (formula "4") (term "1"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
   (rule "mul_literals" (formula "4") (term "0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5"))
   (rule "polySimp_mulComm0" (formula "5") (term "1"))
   (rule "polySimp_rightDist" (formula "5") (term "1"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
   (rule "mul_literals" (formula "5") (term "0,1"))
   (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "14"))
   (rule "polySimp_rightDist" (formula "2") (term "0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "polySimp_rightDist" (formula "2") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
   (rule "mul_literals" (formula "2") (term "0,0,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "5"))
   (rule "times_zero_1" (formula "12") (term "0,0"))
   (rule "add_zero_left" (formula "12") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12"))
   (rule "mul_literals" (formula "12") (term "1"))
   (rule "inEqSimp_subsumption6" (formula "12") (ifseqformula "1"))
   (rule "times_zero_1" (formula "12") (term "1,1,0"))
   (rule "greater_literals" (formula "12") (term "0,0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "leq_literals" (formula "12") (term "0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "16"))
   (rule "polySimp_rightDist" (formula "2") (term "0,0"))
   (rule "polySimp_pullOutFactor2b" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "1,1,0"))
   (rule "times_zero_1" (formula "2") (term "1,0"))
   (rule "add_zero_right" (formula "2") (term "0"))
   (rule "polySimp_rightDist" (formula "2") (term "0"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
   (rule "mul_literals" (formula "2") (term "1"))
   (rule "inEqSimp_subsumption6" (formula "2") (ifseqformula "1"))
   (rule "times_zero_1" (formula "2") (term "1,1,0"))
   (rule "greater_literals" (formula "2") (term "0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "leq_literals" (formula "2") (term "0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "10"))
   (rule "polySimp_rightDist" (formula "4") (term "0,0"))
   (rule "mul_literals" (formula "4") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "4") (term "0"))
   (rule "add_literals" (formula "4") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "4"))
   (rule "polySimp_mulLiterals" (formula "4") (term "0"))
   (rule "inEqSimp_contradInEq5" (formula "4") (ifseqformula "1"))
   (rule "times_zero_1" (formula "4") (term "1,1,0"))
   (rule "greater_literals" (formula "4") (term "0,0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "qeq_literals" (formula "4") (term "0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "closeFalse" (formula "4"))
)
)
}
