\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri May 12 09:06:51 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:on , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:allow , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "..";

\include "../taclets/intSet.key",  "../taclets/binaryAxiomsExtension.key",  "../taclets/bitwiseOperations.key";

\proofObligation "#Proof Obligation Settings
#Fri May 12 09:06:51 CEST 2023
contract=BitSet[BitSet\\:\\:recalculateWordsInUse()].JML normal_behavior operation contract.0
name=BitSet[BitSet\\:\\:recalculateWordsInUse()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "christianhein" ) (keyVersion "208396f69e"))

(autoModeTime "2717")

(branch "dummy ID"
(rule "expand_inInt" (formula "1") (term "1,0,0,1,1,1,0,0,0,1,1") (newnames "heapAtPre,o,f"))
(rule "expand_inInt" (formula "1") (term "1,0,0,1,1,1,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,1,1,1,0,0,0,1,1"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,1,1,1,0,0,0,1,1"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,1,1,1,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,1,1,1,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "translateJavaSubInt" (formula "10") (term "0,2,0,0,1,0,1,1,0,0,0,1"))
(rule "eqSymm" (formula "10") (term "1,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "10") (term "0,0,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "1,1,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "1,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "assignment" (formula "10") (term "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
(rule "times_zero_1" (formula "5") (term "0,0"))
(rule "add_zero_left" (formula "5") (term "0"))
(rule "expand_subJint" (formula "11") (term "0,2,0,0,1,0,1,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "11") (term "0,0,2,0,0,1,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,0,2,0,0,1,0,1,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "11") (term "0,0,2,0,0,1,0,1,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "8") (term "0"))
(rule "expand_moduloInteger" (formula "11") (term "0,2,0,0,1,0,1,1,0,0,0,1"))
(rule "replace_int_RANGE" (formula "11") (term "1,1,0,2,0,0,1,0,1,1,0,0,0,1"))
(rule "replace_int_MIN" (formula "11") (term "0,0,2,0,0,1,0,1,1,0,0,0,1"))
(rule "replace_int_HALFRANGE" (formula "11") (term "0,0,1,0,2,0,0,1,0,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "11") (term "0,1,0,2,0,0,1,0,1,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,1,0,2,0,0,1,0,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "8") (term "0,0"))
(rule "nnf_notAnd" (formula "8") (term "0,0,0"))
(rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,0"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0"))
(rule "add_zero_left" (formula "8") (term "0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
(rule "nnf_notAnd" (formula "8") (term "1,0,0"))
(rule "inEqSimp_notGeq" (formula "8") (term "1,1,0,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,1,1,0,0"))
(rule "add_literals" (formula "8") (term "0,0,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,1,0,0"))
(rule "mul_literals" (formula "8") (term "1,1,1,0,0"))
(rule "inEqSimp_notLeq" (formula "8") (term "0,1,0,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,0,1,0,0"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,1,0,0"))
(rule "mul_literals" (formula "8") (term "1,0,1,0,0"))
(rule "nnf_imp2or" (formula "11") (term "0,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "11") (term "0,0,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "11") (term "0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,1,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "11") (term "1,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "11") (term "0,1,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,0,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,1,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,1,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "11") (term "1,1,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,0,1,1,0,0,1,1,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,1,1,0,0,1,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,1,0,0,1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,1,1,0,0,1,1,1,0,0,0,1"))
(rule "commute_or_2" (formula "8") (term "0,0"))
(rule "commute_or" (formula "8") (term "0,0,0"))
(rule "commute_or_2" (formula "8") (term "0,0"))
(rule "commute_or" (formula "8") (term "0,0,0,0"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_recalculateWordsInUse,savedHeapBefore_recalculateWordsInUse"))
 (builtin "One Step Simplification" (formula "11"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "i"))
(rule "for_to_while" (formula "11") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
(rule "compound_subtraction_1" (formula "11") (term "1") (inst "#v=x"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "x"))
(rule "assignment_read_attribute_this" (formula "11") (term "1"))
 (builtin "One Step Simplification" (formula "11"))
(rule "assignmentSubtractionInt" (formula "11") (term "1"))
 (builtin "One Step Simplification" (formula "11"))
(rule "translateJavaSubInt" (formula "11") (term "0,1,0"))
(rule "expand_subJint" (formula "11") (term "0,1,0"))
(rule "polySimp_elimSub" (formula "11") (term "0,0,1,0"))
(rule "mul_literals" (formula "11") (term "1,0,0,1,0"))
(rule "polySimp_addComm0" (formula "11") (term "0,0,1,0"))
(rule "expand_moduloInteger" (formula "11") (term "0,1,0"))
(rule "replace_int_RANGE" (formula "11") (term "1,1,0,1,0"))
(rule "replace_int_HALFRANGE" (formula "11") (term "0,0,1,0,1,0"))
(rule "replace_int_MIN" (formula "11") (term "0,0,1,0"))
(rule "polySimp_addAssoc" (formula "11") (term "0,1,0,1,0"))
(rule "add_literals" (formula "11") (term "0,0,1,0,1,0"))
(rule "arrayLengthIsAnInt" (formula "7") (term "1"))
(rule "expand_inInt" (formula "7"))
(rule "replace_int_MAX" (formula "7") (term "1,0"))
(rule "replace_int_MIN" (formula "7") (term "0,1"))
(rule "andLeft" (formula "7"))
(rule "inEqSimp_commuteLeq" (formula "8"))
(rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "5"))
(rule "leq_literals" (formula "8") (term "0"))
 (builtin "One Step Simplification" (formula "8"))
(rule "true_left" (formula "8"))
(rule "arrayLengthNotNegative" (formula "8") (term "1"))
(rule "loopScopeInvDia" (formula "12") (term "1") (newnames "i_0,o,f") (inst "#x=x_1") (inst "#variant=x") (inst "#permissionsBefore_LOOP=h_2") (inst "#savedHeapBefore_LOOP=h_1") (inst "#heapBefore_LOOP=h") (inst "anon_permissions_LOOP=anon_permissions_LOOP_0") (inst "anon_savedHeap_LOOP=anon_savedHeap_LOOP_0") (inst "anon_heap_LOOP=anon_heap_LOOP_0"))
(branch "Invariant Initially Valid"
    (builtin "One Step Simplification" (formula "12"))
   (rule "expand_inInt" (formula "12") (term "1,0,0,1"))
   (rule "replace_int_MAX" (formula "12") (term "1,0,1,0,0,1"))
   (rule "replace_int_MIN" (formula "12") (term "0,1,1,0,0,1"))
   (rule "translateJavaSubInt" (formula "12") (term "1,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,1"))
   (rule "polySimp_addComm1" (formula "12") (term "0,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0,1"))
   (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,1,0"))
   (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0,1"))
   (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0"))
   (rule "mul_literals" (formula "12") (term "1,0,0,0"))
   (rule "polySimp_addComm1" (formula "12") (term "0,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,0"))
   (rule "mod_axiom" (formula "12") (term "1,0,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0,0,1"))
   (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0,0,1"))
   (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0,0,1"))
   (rule "mod_axiom" (formula "12") (term "1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,1,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0"))
   (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,0,1,0"))
   (rule "add_zero_left" (formula "12") (term "0,0,0,1,0"))
   (rule "polySimp_pullOutFactor2" (formula "12") (term "0,0,1,0"))
   (rule "add_literals" (formula "12") (term "1,0,0,1,0"))
   (rule "times_zero_1" (formula "12") (term "0,0,1,0"))
   (rule "add_zero_left" (formula "12") (term "0,1,0"))
   (rule "mod_axiom" (formula "12") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
   (rule "add_zero_left" (formula "12") (term "0,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "12") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_invertInEq0" (formula "12") (term "1,0"))
   (rule "times_zero_2" (formula "12") (term "1,1,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "12") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0"))
   (rule "elimGcdGeq" (formula "12") (term "1,0") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=div(add(Z(7(4(6(3(8(4(7(4(1(2(#))))))))))),
        int::select(heap, self, BitSet::$wordsInUse)),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,1,0"))
   (rule "add_zero_right" (formula "12") (term "0,0,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,1,0"))
   (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,1,0"))
   (rule "times_zero_1" (formula "12") (term "0,0,0,1,0,1,0"))
   (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,1,0"))
   (rule "sub_literals" (formula "12") (term "0,0,0,0,0,0,1,0"))
   (rule "add_zero_left" (formula "12") (term "0,0,1,0,1,0"))
   (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,1,0"))
   (rule "polySimp_pullOutFactor0" (formula "12") (term "0,1,0,1,0"))
   (rule "add_literals" (formula "12") (term "1,0,1,0,1,0"))
   (rule "times_zero_1" (formula "12") (term "0,1,0,1,0"))
   (rule "leq_literals" (formula "12") (term "1,0,1,0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0,1,0"))
   (rule "add_literals" (formula "12") (term "1,1,0,0,1,0"))
   (rule "times_zero_1" (formula "12") (term "1,0,0,1,0"))
   (rule "add_zero_right" (formula "12") (term "0,0,1,0"))
   (rule "qeq_literals" (formula "12") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "expand_subJint" (formula "12") (term "1,1,0,0,0,1"))
   (rule "polySimp_elimSub" (formula "12") (term "0,1,1,0,0,0,1"))
   (rule "mul_literals" (formula "12") (term "1,0,1,1,0,0,0,1"))
   (rule "polySimp_addComm0" (formula "12") (term "0,1,1,0,0,0,1"))
   (rule "expand_moduloInteger" (formula "12") (term "1,1,0,0,0,1"))
   (rule "replace_int_RANGE" (formula "12") (term "1,1,1,1,0,0,0,1"))
   (rule "replace_int_HALFRANGE" (formula "12") (term "0,0,1,1,1,0,0,0,1"))
   (rule "replace_int_MIN" (formula "12") (term "0,1,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,1,0,0,0,1"))
   (rule "add_literals" (formula "12") (term "0,0,1,1,1,0,0,0,1"))
   (rule "mod_axiom" (formula "12") (term "1,1,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "12") (term "1,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,0,0,0,1"))
   (rule "add_literals" (formula "12") (term "0,0,1,1,0,0,0,1"))
   (rule "nnf_imp2or" (formula "12") (term "0,1"))
   (rule "nnf_notAnd" (formula "12") (term "0,0,1"))
   (rule "nnf_notAnd" (formula "12") (term "1,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "12") (term "0,1,0,0,1"))
   (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0,0,1"))
   (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,0,0,1"))
   (rule "mul_literals" (formula "12") (term "1,0,1,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "12") (term "1,1,0,0,1"))
   (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0,1"))
   (rule "add_literals" (formula "12") (term "0,0,1,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0,0,1"))
   (rule "mul_literals" (formula "12") (term "1,1,1,0,0,1"))
   (rule "nnf_notAnd" (formula "12") (term "0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0,0,1"))
   (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0,0,1"))
   (rule "add_zero_left" (formula "12") (term "0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,1"))
   (rule "polySimp_mulAssoc" (formula "12") (term "0,1,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0,1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "12") (term "0,1,1,0,0,0,1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "commute_and" (formula "12"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "0,1") (ifseqformula "1"))
   (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "div_axiom" (formula "13") (term "0,0") (inst "quotient=quotient_0"))
   (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
   (rule "qeq_literals" (formula "1") (term "0,1,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "equal_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
   (rule "add_literals" (formula "3") (term "0,0,1"))
   (rule "polySimp_addComm1" (formula "3") (term "1"))
   (rule "add_literals" (formula "3") (term "0,1"))
   (rule "inEqSimp_homoInEq0" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "inEqSimp_homoInEq1" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "applyEq" (formula "16") (term "0,0,1") (ifseqformula "1"))
   (rule "inEqSimp_commuteLeq" (formula "16") (term "1"))
   (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1"))
   (rule "polySimp_rightDist" (formula "2") (term "1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
   (rule "mul_literals" (formula "2") (term "0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1"))
   (rule "polySimp_rightDist" (formula "3") (term "1"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
   (rule "mul_literals" (formula "3") (term "0,1"))
   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "3"))
   (rule "times_zero_1" (formula "9") (term "0,0"))
   (rule "add_zero_left" (formula "9") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9"))
   (rule "mul_literals" (formula "9") (term "1"))
   (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "9") (term "0,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
   (rule "add_literals" (formula "9") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0"))
   (rule "leq_literals" (formula "9") (term "0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "9"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "inEqSimp_geqRight" (formula "17"))
   (rule "polySimp_mulAssoc" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "1"))
   (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
   (rule "mul_literals" (formula "4") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
   (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
   (rule "add_literals" (formula "4") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
   (rule "add_literals" (formula "4") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "4") (term "1,0,0"))
   (rule "add_zero_right" (formula "4") (term "0,0"))
   (rule "qeq_literals" (formula "4") (term "0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "13"))
   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
   (rule "mul_literals" (formula "3") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1"))
   (rule "polySimp_rightDist" (formula "3") (term "1"))
   (rule "mul_literals" (formula "3") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
   (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
   (rule "times_zero_1" (formula "11") (term "0,0"))
   (rule "add_zero_left" (formula "11") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11"))
   (rule "mul_literals" (formula "11") (term "1"))
   (rule "elimGcdGeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "11") (term "0,0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
   (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
   (rule "add_literals" (formula "11") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0"))
   (rule "leq_literals" (formula "11") (term "0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "11"))
   (rule "leq_literals" (formula "10") (term "0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "12"))
   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
   (rule "mul_literals" (formula "3") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "add_literals" (formula "3") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "inEqSimp_contradInEq5" (formula "3") (ifseqformula "11"))
   (rule "mul_literals" (formula "3") (term "1,1,0"))
   (rule "greater_literals" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "qeq_literals" (formula "3") (term "0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "closeFalse" (formula "3"))
)
(branch "Invariant Preserved and Used"
    (builtin "One Step Simplification" (formula "13"))
   (rule "expand_inInt" (formula "13") (term "1,0,0,1,0"))
   (rule "expand_inInt" (formula "13") (term "1,0,0,1,0,0,1,1,0,1,1"))
   (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,1,0"))
   (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,1,0"))
   (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,1,0,0,1,1,0,1,1"))
   (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,1,0,0,1,1,0,1,1"))
   (rule "impRight" (formula "13"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "16") (term "0,0,1,0,1,1,0,1"))
   (rule "translateJavaSubInt" (formula "16") (term "1,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "translateJavaAddInt" (formula "16") (term "0,1,1,1,0,1"))
   (rule "translateJavaAddInt" (formula "16") (term "0,1,1,0"))
   (rule "translateJavaSubInt" (formula "3") (term "1,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,0,1,1,0,1"))
   (rule "polySimp_addComm1" (formula "16") (term "0,1,0,0,0,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addComm1" (formula "16") (term "0,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "16") (term "1,1,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,0,1,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "3") (term "1,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "1,0,0,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,0,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "16") (term "0,1,0,0,0,1,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "16") (term "0,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "3") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "12"))
   (rule "polySimp_rightDist" (formula "2") (term "0,0"))
   (rule "mul_literals" (formula "2") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1"))
   (rule "polySimp_rightDist" (formula "2") (term "1"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
   (rule "mul_literals" (formula "2") (term "0,1"))
   (rule "polySimp_elimOne" (formula "2") (term "1,1"))
   (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "12"))
   (rule "polySimp_rightDist" (formula "2") (term "0,0"))
   (rule "mul_literals" (formula "2") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "expand_subJint" (formula "18") (term "1,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_elimSub" (formula "18") (term "0,1,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "mul_literals" (formula "18") (term "1,0,1,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "18") (term "0,1,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "expand_addJint" (formula "18") (term "0,1,1,1,0,1"))
   (rule "polySimp_addComm0" (formula "18") (term "0,0,1,1,1,0,1"))
   (rule "expand_addJint" (formula "18") (term "0,1,1,0"))
   (rule "polySimp_addComm0" (formula "18") (term "0,0,1,1,0"))
   (rule "expand_subJint" (formula "5") (term "1,1,0,0,0"))
   (rule "polySimp_elimSub" (formula "5") (term "0,1,1,0,0,0"))
   (rule "mul_literals" (formula "5") (term "1,0,1,1,0,0,0"))
   (rule "polySimp_addComm0" (formula "5") (term "0,1,1,0,0,0"))
   (rule "expand_moduloInteger" (formula "18") (term "1,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "replace_int_RANGE" (formula "18") (term "1,1,1,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "replace_int_HALFRANGE" (formula "18") (term "0,0,1,1,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "replace_int_MIN" (formula "18") (term "0,1,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "add_literals" (formula "18") (term "0,0,1,1,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "expand_moduloInteger" (formula "18") (term "0,1,1,1,0,1"))
   (rule "replace_int_RANGE" (formula "18") (term "1,1,0,1,1,1,0,1"))
   (rule "replace_int_HALFRANGE" (formula "18") (term "0,0,1,0,1,1,1,0,1"))
   (rule "replace_int_MIN" (formula "18") (term "0,0,1,1,1,0,1"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,1,0,1,1,1,0,1"))
   (rule "add_literals" (formula "18") (term "0,0,1,0,1,1,1,0,1"))
   (rule "polyMod_pullOut" (formula "18") (term "1,0,1,1,1,0,1") (inst "polyDivCoeff=Z(1(#))"))
   (rule "mul_literals" (formula "18") (term "0,1,0,1,0,1,1,1,0,1"))
   (rule "mul_literals" (formula "18") (term "1,0,1,0,1,1,1,0,1"))
   (rule "polySimp_addComm1" (formula "18") (term "0,1,0,1,1,1,0,1"))
   (rule "add_literals" (formula "18") (term "0,0,1,0,1,1,1,0,1"))
   (rule "expand_moduloInteger" (formula "18") (term "0,1,1,0"))
   (rule "replace_int_RANGE" (formula "18") (term "1,1,0,1,1,0"))
   (rule "replace_int_HALFRANGE" (formula "18") (term "0,0,1,0,1,1,0"))
   (rule "replace_int_MIN" (formula "18") (term "0,0,1,1,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,1,0,1,1,0"))
   (rule "add_literals" (formula "18") (term "0,0,1,0,1,1,0"))
   (rule "polyMod_pullOut" (formula "18") (term "1,0,1,1,0") (inst "polyDivCoeff=Z(1(#))"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,1,1,0"))
   (rule "mul_literals" (formula "18") (term "1,0,1,0,1,1,0"))
   (rule "polySimp_addComm1" (formula "18") (term "0,1,0,1,1,0"))
   (rule "add_literals" (formula "18") (term "0,0,1,0,1,1,0"))
   (rule "expand_moduloInteger" (formula "5") (term "1,1,0,0,0"))
   (rule "replace_int_RANGE" (formula "5") (term "1,1,1,1,0,0,0"))
   (rule "replace_int_HALFRANGE" (formula "5") (term "0,0,1,1,1,0,0,0"))
   (rule "replace_int_MIN" (formula "5") (term "0,1,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,1,0,0,0"))
   (rule "add_literals" (formula "5") (term "0,0,1,1,1,0,0,0"))
   (rule "mod_axiom" (formula "5") (term "1,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "5") (term "1,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "5") (term "0,1,1,0,0,0"))
   (rule "add_literals" (formula "5") (term "0,0,1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "5") (term "0"))
   (rule "nnf_notAnd" (formula "5") (term "0,0"))
   (rule "nnf_notAnd" (formula "5") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "5") (term "0,1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "5") (term "0,0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,1,0,0,0"))
   (rule "add_literals" (formula "5") (term "0,0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "5") (term "0,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0"))
   (rule "polySimp_mulAssoc" (formula "5") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "5") (term "0,1,1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0,0"))
   (rule "add_literals" (formula "5") (term "0,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "5") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "5") (term "1,0,0"))
   (rule "inEqSimp_notGeq" (formula "5") (term "1,1,0,0"))
   (rule "mul_literals" (formula "5") (term "1,0,0,1,1,0,0"))
   (rule "add_literals" (formula "5") (term "0,0,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,1,0,0"))
   (rule "mul_literals" (formula "5") (term "1,1,1,0,0"))
   (rule "inEqSimp_notLeq" (formula "5") (term "0,1,0,0"))
   (rule "mul_literals" (formula "5") (term "1,0,0,0,1,0,0"))
   (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,1,0,0"))
   (rule "mul_literals" (formula "5") (term "1,0,1,0,0"))
   (rule "nnf_imp2or" (formula "18") (term "0,1,0,0,1,1,0,1"))
   (rule "nnf_notAnd" (formula "18") (term "0,0,1,0,0,1,1,0,1"))
   (rule "nnf_notAnd" (formula "18") (term "1,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_notGeq" (formula "18") (term "1,1,0,0,1,0,0,1,1,0,1"))
   (rule "mul_literals" (formula "18") (term "1,0,0,1,1,0,0,1,0,0,1,1,0,1"))
   (rule "add_literals" (formula "18") (term "0,0,1,1,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,1,0,0,1,0,0,1,1,0,1"))
   (rule "mul_literals" (formula "18") (term "1,1,1,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_notLeq" (formula "18") (term "0,1,0,0,1,0,0,1,1,0,1"))
   (rule "mul_literals" (formula "18") (term "1,0,0,0,1,0,0,1,0,0,1,1,0,1"))
   (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,1,0,0,1,0,0,1,1,0,1"))
   (rule "mul_literals" (formula "18") (term "1,0,1,0,0,1,0,0,1,1,0,1"))
   (rule "nnf_notAnd" (formula "18") (term "0,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "add_literals" (formula "18") (term "0,0,0,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "add_zero_left" (formula "18") (term "0,0,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0,1,0,0,1,1,0,1"))
   (rule "commute_or_2" (formula "5") (term "0,0"))
   (rule "commute_or" (formula "5") (term "0,0,0"))
   (rule "commute_or" (formula "5") (term "0,0,0,0"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "0,1") (ifseqformula "7"))
   (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "18"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "ifElseUnfold" (formula "19") (term "1") (inst "#boolv=x_2"))
   (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_2"))
   (rule "greater_equal_than_comparison_simple" (formula "19") (term "1"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "div_axiom" (formula "5") (term "0,1,1,1,0,0") (inst "quotient=quotient_0"))
   (rule "qeq_literals" (formula "5") (term "0,1,1"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "mul_literals" (formula "5") (term "1,1,1,1"))
   (rule "equal_literals" (formula "5") (term "0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
   (rule "add_literals" (formula "7") (term "0,0,1"))
   (rule "polySimp_addComm1" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "inEqSimp_homoInEq0" (formula "6"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
   (rule "polySimp_addComm1" (formula "6") (term "0"))
   (rule "inEqSimp_homoInEq1" (formula "7"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
   (rule "polySimp_addComm1" (formula "7") (term "0"))
   (rule "applyEq" (formula "8") (term "0,1,1,1,0,0") (ifseqformula "5"))
   (rule "polySimp_addComm0" (formula "8") (term "1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6"))
   (rule "polySimp_mulComm0" (formula "6") (term "1"))
   (rule "polySimp_rightDist" (formula "6") (term "1"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
   (rule "mul_literals" (formula "6") (term "0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "7"))
   (rule "polySimp_mulComm0" (formula "7") (term "1"))
   (rule "polySimp_rightDist" (formula "7") (term "1"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
   (rule "mul_literals" (formula "7") (term "0,1"))
   (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "7"))
   (rule "times_zero_1" (formula "15") (term "0,0"))
   (rule "add_zero_left" (formula "15") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15"))
   (rule "mul_literals" (formula "15") (term "1"))
   (rule "elimGcdGeq_antec" (formula "15") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
   (rule "leq_literals" (formula "15") (term "0,0"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0"))
   (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0"))
   (rule "polySimp_addLiterals" (formula "15") (term "0,0,0,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
   (rule "add_literals" (formula "15") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "15") (term "1,0,0"))
   (rule "add_zero_right" (formula "15") (term "0,0"))
   (rule "leq_literals" (formula "15") (term "0"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "7"))
   (rule "polySimp_rightDist" (formula "4") (term "0,0"))
   (rule "mul_literals" (formula "4") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "4") (term "0"))
   (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
   (rule "add_literals" (formula "4") (term "0,0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "4"))
   (rule "polySimp_mulLiterals" (formula "4") (term "0"))
   (rule "polySimp_elimOne" (formula "4") (term "0"))
   (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "20"))
   (rule "polySimp_rightDist" (formula "7") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
   (rule "mul_literals" (formula "7") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "7"))
   (rule "polySimp_mulComm0" (formula "7") (term "1"))
   (rule "polySimp_rightDist" (formula "7") (term "1"))
   (rule "mul_literals" (formula "7") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
   (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "4"))
   (rule "mul_literals" (formula "1") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "inEqSimp_subsumption6" (formula "1") (ifseqformula "18"))
   (rule "times_zero_1" (formula "1") (term "1,1,0"))
   (rule "greater_literals" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "leq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "19"))
   (rule "polySimp_rightDist" (formula "7") (term "0,0"))
   (rule "mul_literals" (formula "7") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "7") (term "0"))
   (rule "add_literals" (formula "7") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "7"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0"))
   (rule "elimGcdLeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0"))
   (rule "neg_literal" (formula "7") (term "0,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "7") (term "0,0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
   (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0"))
   (rule "add_literals" (formula "7") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
   (rule "add_literals" (formula "7") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0"))
   (rule "qeq_literals" (formula "7") (term "0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "inEqSimp_antiSymm" (formula "18") (ifseqformula "7"))
   (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "18"))
   (rule "qeq_literals" (formula "19"))
   (rule "true_left" (formula "19"))
   (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "18"))
   (rule "times_zero_2" (formula "4") (term "1,1"))
   (rule "add_zero_right" (formula "4") (term "1"))
   (rule "applyEqRigid" (formula "8") (term "0,1,1") (ifseqformula "18"))
   (rule "times_zero_2" (formula "8") (term "1,1"))
   (rule "add_zero_right" (formula "8") (term "1"))
   (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "18"))
   (rule "leq_literals" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "applyEq" (formula "8") (term "0,1,1") (ifseqformula "17"))
   (rule "times_zero_2" (formula "8") (term "1,1"))
   (rule "add_zero_right" (formula "8") (term "1"))
   (rule "applyEq" (formula "9") (term "0,1,1") (ifseqformula "17"))
   (rule "times_zero_2" (formula "9") (term "1,1"))
   (rule "add_zero_right" (formula "9") (term "1"))
   (rule "applyEqRigid" (formula "10") (term "0,0,1,1,0,0") (ifseqformula "17"))
   (rule "times_zero_2" (formula "10") (term "0,1,1,0,0"))
   (rule "add_zero_left" (formula "10") (term "1,1,0,0"))
   (rule "applyEq" (formula "6") (term "1") (ifseqformula "17"))
   (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "16"))
   (rule "leq_literals" (formula "7") (term "0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "2"))
   (rule "leq_literals" (formula "4") (term "0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "16"))
   (rule "leq_literals" (formula "6") (term "0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "6"))
   (rule "polySimp_rightDist" (formula "4") (term "0,0"))
   (rule "mul_literals" (formula "4") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "4") (term "0"))
   (rule "add_literals" (formula "4") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "4"))
   (rule "polySimp_mulLiterals" (formula "4") (term "0"))
   (rule "polySimp_elimOne" (formula "4") (term "0"))
   (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "2"))
   (rule "leq_literals" (formula "4") (term "0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "ifElseSplit" (formula "22"))
   (branch "if x_2 true"
       (builtin "One Step Simplification" (formula "1"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
      (rule "leq_literals" (formula "2") (term "0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "ifUnfold" (formula "22") (term "1") (inst "#boolv=x_2"))
      (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_3"))
      (rule "compound_inequality_comparison_1" (formula "22") (term "1") (inst "#v0=x_4"))
      (rule "variableDeclarationAssign" (formula "22") (term "1"))
      (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_4"))
      (rule "eval_order_array_access4" (formula "22") (term "1") (inst "#v0=x_arr"))
      (rule "variableDeclarationAssign" (formula "22") (term "1"))
      (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_arr"))
      (rule "assignment_read_attribute_this" (formula "22") (term "1"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "assignment_array2" (formula "22") (term "1"))
      (branch "Normal Execution (x_arr != null)"
          (builtin "One Step Simplification" (formula "23"))
          (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "21")))
         (rule "orRight" (formula "22"))
         (rule "inEqSimp_ltRight" (formula "23"))
         (rule "times_zero_1" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_leqRight" (formula "22"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inequality_comparison_simple" (formula "22") (term "1"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "ifSplit" (formula "22"))
         (branch "if x_3 true"
             (builtin "One Step Simplification" (formula "23"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "blockBreakNoLabel" (formula "23") (term "1"))
            (rule "lsLblBreak" (formula "23") (term "1"))
            (rule "assignment" (formula "23") (term "1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "break" (formula "23") (term "1"))
            (rule "blockEmpty" (formula "23") (term "1"))
            (rule "eval_order_access4" (formula "23") (term "1") (inst "#v1=x") (inst "#v0=b"))
            (rule "variableDeclarationAssign" (formula "23") (term "1"))
            (rule "variableDeclaration" (formula "23") (term "1") (newnames "b"))
            (rule "assignment" (formula "23") (term "1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "variableDeclarationAssign" (formula "23") (term "1"))
            (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_5"))
            (rule "assignmentAdditionInt" (formula "23") (term "1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "translateJavaAddInt" (formula "23") (term "0,1,0"))
            (rule "assignment_write_attribute" (formula "23") (term "1"))
            (branch "Normal Execution (b != null)"
                (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "21")))
                (builtin "One Step Simplification" (formula "24"))
               (rule "false_right" (formula "23"))
               (rule "expand_addJint" (formula "23") (term "3,0,1,0"))
               (rule "polySimp_addComm0" (formula "23") (term "0,3,0,1,0"))
               (rule "expand_moduloInteger" (formula "23") (term "3,0,1,0"))
               (rule "replace_int_HALFRANGE" (formula "23") (term "0,0,1,3,0,1,0"))
               (rule "replace_int_MIN" (formula "23") (term "0,3,0,1,0"))
               (rule "replace_int_RANGE" (formula "23") (term "1,1,3,0,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,1,3,0,1,0"))
               (rule "add_literals" (formula "23") (term "0,0,1,3,0,1,0"))
               (rule "polyMod_pullOut" (formula "23") (term "1,3,0,1,0") (inst "polyDivCoeff=Z(1(#))"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,3,0,1,0"))
               (rule "mul_literals" (formula "23") (term "1,0,1,3,0,1,0"))
               (rule "polySimp_addComm1" (formula "23") (term "0,1,3,0,1,0"))
               (rule "add_literals" (formula "23") (term "0,0,1,3,0,1,0"))
               (rule "methodCallEmpty" (formula "23") (term "1"))
               (rule "tryEmpty" (formula "23") (term "1"))
               (rule "emptyModality" (formula "23") (term "1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "eqSymm" (formula "23") (term "1,0,0,1"))
               (rule "dismissNonSelectedField" (formula "23") (term "0,1,0,1,1,1,0"))
               (rule "dismissNonSelectedField" (formula "23") (term "1,0,0,1,0,1,1,0"))
               (rule "dismissNonSelectedField" (formula "23") (term "0,1,1,0,0,0,1,1,1,0"))
               (rule "dismissNonSelectedField" (formula "23") (term "0,1,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "23") (term "1,0,1,0,1,1,1,0"))
               (rule "dismissNonSelectedField" (formula "23") (term "0,0,1,0,1,1,0"))
               (rule "inEqSimp_commuteGeq" (formula "23") (term "0,0"))
               (rule "mod_axiom" (formula "23") (term "1,3,0,1,1,0,0,0,0,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,3,0,1,1,0,0,0,0,1,1,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "3,0,1,1,0,0,0,0,1,1,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,3,0,1,1,0,0,0,0,1,1,1,0"))
               (rule "add_literals" (formula "23") (term "0,0,3,0,1,1,0,0,0,0,1,1,1,0"))
               (rule "mod_axiom" (formula "23") (term "1,3,0,0,1,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,3,0,0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "3,0,0,1,0,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,3,0,0,1,0,1,0"))
               (rule "add_literals" (formula "23") (term "0,0,3,0,0,1,0,1,0"))
               (rule "mod_axiom" (formula "23") (term "1,3,0,0,0,0,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,3,0,0,0,0,0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "3,0,0,0,0,0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,3,0,0,0,0,0,1,1,0"))
               (rule "add_literals" (formula "23") (term "0,0,3,0,0,0,0,0,1,1,0"))
               (rule "mod_axiom" (formula "23") (term "1,3,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,3,0,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "3,0,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,3,0,0,0,0,1,0"))
               (rule "add_literals" (formula "23") (term "0,0,3,0,0,0,0,1,0"))
               (rule "mod_axiom" (formula "23") (term "1,3,0,0,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,3,0,0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "23") (term "3,0,0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,3,0,0,1,0,0,1"))
               (rule "add_literals" (formula "23") (term "0,0,3,0,0,1,0,0,1"))
               (rule "mod_axiom" (formula "23") (term "1,3,0,1,0,1,0,2,0,0,1,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,3,0,1,0,1,0,2,0,0,1,0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "3,0,1,0,1,0,2,0,0,1,0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,3,0,1,0,1,0,2,0,0,1,0,1,1,0"))
               (rule "add_literals" (formula "23") (term "0,0,3,0,1,0,1,0,2,0,0,1,0,1,1,0"))
               (rule "mod_axiom" (formula "23") (term "1,3,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,3,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "3,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,3,0,0,0,0"))
               (rule "add_literals" (formula "23") (term "0,0,3,0,0,0,0"))
               (rule "pullOutSelect" (formula "23") (term "1,1,0,0,0,0,1,1,1,0") (inst "selectSK=BitSet_wordsInUse_0"))
               (rule "applyEq" (formula "24") (term "0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "24") (term "1,0,1,0,2,0,0,1,0,1,1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "24") (term "0,0,0,0,1,1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "24") (term "0,0,0,1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "24") (term "0,1,0,1,0") (ifseqformula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "24") (term "1,1,0,0,0,0,1,1,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "24") (term "0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "24") (term "1,0,1,0,2,0,0,1,0,1,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "24") (term "0,0,0,0,1,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "24") (term "0,0,0,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "24") (term "0,1,0,1,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "polySimp_addAssoc" (formula "23") (term "1,0,0,0,0,1,1,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,1,0,2,0,0,1,0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,1,0,0,0,0,1,1,1,0"))
               (rule "add_literals" (formula "23") (term "0,0,1,0,0,0,0,1,1,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,2,0,0,1,0,1,1,0"))
               (rule "add_literals" (formula "23") (term "0,0,0,1,0,2,0,0,1,0,1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,1,0"))
               (rule "polySimp_sepNegMonomial" (formula "23") (term "0,0,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,0,1,1,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "23") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "0,0,0,1,0"))
               (rule "polyMod_pullOut" (formula "23") (term "1,0,2,0,0,1,0,1,1,0") (inst "polyDivCoeff=mul(div(add(Z(neglit(7(4(6(3(8(4(7(4(1(2(#)))))))))))),
            i_0),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,2,0,0,1,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,2,0,0,1,0,1,1,0"))
               (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,1,0,2,0,0,1,0,1,1,0"))
               (rule "add_literals" (formula "23") (term "1,1,0,1,0,2,0,0,1,0,1,1,0"))
               (rule "times_zero_1" (formula "23") (term "1,0,1,0,2,0,0,1,0,1,1,0"))
               (rule "add_zero_right" (formula "23") (term "0,1,0,2,0,0,1,0,1,1,0"))
               (rule "mod_axiom" (formula "23") (term "1,0,2,0,0,1,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,2,0,0,1,0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,2,0,0,1,0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,0,2,0,0,1,0,1,1,0"))
               (rule "add_literals" (formula "23") (term "0,0,0,2,0,0,1,0,1,1,0"))
               (rule "polyDiv_pullOut" (formula "23") (term "0,1,0,2,0,0,1,0,1,1,0") (inst "polyDivCoeff=Z(neglit(1(#)))"))
               (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,2,0,1,0,2,0,0,1,0,1,1,0"))
               (rule "equal_literals" (formula "23") (term "0,0,1,0,2,0,0,1,0,1,1,0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,2,0,0,1,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,2,0,0,1,0,1,1,0"))
               (rule "polySimp_addComm0" (formula "23") (term "1,1,0,2,0,0,1,0,1,1,0"))
               (rule "polySimp_addComm1" (formula "23") (term "0,1,1,1,0,2,0,0,1,0,1,1,0"))
               (rule "add_literals" (formula "23") (term "0,0,1,1,1,0,2,0,0,1,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "23") (term "1,0,2,0,0,1,0,1,1,0"))
               (rule "mul_literals" (formula "23") (term "0,1,0,2,0,0,1,0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "23") (term "0,2,0,0,1,0,1,1,0"))
               (rule "polySimp_addComm1" (formula "23") (term "0,0,2,0,0,1,0,1,1,0"))
               (rule "add_literals" (formula "23") (term "0,0,0,2,0,0,1,0,1,1,0"))
               (rule "add_zero_left" (formula "23") (term "0,0,2,0,0,1,0,1,1,0"))
               (rule "div_axiom" (formula "23") (term "0,0,0,0,0,1,1,0") (inst "quotient=quotient_1"))
               (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
               (rule "equal_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "qeq_literals" (formula "1") (term "0,1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
               (rule "add_literals" (formula "3") (term "0,0,1"))
               (rule "polySimp_addComm1" (formula "3") (term "1"))
               (rule "add_literals" (formula "3") (term "0,1"))
               (rule "inEqSimp_homoInEq0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "inEqSimp_homoInEq1" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "applyEq" (formula "26") (term "0,1,1,0,0") (ifseqformula "1"))
               (rule "polySimp_addComm1" (formula "26") (term "1,0,0"))
               (rule "applyEq" (formula "26") (term "0,0,0,0,0,1,1,0") (ifseqformula "1"))
               (rule "polySimp_homoEq" (formula "26") (term "0,0,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0,0,1,1,0"))
               (rule "polySimp_addComm1" (formula "26") (term "0,0,0,0,1,1,0"))
               (rule "applyEq" (formula "26") (term "0,1,1,1,0,1,0") (ifseqformula "1"))
               (rule "polySimp_addComm1" (formula "26") (term "1,1,0,1,0"))
               (rule "applyEq" (formula "26") (term "0,0,0,0,1,0") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq0" (formula "26") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "26") (term "0,0,0,1,0"))
               (rule "applyEqRigid" (formula "26") (term "0,1,1,0,0,0,0,1,1,1,0") (ifseqformula "1"))
               (rule "polySimp_addComm1" (formula "26") (term "1,0,0,0,0,1,1,1,0"))
               (rule "applyEq" (formula "26") (term "0,1,3,0,0,1,0,0,1") (ifseqformula "1"))
               (rule "polySimp_addComm1" (formula "26") (term "3,0,0,1,0,0,1"))
               (rule "polySimp_sepPosMonomial" (formula "26") (term "0,0,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,1,1,0"))
               (rule "mul_literals" (formula "26") (term "0,1,0,0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "mul_literals" (formula "3") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0"))
               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "3"))
               (rule "times_zero_1" (formula "4") (term "0,0"))
               (rule "add_zero_left" (formula "4") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1"))
               (rule "elimGcdGeq_antec" (formula "4") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
               (rule "leq_literals" (formula "4") (term "0,0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "4") (term "0,0,0,0"))
               (rule "add_literals" (formula "4") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
               (rule "add_literals" (formula "4") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "4") (term "1,0,0"))
               (rule "add_zero_right" (formula "4") (term "0,0"))
               (rule "leq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "6"))
               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
               (rule "mul_literals" (formula "2") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "2") (term "0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
               (rule "neg_literal" (formula "2") (term "0,0,0,0,0,0"))
               (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
               (rule "add_literals" (formula "2") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0"))
               (rule "qeq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "2"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "5"))
               (rule "leq_literals" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "applyEq" (formula "2") (term "0,1,1") (ifseqformula "4"))
               (rule "mul_literals" (formula "2") (term "1,1"))
               (rule "add_literals" (formula "2") (term "1"))
               (rule "applyEqRigid" (formula "28") (term "0,1,1,0,0,1,0") (ifseqformula "4"))
               (rule "mul_literals" (formula "28") (term "1,1,0,0,1,0"))
               (rule "add_literals" (formula "28") (term "1,0,0,1,0"))
               (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "applyEq" (formula "3") (term "0,1,1") (ifseqformula "4"))
               (rule "mul_literals" (formula "3") (term "1,1"))
               (rule "add_literals" (formula "3") (term "1"))
               (rule "applyEqRigid" (formula "26") (term "0,1,0,3,0,0,1,0,0,1") (ifseqformula "3"))
               (rule "mul_literals" (formula "26") (term "1,0,3,0,0,1,0,0,1"))
               (rule "add_literals" (formula "26") (term "0,3,0,0,1,0,0,1"))
               (rule "applyEqRigid" (formula "26") (term "0,1,1,0,0,0,1,1,0") (ifseqformula "3"))
               (rule "mul_literals" (formula "26") (term "1,1,0,0,0,1,1,0"))
               (rule "add_literals" (formula "26") (term "1,0,0,0,1,1,0"))
               (rule "applyEq" (formula "26") (term "0,1,0,1,0,0,0,0,1,1,1,0") (ifseqformula "3"))
               (rule "mul_literals" (formula "26") (term "1,0,1,0,0,0,0,1,1,1,0"))
               (rule "add_literals" (formula "26") (term "0,1,0,0,0,0,1,1,1,0"))
               (rule "add_zero_left" (formula "26") (term "1,0,0,0,0,1,1,1,0"))
               (rule "applyEq" (formula "26") (term "0,1,0,1,1,0,1,0") (ifseqformula "3"))
               (rule "mul_literals" (formula "26") (term "1,0,1,1,0,1,0"))
               (rule "add_literals" (formula "26") (term "0,1,1,0,1,0"))
               (rule "replace_known_left" (formula "26") (term "1,0,1,0") (ifseqformula "6"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "3"))
               (rule "applyEqRigid" (formula "26") (term "0,1,0,1,0,0") (ifseqformula "3"))
               (rule "mul_literals" (formula "26") (term "1,0,1,0,0"))
               (rule "add_literals" (formula "26") (term "0,1,0,0"))
               (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "inEqSimp_contradEq7" (formula "26") (term "0,0,0,1,0") (ifseqformula "4"))
               (rule "add_zero_left" (formula "26") (term "0,0,0,0,0,1,0"))
               (rule "mul_literals" (formula "26") (term "0,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "26") (term "0,0,0,0,1,0"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "4"))
               (rule "leq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "inEqSimp_subsumption1" (formula "25") (term "0,0") (ifseqformula "3"))
               (rule "leq_literals" (formula "25") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "div_axiom" (formula "25") (term "0,1,0,2,0,0,0,0") (inst "quotient=quotient_2"))
               (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
               (rule "qeq_literals" (formula "1") (term "0,1,1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "equal_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
               (rule "add_literals" (formula "3") (term "0,0,1"))
               (rule "polySimp_addComm1" (formula "3") (term "1"))
               (rule "add_literals" (formula "3") (term "0,1"))
               (rule "inEqSimp_homoInEq0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "inEqSimp_homoInEq1" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "applyEqRigid" (formula "28") (term "0,1,0,2,0,0,0,0") (ifseqformula "1"))
               (rule "polySimp_addComm0" (formula "28") (term "0,2,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
               (rule "mul_literals" (formula "3") (term "0,1"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "7"))
               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
               (rule "mul_literals" (formula "2") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,1,0"))
               (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "2") (term "0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
               (rule "add_literals" (formula "2") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0"))
               (rule "qeq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "4"))
               (rule "times_zero_1" (formula "7") (term "0,0"))
               (rule "add_zero_left" (formula "7") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7"))
               (rule "mul_literals" (formula "7") (term "1"))
               (rule "elimGcdGeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "7") (term "0,0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0"))
               (rule "add_literals" (formula "7") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
               (rule "add_literals" (formula "7") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "7") (term "1,0,0"))
               (rule "add_zero_right" (formula "7") (term "0,0"))
               (rule "leq_literals" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "2"))
               (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "7"))
               (rule "times_zero_2" (formula "4") (term "1,1"))
               (rule "add_zero_right" (formula "4") (term "1"))
               (rule "applyEq" (formula "2") (term "0") (ifseqformula "7"))
               (rule "leq_literals" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
               (rule "qeq_literals" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "applyEqRigid" (formula "2") (term "0,1,1") (ifseqformula "6"))
               (rule "times_zero_2" (formula "2") (term "1,1"))
               (rule "add_zero_right" (formula "2") (term "1"))
               (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "6"))
               (rule "applyEqRigid" (formula "29") (term "0,0,0,2,0,0,0,0") (ifseqformula "6"))
               (rule "times_zero_2" (formula "29") (term "0,0,2,0,0,0,0"))
               (rule "add_zero_left" (formula "29") (term "0,2,0,0,0,0"))
               (rule "replace_known_right" (formula "29") (term "0,0,0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "7"))
               (rule "leq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "7"))
               (rule "leq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "andRight" (formula "27"))
               (branch "Case 1"
                  (rule "allRight" (formula "27") (inst "sk=i_1"))
                  (rule "orRight" (formula "27"))
                  (rule "orRight" (formula "27"))
                  (rule "orRight" (formula "28"))
                  (rule "orRight" (formula "27"))
                  (rule "inEqSimp_geqRight" (formula "29"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_leqRight" (formula "30"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_leqRight" (formula "29"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_geqRight" (formula "30"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                  (rule "mul_literals" (formula "3") (term "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "4"))
                  (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                  (rule "mul_literals" (formula "2") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "24"))
                  (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                  (rule "mul_literals" (formula "1") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "1"))
                  (rule "leq_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "3"))
                  (rule "leq_literals" (formula "11") (term "0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "allLeft" (formula "15") (inst "t=i_1"))
                  (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "32"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "0,0,0") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "15") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_contradInEq0" (formula "15") (term "0,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "15") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0,0"))
                  (rule "leq_literals" (formula "15") (term "0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "15"))
                  (rule "times_zero_1" (formula "24") (term "0,0"))
                  (rule "add_zero_left" (formula "24") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "24"))
                  (rule "leq_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "14"))
                  (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                  (rule "mul_literals" (formula "11") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1"))
                  (rule "polySimp_rightDist" (formula "11") (term "1"))
                  (rule "mul_literals" (formula "11") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                  (rule "allLeft" (formula "28") (inst "t=i_1"))
                  (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "33"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "28") (term "1"))
                  (rule "polySimp_addComm1" (formula "28") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1"))
                  (rule "mul_literals" (formula "28") (term "0,1,1"))
                  (rule "polySimp_elimOne" (formula "28") (term "1,1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0,0") (ifseqformula "23"))
                  (rule "qeq_literals" (formula "28") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "inEqSimp_contradInEq0" (formula "28") (term "1") (ifseqformula "14"))
                  (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,1"))
                  (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "28") (term "0,0,1"))
                  (rule "leq_literals" (formula "28") (term "0,1"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "inEqSimp_contradInEq0" (formula "28") (term "0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "28") (term "0,0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "28"))
                  (rule "andLeft" (formula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "2"))
                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "1,1,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0"))
                  (rule "add_zero_right" (formula "2") (term "0"))
                  (rule "leq_literals" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
               (branch "Case 2"
                  (rule "allRight" (formula "27") (inst "sk=f_0"))
                  (rule "allRight" (formula "27") (inst "sk=o_0"))
                  (rule "orRight" (formula "27"))
                  (rule "orRight" (formula "27"))
                  (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=f_0_0"))
                  (rule "simplifySelectOfStore" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "30"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Null Reference (b = null)"
                (builtin "One Step Simplification" (formula "24"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "if x_3 false"
             (builtin "One Step Simplification" (formula "23"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "postdecrement" (formula "23") (term "1"))
            (rule "compound_subtraction_1" (formula "23") (term "1") (inst "#v=x_2"))
            (rule "variableDeclarationAssign" (formula "23") (term "1"))
            (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_5"))
            (rule "widening_identity_cast_5" (formula "23") (term "1"))
            (rule "assignment" (formula "23") (term "1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "assignmentSubtractionInt" (formula "23") (term "1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "translateJavaSubInt" (formula "23") (term "0,1,0"))
            (rule "blockEmpty" (formula "23") (term "1"))
            (rule "expand_subJint" (formula "23") (term "0,1,0"))
            (rule "polySimp_elimSub" (formula "23") (term "0,0,1,0"))
            (rule "mul_literals" (formula "23") (term "1,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "23") (term "0,0,1,0"))
            (rule "expand_moduloInteger" (formula "23") (term "0,1,0"))
            (rule "replace_int_RANGE" (formula "23") (term "1,1,0,1,0"))
            (rule "replace_int_HALFRANGE" (formula "23") (term "0,0,1,0,1,0"))
            (rule "replace_int_MIN" (formula "23") (term "0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,1,0,1,0"))
            (rule "add_literals" (formula "23") (term "0,0,1,0,1,0"))
            (rule "lsContinue" (formula "23") (term "1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,1,0,1"))
            (rule "add_literals" (formula "23") (term "0,0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "1,1,0,0"))
            (rule "add_literals" (formula "23") (term "0,1,1,0,0"))
            (rule "precOfInt" (formula "23") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "23") (term "1,1"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,1"))
            (rule "mul_literals" (formula "23") (term "0,1,0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,1"))
            (rule "add_literals" (formula "23") (term "0,0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,1,1"))
            (rule "polySimp_addComm1" (formula "23") (term "0,0,1,1"))
            (rule "add_literals" (formula "23") (term "0,0,0,1,1"))
            (rule "inEqSimp_homoInEq1" (formula "23") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0"))
            (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,0,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "23") (term "0,1"))
            (rule "times_zero_2" (formula "23") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "23") (term "0,0,1"))
            (rule "mod_axiom" (formula "23") (term "1,1,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "1,0,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,1,0,0,0,0,1,0"))
            (rule "add_literals" (formula "23") (term "0,0,1,0,0,0,0,1,0"))
            (rule "mod_axiom" (formula "23") (term "1,1,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,1,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,1,1,0,0,0,1,0"))
            (rule "add_literals" (formula "23") (term "0,0,1,1,0,0,0,1,0"))
            (rule "add_zero_left" (formula "23") (term "0,1,1,0,0,0,1,0"))
            (rule "applyEq" (formula "23") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "6"))
            (rule "times_zero_2" (formula "23") (term "1,1,1,0,0,0,1,0"))
            (rule "add_zero_right" (formula "23") (term "1,1,0,0,0,1,0"))
            (rule "mod_axiom" (formula "23") (term "1,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,1,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "1,1,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,1,1,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,1,1,0,0"))
            (rule "add_zero_left" (formula "23") (term "0,1,1,0,0"))
            (rule "mod_axiom" (formula "23") (term "1,0,1,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1,0,1,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,1,0,1,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,1,1"))
            (rule "add_literals" (formula "23") (term "0,0,0,1,0,1,1"))
            (rule "mod_axiom" (formula "23") (term "0,1,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,1"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1,1"))
            (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,1,1"))
            (rule "mul_literals" (formula "23") (term "0,0,1,0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,1"))
            (rule "add_literals" (formula "23") (term "0,0,0,0,1,1"))
            (rule "mod_axiom" (formula "23") (term "0,1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,0,0"))
            (rule "mul_literals" (formula "23") (term "0,0,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "23") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "23") (term "0,0,0,0,0"))
            (rule "mod_axiom" (formula "23") (term "1,0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,1"))
            (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,1"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,1,1"))
            (rule "polySimp_rightDist" (formula "23") (term "1,1,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,1"))
            (rule "polySimp_rightDist" (formula "23") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,1,1"))
            (rule "mul_literals" (formula "23") (term "0,0,1,1,1"))
            (rule "polySimp_elimOne" (formula "23") (term "1,0,1,1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "23") (term "1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1"))
            (rule "mul_literals" (formula "23") (term "1,0,1"))
            (rule "polyMod_pullOut" (formula "23") (term "0,0,1") (inst "polyDivCoeff=mul(div(add(Z(7(4(6(3(8(4(7(4(1(2(#))))))))))), i_0),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0,1"))
            (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0,0,1"))
            (rule "add_literals" (formula "23") (term "1,1,0,0,0,1"))
            (rule "times_zero_1" (formula "23") (term "1,0,0,0,1"))
            (rule "add_zero_right" (formula "23") (term "0,0,0,1"))
            (rule "mod_axiom" (formula "23") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,1"))
            (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,1"))
            (rule "mul_literals" (formula "23") (term "0,0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1"))
            (rule "add_literals" (formula "23") (term "0,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1"))
            (rule "mul_literals" (formula "23") (term "0,1,0,1"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1,0,1"))
            (rule "polyMod_pullOut" (formula "23") (term "0,1,1") (inst "polyDivCoeff=mul(div(add(Z(7(4(6(3(8(4(7(4(1(2(#))))))))))), i_0),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,1,1"))
            (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0,1,1"))
            (rule "add_literals" (formula "23") (term "1,1,0,0,1,1"))
            (rule "times_zero_1" (formula "23") (term "1,0,0,1,1"))
            (rule "add_zero_right" (formula "23") (term "0,0,1,1"))
            (rule "mod_axiom" (formula "23") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,1"))
            (rule "inEqSimp_homoInEq0" (formula "23") (term "1,1"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,1"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1,1"))
            (rule "polySimp_rightDist" (formula "23") (term "0,1,0,1,1"))
            (rule "mul_literals" (formula "23") (term "0,0,1,0,1,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,1,1"))
            (rule "polySimp_addComm1" (formula "23") (term "0,0,1,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,1"))
            (rule "polySimp_addComm1" (formula "23") (term "0,0,0,0,1,1"))
            (rule "add_literals" (formula "23") (term "0,0,0,0,0,1,1"))
            (rule "add_zero_left" (formula "23") (term "0,0,0,0,1,1"))
            (rule "polySimp_pullOutFactor1" (formula "23") (term "0,0,0,1,1"))
            (rule "add_literals" (formula "23") (term "1,0,0,0,1,1"))
            (rule "times_zero_1" (formula "23") (term "0,0,0,1,1"))
            (rule "add_zero_left" (formula "23") (term "0,0,1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1"))
            (rule "elimGcdGeq" (formula "23") (term "1,1") (inst "elimGcdRightDiv=div(add(Z(neglit(7(4(6(3(8(4(7(4(1(2(#)))))))))))),
        i_0),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcdLeftDiv=div(add(Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))),
        i_0),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "sub_literals" (formula "23") (term "0,0,0,0,0,0,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,1,1"))
            (rule "mul_literals" (formula "23") (term "0,0,0,0,0,1,0,1,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0,1,1"))
            (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0,0,0,1,1"))
            (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,1,0,1,1"))
            (rule "add_literals" (formula "23") (term "1,1,0,1,0,1,1"))
            (rule "times_zero_1" (formula "23") (term "1,0,1,0,1,1"))
            (rule "add_zero_right" (formula "23") (term "0,1,0,1,1"))
            (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0,0,1,1"))
            (rule "add_literals" (formula "23") (term "1,1,0,0,0,1,1"))
            (rule "times_zero_1" (formula "23") (term "1,0,0,0,1,1"))
            (rule "add_zero_right" (formula "23") (term "0,0,0,1,1"))
            (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0,1,1"))
            (rule "polySimp_pullOutFactor0" (formula "23") (term "0,1,0,1,1"))
            (rule "add_literals" (formula "23") (term "1,0,1,0,1,1"))
            (rule "times_zero_1" (formula "23") (term "0,1,0,1,1"))
            (rule "leq_literals" (formula "23") (term "1,0,1,1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,1"))
            (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0,1,1"))
            (rule "add_literals" (formula "23") (term "1,1,0,0,1,1"))
            (rule "times_zero_1" (formula "23") (term "1,0,0,1,1"))
            (rule "add_zero_right" (formula "23") (term "0,0,1,1"))
            (rule "qeq_literals" (formula "23") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "polyDiv_pullOut" (formula "23") (term "0,0,0,1") (inst "polyDivCoeff=Z(neglit(1(#)))"))
            (rule "equal_literals" (formula "23") (term "0,0,0,0,1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0,0,0,1"))
            (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "23") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "23") (term "1,0,0,1"))
            (rule "polySimp_addComm1" (formula "23") (term "0,1,1,0,0,1"))
            (rule "add_literals" (formula "23") (term "0,0,1,1,0,0,1"))
            (rule "polySimp_rightDist" (formula "23") (term "0,0,1"))
            (rule "mul_literals" (formula "23") (term "0,0,0,1"))
            (rule "inEqSimp_homoInEq0" (formula "23") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1"))
            (rule "mul_literals" (formula "23") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "23") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "23") (term "0,0,0,1"))
            (rule "add_literals" (formula "23") (term "0,0,0,0,1"))
            (rule "add_zero_left" (formula "23") (term "0,0,0,1"))
            (rule "inEqSimp_sepNegMonomial1" (formula "23") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "0,0,1"))
            (rule "polyDiv_pullOut" (formula "23") (term "0,1,1") (inst "polyDivCoeff=Z(neglit(1(#)))"))
            (rule "equal_literals" (formula "23") (term "0,0,1,1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0,1,1"))
            (rule "mul_literals" (formula "23") (term "1,0,0,0,1,1"))
            (rule "polySimp_addComm0" (formula "23") (term "0,1,1"))
            (rule "polySimp_addComm1" (formula "23") (term "0,1,0,1,1"))
            (rule "add_literals" (formula "23") (term "0,0,1,0,1,1"))
            (rule "inEqSimp_commuteGeq" (formula "23") (term "1,1"))
            (rule "div_axiom" (formula "23") (term "0,1,1,0,0,0,0,1,0") (inst "quotient=quotient_1"))
            (rule "qeq_literals" (formula "1") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1,1,1,1"))
            (rule "equal_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
            (rule "add_literals" (formula "3") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "3") (term "1"))
            (rule "add_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "applyEqRigid" (formula "26") (term "0,0,0,0,0") (ifseqformula "1"))
            (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
            (rule "applyEq" (formula "26") (term "0,1,1,0,0,0,0,1,0") (ifseqformula "1"))
            (rule "polySimp_addComm1" (formula "26") (term "1,0,0,0,0,1,0"))
            (rule "applyEqRigid" (formula "26") (term "0,1,1,1,0,0") (ifseqformula "1"))
            (rule "polySimp_addComm0" (formula "26") (term "1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "mul_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "3"))
            (rule "times_zero_1" (formula "5") (term "0,0"))
            (rule "add_zero_left" (formula "5") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "5"))
            (rule "mul_literals" (formula "5") (term "1"))
            (rule "elimGcdGeq_antec" (formula "5") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "5") (term "0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "polySimp_addLiterals" (formula "5") (term "0,0,0,0"))
            (rule "add_literals" (formula "5") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
            (rule "add_literals" (formula "5") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "5") (term "1,0,0"))
            (rule "add_zero_right" (formula "5") (term "0,0"))
            (rule "leq_literals" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "7"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
            (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "2"))
            (rule "applyEq" (formula "3") (term "0,1,1") (ifseqformula "6"))
            (rule "times_zero_2" (formula "3") (term "1,1"))
            (rule "add_zero_right" (formula "3") (term "1"))
            (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "6"))
            (rule "times_zero_2" (formula "4") (term "1,1"))
            (rule "add_zero_right" (formula "4") (term "1"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
            (rule "qeq_literals" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "applyEq" (formula "28") (term "0,1,0,0,0") (ifseqformula "6"))
            (rule "times_zero_2" (formula "28") (term "1,0,0,0"))
            (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "6"))
            (rule "leq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEqRigid" (formula "27") (term "0,1,0,1,0,0,0,0,1,0") (ifseqformula "5"))
            (rule "times_zero_2" (formula "27") (term "1,0,1,0,0,0,0,1,0"))
            (rule "add_zero_right" (formula "27") (term "0,1,0,0,0,0,1,0"))
            (rule "applyEq" (formula "1") (term "1") (ifseqformula "5"))
            (rule "applyEqRigid" (formula "27") (term "0,0,1,0,0") (ifseqformula "5"))
            (rule "times_zero_2" (formula "27") (term "0,1,0,0"))
            (rule "add_zero_left" (formula "27") (term "1,0,0"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "6"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "inEqSimp_subsumption1" (formula "26") (term "0,0") (ifseqformula "8"))
            (rule "inEqSimp_homoInEq0" (formula "26") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,0,0"))
            (rule "add_literals" (formula "26") (term "1,1,0,0,0,0"))
            (rule "times_zero_1" (formula "26") (term "1,0,0,0,0"))
            (rule "add_zero_right" (formula "26") (term "0,0,0,0"))
            (rule "qeq_literals" (formula "26") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "6"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "div_axiom" (formula "25") (term "0,0,0,1") (inst "quotient=quotient_2"))
            (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
            (rule "equal_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "qeq_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
            (rule "add_literals" (formula "3") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "3") (term "1"))
            (rule "add_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "applyEqRigid" (formula "28") (term "1,1,1,1") (ifseqformula "1"))
            (rule "applyEq" (formula "28") (term "0,0,0,1") (ifseqformula "1"))
            (rule "inEqSimp_commuteLeq" (formula "28") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "mul_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "3"))
            (rule "times_zero_1" (formula "7") (term "0,0"))
            (rule "add_zero_left" (formula "7") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "7"))
            (rule "mul_literals" (formula "7") (term "1"))
            (rule "elimGcdGeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "leq_literals" (formula "7") (term "0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
            (rule "add_literals" (formula "7") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0"))
            (rule "leq_literals" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "9"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
            (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "2"))
            (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "8"))
            (rule "qeq_literals" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "applyEq" (formula "30") (term "0,1,0,1") (ifseqformula "8"))
            (rule "times_zero_2" (formula "30") (term "1,0,1"))
            (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "8"))
            (rule "leq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEqRigid" (formula "3") (term "0,1,1") (ifseqformula "7"))
            (rule "times_zero_2" (formula "3") (term "1,1"))
            (rule "add_zero_right" (formula "3") (term "1"))
            (rule "applyEq" (formula "2") (term "0,1,1") (ifseqformula "7"))
            (rule "times_zero_2" (formula "2") (term "1,1"))
            (rule "add_zero_right" (formula "2") (term "1"))
            (rule "applyEq" (formula "29") (term "1,1,1") (ifseqformula "7"))
            (rule "add_zero_right" (formula "29") (term "1,1"))
            (rule "applyEq" (formula "1") (term "1") (ifseqformula "7"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "8"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "8"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "div_axiom" (formula "27") (term "0,1") (inst "quotient=quotient_3"))
            (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
            (rule "qeq_literals" (formula "1") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "equal_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
            (rule "add_literals" (formula "3") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "3") (term "1"))
            (rule "add_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "applyEqRigid" (formula "30") (term "0,1") (ifseqformula "1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "mul_literals" (formula "3") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "3"))
            (rule "times_zero_1" (formula "9") (term "0,0"))
            (rule "add_zero_left" (formula "9") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9"))
            (rule "mul_literals" (formula "9") (term "1"))
            (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "leq_literals" (formula "9") (term "0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
            (rule "add_literals" (formula "9") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0"))
            (rule "leq_literals" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "11"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
            (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "allRight" (formula "32") (inst "sk=j_0"))
            (rule "orRight" (formula "32"))
            (rule "orRight" (formula "32"))
            (rule "orRight" (formula "33"))
            (rule "orRight" (formula "32"))
            (rule "inEqSimp_leqRight" (formula "35"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_geqRight" (formula "35"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_leqRight" (formula "34"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "inEqSimp_geqRight" (formula "35"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "4"))
            (rule "mul_literals" (formula "4") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1"))
            (rule "polySimp_elimOne" (formula "2") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "6"))
            (rule "applyEqRigid" (formula "8") (term "0,1,1") (ifseqformula "14"))
            (rule "mul_literals" (formula "8") (term "1,1"))
            (rule "add_literals" (formula "8") (term "1"))
            (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "13"))
            (rule "qeq_literals" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "applyEq" (formula "6") (term "0") (ifseqformula "13"))
            (rule "leq_literals" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "applyEqRigid" (formula "6") (term "0,1,1") (ifseqformula "12"))
            (rule "mul_literals" (formula "6") (term "1,1"))
            (rule "add_literals" (formula "6") (term "1"))
            (rule "applyEq" (formula "5") (term "1") (ifseqformula "12"))
            (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "13"))
            (rule "leq_literals" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "3"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
            (rule "polySimp_addComm0" (formula "2") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "14"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "29"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "18"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "28"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "1"))
            (rule "leq_literals" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "1"))
            (rule "polySimp_mulComm0" (formula "4") (term "0,0"))
            (rule "polySimp_addComm0" (formula "4") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0"))
            (rule "polySimp_elimOne" (formula "4") (term "0"))
            (rule "allLeft" (formula "19") (inst "t=j_0"))
            (rule "replace_known_right" (formula "19") (term "1") (ifseqformula "35"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
            (rule "inEqSimp_contradInEq0" (formula "19") (term "1,0,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "19") (term "0,1,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0") (ifseqformula "5"))
            (rule "qeq_literals" (formula "19") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
            (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "19") (term "0,0,1"))
            (rule "leq_literals" (formula "19") (term "0,1"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "19"))
            (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "4"))
            (rule "applyEqRigid" (formula "35") (term "0,2,0") (ifseqformula "3"))
            (rule "close" (formula "35") (ifseqformula "9"))
         )
      )
      (branch "Null Reference (x_arr = null)"
          (builtin "One Step Simplification" (formula "23"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (x_arr != null, but i Out of Bounds!)"
          (builtin "One Step Simplification" (formula "23"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "blockThrow" (formula "23") (term "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "1,1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0"))
         (rule "leq_literals" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "1"))
         (rule "leq_literals" (formula "3") (term "0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
         (rule "qeq_literals" (formula "2") (term "0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "closeFalse" (formula "2"))
      )
   )
   (branch "if x_2 false"
       (builtin "One Step Simplification" (formula "1"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_geqRight" (formula "20"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "1"))
      (rule "leq_literals" (formula "3") (term "0"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "1"))
      (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
      (rule "qeq_literals" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "2"))
      (rule "add_literals" (formula "3") (term "1"))
      (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "2"))
      (rule "leq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "applyEq" (formula "20") (term "1,0,1,0,1,1,0") (ifseqformula "1"))
      (rule "add_literals" (formula "20") (term "0,1,0,1,1,0"))
      (rule "applyEq" (formula "20") (term "0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEqRigid" (formula "2") (term "1,1") (ifseqformula "1"))
      (rule "add_literals" (formula "2") (term "1"))
      (rule "applyEqRigid" (formula "4") (term "1,1,0,0,0") (ifseqformula "1"))
      (rule "mod_axiom" (formula "19") (term "1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,1,1,0"))
      (rule "div_literals" (formula "19") (term "0,1,1,0,1,1,0"))
      (rule "mul_literals" (formula "19") (term "1,1,0,1,1,0"))
      (rule "add_literals" (formula "19") (term "1,0,1,1,0"))
      (rule "add_literals" (formula "19") (term "0,1,1,0"))
      (rule "commute_or_2" (formula "4") (term "0,0,0"))
      (rule "inEqSimp_or_subsumption0" (formula "4") (term "0,0,0,0"))
      (rule "qeq_literals" (formula "4") (term "0,0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "elim_double_block_2" (formula "19") (term "1"))
      (rule "blockBreak" (formula "19") (term "1"))
      (rule "lsBreak" (formula "19") (term "1"))
      (rule "assignment" (formula "19") (term "1"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "blockEmptyLabel" (formula "19") (term "1"))
      (rule "blockEmpty" (formula "19") (term "1"))
      (rule "eval_order_access4_this" (formula "19") (term "1") (inst "#v1=x"))
      (rule "variableDeclarationAssign" (formula "19") (term "1"))
      (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_3"))
      (rule "assignmentAdditionInt" (formula "19") (term "1"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "translateJavaAddInt" (formula "19") (term "0,1,0"))
      (rule "assignment_write_attribute_this" (formula "19") (term "1"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "expand_addJint" (formula "19") (term "3,0,1,0"))
      (rule "add_literals" (formula "19") (term "0,3,0,1,0"))
      (rule "expand_moduloInteger" (formula "19") (term "3,0,1,0"))
      (rule "replace_int_HALFRANGE" (formula "19") (term "0,0,1,3,0,1,0"))
      (rule "replace_int_MIN" (formula "19") (term "0,3,0,1,0"))
      (rule "replace_int_RANGE" (formula "19") (term "1,1,3,0,1,0"))
      (rule "add_zero_right" (formula "19") (term "0,1,3,0,1,0"))
      (rule "mod_axiom" (formula "19") (term "1,3,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,3,0,1,0"))
      (rule "div_literals" (formula "19") (term "0,1,1,3,0,1,0"))
      (rule "times_zero_2" (formula "19") (term "1,1,3,0,1,0"))
      (rule "add_zero_right" (formula "19") (term "1,3,0,1,0"))
      (rule "add_literals" (formula "19") (term "3,0,1,0"))
      (rule "methodCallEmpty" (formula "19") (term "1"))
      (rule "tryEmpty" (formula "19") (term "1"))
      (rule "emptyModality" (formula "19") (term "1"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "eqSymm" (formula "19") (term "1,0,0,1"))
      (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,1,0"))
      (rule "dismissNonSelectedField" (formula "19") (term "1,0,0,1,0,1,1,0"))
      (rule "dismissNonSelectedField" (formula "19") (term "0,1,1,0,0,0,1,1,1,0"))
      (rule "dismissNonSelectedField" (formula "19") (term "1,0,1,0,1,1,1,0"))
      (rule "dismissNonSelectedField" (formula "19") (term "0,0,1,0,1,1,0"))
      (rule "dismissNonSelectedField" (formula "19") (term "0,1,0,1,1,1,0"))
      (rule "inEqSimp_commuteGeq" (formula "19") (term "0,0"))
      (rule "mod_axiom" (formula "19") (term "1,0,2,0,0,1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,2,0,0,1,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,2,0,0,1,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "19") (term "0,0,2,0,0,1,0,1,1,0"))
      (rule "add_literals" (formula "19") (term "0,0,0,2,0,0,1,0,1,1,0"))
      (rule "pullOutSelect" (formula "19") (term "0,0,0,0,1,1,0") (inst "selectSK=BitSet_wordsInUse_0"))
      (rule "applyEq" (formula "20") (term "1,0,0,1,0,2,0,0,1,0,1,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "0,0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "1,1,0,0,0,0,1,1,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "1,0,0,2,0,0,1,0,1,1,0") (ifseqformula "1"))
      (rule "simplifySelectOfStore" (formula "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "castDel" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "20") (term "0,0,0,0,1,1,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "applyEqReverse" (formula "20") (term "0,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "20") (term "0,0,0,1,0") (ifseqformula "1"))
      (rule "qeq_literals" (formula "20") (term "0,0,1,0"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "applyEqReverse" (formula "20") (term "1,1,0,0,0,0,1,1,0") (ifseqformula "1"))
      (rule "add_zero_right" (formula "20") (term "1,0,0,0,0,1,1,0"))
      (rule "applyEqReverse" (formula "20") (term "0,0,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0"))
      (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0"))
      (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "andRight" (formula "19"))
      (branch "Case 1"
         (rule "allRight" (formula "19") (inst "sk=i_1"))
         (rule "orRight" (formula "19"))
         (rule "cutUpperBound" (formula "19") (ifseqformula "4"))
         (branch "Case 1"
            (rule "crossInst" (formula "5") (inst "sk=j_0") (ifseqformula "20"))
            (rule "orRight" (formula "21"))
            (rule "andLeft" (formula "5"))
            (rule "orRight" (formula "23"))
            (rule "orRight" (formula "22"))
            (rule "eqSymm" (formula "1"))
            (rule "inEqSimp_leqRight" (formula "25"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_geqRight" (formula "25"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_leqRight" (formula "24"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "25"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
            (rule "applyEqRigid" (formula "10") (term "0,0,0,0") (ifseqformula "9"))
            (rule "applyEqRigid" (formula "10") (term "0,2,0,1") (ifseqformula "9"))
            (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "26"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "applyEq" (formula "22") (term "1") (ifseqformula "5"))
            (rule "applyEq" (formula "20") (term "0") (ifseqformula "5"))
            (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "5"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Case 2"
            (rule "crossInst" (formula "5") (inst "sk=j_0") (ifseqformula "20"))
            (rule "orRight" (formula "21"))
            (rule "notLeft" (formula "1"))
            (rule "andLeft" (formula "4"))
            (rule "orRight" (formula "23"))
            (rule "orRight" (formula "22"))
            (rule "eqSymm" (formula "19"))
            (rule "inEqSimp_leqRight" (formula "25"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_geqRight" (formula "25"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_geqRight" (formula "25"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "25"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0"))
            (rule "applyEq" (formula "9") (term "0,0,0,0") (ifseqformula "8"))
            (rule "applyEq" (formula "9") (term "0,1,0,0") (ifseqformula "8"))
            (rule "applyEqRigid" (formula "9") (term "0,2,0,1") (ifseqformula "8"))
            (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "26"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "applyEq" (formula "9") (term "1,1") (ifseqformula "8"))
            (rule "inEqSimp_sepPosMonomial1" (formula "4"))
            (rule "mul_literals" (formula "4") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "mul_literals" (formula "3") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_contradEq7" (formula "23") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0"))
            (rule "add_literals" (formula "23") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "23") (term "1,0,0"))
            (rule "add_zero_right" (formula "23") (term "0,0"))
            (rule "leq_literals" (formula "23") (term "0"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "false_right" (formula "23"))
            (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
            (rule "leq_literals" (formula "4") (term "0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "inEqSimp_contradInEq1" (formula "8") (term "0,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "8") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_contradInEq0" (formula "8") (term "0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "8") (term "0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "18"))
            (rule "polySimp_rightDist" (formula "2") (term "0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "2"))
            (rule "leq_literals" (formula "4") (term "0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "8"))
            (rule "times_zero_1" (formula "17") (term "0,0"))
            (rule "add_zero_left" (formula "17") (term "0"))
            (rule "allLeft" (formula "21") (inst "t=i_1"))
            (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
            (rule "inEqSimp_homoInEq0" (formula "21") (term "1"))
            (rule "polySimp_addComm1" (formula "21") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,1"))
            (rule "polySimp_rightDist" (formula "21") (term "1,1"))
            (rule "mul_literals" (formula "21") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,1"))
            (rule "inEqSimp_contradInEq0" (formula "21") (term "1,0,0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "21") (term "0,1,0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_contradInEq0" (formula "21") (term "1") (ifseqformula "8"))
            (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
            (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "21") (term "0,0,1"))
            (rule "leq_literals" (formula "21") (term "0,1"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "21") (term "0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "3"))
            (rule "andLeft" (formula "21"))
            (rule "inEqSimp_homoInEq1" (formula "21"))
            (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
            (rule "add_literals" (formula "21") (term "1,1,0"))
            (rule "times_zero_1" (formula "21") (term "1,0"))
            (rule "add_zero_right" (formula "21") (term "0"))
            (rule "leq_literals" (formula "21"))
            (rule "closeFalse" (formula "21"))
         )
      )
      (branch "Case 2"
         (rule "allRight" (formula "19") (inst "sk=f_0"))
         (rule "allRight" (formula "19") (inst "sk=o_0"))
         (rule "orRight" (formula "19"))
         (rule "orRight" (formula "19"))
         (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=f_0_0"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "1,0"))
         (rule "eqSymm" (formula "22"))
         (rule "eqSymm" (formula "1") (term "0,0,0"))
         (rule "eqSymm" (formula "1") (term "1,0,0"))
         (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
)
}
