\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon May 08 09:25:11 CEST 2023
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:on , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:allow , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[Labels]UseOriginLabels=true
[NewSMT]Axiomatisations=false
[NewSMT]Presburger=false
[NewSMT]sqrtSMTTranslation=SMT
[SMTSettings]SelectedTaclets=
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]maxGenericSorts=2
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[Strategy]ActiveStrategy=JavaCardDLStrategy
[Strategy]MaximumNumberOfAutomaticApplications=7000
[Strategy]Timeout=-1
"
}

\javaSource "../../";

\include "../../taclets/intSet.key",  "../../taclets/binaryAxiomsExtension.key",  "../../taclets/bitwiseOperations.key";

\proofObligation "#Proof Obligation Settings
#Mon May 08 09:25:11 CEST 2023
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
contract=BitSet[BitSet\\:\\:setBitAt(long,int)].JML normal_behavior operation contract.0
name=BitSet[BitSet\\:\\:setBitAt(long,int)].JML normal_behavior operation contract.0
";

\proof {
(keyLog "0" (keyUser "christianhein" ) (keyVersion "208396f69e"))

(autoModeTime "114380")

(branch "dummy ID"
(rule "cut" (inst "cutFormula=(\\forall int x;
   (\\forall int y;
      ((   (  inLong(x)<<origin(\"User_Interaction @ node 0 (cut)\",\"[]\")>>
            & inLong(y)<<origin(\"User_Interaction @ node 0 (cut)\",\"[]\")>>)<<origin(\"User_Interaction @ node 0 (cut)\",\"[]\")>>
        -> inLong(binaryOr(x, y))<<origin(\"User_Interaction @ node 0 (cut)\",\"[]\")>>)<<origin(\"User_Interaction @ node 0 (cut)\",\"[]\")>>))<<origin(\"User_Interaction @ node 0 (cut)\",\"[]\")>>)<<origin(\"User_Interaction @ node 0 (cut)\",\"[]\")>>") (userinteraction))
(branch "CUT: ∀ int x; ∀ int y; (inLong(x) ∧ inLong(y) → inLong(binaryOr(x, y))) TRUE"
    (builtin "One Step Simplification" (formula "2"))
   (rule "impRight" (formula "2"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "2"))
   (rule "eqSymm" (formula "8") (term "0,0,1,0,1"))
   (rule "eqSymm" (formula "8") (term "1,0,1,0,0,0,1"))
   (rule "bitAtDef" (formula "8") (term "0,0,0,0,0,1"))
   (rule "bitAtDef" (formula "8") (term "1,1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "8") (term "1,0,1,0,0,0,1"))
   (rule "ifEqualsInteger" (formula "8") (term "0,0,0,0,1"))
   (rule "equal_literals" (formula "8") (term "1,1,0,0,0,0,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "bitAtDef" (formula "8") (term "1,1,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "8") (term "1,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "5"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,1,1,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,1,0,1,0,0,0,1"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_setBitAt,savedHeapBefore_setBitAt"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "returnUnfold" (formula "8") (term "1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x"))
   (rule "compound_binary_OR_2" (formula "8") (term "1") (inst "#v1=x_2") (inst "#v0=x_1"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_1"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_2"))
   (rule "remove_parentheses_right" (formula "8") (term "1"))
   (rule "assignmentShiftLeftLong" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "translateJavaShiftLeftLong" (formula "8") (term "0,1,0"))
   (rule "javaShiftLeftLongDef" (formula "8") (term "0,1,0"))
   (rule "shiftLeftDef" (formula "8") (term "0,0,1,0"))
   (rule "polySimp_elimNeg" (formula "8") (term "1,1,0,0,1,0"))
   (rule "shiftLeftPositiveShiftDef" (formula "8") (term "2,0,0,1,0"))
   (rule "polySimp_elimOneLeft0" (formula "8") (term "2,0,0,1,0"))
   (rule "shiftRightPositiveShiftDef" (formula "8") (term "1,0,0,1,0"))
   (rule "assignmentBitwiseOrLong3" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "translateJavaBitwiseOrLong" (formula "8") (term "0,1,0"))
   (rule "orJLongDef" (formula "8") (term "0,1,0"))
   (rule "methodCallReturn" (formula "8") (term "1"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "tryEmpty" (formula "8") (term "1"))
   (rule "emptyModality" (formula "8") (term "1"))
   (rule "ifthenelse_split" (formula "8") (term "0,1,0,0,1,0") (userinteraction))
   (branch "bitIndex % 64 < 0 TRUE"
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "6")))
      (rule "expand_inLong" (formula "3"))
      (rule "expand_inInt" (formula "4"))
      (rule "expand_inLong" (formula "8") (term "0,0,0,0"))
      (rule "expand_inLong" (formula "8") (term "1,0,0,0"))
      (rule "expand_inLong" (formula "8") (term "1,0,0"))
      (rule "expand_inInt" (formula "9") (term "1,0,0,1"))
      (rule "replace_long_MAX" (formula "3") (term "1,0"))
      (rule "replace_long_MIN" (formula "3") (term "0,1"))
      (rule "replace_int_MAX" (formula "4") (term "1,0"))
      (rule "replace_int_MIN" (formula "4") (term "0,1"))
      (rule "replace_long_MAX" (formula "8") (term "1,0,0,0,0,0"))
      (rule "replace_long_MIN" (formula "8") (term "0,1,0,0,0,0"))
      (rule "replace_long_MAX" (formula "8") (term "1,0,1,0,0,0"))
      (rule "replace_long_MIN" (formula "8") (term "0,1,1,0,0,0"))
      (rule "replace_long_MAX" (formula "8") (term "1,0,1,0,0"))
      (rule "replace_long_MIN" (formula "8") (term "0,1,1,0,0"))
      (rule "replace_int_MAX" (formula "9") (term "1,0,1,0,0,1"))
      (rule "replace_int_MIN" (formula "9") (term "0,1,1,0,0,1"))
      (rule "andLeft" (formula "3"))
      (rule "andLeft" (formula "5"))
      (rule "eqSymm" (formula "11") (term "1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "1"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "9"))
      (rule "mul_literals" (formula "9") (term "1,0,0"))
      (rule "add_literals" (formula "9") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,1"))
      (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0,1"))
      (rule "add_literals" (formula "11") (term "0,0,1,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "1,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "10") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "4"))
      (rule "inEqSimp_commuteLeq" (formula "6"))
      (rule "mod_axiom" (formula "11") (term "0,1,1,0,1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,1,0,1,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,1,0,0,0,0,0"))
      (rule "mod_axiom" (formula "11") (term "0,1,1,0,1,0,0,0,1,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,1,0,1,0,0,0,1,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,1,0,0,0,1,0,1,0,1"))
      (rule "polySimp_rightDist" (formula "11") (term "1,1,0,1,0,0,0,1,0,1,0,1"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,1,0,0,0,1,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,1,1,0,1,0,0,0,1,0,1,0,1"))
      (rule "mod_axiom" (formula "1") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9"))
      (rule "mul_literals" (formula "9") (term "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,1"))
      (rule "mul_literals" (formula "11") (term "1,1,0,0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "9"))
      (rule "leq_literals" (formula "5") (term "0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
      (rule "leq_literals" (formula "5") (term "0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "expand_moduloLong" (formula "9") (term "1,0,0,0,0,0"))
      (rule "replace_long_RANGE" (formula "9") (term "1,1,1,0,0,0,0,0"))
      (rule "replace_long_HALFRANGE" (formula "9") (term "0,0,1,1,0,0,0,0,0"))
      (rule "replace_long_MIN" (formula "9") (term "0,1,0,0,0,0,0"))
      (rule "expand_moduloLong" (formula "9") (term "1,0,0,0,1,0,1,0,1"))
      (rule "replace_long_RANGE" (formula "9") (term "1,1,1,0,0,0,1,0,1,0,1"))
      (rule "replace_long_HALFRANGE" (formula "9") (term "0,0,1,1,0,0,0,1,0,1,0,1"))
      (rule "replace_long_MIN" (formula "9") (term "0,1,0,0,0,1,0,1,0,1"))
      (rule "nnf_imp2or" (formula "8") (term "0,0"))
      (rule "expand_moduloLong" (formula "9") (term "0,0,0,0"))
      (rule "replace_long_RANGE" (formula "9") (term "1,1,0,0,0,0"))
      (rule "replace_long_HALFRANGE" (formula "9") (term "0,0,1,0,0,0,0"))
      (rule "replace_long_MIN" (formula "9") (term "0,0,0,0,0"))
      (rule "expand_moduloLong" (formula "9") (term "0,0,1,0,1,0,1"))
      (rule "replace_long_RANGE" (formula "9") (term "1,1,0,0,1,0,1,0,1"))
      (rule "replace_long_HALFRANGE" (formula "9") (term "0,0,1,0,0,1,0,1,0,1"))
      (rule "replace_long_MIN" (formula "9") (term "0,0,0,1,0,1,0,1"))
      (rule "nnf_imp2or" (formula "9") (term "0,1"))
      (rule "nnf_notAnd" (formula "8") (term "0,0,0"))
      (rule "nnf_notAnd" (formula "9") (term "0,0,1"))
      (rule "nnf_notAnd" (formula "8") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "8") (term "0,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,0,1,0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,0,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "8") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,1,1,0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,1,1,0,0,0"))
      (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,1,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,1,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0,0,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
      (rule "nnf_notAnd" (formula "9") (term "1,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "9") (term "0,1,0,0,1"))
      (rule "mul_literals" (formula "9") (term "1,0,0,0,1,0,0,1"))
      (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,1,0,0,1"))
      (rule "mul_literals" (formula "9") (term "1,0,1,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "9") (term "1,1,0,0,1"))
      (rule "mul_literals" (formula "9") (term "1,0,0,1,1,0,0,1"))
      (rule "add_literals" (formula "9") (term "0,0,1,1,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,1,0,0,1"))
      (rule "mul_literals" (formula "9") (term "1,1,1,0,0,1"))
      (rule "nnf_notAnd" (formula "9") (term "0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,1"))
      (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0,0,1"))
      (rule "add_literals" (formula "9") (term "0,0,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,1"))
      (rule "mul_literals" (formula "9") (term "1,1,0,0,0,1"))
      (rule "nnf_notAnd" (formula "9") (term "0,0,0,0,1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,0,1"))
      (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0,0,1"))
      (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0,1"))
      (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,1"))
      (rule "commute_and" (formula "8") (term "1,0,0"))
      (rule "commute_or" (formula "8") (term "1,0,0,0"))
      (rule "commute_or" (formula "8") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "8") (term "0,0,0"))
      (rule "cnf_rightDist" (formula "8") (term "0,0"))
      (rule "distr_forallAnd" (formula "8") (term "0"))
      (rule "distr_forallAnd" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "commute_or" (formula "9") (term "0,0"))
      (rule "div_axiom" (formula "1") (term "0,0") (inst "quotient=quotient_0"))
      (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
      (rule "qeq_literals" (formula "1") (term "0,1,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "equal_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_addComm1" (formula "3") (term "1"))
      (rule "add_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq1" (formula "4"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
      (rule "polySimp_addComm1" (formula "4") (term "0"))
      (rule "applyEq" (formula "13") (term "0,1,1,1,1,0,1,1,1,0,1,0,0,1,0,1,0,1") (ifseqformula "1"))
      (rule "polySimp_addComm0" (formula "13") (term "1,1,1,0,1,1,1,0,1,0,0,1,0,1,0,1"))
      (rule "applyEq" (formula "13") (term "0,1,1,1,1,0,1,1,1,0,1,0,0,0,0") (ifseqformula "1"))
      (rule "polySimp_addComm0" (formula "13") (term "1,1,1,0,1,1,1,0,1,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1"))
      (rule "polySimp_rightDist" (formula "4") (term "1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
      (rule "mul_literals" (formula "4") (term "0,1"))
      (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "2"))
      (rule "andLeft" (formula "4"))
      (rule "inEqSimp_homoInEq1" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
      (rule "mul_literals" (formula "4") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "4") (term "0"))
      (rule "polySimp_addComm0" (formula "4") (term "0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "4") (term "0"))
      (rule "add_literals" (formula "4") (term "1,1,0"))
      (rule "times_zero_1" (formula "4") (term "1,0"))
      (rule "add_zero_right" (formula "4") (term "0"))
      (rule "leq_literals" (formula "4"))
      (rule "closeFalse" (formula "4"))
   )
   (branch "bitIndex % 64 < 0 FALSE"
      (rule "cut" (inst "cutFormula=(mod(bitIndex, Z(4(6(#)))) = Z(3(6(#))))<<origin(\"User_Interaction @ node 56966 (cut)\",\"[]\")>>") (userinteraction))
      (branch "CUT: bitIndex % 64 = 63 TRUE"
         (rule "eqTermCut" (formula "10") (term "1,0,0,1,0") (inst "s=neg(pow(Z(2(#)), Z(3(6(#)))))") (userinteraction))
         (branch "Assume moduloLong(pow(2, bitIndex % 64)) = -pow(2, 63)"
            (rule "applyEq" (formula "11") (term "1,0,0,1,0") (ifseqformula "1") (userinteraction))
            (rule "hide_left" (formula "1") (userinteraction))
             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "6")))
            (rule "andRight" (formula "10"))
            (branch "Case 1"
               (rule "pow_literals" (formula "10") (term "0,1,0,0,0,0"))
               (rule "neg_literal" (formula "10") (term "1,0,0,0,0"))
               (rule "inEqSimp_ltRight" (formula "9"))
               (rule "times_zero_1" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "8"))
               (rule "mul_literals" (formula "8") (term "1,0,0"))
               (rule "add_literals" (formula "8") (term "0,0"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7"))
               (rule "mul_literals" (formula "7") (term "1"))
               (rule "hide_left" (formula "1") (userinteraction))
               (rule "hide_left" (formula "1") (userinteraction))
               (rule "hide_left" (formula "3") (userinteraction))
               (rule "hide_left" (formula "2") (userinteraction))
               (rule "instAll" (formula "5") (term "0,0,0,0,0") (ifseqformula "4") (userinteraction))
               (rule "instAll" (formula "6") (term "1,0,0,0,0") (ifseqformula "1") (userinteraction))
               (rule "impLeft" (formula "1") (userinteraction))
               (branch "Case 1"
                  (rule "expand_inLong" (formula "6") (term "0"))
                  (rule "expand_inLong" (formula "6") (term "1"))
                  (rule "expand_inLong" (formula "5") (term "0,0,0,0"))
                  (rule "expand_inLong" (formula "5") (term "1,0,0,0"))
                  (rule "expand_inLong" (formula "5") (term "1,0,0"))
                  (rule "expand_inLong" (formula "2"))
                  (rule "expand_inLong" (formula "1") (term "0,0,0"))
                  (rule "expand_inLong" (formula "1") (term "1,0,0"))
                  (rule "expand_inLong" (formula "1") (term "1,0"))
                  (rule "replace_long_MIN" (formula "6") (term "0,1,0"))
                  (rule "replace_long_MAX" (formula "6") (term "1,0,0"))
                  (rule "replace_long_MIN" (formula "6") (term "0,1,1"))
                  (rule "replace_long_MAX" (formula "6") (term "1,0,1"))
                  (rule "replace_long_MIN" (formula "5") (term "0,1,0,0,0,0"))
                  (rule "replace_long_MAX" (formula "5") (term "1,0,0,0,0,0"))
                  (rule "replace_long_MAX" (formula "5") (term "1,0,1,0,0,0"))
                  (rule "replace_long_MIN" (formula "5") (term "0,1,1,0,0,0"))
                  (rule "replace_long_MAX" (formula "5") (term "1,0,1,0,0"))
                  (rule "replace_long_MIN" (formula "5") (term "0,1,1,0,0"))
                  (rule "replace_long_MAX" (formula "2") (term "1,0"))
                  (rule "replace_long_MIN" (formula "2") (term "0,1"))
                  (rule "replace_long_MIN" (formula "1") (term "0,1,0,0,0"))
                  (rule "replace_long_MAX" (formula "1") (term "1,0,0,0,0"))
                  (rule "replace_long_MAX" (formula "1") (term "1,0,1,0,0"))
                  (rule "replace_long_MIN" (formula "1") (term "0,1,1,0,0"))
                  (rule "replace_long_MAX" (formula "1") (term "1,0,1,0"))
                  (rule "replace_long_MIN" (formula "1") (term "0,1,1,0"))
                  (rule "leq_literals" (formula "6") (term "1,1"))
                   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "2")))
                  (rule "leq_literals" (formula "6"))
                  (rule "closeTrue" (formula "6"))
               )
               (branch "Case 2"
                  (rule "moduloLongFixpoint" (formula "7") (term "0,0,0") (ifseqformula "1") (userinteraction))
                  (rule "hide_left" (formula "2") (userinteraction))
                  (rule "hide_left" (formula "5") (userinteraction))
                  (rule "insert_hidden_taclet00010_1" (userinteraction))
                  (rule "cut" (inst "cutFormula=(  bitIndex<<origin(\"User_Interaction @ node 71727 (cut)\",\"[]\")>>
 = Z(3(6(#))))<<origin(\"User_Interaction @ node 71727 (cut)\",\"[]\")>>") (userinteraction))
                  (branch "CUT: bitIndex = 63 TRUE"
                     (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "7") (term "1,1,0,0") (ifseqformula "1"))
                     (rule "pow_literals" (formula "7") (term "1,0,0"))
                     (rule "applyEq" (formula "6") (term "0") (ifseqformula "1"))
                     (rule "leq_literals" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "applyEq" (formula "5") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "mod_axiom" (formula "2") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                     (rule "div_literals" (formula "2") (term "0,1,0"))
                     (rule "times_zero_2" (formula "2") (term "1,0"))
                     (rule "add_zero_right" (formula "2") (term "0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "hide_left" (formula "1") (userinteraction))
                     (rule "cut" (inst "cutFormula=lt(binaryOr(word,
            Z(neglit(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))))),
   Z(0(#)))<<origin(\"User_Interaction @ node 71842 (cut)\",\"[]\")>>") (userinteraction))
                     (branch "CUT: binaryOr(word, -9223372036854775808) < 0 TRUE"
                        (rule "expand_inLong" (formula "2"))
                        (rule "expand_inLong" (formula "3"))
                        (rule "replace_long_MIN" (formula "2") (term "0,1"))
                        (rule "replace_long_MAX" (formula "2") (term "1,0"))
                        (rule "replace_long_MIN" (formula "3") (term "0,1"))
                        (rule "replace_long_MAX" (formula "3") (term "1,0"))
                        (rule "andLeft" (formula "2"))
                        (rule "andLeft" (formula "4"))
                        (rule "inEqSimp_ltToLeq" (formula "1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "3"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "1"))
                        (rule "leq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "div_axiom" (formula "5") (term "0,0") (inst "quotient=quotient_0"))
                        (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "1") (term "0,1,1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "1"))
                        (rule "mod_axiom" (formula "8") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                        (rule "polySimp_homoEq" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "8") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "4"))
                        (rule "polySimp_mulAssoc" (formula "2") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#))))))))))))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,1,0"))
                        (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "2") (term "0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
                        (rule "add_literals" (formula "2") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                        (rule "add_literals" (formula "2") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0"))
                        (rule "add_zero_right" (formula "2") (term "0,0"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                        (rule "mul_literals" (formula "6") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0"))
                        (rule "add_literals" (formula "6") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                        (rule "mul_literals" (formula "6") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "6") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#))))))))))))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "6") (term "0,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,0"))
                        (rule "add_literals" (formula "6") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
                        (rule "add_literals" (formula "6") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0"))
                        (rule "add_zero_right" (formula "6") (term "0,0"))
                        (rule "leq_literals" (formula "6") (term "0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "2"))
                        (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
                        (rule "qeq_literals" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "applyEq" (formula "3") (term "0,1") (ifseqformula "6"))
                        (rule "mul_literals" (formula "3") (term "1"))
                        (rule "applyEq" (formula "3") (term "0,1,1") (ifseqformula "5"))
                        (rule "mul_literals" (formula "3") (term "1,1"))
                        (rule "add_literals" (formula "3") (term "1"))
                        (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "4"))
                        (rule "leq_literals" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "3"))
                        (rule "div_literals" (formula "7") (term "0,0"))
                        (rule "mul_literals" (formula "7") (term "0"))
                        (rule "polySimp_homoEq" (formula "7"))
                        (rule "mul_literals" (formula "7") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "7") (term "0"))
                        (rule "add_literals" (formula "7") (term "0,0"))
                        (rule "applyEqRigid" (formula "7") (term "1,0") (ifseqformula "3"))
                        (rule "add_literals" (formula "7") (term "0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "closeTrue" (formula "7"))
                     )
                     (branch "CUT: binaryOr(word, -9223372036854775808) < 0 FALSE"
                        (rule "hide_right" (formula "4") (userinteraction))
                         (opengoal " ")
                     )
                  )
                  (branch "CUT: bitIndex = 63 FALSE"
                     (rule "expand_inLong" (formula "2"))
                     (rule "expand_inLong" (formula "3"))
                     (rule "replace_long_MIN" (formula "2") (term "0,1"))
                     (rule "replace_long_MAX" (formula "2") (term "1,0"))
                     (rule "replace_long_MAX" (formula "3") (term "1,0"))
                     (rule "replace_long_MIN" (formula "3") (term "0,1"))
                     (rule "andLeft" (formula "2"))
                     (rule "andLeft" (formula "4"))
                     (rule "inEqSimp_commuteLeq" (formula "3"))
                     (rule "inEqSimp_commuteLeq" (formula "5"))
                     (rule "mod_axiom" (formula "1") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                     (rule "polySimp_homoEq" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_sepPosMonomial" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "inEqSimp_strengthen0" (formula "7") (ifseqformula "8"))
                     (rule "add_literals" (formula "7") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "8") (ifseqformula "7"))
                     (rule "mul_literals" (formula "8") (term "1,0,0"))
                     (rule "add_literals" (formula "8") (term "0,0"))
                     (rule "qeq_literals" (formula "8") (term "0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "false_right" (formula "8"))
                     (rule "newSym_eq" (formula "1") (inst "l=l_0") (inst "newSymDef=add(Z(neglit(1(#))), mul(bitIndex, Z(0(#))))"))
                     (rule "times_zero_1" (formula "1") (term "1,1,1"))
                     (rule "add_zero_right" (formula "1") (term "1,1"))
                     (rule "polySimp_addComm0" (formula "1") (term "1"))
                     (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
                     (rule "polySimp_mulComm0" (formula "2") (term "0"))
                     (rule "polySimp_rightDist" (formula "2") (term "0"))
                     (rule "mul_literals" (formula "2") (term "0,0"))
                     (rule "polySimp_homoEq" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "applyEq" (formula "7") (term "0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "9") (term "1,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "8") (term "0") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq0" (formula "8"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0"))
                     (rule "add_literals" (formula "8") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                     (rule "mul_literals" (formula "7") (term "1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(4(6(#)))"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,1,0"))
                     (rule "neg_literal" (formula "8") (term "0,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "8") (term "0,0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
                     (rule "add_literals" (formula "8") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "8") (term "1,0,0"))
                     (rule "add_zero_right" (formula "8") (term "0,0"))
                     (rule "qeq_literals" (formula "8") (term "0"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "inEqSimp_contradInEq3" (formula "7") (ifseqformula "8"))
                     (rule "times_zero_1" (formula "7") (term "0,1,0"))
                     (rule "greater_literals" (formula "7") (term "0,0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "qeq_literals" (formula "7") (term "0"))
                      (builtin "One Step Simplification" (formula "7"))
                     (rule "closeFalse" (formula "7"))
                  )
               )
            )
            (branch "Case 2"
               (rule "pow_literals" (formula "10") (term "0,1,0,0,0,1,1,1,0"))
               (rule "neg_literal" (formula "10") (term "1,0,0,0,1,1,1,0"))
               (rule "allRight" (formula "10") (inst "sk=i_0"))
               (rule "impRight" (formula "10"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "2"))
               (rule "eqSymm" (formula "14"))
               (rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "1")))
               (rule "inEqSimp_ltRight" (formula "13"))
               (rule "times_zero_1" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "11"))
               (rule "mul_literals" (formula "11") (term "1,0,0"))
               (rule "add_literals" (formula "11") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1,0,0"))
               (rule "add_literals" (formula "3") (term "0,0"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "5"))
               (rule "qeq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10"))
               (rule "mul_literals" (formula "10") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "instAll" (formula "13") (term "0,0,0,0,0") (ifseqformula "11") (userinteraction))
               (rule "instAll" (formula "14") (term "1,0,0,0,0") (ifseqformula "1") (userinteraction))
               (rule "impLeft" (formula "1") (userinteraction))
               (branch "Case 1"
                  (rule "expand_inLong" (formula "13") (term "0"))
                  (rule "expand_inLong" (formula "13") (term "1"))
                  (rule "expand_inLong" (formula "12") (term "1,0,0"))
                  (rule "expand_inLong" (formula "12") (term "1,0,0,0"))
                  (rule "expand_inLong" (formula "12") (term "0,0,0,0"))
                  (rule "expand_inInt" (formula "8"))
                  (rule "expand_inLong" (formula "7"))
                  (rule "expand_inInt" (formula "4"))
                  (rule "expand_inLong" (formula "1") (term "0,0,0"))
                  (rule "expand_inLong" (formula "1") (term "1,0,0"))
                  (rule "expand_inLong" (formula "1") (term "1,0"))
                  (rule "replace_long_MIN" (formula "13") (term "0,1,0"))
                  (rule "replace_long_MAX" (formula "13") (term "1,0,0"))
                  (rule "replace_long_MIN" (formula "13") (term "0,1,1"))
                  (rule "replace_long_MAX" (formula "13") (term "1,0,1"))
                  (rule "replace_long_MAX" (formula "12") (term "1,0,1,0,0"))
                  (rule "replace_long_MIN" (formula "12") (term "0,1,1,0,0"))
                  (rule "replace_long_MIN" (formula "12") (term "0,1,1,0,0,0"))
                  (rule "replace_long_MAX" (formula "12") (term "1,0,1,0,0,0"))
                  (rule "replace_long_MAX" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "replace_long_MIN" (formula "12") (term "0,1,0,0,0,0"))
                  (rule "replace_int_MIN" (formula "8") (term "0,1"))
                  (rule "replace_int_MAX" (formula "8") (term "1,0"))
                  (rule "replace_long_MAX" (formula "7") (term "1,0"))
                  (rule "replace_long_MIN" (formula "7") (term "0,1"))
                  (rule "replace_int_MIN" (formula "4") (term "0,1"))
                  (rule "replace_int_MAX" (formula "4") (term "1,0"))
                  (rule "replace_long_MIN" (formula "1") (term "0,1,0,0,0"))
                  (rule "replace_long_MAX" (formula "1") (term "1,0,0,0,0"))
                  (rule "replace_long_MAX" (formula "1") (term "1,0,1,0,0"))
                  (rule "replace_long_MIN" (formula "1") (term "0,1,1,0,0"))
                  (rule "replace_long_MIN" (formula "1") (term "0,1,1,0"))
                  (rule "replace_long_MAX" (formula "1") (term "1,0,1,0"))
                  (rule "leq_literals" (formula "13") (term "1,1"))
                   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "7")))
                  (rule "leq_literals" (formula "13"))
                  (rule "closeTrue" (formula "13"))
               )
               (branch "Case 2"
                  (rule "moduloLongFixpoint" (formula "15") (term "0,0,0") (ifseqformula "1") (userinteraction))
                  (rule "cut" (inst "cutFormula=(  bitIndex<<origin(\"User_Interaction @ node 68439 (cut)\",\"[]\")>>
 = Z(3(6(#))))<<origin(\"User_Interaction @ node 68439 (cut)\",\"[]\")>>") (userinteraction))
                  (branch "CUT: bitIndex = 63 TRUE"
                     (rule "hide_left" (formula "7") (userinteraction))
                     (rule "hide_left" (formula "9") (userinteraction))
                     (rule "hide_left" (formula "6") (userinteraction))
                     (rule "hide_left" (formula "3") (userinteraction))
                     (rule "hide_left" (formula "5") (userinteraction))
                     (rule "hide_left" (formula "6") (userinteraction))
                     (rule "hide_left" (formula "6") (userinteraction))
                     (rule "hide_left" (formula "6") (userinteraction))
                     (rule "hide_left" (formula "6") (userinteraction))
                     (rule "applyEq" (formula "6") (term "1") (ifseqformula "1") (userinteraction))
                     (rule "hide_left" (formula "1") (userinteraction))
                     (rule "inEqSimp_strengthen0" (formula "3") (ifseqformula "5"))
                     (rule "add_literals" (formula "3") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "5") (ifseqformula "3"))
                     (rule "mul_literals" (formula "5") (term "1,0,0"))
                     (rule "add_literals" (formula "5") (term "0,0"))
                     (rule "qeq_literals" (formula "5") (term "0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "false_right" (formula "5"))
                      (opengoal " ")
                  )
                  (branch "CUT: bitIndex = 63 FALSE"
                     (rule "expand_inLong" (formula "13") (term "0,0,0,0"))
                     (rule "expand_inLong" (formula "13") (term "1,0,0,0"))
                     (rule "expand_inLong" (formula "13") (term "1,0,0"))
                     (rule "expand_inInt" (formula "9"))
                     (rule "expand_inLong" (formula "8"))
                     (rule "expand_inInt" (formula "5"))
                     (rule "expand_inLong" (formula "2") (term "0,0,0"))
                     (rule "expand_inLong" (formula "2") (term "1,0,0"))
                     (rule "expand_inLong" (formula "2") (term "1,0"))
                     (rule "expand_inLong" (formula "1"))
                     (rule "replace_long_MAX" (formula "13") (term "1,0,0,0,0,0"))
                     (rule "replace_long_MIN" (formula "13") (term "0,1,0,0,0,0"))
                     (rule "replace_long_MAX" (formula "13") (term "1,0,1,0,0,0"))
                     (rule "replace_long_MIN" (formula "13") (term "0,1,1,0,0,0"))
                     (rule "replace_long_MAX" (formula "13") (term "1,0,1,0,0"))
                     (rule "replace_long_MIN" (formula "13") (term "0,1,1,0,0"))
                     (rule "replace_int_MIN" (formula "9") (term "0,1"))
                     (rule "replace_int_MAX" (formula "9") (term "1,0"))
                     (rule "replace_long_MAX" (formula "8") (term "1,0"))
                     (rule "replace_long_MIN" (formula "8") (term "0,1"))
                     (rule "replace_int_MAX" (formula "5") (term "1,0"))
                     (rule "replace_int_MIN" (formula "5") (term "0,1"))
                     (rule "replace_long_MAX" (formula "2") (term "1,0,0,0,0"))
                     (rule "replace_long_MIN" (formula "2") (term "0,1,0,0,0"))
                     (rule "replace_long_MAX" (formula "2") (term "1,0,1,0,0"))
                     (rule "replace_long_MIN" (formula "2") (term "0,1,1,0,0"))
                     (rule "replace_long_MAX" (formula "2") (term "1,0,1,0"))
                     (rule "replace_long_MIN" (formula "2") (term "0,1,1,0"))
                     (rule "replace_long_MAX" (formula "1") (term "1,0"))
                     (rule "replace_long_MIN" (formula "1") (term "0,1"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "8"))
                     (rule "andLeft" (formula "5"))
                     (rule "andLeft" (formula "1"))
                     (rule "mod_homoEq" (formula "20"))
                     (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "11")))
                     (rule "polySimp_elimSub" (formula "20") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "20") (term "0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "1,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "1,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "13"))
                     (rule "inEqSimp_commuteLeq" (formula "11"))
                     (rule "inEqSimp_commuteLeq" (formula "7"))
                     (rule "inEqSimp_commuteLeq" (formula "2"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0"))
                     (rule "mod_axiom" (formula "8") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                     (rule "polySimp_homoEq" (formula "8"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0"))
                     (rule "polySimp_sepPosMonomial" (formula "8"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1"))
                     (rule "polySimp_rightDist" (formula "8") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                     (rule "mul_literals" (formula "8") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                     (rule "inEqSimp_strengthen0" (formula "16") (ifseqformula "18"))
                     (rule "add_literals" (formula "16") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "18") (ifseqformula "16"))
                     (rule "mul_literals" (formula "18") (term "1,0,0"))
                     (rule "add_literals" (formula "18") (term "0,0"))
                     (rule "qeq_literals" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "false_right" (formula "18"))
                     (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "5"))
                     (rule "leq_literals" (formula "6") (term "0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "15"))
                     (rule "leq_literals" (formula "11") (term "0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                     (rule "leq_literals" (formula "6") (term "0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "12"))
                     (rule "leq_literals" (formula "10") (term "0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "true_left" (formula "10"))
                     (rule "polyMod_pullOut" (formula "15") (term "0") (inst "polyDivCoeff=mul(div(word, pow(Z(2(#)), i_0)), Z(neglit(1(#))))"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                     (rule "polySimp_pullOutFactor0" (formula "15") (term "0,0,0"))
                     (rule "add_literals" (formula "15") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "0,0,0"))
                     (rule "newSym_eq" (formula "6") (inst "l=l_0") (inst "newSymDef=add(Z(neglit(1(#))), mul(bitIndex, Z(0(#))))"))
                     (rule "times_zero_1" (formula "6") (term "1,1,1"))
                     (rule "add_zero_right" (formula "6") (term "1,1"))
                     (rule "polySimp_addComm0" (formula "6") (term "1"))
                     (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "6"))
                     (rule "polySimp_mulComm0" (formula "7") (term "0"))
                     (rule "polySimp_rightDist" (formula "7") (term "0"))
                     (rule "mul_literals" (formula "7") (term "0,0"))
                     (rule "polySimp_homoEq" (formula "7"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0"))
                     (rule "mul_literals" (formula "7") (term "0,1,0"))
                     (rule "polySimp_addComm1" (formula "7") (term "0"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
                     (rule "add_literals" (formula "7") (term "0,0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "7"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                     (rule "mul_literals" (formula "7") (term "0,1"))
                     (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "12") (term "0") (ifseqformula "7"))
                     (rule "applyEq" (formula "13") (term "0") (ifseqformula "7"))
                     (rule "inEqSimp_homoInEq0" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0"))
                     (rule "add_literals" (formula "13") (term "0,0"))
                     (rule "applyEq" (formula "15") (term "1") (ifseqformula "7"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                     (rule "mul_literals" (formula "12") (term "1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "13") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(4(6(#)))"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0"))
                     (rule "neg_literal" (formula "13") (term "0,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "13") (term "0,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "polySimp_addLiterals" (formula "13") (term "0,0,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
                     (rule "add_literals" (formula "13") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0"))
                     (rule "qeq_literals" (formula "13") (term "0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_contradInEq3" (formula "12") (ifseqformula "13"))
                     (rule "times_zero_1" (formula "12") (term "0,1,0"))
                     (rule "greater_literals" (formula "12") (term "0,0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "qeq_literals" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "closeFalse" (formula "12"))
                  )
               )
            )
         )
         (branch "Assume moduloLong(pow(2, bitIndex % 64)) != -pow(2, 63)"
             (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "7")))
            (rule "expand_inLong" (formula "4"))
            (rule "expand_inInt" (formula "5"))
            (rule "expand_inLong" (formula "9") (term "0,0,0,0"))
            (rule "expand_inLong" (formula "9") (term "1,0,0,0"))
            (rule "expand_inLong" (formula "9") (term "1,0,0"))
            (rule "pow_literals" (formula "1") (term "0,1,0"))
            (rule "expand_inInt" (formula "11") (term "1,0,0,1"))
            (rule "replace_long_MAX" (formula "4") (term "1,0"))
            (rule "replace_long_MIN" (formula "4") (term "0,1"))
            (rule "replace_int_MIN" (formula "5") (term "0,1"))
            (rule "replace_int_MAX" (formula "5") (term "1,0"))
            (rule "replace_long_MAX" (formula "9") (term "1,0,0,0,0,0"))
            (rule "replace_long_MIN" (formula "9") (term "0,1,0,0,0,0"))
            (rule "replace_long_MAX" (formula "9") (term "1,0,1,0,0,0"))
            (rule "replace_long_MIN" (formula "9") (term "0,1,1,0,0,0"))
            (rule "replace_long_MAX" (formula "9") (term "1,0,1,0,0"))
            (rule "replace_long_MIN" (formula "9") (term "0,1,1,0,0"))
            (rule "neg_literal" (formula "1") (term "1,0"))
            (rule "replace_int_MAX" (formula "11") (term "1,0,1,0,0,1"))
            (rule "replace_int_MIN" (formula "11") (term "0,1,1,0,0,1"))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "6"))
            (rule "notLeft" (formula "1"))
            (rule "eqSymm" (formula "13") (term "1,0,1"))
            (rule "inEqSimp_ltRight" (formula "12"))
            (rule "times_zero_1" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "10"))
            (rule "mul_literals" (formula "10") (term "1,0,0"))
            (rule "add_literals" (formula "10") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,1"))
            (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0,1"))
            (rule "add_literals" (formula "13") (term "0,0,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "1,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "5"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "applyEq" (formula "12") (term "1,0,1,0,0,0,1,0,1,0,1") (ifseqformula "1"))
            (rule "pow_literals" (formula "12") (term "0,1,0,0,0,1,0,1,0,1"))
            (rule "applyEq" (formula "11") (term "1,0,0") (ifseqformula "1"))
            (rule "pow_literals" (formula "11") (term "0,0"))
            (rule "applyEq" (formula "12") (term "1,0,1,0,0,0,0,0") (ifseqformula "1"))
            (rule "pow_literals" (formula "12") (term "0,1,0,0,0,0,0"))
            (rule "mod_axiom" (formula "1") (term "0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
            (rule "polySimp_homoEq" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_sepPosMonomial" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9"))
            (rule "mul_literals" (formula "9") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,1"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0,0,1"))
            (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "9"))
            (rule "leq_literals" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
            (rule "leq_literals" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "newSym_eq" (formula "1") (inst "l=l_0") (inst "newSymDef=add(Z(neglit(1(#))), mul(bitIndex, Z(0(#))))"))
            (rule "times_zero_1" (formula "1") (term "1,1,1"))
            (rule "add_zero_right" (formula "1") (term "1,1"))
            (rule "polySimp_addComm0" (formula "1") (term "1"))
            (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
            (rule "polySimp_mulComm0" (formula "2") (term "0"))
            (rule "polySimp_rightDist" (formula "2") (term "0"))
            (rule "mul_literals" (formula "2") (term "0,0"))
            (rule "polySimp_homoEq" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0"))
            (rule "polySimp_sepPosMonomial" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "2"))
            (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "2"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq0" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0"))
            (rule "add_literals" (formula "8") (term "0,0"))
            (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
            (rule "applyEq" (formula "11") (term "1,0,1,0,0,0,0,1") (ifseqformula "2"))
            (rule "inEqSimp_sepPosMonomial1" (formula "7"))
            (rule "mul_literals" (formula "7") (term "1"))
            (rule "inEqSimp_sepNegMonomial1" (formula "8"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0"))
            (rule "elimGcdLeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(4(6(#)))"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,1,0"))
            (rule "neg_literal" (formula "8") (term "0,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "8") (term "0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
            (rule "add_literals" (formula "8") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0"))
            (rule "qeq_literals" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "elimGcdGeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(4(6(#)))"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "7") (term "0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
            (rule "add_literals" (formula "7") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0"))
            (rule "leq_literals" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "polyDiv_pullOut" (formula "1") (term "0") (inst "polyDivCoeff=l_0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
            (rule "equal_literals" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0"))
            (rule "div_literals" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "7"))
            (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "6"))
            (rule "leq_literals" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "applyEqRigid" (formula "10") (term "0,1,1,1,0,0,0") (ifseqformula "6"))
            (rule "mul_literals" (formula "10") (term "1,1,1,0,0,0"))
            (rule "add_literals" (formula "10") (term "1,1,0,0,0"))
            (rule "pow_literals" (formula "10") (term "1,0,0,0"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
            (rule "qeq_literals" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "applyEqRigid" (formula "9") (term "0,1,1,0,1,0,0,0,0,1") (ifseqformula "6"))
            (rule "mul_literals" (formula "9") (term "1,1,0,1,0,0,0,0,1"))
            (rule "add_literals" (formula "9") (term "1,0,1,0,0,0,0,1"))
            (rule "applyEq" (formula "1") (term "0,1,1") (ifseqformula "6"))
            (rule "mul_literals" (formula "1") (term "1,1"))
            (rule "add_literals" (formula "1") (term "1"))
            (rule "expand_moduloLong" (formula "9") (term "1,0,0,0,1,0,1,0,1"))
            (rule "replace_long_RANGE" (formula "9") (term "1,1,1,0,0,0,1,0,1,0,1"))
            (rule "replace_long_HALFRANGE" (formula "9") (term "0,0,1,1,0,0,0,1,0,1,0,1"))
            (rule "replace_long_MIN" (formula "9") (term "0,1,0,0,0,1,0,1,0,1"))
            (rule "add_literals" (formula "9") (term "0,1,1,0,0,0,1,0,1,0,1"))
            (rule "mod_axiom" (formula "9") (term "1,1,0,0,0,1,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0,1,0,1,0,1"))
            (rule "div_literals" (formula "9") (term "0,1,1,1,0,0,0,1,0,1,0,1"))
            (rule "mul_literals" (formula "9") (term "1,1,1,0,0,0,1,0,1,0,1"))
            (rule "add_literals" (formula "9") (term "1,1,0,0,0,1,0,1,0,1"))
            (rule "add_zero_right" (formula "9") (term "1,0,0,0,1,0,1,0,1"))
            (rule "expand_moduloLong" (formula "8") (term "0"))
            (rule "replace_long_RANGE" (formula "8") (term "1,1,0"))
            (rule "replace_long_HALFRANGE" (formula "8") (term "0,0,1,0"))
            (rule "replace_long_MIN" (formula "8") (term "0,0"))
            (rule "add_literals" (formula "8") (term "0,1,0"))
            (rule "polySimp_homoEq" (formula "8"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0"))
            (rule "add_literals" (formula "8") (term "0,0"))
            (rule "add_zero_left" (formula "8") (term "0"))
            (rule "mod_axiom" (formula "8") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
            (rule "div_literals" (formula "8") (term "0,1,0,0"))
            (rule "mul_literals" (formula "8") (term "1,0,0"))
            (rule "add_literals" (formula "8") (term "0,0"))
            (rule "mul_literals" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "closeTrue" (formula "8"))
         )
      )
      (branch "CUT: bitIndex % 64 = 63 FALSE"
         (rule "eqTermCut" (formula "10") (term "1,0,0,1,0") (inst "s=pow(Z(2(#)), mod(bitIndex, Z(4(6(#)))))") (userinteraction))
         (branch "Assume moduloLong(pow(2, bitIndex % 64)) = pow(2, bitIndex % 64)"
            (rule "applyEq" (formula "11") (term "1,0,0,1,0") (ifseqformula "1") (userinteraction))
            (rule "instAll" (formula "11") (term "0,0,0,1,0") (ifseqformula "8") (userinteraction))
            (rule "instAll" (formula "12") (term "1,0,0,1,0") (ifseqformula "1") (userinteraction))
            (rule "impLeft" (formula "1") (userinteraction))
            (branch "Case 1"
                (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "7")))
               (rule "expand_inLong" (formula "10") (term "0"))
               (rule "expand_inLong" (formula "10") (term "1"))
               (rule "expand_inLong" (formula "4"))
               (rule "expand_inInt" (formula "5"))
               (rule "expand_inLong" (formula "9") (term "0,0,0,0"))
               (rule "expand_inLong" (formula "9") (term "1,0,0,0"))
               (rule "expand_inLong" (formula "9") (term "1,0,0"))
               (rule "expand_inLong" (formula "1") (term "0,0,0"))
               (rule "expand_inLong" (formula "1") (term "1,0,0"))
               (rule "expand_inLong" (formula "1") (term "1,0"))
               (rule "expand_inInt" (formula "13") (term "1,0,0,1"))
               (rule "replace_long_MIN" (formula "10") (term "0,1,0"))
               (rule "replace_long_MAX" (formula "10") (term "1,0,0"))
               (rule "replace_long_MIN" (formula "10") (term "0,1,1"))
               (rule "replace_long_MAX" (formula "10") (term "1,0,1"))
               (rule "replace_long_MIN" (formula "4") (term "0,1"))
               (rule "replace_long_MAX" (formula "4") (term "1,0"))
               (rule "replace_int_MAX" (formula "5") (term "1,0"))
               (rule "replace_int_MIN" (formula "5") (term "0,1"))
               (rule "replace_long_MIN" (formula "9") (term "0,1,0,0,0,0"))
               (rule "replace_long_MAX" (formula "9") (term "1,0,0,0,0,0"))
               (rule "replace_long_MIN" (formula "9") (term "0,1,1,0,0,0"))
               (rule "replace_long_MAX" (formula "9") (term "1,0,1,0,0,0"))
               (rule "replace_long_MAX" (formula "9") (term "1,0,1,0,0"))
               (rule "replace_long_MIN" (formula "9") (term "0,1,1,0,0"))
               (rule "replace_long_MAX" (formula "1") (term "1,0,0,0,0"))
               (rule "replace_long_MIN" (formula "1") (term "0,1,0,0,0"))
               (rule "replace_long_MIN" (formula "1") (term "0,1,1,0,0"))
               (rule "replace_long_MAX" (formula "1") (term "1,0,1,0,0"))
               (rule "replace_long_MIN" (formula "1") (term "0,1,1,0"))
               (rule "replace_long_MAX" (formula "1") (term "1,0,1,0"))
               (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,1"))
               (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,1"))
               (rule "andLeft" (formula "4"))
               (rule "andLeft" (formula "6"))
               (rule "eqSymm" (formula "15") (term "1,0,1"))
               (rule "replace_known_left" (formula "1") (term "1,0,0,0") (ifseqformula "5"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
               (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "5")))
               (rule "inEqSimp_ltRight" (formula "14"))
               (rule "times_zero_1" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "11"))
               (rule "mul_literals" (formula "11") (term "1,0,0"))
               (rule "add_literals" (formula "11") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,1"))
               (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "inEqSimp_commuteLeq" (formula "8"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "1"))
               (rule "mod_axiom" (formula "3") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1"))
               (rule "mod_axiom" (formula "3") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
               (rule "mod_axiom" (formula "14") (term "0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
               (rule "polySimp_homoEq" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0"))
               (rule "mod_axiom" (formula "15") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,0,0"))
               (rule "mod_axiom" (formula "15") (term "1,1,0,0,0,1,0,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,1,0,1,0,1"))
               (rule "mod_axiom" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
               (rule "mod_axiom" (formula "1") (term "0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
               (rule "mod_axiom" (formula "13") (term "1,0,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1"))
               (rule "polySimp_sepPosMonomial" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1"))
               (rule "polySimp_rightDist" (formula "14") (term "1"))
               (rule "mul_literals" (formula "14") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11"))
               (rule "mul_literals" (formula "11") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,1"))
               (rule "mul_literals" (formula "15") (term "1,1,0,0,0,1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "11"))
               (rule "leq_literals" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
               (rule "leq_literals" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "expand_moduloLong" (formula "3") (term "0"))
               (rule "replace_long_MIN" (formula "3") (term "0,0"))
               (rule "replace_long_RANGE" (formula "3") (term "1,1,0"))
               (rule "replace_long_HALFRANGE" (formula "3") (term "0,0,1,0"))
               (rule "polySimp_homoEq" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0"))
               (rule "mul_literals" (formula "3") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0"))
               (rule "polySimp_sepNegMonomial" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "nnf_imp2or" (formula "2") (term "0"))
               (rule "expand_moduloLong" (formula "13") (term "0,0,0,0"))
               (rule "replace_long_RANGE" (formula "13") (term "1,1,0,0,0,0"))
               (rule "replace_long_HALFRANGE" (formula "13") (term "0,0,1,0,0,0,0"))
               (rule "replace_long_MIN" (formula "13") (term "0,0,0,0,0"))
               (rule "nnf_imp2or" (formula "10") (term "0,0"))
               (rule "expand_moduloLong" (formula "13") (term "0,0,1,0,1,0,1"))
               (rule "replace_long_RANGE" (formula "13") (term "1,1,0,0,1,0,1,0,1"))
               (rule "replace_long_HALFRANGE" (formula "13") (term "0,0,1,0,0,1,0,1,0,1"))
               (rule "replace_long_MIN" (formula "13") (term "0,0,0,1,0,1,0,1"))
               (rule "nnf_notAnd" (formula "2") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "2") (term "1,0,0"))
               (rule "mul_literals" (formula "2") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0"))
               (rule "mul_literals" (formula "2") (term "1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "2") (term "0,0,0"))
               (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,0,0"))
               (rule "mul_literals" (formula "2") (term "1,0,0,0"))
               (rule "nnf_imp2or" (formula "13") (term "0,1"))
               (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
               (rule "nnf_notAnd" (formula "13") (term "0,0,1"))
               (rule "nnf_notAnd" (formula "10") (term "1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "10") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,1,1,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,1,1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "10") (term "0,1,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,0,1,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,1,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,1,0,0,0"))
               (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "13") (term "0,0,0,1"))
               (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,1"))
               (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0,1"))
               (rule "add_literals" (formula "13") (term "0,0,1,0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,1"))
               (rule "mul_literals" (formula "13") (term "1,1,0,0,0,1"))
               (rule "nnf_notAnd" (formula "13") (term "1,0,0,1"))
               (rule "inEqSimp_notGeq" (formula "13") (term "1,1,0,0,1"))
               (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0,1"))
               (rule "add_literals" (formula "13") (term "0,0,1,1,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0,0,1"))
               (rule "mul_literals" (formula "13") (term "1,1,1,0,0,1"))
               (rule "inEqSimp_notLeq" (formula "13") (term "0,1,0,0,1"))
               (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0,1"))
               (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,1,0,0,1"))
               (rule "mul_literals" (formula "13") (term "1,0,1,0,0,1"))
               (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,1"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,1"))
               (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,1"))
               (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,1"))
               (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,1"))
               (rule "commute_and" (formula "11"))
               (rule "commute_or" (formula "2") (term "0,0"))
               (rule "commute_and" (formula "2") (term "1,0"))
               (rule "commute_and" (formula "10") (term "1,0,0"))
               (rule "commute_or" (formula "10") (term "1,0,0,0"))
               (rule "commute_or" (formula "10") (term "0,0,0,0"))
               (rule "cnf_rightDist" (formula "2") (term "0"))
               (rule "distr_forallAnd" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "commute_or" (formula "3") (term "0"))
               (rule "shift_paren_or" (formula "11") (term "0,0,0"))
               (rule "cnf_rightDist" (formula "11") (term "0,0"))
               (rule "distr_forallAnd" (formula "11") (term "0"))
               (rule "distr_forallAnd" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "commute_or" (formula "12") (term "0,0"))
               (rule "div_axiom" (formula "14") (term "0,0") (inst "quotient=quotient_0"))
               (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
               (rule "qeq_literals" (formula "1") (term "0,1,1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "equal_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "polySimp_addComm1" (formula "3") (term "1"))
               (rule "add_literals" (formula "3") (term "0,1"))
               (rule "inEqSimp_commuteLeq" (formula "2"))
               (rule "inEqSimp_homoInEq1" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "applyEq" (formula "18") (term "0,1,1,1,1,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "polySimp_addComm0" (formula "18") (term "1,1,1,0,1,0,0,0,0"))
               (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "1"))
               (rule "inEqSimp_commuteLeq" (formula "4"))
               (rule "applyEq" (formula "15") (term "0,1,1,0,0") (ifseqformula "1"))
               (rule "polySimp_addComm0" (formula "15") (term "1,0,0"))
               (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "1"))
               (rule "polySimp_homoEq" (formula "16"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0"))
               (rule "applyEq" (formula "17") (term "0,1,1,1,1,0,1,0,0,1,0,1,0,1") (ifseqformula "1"))
               (rule "polySimp_addComm0" (formula "17") (term "1,1,1,0,1,0,0,1,0,1,0,1"))
               (rule "applyEq" (formula "15") (term "0,1,1,0,1") (ifseqformula "1"))
               (rule "polySimp_addComm0" (formula "15") (term "1,0,1"))
               (rule "applyEq" (formula "6") (term "0,1,1,1,0,0") (ifseqformula "1"))
               (rule "polySimp_addComm0" (formula "6") (term "1,1,0,0"))
               (rule "applyEq" (formula "6") (term "0,1,1,1,1") (ifseqformula "1"))
               (rule "polySimp_addComm0" (formula "6") (term "1,1,1"))
               (rule "mod_axiom" (formula "17") (term "1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "17") (term "0,0,0,0,0"))
               (rule "mod_axiom" (formula "17") (term "1,0,0,1,0,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,1,0,1"))
               (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,1,0,1"))
               (rule "add_zero_left" (formula "17") (term "0,0,0,1,0,1,0,1"))
               (rule "mod_axiom" (formula "6") (term "0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
               (rule "polySimp_homoEq" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
               (rule "polySimp_rightDist" (formula "6") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "6") (term "0,1,0"))
               (rule "mul_literals" (formula "6") (term "0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0,0,0"))
               (rule "add_literals" (formula "6") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "6") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1" (formula "6") (term "0,0"))
               (rule "add_literals" (formula "6") (term "1,0,0"))
               (rule "times_zero_1" (formula "6") (term "0,0"))
               (rule "add_zero_left" (formula "6") (term "0"))
               (rule "polySimp_sepPosMonomial" (formula "16"))
               (rule "polySimp_mulComm0" (formula "16") (term "1"))
               (rule "polySimp_rightDist" (formula "16") (term "1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
               (rule "mul_literals" (formula "16") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "mul_literals" (formula "3") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
               (rule "inEqSimp_strengthen0" (formula "3") (ifseqformula "16"))
               (rule "polySimp_addAssoc" (formula "3") (term "1"))
               (rule "add_literals" (formula "3") (term "0,1"))
               (rule "inEqSimp_contradEq3" (formula "16") (ifseqformula "3"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
               (rule "polySimp_addComm1" (formula "16") (term "0,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
               (rule "add_literals" (formula "16") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "16") (term "1,0,0"))
               (rule "add_zero_right" (formula "16") (term "0,0"))
               (rule "qeq_literals" (formula "16") (term "0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "false_right" (formula "16"))
               (rule "elimGcdEq" (formula "6") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
        pow(Z(2(#)),
            add(mul(quotient_0, Z(neglit(4(6(#))))),
                bitIndex))),
    Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#))))))))))))))))))))))") (inst "elimGcd=Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "add_zero_left" (formula "6") (term "0,0,0"))
               (rule "add_zero_left" (formula "6") (term "0,0,1"))
               (rule "times_zero_1" (formula "6") (term "1,0,1,0"))
               (rule "add_literals" (formula "6") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1"))
               (rule "add_zero_left" (formula "6") (term "0,1,0"))
               (rule "times_zero_1" (formula "6") (term "0,0,0"))
               (rule "mul_literals" (formula "6") (term "0,0,1"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "leq_literals" (formula "6") (term "0,0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "qeq_literals" (formula "6") (term "0"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "12"))
               (rule "polySimp_mulAssoc" (formula "2") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
               (rule "polySimp_addComm0" (formula "2") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(4(6(#)))"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
               (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "2") (term "0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
               (rule "add_literals" (formula "2") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0"))
               (rule "qeq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "4"))
               (rule "times_zero_1" (formula "12") (term "0,0"))
               (rule "add_zero_left" (formula "12") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12"))
               (rule "mul_literals" (formula "12") (term "1"))
               (rule "elimGcdGeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(4(6(#)))"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "12") (term "0,0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "polySimp_addLiterals" (formula "12") (term "0,0,0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
               (rule "add_literals" (formula "12") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "12") (term "1,0,0"))
               (rule "add_zero_right" (formula "12") (term "0,0"))
               (rule "leq_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "inEqSimp_antiSymm" (formula "12") (ifseqformula "2"))
               (rule "applyEqRigid" (formula "13") (term "0") (ifseqformula "12"))
               (rule "qeq_literals" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "applyEqRigid" (formula "3") (term "0,1") (ifseqformula "12"))
               (rule "times_zero_2" (formula "3") (term "1"))
               (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "11"))
               (rule "leq_literals" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "applyEqRigid" (formula "2") (term "0,1,1") (ifseqformula "10"))
               (rule "times_zero_2" (formula "2") (term "1,1"))
               (rule "add_zero_right" (formula "2") (term "1"))
               (rule "applyEq" (formula "1") (term "1") (ifseqformula "10"))
               (rule "applyEq" (formula "15") (term "0,0,1,0,1") (ifseqformula "10"))
               (rule "times_zero_2" (formula "15") (term "0,1,0,1"))
               (rule "add_zero_left" (formula "15") (term "1,0,1"))
               (rule "applyEq" (formula "16") (term "0,0,1,1,1,0,0,1,0,0,1,0,1,0,1") (ifseqformula "10"))
               (rule "times_zero_2" (formula "16") (term "0,1,1,1,0,0,1,0,0,1,0,1,0,1"))
               (rule "add_zero_left" (formula "16") (term "1,1,1,0,0,1,0,0,1,0,1,0,1"))
               (rule "polySimp_addComm0" (formula "16") (term "0,0,1,0,1,0,1"))
               (rule "applyEq" (formula "16") (term "0,0,1,1,1,0,0,1,0,0,0,0") (ifseqformula "10"))
               (rule "times_zero_2" (formula "16") (term "0,1,1,1,0,0,1,0,0,0,0"))
               (rule "add_zero_left" (formula "16") (term "1,1,1,0,0,1,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "16") (term "0,0,0,0"))
               (rule "applyEq" (formula "5") (term "0,0,1,1,0,0") (ifseqformula "10"))
               (rule "times_zero_2" (formula "5") (term "0,1,1,0,0"))
               (rule "add_zero_left" (formula "5") (term "1,1,0,0"))
               (rule "applyEq" (formula "15") (term "0,0,1,0,0") (ifseqformula "10"))
               (rule "times_zero_2" (formula "15") (term "0,1,0,0"))
               (rule "add_zero_left" (formula "15") (term "1,0,0"))
               (rule "applyEq" (formula "16") (term "0,0,1,1,1,0,0,0,0") (ifseqformula "10"))
               (rule "times_zero_2" (formula "16") (term "0,1,1,1,0,0,0,0"))
               (rule "add_zero_left" (formula "16") (term "1,1,1,0,0,0,0"))
               (rule "polySimp_addComm0" (formula "16") (term "0,0,0,0"))
               (rule "applyEqRigid" (formula "16") (term "0,0,1,1,1,0,0,1,0,1,0,1") (ifseqformula "10"))
               (rule "times_zero_2" (formula "16") (term "0,1,1,1,0,0,1,0,1,0,1"))
               (rule "add_zero_left" (formula "16") (term "1,1,1,0,0,1,0,1,0,1"))
               (rule "polySimp_addComm0" (formula "16") (term "0,0,1,0,1,0,1"))
               (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "2"))
               (rule "leq_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "div_axiom" (formula "5") (term "0") (inst "quotient=quotient_1"))
               (rule "equal_literals" (formula "5") (term "0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "qeq_literals" (formula "5") (term "0,1"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "mul_literals" (formula "5") (term "1,1,1"))
               (rule "andLeft" (formula "5"))
               (rule "andLeft" (formula "5"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
               (rule "add_literals" (formula "7") (term "0,0,1"))
               (rule "polySimp_addComm1" (formula "7") (term "1"))
               (rule "add_literals" (formula "7") (term "0,1"))
               (rule "inEqSimp_homoInEq0" (formula "6"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
               (rule "polySimp_addComm1" (formula "6") (term "0"))
               (rule "inEqSimp_homoInEq1" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
               (rule "polySimp_addComm1" (formula "7") (term "0"))
               (rule "applyEq" (formula "5") (term "0") (ifseqformula "8"))
               (rule "eqSymm" (formula "5"))
               (rule "applyEqRigid" (formula "7") (term "0,1,0,0") (ifseqformula "5"))
               (rule "times_zero_2" (formula "7") (term "1,0,0"))
               (rule "add_zero_right" (formula "7") (term "0,0"))
               (rule "applyEqRigid" (formula "6") (term "0,1,0,0") (ifseqformula "5"))
               (rule "times_zero_2" (formula "6") (term "1,0,0"))
               (rule "add_zero_right" (formula "6") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7"))
               (rule "mul_literals" (formula "7") (term "1"))
               (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "inEqSimp_geqRight" (formula "17"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7"))
               (rule "mul_literals" (formula "7") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "7"))
               (rule "qeq_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Case 2"
               (rule "moduloLongFixpoint" (formula "13") (term "0,1,0") (ifseqformula "1") (userinteraction))
               (rule "hide_left" (formula "2") (userinteraction))
               (rule "hide_left" (formula "9") (userinteraction))
               (rule "pullOut" (formula "1") (term "1,1,0") (inst "sk=mod_0") (userinteraction))
               (rule "cut" (inst "cutFormula=lt(mod_0, Z(3(6(#))))<<origin(\"User_Interaction @ node 64545 (cut)\",\"[]\")>>") (userinteraction))
               (branch "CUT: mod_0 < 63 TRUE"
                  (rule "applyEq" (formula "4") (term "1,0,0") (ifseqformula "2") (userinteraction))
                  (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "2") (userinteraction))
                  (rule "applyEq" (formula "13") (term "1,1,0,1,0") (ifseqformula "2") (userinteraction))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "2") (userinteraction))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "2") (userinteraction))
                   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "9")))
                  (rule "cut" (inst "cutFormula=lt(mod_0, Z(3(6(#))))<<origin(\"User_Interaction @ node 68364 (cut)\",\"[]\")>>") (userinteraction))
                  (branch "CUT: mod_0 < 63 TRUE"
                     (rule "eqSymm" (formula "13") (term "1,0,1"))
                     (rule "inEqSimp_ltRight" (formula "12"))
                     (rule "times_zero_1" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,1"))
                     (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0,1"))
                     (rule "add_literals" (formula "13") (term "0,0,1,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1,0,0"))
                     (rule "add_literals" (formula "2") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11"))
                     (rule "mul_literals" (formula "11") (term "1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,1"))
                     (rule "mul_literals" (formula "13") (term "1,1,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                     (rule "mul_literals" (formula "11") (term "1"))
                     (rule "inEqSimp_contradEq3" (formula "12") (ifseqformula "2"))
                     (rule "mul_literals" (formula "12") (term "1,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0"))
                     (rule "qeq_literals" (formula "12") (term "0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "false_right" (formula "12"))
                     (rule "hide_left" (formula "3") (userinteraction))
                     (rule "insert_hidden_taclet0010110_2" (userinteraction))
                     (rule "cut" (inst "cutFormula=(  bitIndex<<origin(\"User_Interaction @ node 70348 (cut)\",\"[]\")>>
 = mod_0)<<origin(\"User_Interaction @ node 70348 (cut)\",\"[]\")>>") (userinteraction))
                     (branch "CUT: bitIndex = mod_0 TRUE"
                        (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "1") (userinteraction))
                        (rule "applyEqReverse" (formula "3") (term "0") (ifseqformula "1") (userinteraction))
                        (rule "hide_left" (formula "11") (userinteraction))
                        (rule "applyEqReverse" (formula "4") (term "1,1,0") (ifseqformula "1") (userinteraction))
                        (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "1") (userinteraction))
                        (rule "applyEqReverse" (formula "5") (term "1,0,0") (ifseqformula "1") (userinteraction))
                        (rule "applyEqReverse" (formula "11") (term "1,1,0,0,0,0") (ifseqformula "1") (userinteraction))
                        (rule "applyEqReverse" (formula "11") (term "1,1,0,0,1,0,1,0,1") (ifseqformula "1") (userinteraction))
                        (rule "hide_left" (formula "1") (userinteraction))
                        (rule "hide_left" (formula "1") (userinteraction))
                        (rule "hide_left" (formula "3") (userinteraction))
                        (rule "hide_left" (formula "3") (userinteraction))
                        (rule "hide_left" (formula "5") (userinteraction))
                        (rule "hide_left" (formula "4") (userinteraction))
                        (rule "andRight" (formula "5"))
                        (branch "Case 1"
                            (opengoal " ")
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "5") (inst "sk=i_0") (userinteraction))
                           (rule "impRight" (formula "5") (userinteraction))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "2"))
                           (rule "replace_known_left" (formula "9") (term "0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "1")))
                           (rule "hide_left" (formula "3") (userinteraction))
                            (opengoal " ")
                        )
                     )
                     (branch "CUT: bitIndex = mod_0 FALSE"
                        (rule "expand_inInt" (formula "8"))
                        (rule "expand_inInt" (formula "13") (term "1,0,0,1"))
                        (rule "expand_inLong" (formula "7"))
                        (rule "expand_inLong" (formula "4"))
                        (rule "replace_int_MIN" (formula "8") (term "0,1"))
                        (rule "replace_int_MAX" (formula "8") (term "1,0"))
                        (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,1"))
                        (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,1"))
                        (rule "replace_long_MAX" (formula "7") (term "1,0"))
                        (rule "replace_long_MIN" (formula "7") (term "0,1"))
                        (rule "replace_long_MIN" (formula "4") (term "0,1"))
                        (rule "replace_long_MAX" (formula "4") (term "1,0"))
                        (rule "andLeft" (formula "8"))
                        (rule "andLeft" (formula "7"))
                        (rule "andLeft" (formula "4"))
                        (rule "eqSymm" (formula "15"))
                        (rule "inEqSimp_commuteLeq" (formula "16") (term "1,1,0,0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "11"))
                        (rule "inEqSimp_commuteLeq" (formula "9"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "mod_axiom" (formula "1") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0"))
                        (rule "applyEq" (formula "6") (term "1,0,0") (ifseqformula "1"))
                        (rule "eqSymm" (formula "6"))
                        (rule "applyEq" (formula "4") (term "1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "15") (term "0") (ifseqformula "1"))
                        (rule "polySimp_homoEq" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "polySimp_pullOutFactor1" (formula "15") (term "0,0"))
                        (rule "add_literals" (formula "15") (term "1,0,0"))
                        (rule "times_zero_1" (formula "15") (term "0,0"))
                        (rule "add_zero_left" (formula "15") (term "0"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "applyEq" (formula "16") (term "1,1,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "16") (term "1,1,0,0,1,0,1,0,1") (ifseqformula "1"))
                        (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "1"))
                        (rule "eqSymm" (formula "6"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "14"))
                        (rule "leq_literals" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "12"))
                        (rule "leq_literals" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "elimGcdEq" (formula "13") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=div(bitIndex, Z(4(6(#))))") (inst "elimGcd=Z(4(6(#)))"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "add_zero_left" (formula "13") (term "0,0,1"))
                        (rule "add_zero_left" (formula "13") (term "0,0,0"))
                        (rule "add_zero_left" (formula "13") (term "0,1,0"))
                        (rule "add_literals" (formula "13") (term "1,0,0"))
                        (rule "times_zero_1" (formula "13") (term "0,0,1"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "times_zero_1" (formula "13") (term "0,1,0"))
                        (rule "times_zero_1" (formula "13") (term "0,0,0"))
                        (rule "qeq_literals" (formula "13") (term "1,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "leq_literals" (formula "13") (term "0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "expand_moduloLong" (formula "6") (term "0"))
                        (rule "replace_long_RANGE" (formula "6") (term "1,1,0"))
                        (rule "replace_long_HALFRANGE" (formula "6") (term "0,0,1,0"))
                        (rule "replace_long_MIN" (formula "6") (term "0,0"))
                        (rule "polySimp_homoEq" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0"))
                        (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                        (rule "polySimp_sepNegMonomial" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                        (rule "polySimp_elimOne" (formula "6") (term "0"))
                        (rule "nnf_imp2or" (formula "14") (term "0,1"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0,1"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0,1"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0,0,1"))
                        (rule "add_literals" (formula "14") (term "0,0,1,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0,1"))
                        (rule "mul_literals" (formula "14") (term "1,1,0,0,0,1"))
                        (rule "nnf_notAnd" (formula "14") (term "1,0,0,1"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "0,1,0,0,1"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,0,1"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,1,0,0,1"))
                        (rule "mul_literals" (formula "14") (term "1,0,1,0,0,1"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,1,1,0,0,1"))
                        (rule "add_literals" (formula "14") (term "0,0,1,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "14") (term "1,1,1,0,0,1"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0,0,0,1"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0,0,1"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0,0,1"))
                        (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0,1"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,1"))
                        (rule "div_axiom" (formula "1") (term "0,1,1") (inst "quotient=quotient_0"))
                        (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                        (rule "qeq_literals" (formula "1") (term "0,1,1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "equal_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "polySimp_addComm1" (formula "3") (term "1"))
                        (rule "add_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_commuteLeq" (formula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "applyEq" (formula "16") (term "0") (ifseqformula "1"))
                        (rule "applyEq" (formula "7") (term "0,1,1,1,0") (ifseqformula "1"))
                        (rule "polySimp_addComm0" (formula "7") (term "1,1,0"))
                        (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "1"))
                        (rule "inEqSimp_commuteLeq" (formula "5"))
                        (rule "applyEq" (formula "16") (term "0,1,1,1,0,0,0,0") (ifseqformula "1"))
                        (rule "polySimp_addComm0" (formula "16") (term "1,1,0,0,0,0"))
                        (rule "applyEq" (formula "8") (term "0,1,1,1,0,0") (ifseqformula "1"))
                        (rule "polySimp_addComm0" (formula "8") (term "1,1,0,0"))
                        (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "applyEq" (formula "7") (term "0,1,1,1,0") (ifseqformula "1"))
                        (rule "polySimp_addComm0" (formula "7") (term "1,1,0"))
                        (rule "applyEq" (formula "16") (term "0,1,1,1,0,0,1,0,1,0,1") (ifseqformula "1"))
                        (rule "polySimp_addComm0" (formula "16") (term "1,1,0,0,1,0,1,0,1"))
                        (rule "applyEq" (formula "8") (term "0,1,1,1,1") (ifseqformula "1"))
                        (rule "polySimp_addComm0" (formula "8") (term "1,1,1"))
                        (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "1"))
                        (rule "polySimp_addComm0" (formula "4") (term "1"))
                        (rule "mod_axiom" (formula "8") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                        (rule "polySimp_homoEq" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "8") (term "0,1,0"))
                        (rule "mul_literals" (formula "8") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0"))
                        (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                        (rule "add_literals" (formula "8") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "8") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "8") (term "0,0"))
                        (rule "add_literals" (formula "8") (term "1,0,0"))
                        (rule "times_zero_1" (formula "8") (term "0,0"))
                        (rule "add_zero_left" (formula "8") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "mul_literals" (formula "3") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "5"))
                        (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                        (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_zero_right" (formula "3") (term "0,0"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "elimGcdEq" (formula "7") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
        pow(Z(2(#)),
            add(mul(quotient_0, Z(neglit(4(6(#))))),
                bitIndex))),
    Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#))))))))))))))))))))))") (inst "elimGcd=Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "add_zero_left" (formula "7") (term "0,0,1"))
                        (rule "add_zero_left" (formula "7") (term "0,1,0"))
                        (rule "add_zero_left" (formula "7") (term "0,0,0"))
                        (rule "add_literals" (formula "7") (term "1,0,0"))
                        (rule "times_zero_1" (formula "7") (term "0,0,1"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "times_zero_1" (formula "7") (term "0,1,0"))
                        (rule "times_zero_1" (formula "7") (term "0,0,0"))
                        (rule "qeq_literals" (formula "7") (term "1,0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "leq_literals" (formula "7") (term "0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "4"))
                        (rule "times_zero_1" (formula "12") (term "0,0"))
                        (rule "add_zero_left" (formula "12") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                        (rule "mul_literals" (formula "12") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(4(6(#)))"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "12") (term "0,0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "polySimp_addLiterals" (formula "12") (term "0,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                        (rule "add_literals" (formula "12") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0,0"))
                        (rule "add_zero_right" (formula "12") (term "0,0"))
                        (rule "leq_literals" (formula "12") (term "0"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "inEqSimp_strengthen1" (formula "12") (ifseqformula "15"))
                        (rule "add_zero_right" (formula "12") (term "1"))
                        (rule "inEqSimp_contradEq7" (formula "15") (ifseqformula "12"))
                        (rule "times_zero_1" (formula "15") (term "1,0,0"))
                        (rule "add_zero_right" (formula "15") (term "0,0"))
                        (rule "leq_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "false_right" (formula "15"))
                        (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "14"))
                        (rule "polySimp_mulAssoc" (formula "2") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "inEqSimp_contradInEq5" (formula "2") (ifseqformula "13"))
                        (rule "mul_literals" (formula "2") (term "1,1,0"))
                        (rule "greater_literals" (formula "2") (term "0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                  )
                  (branch "CUT: mod_0 < 63 FALSE"
                     (rule "close" (formula "11") (ifseqformula "1"))
                  )
               )
               (branch "CUT: mod_0 < 63 FALSE"
                   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "8")))
                  (rule "expand_inInt" (formula "6"))
                  (rule "expand_inLong" (formula "5"))
                  (rule "expand_inLong" (formula "2"))
                  (rule "expand_inInt" (formula "13") (term "1,0,0,1"))
                  (rule "replace_int_MAX" (formula "6") (term "1,0"))
                  (rule "replace_int_MIN" (formula "6") (term "0,1"))
                  (rule "replace_long_MAX" (formula "5") (term "1,0"))
                  (rule "replace_long_MIN" (formula "5") (term "0,1"))
                  (rule "replace_long_MIN" (formula "2") (term "0,1"))
                  (rule "replace_long_MAX" (formula "2") (term "1,0"))
                  (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,1"))
                  (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,1"))
                  (rule "andLeft" (formula "6"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "2"))
                  (rule "eqSymm" (formula "16") (term "1,0,1"))
                  (rule "inEqSimp_ltRight" (formula "13"))
                  (rule "mul_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_ltRight" (formula "15"))
                  (rule "times_zero_1" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "14"))
                  (rule "mul_literals" (formula "14") (term "1,0,0"))
                  (rule "add_literals" (formula "14") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,0,1"))
                  (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0,0,1"))
                  (rule "add_literals" (formula "16") (term "0,0,1,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "1,1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "11"))
                  (rule "inEqSimp_commuteLeq" (formula "9"))
                  (rule "inEqSimp_commuteLeq" (formula "5"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                  (rule "applyEq" (formula "6") (term "1,0,0") (ifseqformula "3"))
                  (rule "eqSymm" (formula "6"))
                  (rule "applyEq" (formula "16") (term "1,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "15") (term "0") (ifseqformula "3"))
                  (rule "applyEq" (formula "16") (term "1,1,0,0,1,0,1,0,1") (ifseqformula "3"))
                  (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "3"))
                  (rule "eqSymm" (formula "6"))
                  (rule "mod_axiom" (formula "3") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                  (rule "eqSymm" (formula "3"))
                  (rule "applyEq" (formula "6") (term "1,0,0") (ifseqformula "3"))
                  (rule "eqSymm" (formula "6"))
                  (rule "applyEq" (formula "16") (term "1,1,0,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "16") (term "1,1,0,0,1,0,1,0,1") (ifseqformula "3"))
                  (rule "applyEq" (formula "15") (term "0") (ifseqformula "3"))
                  (rule "polySimp_homoEq" (formula "15"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "15") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                  (rule "applyEq" (formula "4") (term "1,1,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "3"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "3"))
                  (rule "eqSymm" (formula "6"))
                  (rule "polySimp_sepPosMonomial" (formula "15"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1"))
                  (rule "polySimp_rightDist" (formula "15") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                  (rule "mul_literals" (formula "15") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14"))
                  (rule "mul_literals" (formula "14") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0,1"))
                  (rule "mul_literals" (formula "16") (term "1,1,0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "15"))
                  (rule "polySimp_addAssoc" (formula "2") (term "1"))
                  (rule "add_literals" (formula "2") (term "0,1"))
                  (rule "inEqSimp_contradEq3" (formula "15") (ifseqformula "2"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
                  (rule "add_literals" (formula "15") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0"))
                  (rule "qeq_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "false_right" (formula "15"))
                  (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "13"))
                  (rule "leq_literals" (formula "11") (term "0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "13"))
                  (rule "leq_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq0" (formula "1") (term "0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "expand_moduloLong" (formula "5") (term "0"))
                  (rule "replace_long_RANGE" (formula "5") (term "1,1,0"))
                  (rule "replace_long_HALFRANGE" (formula "5") (term "0,0,1,0"))
                  (rule "replace_long_MIN" (formula "5") (term "0,0"))
                  (rule "polySimp_homoEq" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                  (rule "mul_literals" (formula "5") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0"))
                  (rule "polySimp_addComm0" (formula "5") (term "0,0"))
                  (rule "polySimp_sepNegMonomial" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0"))
                  (rule "nnf_imp2or" (formula "12") (term "0,1"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0,1"))
                  (rule "nnf_notAnd" (formula "12") (term "1,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "12") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0,1"))
                  (rule "add_literals" (formula "12") (term "0,0,1,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "12") (term "1,1,1,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "12") (term "0,1,0,0,1"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0,0,1"))
                  (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,0,0,1"))
                  (rule "mul_literals" (formula "12") (term "1,0,1,0,0,1"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,1"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0,1"))
                  (rule "add_literals" (formula "12") (term "0,0,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,1"))
                  (rule "mul_literals" (formula "12") (term "1,1,0,0,0,1"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,1"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,1"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,1"))
                  (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,1"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,1"))
                  (rule "div_axiom" (formula "2") (term "0,1,1") (inst "quotient=quotient_0"))
                  (rule "mul_literals" (formula "2") (term "1,1,1,1,1"))
                  (rule "qeq_literals" (formula "2") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "equal_literals" (formula "2") (term "0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "polySimp_addComm1" (formula "4") (term "1"))
                  (rule "add_literals" (formula "4") (term "0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "applyEq" (formula "15") (term "0,1,1,1,0,0,0,0") (ifseqformula "2"))
                  (rule "polySimp_addComm0" (formula "15") (term "1,1,0,0,0,0"))
                  (rule "applyEq" (formula "8") (term "0,1,1,1,0,0") (ifseqformula "2"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,1,0,0"))
                  (rule "applyEq" (formula "15") (term "0,1,1,1,0,0,1,0,1,0,1") (ifseqformula "2"))
                  (rule "polySimp_addComm0" (formula "15") (term "1,1,0,0,1,0,1,0,1"))
                  (rule "applyEq" (formula "6") (term "0,1,1,1,0") (ifseqformula "2"))
                  (rule "polySimp_addComm0" (formula "6") (term "1,1,0"))
                  (rule "applyEq" (formula "7") (term "0,1,1,1,0") (ifseqformula "2"))
                  (rule "polySimp_addComm0" (formula "7") (term "1,1,0"))
                  (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "applyEq" (formula "8") (term "0,1,1,1,1") (ifseqformula "2"))
                  (rule "polySimp_addComm0" (formula "8") (term "1,1,1"))
                  (rule "applyEq" (formula "5") (term "0,1,1") (ifseqformula "2"))
                  (rule "polySimp_addComm0" (formula "5") (term "1"))
                  (rule "mod_axiom" (formula "8") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
                  (rule "polySimp_homoEq" (formula "8"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "0,1,0"))
                  (rule "mul_literals" (formula "8") (term "0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "8") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1" (formula "8") (term "0,0"))
                  (rule "add_literals" (formula "8") (term "1,0,0"))
                  (rule "times_zero_1" (formula "8") (term "0,0"))
                  (rule "add_zero_left" (formula "8") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "mul_literals" (formula "4") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0,0"))
                  (rule "add_zero_right" (formula "3") (term "0,0"))
                  (rule "qeq_literals" (formula "3") (term "0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "1"))
                  (rule "andLeft" (formula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                  (rule "mul_literals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                  (rule "add_literals" (formula "3") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "1,1,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0"))
                  (rule "add_zero_right" (formula "3") (term "0"))
                  (rule "leq_literals" (formula "3"))
                  (rule "closeFalse" (formula "3"))
               )
            )
         )
         (branch "Assume moduloLong(pow(2, bitIndex % 64)) != pow(2, bitIndex % 64)"
            (rule "hide_right" (formula "11") (userinteraction))
            (rule "notLeft" (formula "1") (userinteraction))
            (rule "cut" (inst "cutFormula=leq(pow(Z(2(#)), mod(bitIndex, Z(4(6(#))))),
    pow(Z(2(#)), Z(2(6(#)))))<<origin(\"User_Interaction @ node 63214 (cut)\",\"[]\")>>") (userinteraction))
            (branch "CUT: pow(2, bitIndex % 64) ≤ pow(2, 62) TRUE"
               (rule "powPositive" (formula "9") (term "0,0") (userinteraction))
               (rule "pow_literals" (formula "2") (term "1"))
               (rule "expand_inLong" (formula "4"))
               (rule "expand_inInt" (formula "5"))
               (rule "expand_inLong" (formula "9") (term "0,0,0,0"))
               (rule "expand_inLong" (formula "9") (term "1,0,0,0"))
               (rule "expand_inLong" (formula "9") (term "1,0,0"))
               (rule "qeq_literals" (formula "1") (term "1,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "replace_long_MAX" (formula "4") (term "1,0"))
               (rule "replace_long_MIN" (formula "4") (term "0,1"))
               (rule "replace_int_MAX" (formula "5") (term "1,0"))
               (rule "replace_int_MIN" (formula "5") (term "0,1"))
               (rule "replace_long_MAX" (formula "9") (term "1,0,0,0,0,0"))
               (rule "replace_long_MIN" (formula "9") (term "0,1,0,0,0,0"))
               (rule "replace_long_MAX" (formula "9") (term "1,0,1,0,0,0"))
               (rule "replace_long_MIN" (formula "9") (term "0,1,1,0,0,0"))
               (rule "replace_long_MAX" (formula "9") (term "1,0,1,0,0"))
               (rule "replace_long_MIN" (formula "9") (term "0,1,1,0,0"))
               (rule "andLeft" (formula "4"))
               (rule "andLeft" (formula "6"))
               (rule "inEqSimp_ltRight" (formula "14"))
               (rule "times_zero_1" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_ltToLeq" (formula "11"))
               (rule "mul_literals" (formula "11") (term "1,0,0"))
               (rule "add_literals" (formula "11") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "inEqSimp_commuteLeq" (formula "8"))
               (rule "mod_axiom" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
               (rule "eqSymm" (formula "13"))
               (rule "mod_axiom" (formula "3") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
               (rule "mod_axiom" (formula "14") (term "0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
               (rule "polySimp_homoEq" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0"))
               (rule "mod_axiom" (formula "1") (term "0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
               (rule "mod_axiom" (formula "2") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
               (rule "mod_axiom" (formula "13") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
               (rule "eqSymm" (formula "13"))
               (rule "polySimp_sepPosMonomial" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1"))
               (rule "polySimp_rightDist" (formula "14") (term "1"))
               (rule "mul_literals" (formula "14") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11"))
               (rule "mul_literals" (formula "11") (term "1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
               (rule "leq_literals" (formula "8") (term "0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "10"))
               (rule "leq_literals" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "nnf_imp2or" (formula "10") (term "0,0"))
               (rule "expand_moduloLong" (formula "11") (term "0"))
               (rule "replace_long_MIN" (formula "11") (term "0,0"))
               (rule "replace_long_HALFRANGE" (formula "11") (term "0,0,1,0"))
               (rule "replace_long_RANGE" (formula "11") (term "1,1,0"))
               (rule "polySimp_homoEq" (formula "11"))
               (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
               (rule "polySimp_rightDist" (formula "11") (term "1,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "11") (term "0"))
               (rule "polySimp_addComm0" (formula "11") (term "0,0"))
               (rule "polySimp_sepNegMonomial" (formula "11"))
               (rule "polySimp_mulLiterals" (formula "11") (term "0"))
               (rule "polySimp_elimOne" (formula "11") (term "0"))
               (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
               (rule "nnf_notAnd" (formula "10") (term "1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "10") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,1,1,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,1,1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "10") (term "0,1,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,0,1,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,1,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,1,0,0,0"))
               (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,1,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
               (rule "commute_and" (formula "10") (term "1,0,0"))
               (rule "commute_or" (formula "10") (term "1,0,0,0"))
               (rule "commute_or" (formula "10") (term "0,0,0,0"))
               (rule "shift_paren_or" (formula "10") (term "0,0,0"))
               (rule "cnf_rightDist" (formula "10") (term "0,0"))
               (rule "distr_forallAnd" (formula "10") (term "0"))
               (rule "distr_forallAnd" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "commute_or" (formula "11") (term "0,0"))
               (rule "div_axiom" (formula "3") (term "0,1,1,0") (inst "quotient=quotient_0"))
               (rule "mul_literals" (formula "3") (term "1,1,1,1,1"))
               (rule "qeq_literals" (formula "3") (term "0,1,1"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "equal_literals" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "andLeft" (formula "3"))
               (rule "andLeft" (formula "3"))
               (rule "polySimp_addComm1" (formula "5") (term "1"))
               (rule "add_literals" (formula "5") (term "0,1"))
               (rule "inEqSimp_commuteLeq" (formula "4"))
               (rule "inEqSimp_homoInEq1" (formula "5"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
               (rule "polySimp_addComm1" (formula "5") (term "0"))
               (rule "applyEq" (formula "15") (term "0,1,1,1,0,0") (ifseqformula "3"))
               (rule "polySimp_addComm0" (formula "15") (term "1,1,0,0"))
               (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "3"))
               (rule "inEqSimp_commuteLeq" (formula "1"))
               (rule "applyEq" (formula "1") (term "0,1,1,0") (ifseqformula "2"))
               (rule "polySimp_addComm0" (formula "1") (term "1,0"))
               (rule "applyEq" (formula "5") (term "0,1,1,0") (ifseqformula "2"))
               (rule "polySimp_addComm0" (formula "5") (term "1,0"))
               (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "2"))
               (rule "polySimp_homoEq" (formula "15"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0"))
               (rule "applyEq" (formula "14") (term "0,1,1,1,1") (ifseqformula "2"))
               (rule "polySimp_addComm0" (formula "14") (term "1,1,1"))
               (rule "mod_axiom" (formula "14") (term "0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
               (rule "polySimp_homoEq" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "0,1,0"))
               (rule "mul_literals" (formula "14") (term "0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "14") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1" (formula "14") (term "0,0"))
               (rule "add_literals" (formula "14") (term "1,0,0"))
               (rule "times_zero_1" (formula "14") (term "0,0"))
               (rule "add_zero_left" (formula "14") (term "0"))
               (rule "polySimp_sepPosMonomial" (formula "15"))
               (rule "polySimp_mulComm0" (formula "15") (term "1"))
               (rule "polySimp_rightDist" (formula "15") (term "1"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
               (rule "mul_literals" (formula "15") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1"))
               (rule "polySimp_rightDist" (formula "4") (term "1"))
               (rule "mul_literals" (formula "4") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
               (rule "inEqSimp_strengthen0" (formula "4") (ifseqformula "15"))
               (rule "polySimp_addAssoc" (formula "4") (term "1"))
               (rule "add_literals" (formula "4") (term "0,1"))
               (rule "inEqSimp_contradEq3" (formula "15") (ifseqformula "4"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
               (rule "add_literals" (formula "15") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0"))
               (rule "qeq_literals" (formula "15") (term "0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "false_right" (formula "15"))
               (rule "elimGcdEq" (formula "14") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
        pow(Z(2(#)),
            add(mul(quotient_0, Z(neglit(4(6(#))))),
                bitIndex))),
    Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#))))))))))))))))))))))") (inst "elimGcd=Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "add_zero_left" (formula "14") (term "0,0,1"))
               (rule "add_zero_left" (formula "14") (term "0,0,0"))
               (rule "add_literals" (formula "14") (term "1,0,0"))
               (rule "add_zero_left" (formula "14") (term "0,1,0"))
               (rule "times_zero_1" (formula "14") (term "0,0,1"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "times_zero_1" (formula "14") (term "0,0,0"))
               (rule "times_zero_1" (formula "14") (term "0,1,0"))
               (rule "leq_literals" (formula "14") (term "0,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "qeq_literals" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "11"))
               (rule "polySimp_mulAssoc" (formula "3") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "3") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
               (rule "polySimp_addComm0" (formula "3") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(4(6(#)))"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
               (rule "neg_literal" (formula "3") (term "0,0,0,0,0,1,0"))
               (rule "times_zero_1" (formula "3") (term "1,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "3") (term "0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
               (rule "add_literals" (formula "3") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
               (rule "add_literals" (formula "3") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "3") (term "1,0,0"))
               (rule "add_zero_right" (formula "3") (term "0,0"))
               (rule "qeq_literals" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "5"))
               (rule "times_zero_1" (formula "11") (term "0,0"))
               (rule "add_zero_left" (formula "11") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "11"))
               (rule "mul_literals" (formula "11") (term "1"))
               (rule "elimGcdGeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(4(6(#)))"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "11") (term "0,0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
               (rule "add_literals" (formula "11") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0"))
               (rule "leq_literals" (formula "11") (term "0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "3"))
               (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "11"))
               (rule "qeq_literals" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "applyEqRigid" (formula "5") (term "0,1,1") (ifseqformula "11"))
               (rule "times_zero_2" (formula "5") (term "1,1"))
               (rule "add_zero_right" (formula "5") (term "1"))
               (rule "applyEq" (formula "4") (term "0,1") (ifseqformula "11"))
               (rule "times_zero_2" (formula "4") (term "1"))
               (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "10"))
               (rule "leq_literals" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "applyEq" (formula "2") (term "1") (ifseqformula "9"))
               (rule "applyEqRigid" (formula "4") (term "0,0,1,0") (ifseqformula "9"))
               (rule "times_zero_2" (formula "4") (term "0,1,0"))
               (rule "add_zero_left" (formula "4") (term "1,0"))
               (rule "applyEqRigid" (formula "1") (term "0,0,1,0") (ifseqformula "9"))
               (rule "times_zero_2" (formula "1") (term "0,1,0"))
               (rule "add_zero_left" (formula "1") (term "1,0"))
               (rule "applyEq" (formula "14") (term "0,0,1,1,0,0") (ifseqformula "9"))
               (rule "times_zero_2" (formula "14") (term "0,1,1,0,0"))
               (rule "add_zero_left" (formula "14") (term "1,1,0,0"))
               (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "3"))
               (rule "leq_literals" (formula "11") (term "0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "div_axiom" (formula "13") (term "0") (inst "quotient=quotient_1"))
               (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
               (rule "qeq_literals" (formula "1") (term "0,1,1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "equal_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
               (rule "add_literals" (formula "3") (term "0,0,1"))
               (rule "polySimp_addComm1" (formula "3") (term "1"))
               (rule "add_literals" (formula "3") (term "0,1"))
               (rule "inEqSimp_homoInEq0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "inEqSimp_homoInEq1" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "applyEq" (formula "16") (term "0") (ifseqformula "1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1"))
               (rule "polySimp_rightDist" (formula "2") (term "1"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
               (rule "mul_literals" (formula "2") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
               (rule "mul_literals" (formula "3") (term "0,1"))
               (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "7"))
               (rule "polySimp_rightDist" (formula "2") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
               (rule "mul_literals" (formula "2") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
               (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "2") (term "0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
               (rule "add_literals" (formula "2") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0"))
               (rule "add_zero_right" (formula "2") (term "0,0"))
               (rule "qeq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "17"))
               (rule "add_zero_right" (formula "2") (term "1"))
               (rule "inEqSimp_contradEq3" (formula "17") (ifseqformula "2"))
               (rule "times_zero_1" (formula "17") (term "1,0,0"))
               (rule "add_zero_right" (formula "17") (term "0,0"))
               (rule "qeq_literals" (formula "17") (term "0"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "false_right" (formula "17"))
               (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "4"))
               (rule "mul_literals" (formula "5") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "5") (term "0"))
               (rule "add_literals" (formula "5") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "5"))
               (rule "mul_literals" (formula "5") (term "1"))
               (rule "inEqSimp_contradInEq3" (formula "5") (ifseqformula "2"))
               (rule "mul_literals" (formula "5") (term "0,1,0"))
               (rule "greater_literals" (formula "5") (term "0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "qeq_literals" (formula "5") (term "0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "closeFalse" (formula "5"))
            )
            (branch "CUT: pow(2, bitIndex % 64) ≤ pow(2, 62) FALSE"
               (rule "powMonoConcreteRight" (formula "8"))
               (rule "pow_literals" (formula "9") (term "1"))
               (rule "expand_inLong" (formula "7") (term "0,0,0,0"))
               (rule "expand_inLong" (formula "7") (term "1,0,0,0"))
               (rule "expand_inLong" (formula "7") (term "1,0,0"))
               (rule "expand_inInt" (formula "3"))
               (rule "expand_inLong" (formula "2"))
               (rule "qeq_literals" (formula "8") (term "1"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "replace_long_MIN" (formula "7") (term "0,1,0,0,0,0"))
               (rule "replace_long_MAX" (formula "7") (term "1,0,0,0,0,0"))
               (rule "replace_long_MIN" (formula "7") (term "0,1,1,0,0,0"))
               (rule "replace_long_MAX" (formula "7") (term "1,0,1,0,0,0"))
               (rule "replace_long_MAX" (formula "7") (term "1,0,1,0,0"))
               (rule "replace_long_MIN" (formula "7") (term "0,1,1,0,0"))
               (rule "replace_int_MAX" (formula "3") (term "1,0"))
               (rule "replace_int_MIN" (formula "3") (term "0,1"))
               (rule "replace_long_MIN" (formula "2") (term "0,1"))
               (rule "replace_long_MAX" (formula "2") (term "1,0"))
               (rule "andLeft" (formula "3"))
               (rule "andLeft" (formula "2"))
               (rule "inEqSimp_ltRight" (formula "14"))
               (rule "times_zero_1" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_leqRight" (formula "12"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "10"))
               (rule "mul_literals" (formula "10") (term "1,0,0"))
               (rule "add_literals" (formula "10") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "12"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "8"))
               (rule "inEqSimp_commuteLeq" (formula "6"))
               (rule "mod_axiom" (formula "14") (term "0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
               (rule "polySimp_homoEq" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0"))
               (rule "mod_axiom" (formula "13") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1"))
               (rule "mod_axiom" (formula "13") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
               (rule "mod_axiom" (formula "3") (term "0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
               (rule "mod_axiom" (formula "2") (term "1,1,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0"))
               (rule "mod_axiom" (formula "1") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_sepPosMonomial" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1"))
               (rule "polySimp_rightDist" (formula "14") (term "1"))
               (rule "mul_literals" (formula "14") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "11"))
               (rule "mul_literals" (formula "11") (term "1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "14"))
               (rule "polySimp_addAssoc" (formula "1") (term "1"))
               (rule "add_literals" (formula "1") (term "0,1"))
               (rule "inEqSimp_contradEq3" (formula "14") (ifseqformula "1"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,0"))
               (rule "mul_literals" (formula "14") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0"))
               (rule "add_literals" (formula "14") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "14") (term "1,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0"))
               (rule "qeq_literals" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "false_right" (formula "14"))
               (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
               (rule "leq_literals" (formula "8") (term "0"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "10"))
               (rule "leq_literals" (formula "7") (term "0"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "inEqSimp_subsumption2" (formula "3") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "greater_literals" (formula "3") (term "0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
               (rule "polySimp_rightDist" (formula "3") (term "0,0"))
               (rule "mul_literals" (formula "3") (term "0,0,0"))
               (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
               (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
               (rule "mul_literals" (formula "3") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
               (rule "polySimp_addComm0" (formula "3") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
               (rule "add_literals" (formula "3") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "3") (term "1,0,0"))
               (rule "add_zero_right" (formula "3") (term "0,0"))
               (rule "qeq_literals" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "expand_moduloLong" (formula "10") (term "0"))
               (rule "replace_long_MIN" (formula "10") (term "0,0"))
               (rule "replace_long_HALFRANGE" (formula "10") (term "0,0,1,0"))
               (rule "replace_long_RANGE" (formula "10") (term "1,1,0"))
               (rule "polySimp_homoEq" (formula "10"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0"))
               (rule "polySimp_addComm0" (formula "10") (term "0,0"))
               (rule "polySimp_sepNegMonomial" (formula "10"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0"))
               (rule "polySimp_elimOne" (formula "10") (term "0"))
               (rule "nnf_imp2or" (formula "9") (term "0,0"))
               (rule "nnf_notAnd" (formula "9") (term "0,0,0"))
               (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0,0,0"))
               (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0,0,0"))
               (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,0"))
               (rule "mul_literals" (formula "9") (term "1,1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "9") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "9") (term "0,1,0,0,0"))
               (rule "mul_literals" (formula "9") (term "1,0,0,0,1,0,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,1,0,0,0"))
               (rule "mul_literals" (formula "9") (term "1,0,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "9") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "9") (term "1,0,0,1,1,0,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "9") (term "1,1,1,0,0,0"))
               (rule "commute_or" (formula "9") (term "0,0,0,0"))
               (rule "commute_and" (formula "9") (term "1,0,0"))
               (rule "commute_or" (formula "9") (term "1,0,0,0"))
               (rule "shift_paren_or" (formula "9") (term "0,0,0"))
               (rule "cnf_rightDist" (formula "9") (term "0,0"))
               (rule "distr_forallAnd" (formula "9") (term "0"))
               (rule "distr_forallAnd" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "commute_or" (formula "10") (term "0,0"))
               (rule "div_axiom" (formula "2") (term "0,1,1,0") (inst "quotient=quotient_0"))
               (rule "mul_literals" (formula "2") (term "1,1,1,1,1"))
               (rule "qeq_literals" (formula "2") (term "0,1,1"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "equal_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "polySimp_addComm1" (formula "4") (term "1"))
               (rule "add_literals" (formula "4") (term "0,1"))
               (rule "inEqSimp_commuteLeq" (formula "3"))
               (rule "inEqSimp_homoInEq1" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "applyEq" (formula "5") (term "0,1,1,0") (ifseqformula "2"))
               (rule "polySimp_addComm0" (formula "5") (term "1,0"))
               (rule "applyEq" (formula "14") (term "0,1,1,1,0,0") (ifseqformula "2"))
               (rule "polySimp_addComm0" (formula "14") (term "1,1,0,0"))
               (rule "applyEq" (formula "14") (term "0,1,1,1,1") (ifseqformula "2"))
               (rule "polySimp_addComm0" (formula "14") (term "1,1,1"))
               (rule "mod_axiom" (formula "14") (term "0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
               (rule "polySimp_homoEq" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "0,1,0"))
               (rule "mul_literals" (formula "14") (term "0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "14") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1" (formula "14") (term "0,0"))
               (rule "add_literals" (formula "14") (term "1,0,0"))
               (rule "times_zero_1" (formula "14") (term "0,0"))
               (rule "add_zero_left" (formula "14") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1"))
               (rule "polySimp_rightDist" (formula "4") (term "1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
               (rule "mul_literals" (formula "4") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "4"))
               (rule "andLeft" (formula "1"))
               (rule "inEqSimp_homoInEq1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "leq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
   )
)
(branch "CUT: ∀ int x; ∀ int y; (inLong(x) ∧ inLong(y) → inLong(binaryOr(x, y))) FALSE"
   (rule "hide_right" (formula "2") (userinteraction))
    (opengoal " ")
)
)
}
