\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri May 12 09:32:11 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:on , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:allow , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../";

\include "../../taclets/intSet.key",  "../../taclets/binaryAxiomsExtension.key",  "../../taclets/bitwiseOperations.key";

\proofObligation "#Proof Obligation Settings
#Fri May 12 09:32:11 CEST 2023
contract=BitSet[BitSet\\:\\:length()].JML normal_behavior operation contract.0
name=BitSet[BitSet\\:\\:length()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "christianhein" ) (keyVersion "208396f69e"))
(keyLog "1" (keyUser "christianhein" ) (keyVersion "208396f69e"))

(autoModeTime "63376")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "7") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "7") (term "0,0,1,0,1"))
(rule "polySimp_addComm0" (formula "7") (term "0,2,0,0,0,0,0,1"))
(rule "setEquality" (formula "7") (term "0,0,0,0,0,0,1") (inst "n=n"))
 (builtin "One Step Simplification" (formula "7"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "expand_moduloInteger" (formula "7") (term "2,0,0,0,0,0,1"))
(rule "replace_int_HALFRANGE" (formula "7") (term "0,0,1,2,0,0,0,0,0,1"))
(rule "replace_int_MIN" (formula "7") (term "0,2,0,0,0,0,0,1"))
(rule "replace_int_RANGE" (formula "7") (term "1,1,2,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "7") (term "0,1,2,0,0,0,0,0,1"))
(rule "add_literals" (formula "7") (term "0,0,1,2,0,0,0,0,0,1"))
(rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_length,savedHeapBefore_length"))
 (builtin "One Step Simplification" (formula "7"))
(rule "ifUnfold" (formula "7") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x"))
(rule "compound_equality_comparison_1" (formula "7") (term "1") (inst "#v0=x_1"))
(rule "variableDeclarationAssign" (formula "7") (term "1"))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "x_1"))
(rule "assignment_read_attribute_this" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "equality_comparison_simple" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "ifSplit" (formula "7"))
(branch "if x true"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "methodCallReturn" (formula "8") (term "1"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "methodCallEmpty" (formula "8") (term "1"))
   (rule "tryEmpty" (formula "8") (term "1"))
   (rule "emptyModality" (formula "8") (term "1"))
   (rule "andRight" (formula "8"))
   (branch "Case 1"
      (rule "andRight" (formula "8"))
      (branch "Case 1"
         (rule "andRight" (formula "8"))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "8"))
            (rule "orRight" (formula "8"))
            (rule "allRight" (formula "8") (inst "sk=n_0"))
            (rule "notRight" (formula "8"))
            (rule "mod_axiom" (formula "9") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0"))
            (rule "polySimp_sepNegMonomial" (formula "9"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0"))
            (rule "polyDiv_pullOut" (formula "9") (term "0,0") (inst "polyDivCoeff=Z(1(#))"))
            (rule "equal_literals" (formula "9") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "0"))
            (rule "polySimp_addComm1" (formula "9") (term "0,0,1,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,1,0"))
            (rule "polySimp_addComm0" (formula "9") (term "1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "0"))
            (rule "mul_literals" (formula "9") (term "0,0"))
            (rule "polySimp_homoEq" (formula "9"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0"))
            (rule "polySimp_addComm1" (formula "9") (term "0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0"))
            (rule "polySimp_sepNegMonomial" (formula "9"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0"))
            (rule "Class_invariant_axiom_for_BitSet" (formula "7") (inst "i_0=i_0") (inst "wordIndex=wordIndex") (inst "bitIndex=bitIndex") (inst "x=x_2") (inst "i=i") (ifseqformula "5"))
             (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "2")))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "notLeft" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "translateJavaMulLong" (formula "11") (term "1,1,1,0"))
            (rule "translateJavaMulLong" (formula "10") (term "0,0,0,1,0,0"))
            (rule "translateJavaCastLong" (formula "11") (term "0,1,1,1,0"))
            (rule "translateJavaCastLong" (formula "10") (term "0,0,0,0,1,0,0"))
             (opengoal " ")
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "6")))
            (rule "closeTrue" (formula "8"))
         )
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "8"))
         (rule "closeTrue" (formula "8"))
      )
   )
   (branch "Case 2"
       (builtin "One Step Simplification" (formula "8"))
      (rule "closeTrue" (formula "8"))
   )
)
(branch "if x false"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "returnUnfold" (formula "8") (term "1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_2"))
   (rule "compound_addition_2" (formula "8") (term "1") (inst "#v0=x_3") (inst "#v1=x_4"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_3"))
   (rule "compound_multiplication_2" (formula "8") (term "1") (inst "#v0=x_5") (inst "#v1=x_6"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_5"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_6"))
   (rule "remove_parentheses_right" (formula "8") (term "1"))
   (rule "compound_subtraction_1" (formula "8") (term "1") (inst "#v=x_7"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_7"))
   (rule "assignment_read_attribute_this" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "assignmentSubtractionInt" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "translateJavaSubInt" (formula "8") (term "0,1,0"))
   (rule "expand_subJint" (formula "8") (term "0,1,0"))
   (rule "polySimp_elimSub" (formula "8") (term "0,0,1,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,1,0"))
   (rule "polySimp_addComm0" (formula "8") (term "0,0,1,0"))
   (rule "expand_moduloInteger" (formula "8") (term "0,1,0"))
   (rule "replace_int_RANGE" (formula "8") (term "1,1,0,1,0"))
   (rule "replace_int_HALFRANGE" (formula "8") (term "0,0,1,0,1,0"))
   (rule "replace_int_MIN" (formula "8") (term "0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,1,0,1,0"))
   (rule "add_literals" (formula "8") (term "0,0,1,0,1,0"))
   (rule "assignmentMultiplicationInt" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "translateJavaMulInt" (formula "8") (term "0,1,0"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_4"))
   (rule "expand_mulJint" (formula "8") (term "0,1,0"))
   (rule "polySimp_rightDist" (formula "8") (term "0,0,1,0"))
   (rule "mul_literals" (formula "8") (term "0,0,0,1,0"))
   (rule "expand_moduloInteger" (formula "8") (term "0,1,0"))
   (rule "replace_int_RANGE" (formula "8") (term "1,1,0,1,0"))
   (rule "replace_int_HALFRANGE" (formula "8") (term "0,0,1,0,1,0"))
   (rule "replace_int_MIN" (formula "8") (term "0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,1,0,1,0"))
   (rule "add_literals" (formula "8") (term "0,0,1,0,1,0"))
   (rule "remove_parentheses_right" (formula "8") (term "1"))
   (rule "compound_subtraction_2" (formula "8") (term "1") (inst "#v0=x_5") (inst "#v1=x_6"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_8"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_9"))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "8") (term "1"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "var"))
   (rule "eval_order_array_access4" (formula "8") (term "1") (inst "#v0=x_arr"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_arr"))
   (rule "assignment_read_attribute_this" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "eval_order_array_access5" (formula "8") (term "1") (inst "#ar1=x_arr_1") (inst "#v1=x_10"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_arr_1"))
   (rule "assignment" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_10"))
   (rule "compound_subtraction_1" (formula "8") (term "1") (inst "#v=x_11"))
   (rule "variableDeclarationAssign" (formula "8") (term "1"))
   (rule "variableDeclaration" (formula "8") (term "1") (newnames "x_11"))
   (rule "assignment_read_attribute_this" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "assignmentSubtractionInt" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "translateJavaSubInt" (formula "8") (term "0,1,0"))
   (rule "assignment_array2" (formula "8") (term "1"))
   (branch "Normal Execution (x_arr_1 != null)"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "orRight" (formula "8"))
      (rule "orRight" (formula "8"))
      (rule "inEqSimp_commuteLeq" (formula "9"))
      (rule "expand_subJint" (formula "11") (term "0,2,0,1,0"))
      (rule "polySimp_elimSub" (formula "11") (term "0,0,2,0,1,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,2,0,1,0"))
      (rule "polySimp_addComm0" (formula "11") (term "0,0,2,0,1,0"))
      (rule "expand_subJint" (formula "10") (term "0"))
      (rule "polySimp_elimSub" (formula "10") (term "0,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0"))
      (rule "polySimp_addComm0" (formula "10") (term "0,0"))
      (rule "expand_subJint" (formula "9") (term "0"))
      (rule "polySimp_elimSub" (formula "9") (term "0,0"))
      (rule "mul_literals" (formula "9") (term "1,0,0"))
      (rule "polySimp_addComm0" (formula "9") (term "0,0"))
      (rule "expand_moduloInteger" (formula "11") (term "0,2,0,1,0"))
      (rule "replace_int_HALFRANGE" (formula "11") (term "0,0,1,0,2,0,1,0"))
      (rule "replace_int_RANGE" (formula "11") (term "1,1,0,2,0,1,0"))
      (rule "replace_int_MIN" (formula "11") (term "0,0,2,0,1,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,1,0,2,0,1,0"))
      (rule "add_literals" (formula "11") (term "0,0,1,0,2,0,1,0"))
      (rule "expand_moduloInteger" (formula "10") (term "0"))
      (rule "replace_int_HALFRANGE" (formula "10") (term "0,0,1,0"))
      (rule "replace_int_MIN" (formula "10") (term "0,0"))
      (rule "replace_int_RANGE" (formula "10") (term "1,1,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,1,0"))
      (rule "add_literals" (formula "10") (term "0,0,1,0"))
      (rule "expand_moduloInteger" (formula "9") (term "0"))
      (rule "replace_int_MIN" (formula "9") (term "0,0"))
      (rule "replace_int_RANGE" (formula "9") (term "1,1,0"))
      (rule "replace_int_HALFRANGE" (formula "9") (term "0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0,1,0"))
      (rule "add_literals" (formula "9") (term "0,0,1,0"))
       (builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_numberOfLeadingZeros,result_numberOfLeadingZeros,exc_0") (contract "BitSet.Long[BitSet.Long::numberOfLeadingZeros(long)].JML normal_behavior operation contract.0"))
      (branch "Post (numberOfLeadingZeros)"
          (builtin "One Step Simplification" (formula "12"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "expand_inInt" (formula "6") (term "1,0,0,0,1,0,1"))
         (rule "expand_inInt" (formula "6") (term "1,0"))
         (rule "replace_int_MAX" (formula "6") (term "1,0,1,0,0,0,1,0,1"))
         (rule "replace_int_MIN" (formula "6") (term "0,1,1,0,0,0,1,0,1"))
         (rule "replace_int_MIN" (formula "6") (term "0,1,1,0"))
         (rule "replace_int_MAX" (formula "6") (term "1,0,1,0"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "7"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "11"))
         (rule "translateJavaSubInt" (formula "11") (term "1,1,0,0,0"))
         (rule "translateJavaSubInt" (formula "12") (term "1,0,1"))
         (rule "translateJavaAddInt" (formula "12") (term "1,1,0,1"))
         (rule "bitAtDef" (formula "11") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "bitAtDef" (formula "12") (term "0,1"))
         (rule "ifEqualsInteger" (formula "12") (term "1"))
         (rule "equal_literals" (formula "12") (term "1,1,1"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "inEqSimp_commuteLeq" (formula "8"))
         (rule "inEqSimp_commuteLeq" (formula "9"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "12") (term "0,1"))
         (rule "assignment" (formula "18") (term "1"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "blockEmpty" (formula "18") (term "1"))
         (rule "expand_subJint" (formula "11") (term "1,1,0,0,0"))
         (rule "polySimp_elimSub" (formula "11") (term "0,1,1,0,0,0"))
         (rule "expand_subJint" (formula "12") (term "1,1,0,0,1,1"))
         (rule "polySimp_elimSub" (formula "12") (term "0,1,1,0,0,1,1"))
         (rule "expand_addJint" (formula "12") (term "1,0,0,1"))
         (rule "polySimp_addComm0" (formula "12") (term "0,1,0,0,1"))
         (rule "expand_moduloInteger" (formula "11") (term "1,1,0,0,0"))
         (rule "replace_int_RANGE" (formula "11") (term "1,1,1,1,0,0,0"))
         (rule "replace_int_HALFRANGE" (formula "11") (term "0,0,1,1,1,0,0,0"))
         (rule "replace_int_MIN" (formula "11") (term "0,1,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,1,1,1,0,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,1,1,1,0,0,0"))
         (rule "expand_addJint" (formula "12") (term "0,1,0,1,1,0,0,1,1"))
         (rule "polySimp_addComm0" (formula "12") (term "0,0,1,0,1,1,0,0,1,1"))
         (rule "expand_moduloInteger" (formula "12") (term "1,0,0,1"))
         (rule "replace_int_RANGE" (formula "12") (term "1,1,1,0,0,1"))
         (rule "replace_int_HALFRANGE" (formula "12") (term "0,0,1,1,0,0,1"))
         (rule "replace_int_MIN" (formula "12") (term "0,1,0,0,1"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,0,0,1"))
         (rule "add_literals" (formula "12") (term "0,0,1,1,0,0,1"))
         (rule "expand_moduloInteger" (formula "12") (term "0,1,0,1,1,0,0,1,1"))
         (rule "replace_int_MIN" (formula "12") (term "0,0,1,0,1,1,0,0,1,1"))
         (rule "replace_int_HALFRANGE" (formula "12") (term "0,0,1,0,1,0,1,1,0,0,1,1"))
         (rule "replace_int_RANGE" (formula "12") (term "1,1,0,1,0,1,1,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,1,0,0,1,1"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,1,1,0,0,1,1"))
         (rule "mul_literals" (formula "12") (term "0,1,0,1,1,0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,1,0,1,1,0,0,1,1"))
         (rule "add_literals" (formula "12") (term "0,0,0,1,1,0,1,1,0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,0,0,1,1"))
         (rule "add_literals" (formula "12") (term "0,0,1,1,0,0,1,1"))
         (rule "expand_subJint" (formula "12") (term "0,0,1"))
         (rule "polySimp_elimSub" (formula "12") (term "0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1"))
         (rule "add_literals" (formula "12") (term "0,0,0,0,1"))
         (rule "expand_moduloInteger" (formula "12") (term "1,1,0,0,1,1"))
         (rule "replace_int_RANGE" (formula "12") (term "1,1,1,1,0,0,1,1"))
         (rule "replace_int_MIN" (formula "12") (term "0,1,1,0,0,1,1"))
         (rule "replace_int_HALFRANGE" (formula "12") (term "0,0,1,1,1,0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,1,0,0,1,1"))
         (rule "add_literals" (formula "12") (term "0,0,1,1,1,0,0,1,1"))
         (rule "expand_moduloInteger" (formula "12") (term "0,0,1"))
         (rule "replace_int_RANGE" (formula "12") (term "1,1,0,0,1"))
         (rule "replace_int_MIN" (formula "12") (term "0,0,0,1"))
         (rule "replace_int_HALFRANGE" (formula "12") (term "0,0,1,0,0,1"))
         (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,1"))
         (rule "add_literals" (formula "12") (term "0,0,1,0,0,1"))
         (rule "commute_and_2" (formula "11") (term "0,0"))
         (rule "assignmentSubtractionInt" (formula "18") (term "1"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "translateJavaSubInt" (formula "18") (term "0,1,0"))
         (rule "expand_subJint" (formula "18") (term "0,1,0"))
         (rule "polySimp_elimSub" (formula "18") (term "0,0,1,0"))
         (rule "expand_moduloInteger" (formula "18") (term "0,1,0"))
         (rule "replace_int_RANGE" (formula "18") (term "1,1,0,1,0"))
         (rule "replace_int_HALFRANGE" (formula "18") (term "0,0,1,0,1,0"))
         (rule "replace_int_MIN" (formula "18") (term "0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "18") (term "0,1,0,1,0"))
         (rule "add_literals" (formula "18") (term "0,0,1,0,1,0"))
         (rule "commute_and" (formula "11") (term "1,0,0,0"))
         (rule "assignmentAdditionInt" (formula "18") (term "1"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "translateJavaAddInt" (formula "18") (term "0,1,0"))
         (rule "expand_addJint" (formula "18") (term "0,1,0"))
         (rule "polySimp_addComm1" (formula "18") (term "0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,1,0"))
         (rule "add_literals" (formula "18") (term "0,0,0,0,1,0"))
         (rule "expand_moduloInteger" (formula "18") (term "0,1,0"))
         (rule "replace_int_RANGE" (formula "18") (term "1,1,0,1,0"))
         (rule "replace_int_MIN" (formula "18") (term "0,0,1,0"))
         (rule "replace_int_HALFRANGE" (formula "18") (term "0,0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "18") (term "0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,1,0"))
         (rule "add_literals" (formula "18") (term "0,0,0,1,0,1,0"))
         (rule "shift_paren_and" (formula "11") (term "0,0,0"))
         (rule "methodCallReturn" (formula "18") (term "1"))
         (rule "assignment" (formula "18") (term "1"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "methodCallEmpty" (formula "18") (term "1"))
         (rule "tryEmpty" (formula "18") (term "1"))
         (rule "emptyModality" (formula "18") (term "1"))
         (rule "andRight" (formula "18"))
         (branch "Case 1"
            (rule "andRight" (formula "18"))
            (branch "Case 1"
               (rule "andRight" (formula "18"))
               (branch "Case 1"
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "eqTermCut" (formula "18") (term "0,0,1,1") (inst "s=sub(Z(4(6(#))), result_numberOfLeadingZeros)") (userinteraction))
                  (branch "Assume -2147483648 + (2147483712 + result_numberOfLeadingZeros * -1) % 4294967296 = 64 - result_numberOfLeadingZeros"
                     (rule "applyEq" (formula "19") (term "0,0,1,1") (ifseqformula "1") (userinteraction))
                     (rule "eqTermCut" (formula "19") (term "1") (inst "s=moduloInt(add(mul(Z(4(6(#))),
                  sub(int::select(heap,
                                  self,
                                  BitSet::$wordsInUse),
                      Z(1(#)))),
              sub(Z(4(6(#))),
                  result_numberOfLeadingZeros)))") (userinteraction))
                     (branch "Assume -2147483648 + ( 64 - result_numberOfLeadingZeros + ( -135291469824 + (2147483647 + self.wordsInUse) % 4294967296 * 64) % 4294967296) % 4294967296 = moduloInt( 64 * (self.wordsInUse - 1) + (64 - result_numberOfLeadingZeros))"
                        (rule "applyEq" (formula "20") (term "1") (ifseqformula "1") (userinteraction))
                        (rule "eqTermCut" (formula "18") (term "0") (inst "s=sub(int::select(heap, self, BitSet::$wordsInUse),
    Z(1(#)))") (userinteraction))
                        (branch "Assume -2147483648 + (2147483647 + self.wordsInUse) % 4294967296 = self.wordsInUse - 1"
                           (rule "applyEq" (formula "19") (term "0") (ifseqformula "1") (userinteraction))
                           (rule "applyEq" (formula "20") (term "0") (ifseqformula "1") (userinteraction))
                           (rule "eqTermCut" (formula "21") (term "2,0") (inst "s=moduloInt(add(iset_max(Free::select(heap,
                                    self,
                                    BitSet::$iSet)),
              Z(1(#))))") (userinteraction))
                           (branch "Assume -2147483648 + (2147483649 + iset_max(self.iSet)) % 4294967296 = moduloInt(iset_max(self.iSet) + 1)"
                              (rule "applyEq" (formula "22") (term "2,0") (ifseqformula "1") (userinteraction))
                              (rule "applyEq" (formula "15") (term "1,1,0,0") (ifseqformula "4") (userinteraction))
                              (rule "applyEq" (formula "15") (term "0,2,0,0,0,1,1,0") (ifseqformula "2") (userinteraction))
                              (rule "eqTermCut" (formula "16") (term "0,0,1") (inst "s=sub(Z(4(6(#))),
    add(result_numberOfLeadingZeros, Z(1(#))))") (userinteraction))
                              (branch "Assume -2147483648 + ( 4294967360 + (2147483649 + result_numberOfLeadingZeros) % 4294967296 * -1) % 4294967296 = 64 - (result_numberOfLeadingZeros + 1)"
                                 (rule "applyEq" (formula "17") (term "0,0,1") (ifseqformula "16") (userinteraction))
                                 (rule "applyEq" (formula "17") (term "1,1,0,0,1,1") (ifseqformula "16") (userinteraction))
                                 (rule "hide_left" (formula "1") (userinteraction))
                                 (rule "hide_left" (formula "2") (userinteraction))
                                 (rule "hide_left" (formula "1") (userinteraction))
                                 (rule "hide_left" (formula "1") (userinteraction))
                                 (rule "hide_left" (formula "12") (userinteraction))
                                 (rule "ifthenelse_split" (formula "18") (term "0") (userinteraction))
                                 (branch "∀ int n; ¬in(n, self.iSet) TRUE"
                                     (opengoal " ")
                                 )
                                 (branch "∀ int n; ¬in(n, self.iSet) FALSE"
                                     (opengoal " ")
                                 )
                              )
                              (branch "Assume -2147483648 + ( 4294967360 + (2147483649 + result_numberOfLeadingZeros) % 4294967296 * -1) % 4294967296 != 64 - (result_numberOfLeadingZeros + 1)"
                                 (rule "notLeft" (formula "16"))
                                 (rule "eqSymm" (formula "2"))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "eqSymm" (formula "4"))
                                 (rule "eqSymm" (formula "17"))
                                 (rule "polySimp_elimSub" (formula "15") (term "0,2,0,0,0,1,1,0"))
                                 (rule "mul_literals" (formula "15") (term "1,0,2,0,0,0,1,1,0"))
                                 (rule "polySimp_elimSub" (formula "22") (term "0"))
                                 (rule "mul_literals" (formula "22") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "15") (term "1,1,0,0"))
                                 (rule "polySimp_homoEq" (formula "1"))
                                 (rule "polySimp_elimSub" (formula "21") (term "0"))
                                 (rule "mul_literals" (formula "21") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "23") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "23") (term "1,1,0,0,1"))
                                 (rule "polySimp_elimSub" (formula "23") (term "1,0,1"))
                                 (rule "polySimp_elimSub" (formula "2") (term "0"))
                                 (rule "mul_literals" (formula "2") (term "1,0"))
                                 (rule "polySimp_elimSub" (formula "3") (term "0,0,1,1"))
                                 (rule "polySimp_elimSub" (formula "3") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "3") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimSub" (formula "3") (term "1,0,0"))
                                 (rule "polySimp_elimSub" (formula "4") (term "0"))
                                 (rule "polySimp_elimSub" (formula "17") (term "0"))
                                 (rule "polySimp_homoEq" (formula "2"))
                                 (rule "polySimp_homoEq" (formula "3"))
                                 (rule "polySimp_homoEq" (formula "4"))
                                 (rule "polySimp_homoEq" (formula "17"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,1,1,0"))
                                 (rule "polySimp_addComm0" (formula "23") (term "0,2,0"))
                                 (rule "polySimp_addComm0" (formula "15") (term "0,2,0,0,0,1,1,0"))
                                 (rule "polySimp_addComm0" (formula "22") (term "0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_addComm0" (formula "21") (term "0"))
                                 (rule "polySimp_addComm0" (formula "23") (term "1,0,0,1"))
                                 (rule "polySimp_addComm0" (formula "3") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_addComm0" (formula "2") (term "1,1,0"))
                                 (rule "polySimp_addComm0" (formula "17") (term "1,1,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "23") (term "0,0,1"))
                                 (rule "mul_literals" (formula "23") (term "0,0,0,1"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                                 (rule "mul_literals" (formula "2") (term "0,1,0"))
                                 (rule "polySimp_addComm1" (formula "23") (term "0,1"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "17") (term "0,1,1,1,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "0,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "3") (term "0,0,0,0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0,0,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                                 (rule "mul_literals" (formula "17") (term "0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0"))
                                 (rule "mul_literals" (formula "17") (term "0,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0"))
                                 (rule "inEqSimp_gtToGeq" (formula "15") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "23") (term "0,0,1"))
                                 (rule "add_literals" (formula "23") (term "0,0,0,1"))
                                 (rule "add_zero_left" (formula "23") (term "0,0,1"))
                                 (rule "inEqSimp_ltRight" (formula "22"))
                                 (rule "times_zero_1" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                 (rule "add_literals" (formula "3") (term "0,0,0"))
                                 (rule "inEqSimp_geqRight" (formula "22"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "0,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "1,0"))
                                 (rule "add_literals" (formula "19") (term "0,1,0"))
                                 (rule "polySimp_addComm1" (formula "19") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0"))
                                 (rule "mod_axiom" (formula "18") (term "0,1,0,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,1,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "18") (term "0,1,0,1,0,0,1"))
                                 (rule "mul_literals" (formula "18") (term "0,0,1,0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1"))
                                 (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1"))
                                 (rule "mod_axiom" (formula "18") (term "0,1,0,1,1,1,0,0,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0,1,1,1,0,0,1,1"))
                                 (rule "polySimp_mulComm0" (formula "18") (term "1,0,1,1,1,0,0,1,1"))
                                 (rule "polySimp_rightDist" (formula "18") (term "1,0,1,1,1,0,0,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,1,1,1,0,0,1,1"))
                                 (rule "polySimp_rightDist" (formula "18") (term "0,1,0,1,1,1,0,0,1,1"))
                                 (rule "mul_literals" (formula "18") (term "0,0,1,0,1,1,1,0,0,1,1"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,1,0,0,1,1"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,1,1,0,0,1,1"))
                                 (rule "add_literals" (formula "18") (term "0,0,0,1,1,1,0,0,1,1"))
                                 (rule "mod_axiom" (formula "18") (term "1,0,2,0,0,0,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,2,0,0,0,1,1"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,2,0,0,0,1,1"))
                                 (rule "polySimp_addAssoc" (formula "18") (term "0,0,2,0,0,0,1,1"))
                                 (rule "add_literals" (formula "18") (term "0,0,0,2,0,0,0,1,1"))
                                 (rule "mod_axiom" (formula "5") (term "0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "0,1,0,1,0,1,0"))
                                 (rule "mul_literals" (formula "5") (term "0,0,1,0,1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,1,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0,1,0,1,0"))
                                 (rule "mod_axiom" (formula "6") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "6") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0,0,0"))
                                 (rule "add_literals" (formula "6") (term "0,0,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "6") (term "0,0"))
                                 (rule "add_literals" (formula "6") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "6") (term "0,0"))
                                 (rule "add_zero_left" (formula "6") (term "0"))
                                 (rule "mod_axiom" (formula "4") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor2" (formula "4") (term "0,0"))
                                 (rule "add_literals" (formula "4") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "0,0"))
                                 (rule "add_zero_left" (formula "4") (term "0"))
                                 (rule "mod_axiom" (formula "3") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "0,1,0"))
                                 (rule "mul_literals" (formula "3") (term "0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                                 (rule "add_literals" (formula "3") (term "0,0,0,0"))
                                 (rule "mod_axiom" (formula "19") (term "0,1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "19") (term "0,1,0,1,0"))
                                 (rule "mul_literals" (formula "19") (term "0,0,1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,1,0"))
                                 (rule "mod_axiom" (formula "5") (term "1,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0,0,0,0,1,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0,0,0,1,0"))
                                 (rule "polySimp_invertEq" (formula "6"))
                                 (rule "times_zero_2" (formula "6") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                 (rule "polySimp_invertEq" (formula "4"))
                                 (rule "times_zero_2" (formula "4") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                 (rule "polySimp_sepPosMonomial" (formula "3"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "3") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1"))
                                 (rule "mul_literals" (formula "3") (term "0,0,1"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,0,1"))
                                 (rule "applyEq" (formula "23") (term "2,0") (ifseqformula "3"))
                                 (rule "polySimp_sepPosMonomial" (formula "19"))
                                 (rule "polySimp_mulComm0" (formula "19") (term "1"))
                                 (rule "polySimp_rightDist" (formula "19") (term "1"))
                                 (rule "mul_literals" (formula "19") (term "0,1"))
                                 (rule "polySimp_sepPosMonomial" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                 (rule "mul_literals" (formula "5") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "17") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "mul_literals" (formula "2") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,1"))
                                 (rule "mul_literals" (formula "18") (term "1,0,1"))
                                 (rule "inEqSimp_contradEq7" (formula "20") (ifseqformula "2"))
                                 (rule "times_zero_1" (formula "20") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "20") (term "0,0"))
                                 (rule "leq_literals" (formula "20") (term "0"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "false_right" (formula "20"))
                                 (rule "inEqSimp_subsumption0" (formula "13") (ifseqformula "16"))
                                 (rule "leq_literals" (formula "13") (term "0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "14"))
                                 (rule "leq_literals" (formula "13") (term "0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "true_left" (formula "13"))
                                 (rule "elimGcdEq" (formula "4") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))") (inst "elimGcdLeftDiv=div(add(Z(7(4(6(3(8(4(7(4(1(2(#))))))))))),
        int::select(heap, self, BitSet::$wordsInUse)),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcdRightDiv=Z(0(#))"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "add_zero_left" (formula "4") (term "0,0,1"))
                                 (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "0,1,0"))
                                 (rule "add_literals" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0,0,1"))
                                 (rule "add_zero_left" (formula "4") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0,1,0"))
                                 (rule "mul_literals" (formula "4") (term "0,0,1"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "times_zero_1" (formula "4") (term "0,1,0"))
                                 (rule "leq_literals" (formula "4") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "qeq_literals" (formula "4") (term "0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "applyEq" (formula "5") (term "0,1,0,0,1,0,0") (ifseqformula "4"))
                                 (rule "times_zero_2" (formula "5") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
                                 (rule "applyEq" (formula "16") (term "0,1,0,2,0,0,0,1,1") (ifseqformula "4"))
                                 (rule "times_zero_2" (formula "16") (term "1,0,2,0,0,0,1,1"))
                                 (rule "add_zero_right" (formula "16") (term "0,2,0,0,0,1,1"))
                                 (rule "applyEq" (formula "5") (term "0,1,0,0,0") (ifseqformula "4"))
                                 (rule "times_zero_2" (formula "5") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0,0"))
                                 (rule "elimGcdEq" (formula "6") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))") (inst "elimGcdLeftDiv=div(add(Z(2(1(7(3(8(4(7(4(1(2(#))))))))))),
        mul(result_numberOfLeadingZeros,
            Z(neglit(1(#))))),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcdRightDiv=Z(0(#))"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "times_zero_1" (formula "6") (term "1,0,1,0"))
                                 (rule "add_zero_left" (formula "6") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "6") (term "1,0,0,1"))
                                 (rule "add_literals" (formula "6") (term "1,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "0,1,0"))
                                 (rule "times_zero_1" (formula "6") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "6") (term "0,0,1"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "qeq_literals" (formula "6") (term "1,0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "leq_literals" (formula "6") (term "0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "polyMod_pullOut" (formula "16") (term "1,1,1,0,0,1,1") (inst "polyDivCoeff=div(add(Z(9(4(6(3(8(4(7(4(1(2(#))))))))))),
        result_numberOfLeadingZeros),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,1,1,0,0,1,1"))
                                 (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,1,1,1,0,0,1,1"))
                                 (rule "add_literals" (formula "16") (term "1,1,0,1,1,1,0,0,1,1"))
                                 (rule "times_zero_1" (formula "16") (term "1,0,1,1,1,0,0,1,1"))
                                 (rule "add_zero_right" (formula "16") (term "0,1,1,1,0,0,1,1"))
                                 (rule "mod_axiom" (formula "16") (term "1,1,1,0,0,1,1"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,1,0,0,1,1"))
                                 (rule "polySimp_addAssoc" (formula "16") (term "1,1,0,0,1,1"))
                                 (rule "polySimp_addAssoc" (formula "16") (term "0,1,1,0,0,1,1"))
                                 (rule "add_literals" (formula "16") (term "0,0,1,1,0,0,1,1"))
                                 (rule "polyMod_pullOut" (formula "16") (term "0,0,1") (inst "polyDivCoeff=div(add(Z(9(4(6(3(8(4(7(4(1(2(#))))))))))),
        result_numberOfLeadingZeros),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,1"))
                                 (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0,0,1"))
                                 (rule "add_literals" (formula "16") (term "1,1,0,0,0,1"))
                                 (rule "times_zero_1" (formula "16") (term "1,0,0,0,1"))
                                 (rule "add_zero_right" (formula "16") (term "0,0,0,1"))
                                 (rule "mod_axiom" (formula "16") (term "0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,1"))
                                 (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "16") (term "0,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0,0,1"))
                                 (rule "mul_literals" (formula "16") (term "0,0,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "16") (term "1,0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "16") (term "0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1"))
                                 (rule "add_literals" (formula "16") (term "0,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,1"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,0,1"))
                                 (rule "mul_literals" (formula "16") (term "0,1,0,1"))
                                 (rule "polyMod_pullOut" (formula "17") (term "0") (inst "polyDivCoeff=div(add(Z(9(4(6(3(8(4(7(4(1(2(#))))))))))),
        result_numberOfLeadingZeros),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
                                 (rule "add_literals" (formula "17") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "17") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "17") (term "0,0"))
                                 (rule "mod_axiom" (formula "17") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,0"))
                                 (rule "polySimp_homoEq" (formula "17"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "17") (term "0,1,0"))
                                 (rule "mul_literals" (formula "17") (term "0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "17") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
                                 (rule "add_literals" (formula "17") (term "0,0,0,0"))
                                 (rule "add_zero_left" (formula "17") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor2" (formula "17") (term "0,0"))
                                 (rule "add_literals" (formula "17") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "17") (term "0,0"))
                                 (rule "add_zero_left" (formula "17") (term "0"))
                                 (rule "elimGcdEq" (formula "17") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))") (inst "elimGcdLeftDiv=div(add(Z(1(1(7(3(8(4(7(4(1(2(#))))))))))),
        mul(result_numberOfLeadingZeros,
            Z(neglit(1(#))))),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcdRightDiv=Z(0(#))"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "add_zero_left" (formula "17") (term "0,0,1"))
                                 (rule "times_zero_1" (formula "17") (term "1,0,1,0"))
                                 (rule "add_zero_left" (formula "17") (term "0,0,0"))
                                 (rule "add_literals" (formula "17") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "17") (term "0,0,1"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "add_zero_left" (formula "17") (term "0,1,0"))
                                 (rule "times_zero_1" (formula "17") (term "0,0,0"))
                                 (rule "qeq_literals" (formula "17") (term "1,0"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "leq_literals" (formula "17") (term "0"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "polyDiv_pullOut" (formula "20") (term "0,1,2,0") (inst "polyDivCoeff=Z(1(#))"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,2,0,1,2,0"))
                                 (rule "equal_literals" (formula "20") (term "0,0,1,2,0"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,0,1,2,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,2,0"))
                                 (rule "polySimp_addComm1" (formula "20") (term "0,0,1,1,2,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,1,2,0"))
                                 (rule "polySimp_addComm0" (formula "20") (term "1,1,2,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,2,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,2,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "2,0"))
                                 (rule "polySimp_addComm1" (formula "20") (term "0,2,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,2,0"))
                                 (rule "polyDiv_pullOut" (formula "3") (term "0,1,1") (inst "polyDivCoeff=Z(1(#))"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,2,0,1,1"))
                                 (rule "equal_literals" (formula "3") (term "0,0,1,1"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1,0,0,0,1,1"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,1"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0,0,1,1,1"))
                                 (rule "add_literals" (formula "3") (term "0,0,0,1,1,1"))
                                 (rule "polySimp_addComm0" (formula "3") (term "1,1,1"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1,1"))
                                 (rule "mul_literals" (formula "3") (term "0,1,1"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "1"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0,1"))
                                 (rule "add_literals" (formula "3") (term "0,0,1"))
                                 (rule "polyDiv_pullOut" (formula "6") (term "0") (inst "polyDivCoeff=Z(1(#))"))
                                 (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,2,0"))
                                 (rule "equal_literals" (formula "6") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "mul_literals" (formula "6") (term "1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "6") (term "0"))
                                 (rule "polySimp_addComm1" (formula "6") (term "0,1,0"))
                                 (rule "add_literals" (formula "6") (term "0,0,1,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "6"))
                                 (rule "mul_literals" (formula "6") (term "1"))
                                 (rule "polyMod_pullOut" (formula "5") (term "0") (inst "polyDivCoeff=mul(div(add(Z(4(8(5(3(8(4(7(4(1(2(#))))))))))),
            mul(int::select(heap,
                            self,
                            BitSet::$wordsInUse),
                Z(4(6(#))))),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                                 (rule "add_literals" (formula "5") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "5") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "5") (term "0,0"))
                                 (rule "mod_axiom" (formula "5") (term "0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                                 (rule "polySimp_homoEq" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "0,0,1,0"))
                                 (rule "mul_literals" (formula "5") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "1,0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "5") (term "0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "5") (term "0,0,0,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "5") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "0,0,1"))
                                 (rule "applyEq" (formula "20") (term "1") (ifseqformula "5"))
                                 (rule "polyDiv_pullOut" (formula "16") (term "0,1,1,1,0,0,1,1") (inst "polyDivCoeff=Z(1(#))"))
                                 (rule "equal_literals" (formula "16") (term "0,0,1,1,1,0,0,1,1"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,1,1,1,0,0,1,1"))
                                 (rule "mul_literals" (formula "16") (term "1,0,0,0,1,1,1,0,0,1,1"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,1,1,0,0,1,1"))
                                 (rule "polySimp_addComm0" (formula "16") (term "1,1,1,1,0,0,1,1"))
                                 (rule "polySimp_addComm1" (formula "16") (term "0,1,1,1,1,1,0,0,1,1"))
                                 (rule "add_literals" (formula "16") (term "0,0,1,1,1,1,1,0,0,1,1"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,1,1,0,0,1,1"))
                                 (rule "mul_literals" (formula "16") (term "0,1,1,1,0,0,1,1"))
                                 (rule "polySimp_addAssoc" (formula "16") (term "1,1,0,0,1,1"))
                                 (rule "polySimp_addComm1" (formula "16") (term "0,1,1,0,0,1,1"))
                                 (rule "add_literals" (formula "16") (term "0,0,1,1,0,0,1,1"))
                                 (rule "polyDiv_pullOut" (formula "17") (term "0") (inst "polyDivCoeff=Z(1(#))"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,2,0"))
                                 (rule "equal_literals" (formula "17") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "mul_literals" (formula "17") (term "1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "17") (term "0"))
                                 (rule "polySimp_addComm1" (formula "17") (term "0,1,0"))
                                 (rule "add_literals" (formula "17") (term "0,0,1,0"))
                                 (rule "polySimp_sepPosMonomial" (formula "17"))
                                 (rule "mul_literals" (formula "17") (term "1"))
                                 (rule "polyDiv_pullOut" (formula "16") (term "0,0,0,1") (inst "polyDivCoeff=Z(1(#))"))
                                 (rule "equal_literals" (formula "16") (term "0,0,0,0,1"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0,0,1"))
                                 (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "0,0,1"))
                                 (rule "polySimp_addComm0" (formula "16") (term "1,0,0,1"))
                                 (rule "polySimp_addComm1" (formula "16") (term "0,1,1,0,0,1"))
                                 (rule "add_literals" (formula "16") (term "0,0,1,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "16") (term "0,0,1"))
                                 (rule "mul_literals" (formula "16") (term "0,0,0,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "16") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "16") (term "0,1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "16") (term "0,0,1"))
                                 (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1"))
                                 (rule "add_literals" (formula "16") (term "0,0,0,0,1"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "16") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "16") (term "0,0,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                 (rule "mul_literals" (formula "2") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "mul_literals" (formula "2") (term "1"))
                                 (rule "inEqSimp_notGeq" (formula "16") (term "0,1,0"))
                                 (rule "times_zero_1" (formula "16") (term "1,0,0,0,1,0"))
                                 (rule "add_zero_right" (formula "16") (term "0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,1,0"))
                                 (rule "mul_literals" (formula "16") (term "1,0,1,0"))
                                 (rule "expand_moduloInteger" (formula "4") (term "0"))
                                 (rule "replace_int_RANGE" (formula "4") (term "1,1,0"))
                                 (rule "replace_int_HALFRANGE" (formula "4") (term "0,0,1,0"))
                                 (rule "replace_int_MIN" (formula "4") (term "0,0"))
                                 (rule "polySimp_homoEq" (formula "4"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0,0"))
                                 (rule "mod_axiom" (formula "4") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "0,1,0"))
                                 (rule "mul_literals" (formula "4") (term "0,0,1,0"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0,0"))
                                 (rule "add_literals" (formula "4") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "4") (term "0,0,0"))
                                 (rule "polySimp_sepNegMonomial" (formula "4"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                 (rule "elimGcdEq" (formula "4") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))") (inst "elimGcdLeftDiv=div(add(Z(neglit(7(4(6(3(8(4(7(4(1(2(#)))))))))))),
        iset_max(Free::select(heap,
                              self,
                              BitSet::$iSet))),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcdRightDiv=add(Z(neglit(1(#))),
    div(add(Z(9(4(6(3(8(4(7(4(1(2(#))))))))))),
            iset_max(Free::select(heap,
                                  self,
                                  BitSet::$iSet))),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))))"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0,0,1"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0,1,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                                 (rule "add_literals" (formula "4") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0,1,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0,0,1"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1"))
                                 (rule "add_literals" (formula "4") (term "0,0,0,0,1"))
                                 (rule "add_zero_left" (formula "4") (term "0,0,0,1"))
                                 (rule "polySimp_pullOutFactor0" (formula "4") (term "0,0,1"))
                                 (rule "add_literals" (formula "4") (term "1,0,0,1"))
                                 (rule "times_zero_1" (formula "4") (term "0,0,1"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0,1,0"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0,1,0"))
                                 (rule "add_zero_left" (formula "4") (term "0,0,1,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "4") (term "0,1,0"))
                                 (rule "add_literals" (formula "4") (term "1,0,1,0"))
                                 (rule "times_zero_1" (formula "4") (term "0,1,0"))
                                 (rule "qeq_literals" (formula "4") (term "1,0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0,0,0"))
                                 (rule "add_zero_left" (formula "4") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor0" (formula "4") (term "0,0"))
                                 (rule "add_literals" (formula "4") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "4") (term "0,0"))
                                 (rule "leq_literals" (formula "4") (term "0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "applyEq" (formula "21") (term "0,1,2,0") (ifseqformula "4"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,2,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,2,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,2,0"))
                                 (rule "polySimp_addAssoc" (formula "21") (term "2,0"))
                                 (rule "polySimp_addComm1" (formula "21") (term "0,2,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,2,0"))
                                 (rule "polyDiv_pullOut" (formula "21") (term "0,1,2,0") (inst "polyDivCoeff=Z(1(#))"))
                                 (rule "equal_literals" (formula "21") (term "0,0,1,2,0"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,0,1,2,0"))
                                 (rule "mul_literals" (formula "21") (term "1,0,0,0,1,2,0"))
                                 (rule "polySimp_mulComm0" (formula "21") (term "1,2,0"))
                                 (rule "polySimp_addComm0" (formula "21") (term "1,1,2,0"))
                                 (rule "polySimp_addComm1" (formula "21") (term "0,1,1,1,2,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,1,1,1,2,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,2,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,2,0"))
                                 (rule "polySimp_addAssoc" (formula "21") (term "2,0"))
                                 (rule "polySimp_addComm1" (formula "21") (term "0,2,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,2,0"))
                                 (rule "apply_eq_monomials" (formula "21") (term "1,2,0") (ifseqformula "4"))
                                 (rule "polySimp_rightDist" (formula "21") (term "0,1,2,0"))
                                 (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,2,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "21") (term "1,2,0"))
                                 (rule "add_literals" (formula "21") (term "1,1,1,2,0"))
                                 (rule "times_zero_1" (formula "21") (term "1,1,2,0"))
                                 (rule "add_zero_right" (formula "21") (term "1,2,0"))
                                 (rule "polySimp_rightDist" (formula "21") (term "1,2,0"))
                                 (rule "mul_literals" (formula "21") (term "0,1,2,0"))
                                 (rule "polySimp_addAssoc" (formula "21") (term "2,0"))
                                 (rule "polySimp_addComm1" (formula "21") (term "0,2,0"))
                                 (rule "add_literals" (formula "21") (term "0,0,2,0"))
                                 (rule "polyDiv_pullOut" (formula "4") (term "1,1") (inst "polyDivCoeff=Z(1(#))"))
                                 (rule "equal_literals" (formula "4") (term "0,1,1"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,1,1"))
                                 (rule "mul_literals" (formula "4") (term "1,0,0,1,1"))
                                 (rule "polySimp_addComm0" (formula "4") (term "1,1"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0,1,1,1"))
                                 (rule "add_literals" (formula "4") (term "0,0,1,1,1"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "1"))
                                 (rule "add_literals" (formula "4") (term "0,1"))
                                 (rule "add_zero_left" (formula "4") (term "1"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "true_left" (formula "4"))
                                 (rule "polyDiv_pullOut" (formula "20") (term "0,1,2,0") (inst "polyDivCoeff=Z(1(#))"))
                                 (rule "equal_literals" (formula "20") (term "0,0,1,2,0"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,0,1,2,0"))
                                 (rule "mul_literals" (formula "20") (term "1,0,0,0,1,2,0"))
                                 (rule "polySimp_mulComm0" (formula "20") (term "1,2,0"))
                                 (rule "polySimp_addComm1" (formula "20") (term "0,0,1,1,2,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,0,1,1,2,0"))
                                 (rule "polySimp_addComm0" (formula "20") (term "1,1,2,0"))
                                 (rule "polySimp_rightDist" (formula "20") (term "1,2,0"))
                                 (rule "mul_literals" (formula "20") (term "0,1,2,0"))
                                 (rule "polySimp_addAssoc" (formula "20") (term "2,0"))
                                 (rule "polySimp_addComm1" (formula "20") (term "0,2,0"))
                                 (rule "add_literals" (formula "20") (term "0,0,2,0"))
                                 (rule "expand_moduloInteger" (formula "5") (term "0"))
                                 (rule "replace_int_RANGE" (formula "5") (term "1,1,0"))
                                 (rule "replace_int_MIN" (formula "5") (term "0,0"))
                                 (rule "replace_int_HALFRANGE" (formula "5") (term "0,0,1,0"))
                                 (rule "polySimp_homoEq" (formula "5"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                 (rule "mul_literals" (formula "5") (term "0,1,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
                                 (rule "polySimp_addComm0" (formula "5") (term "0,0,0,0"))
                                 (rule "mod_axiom" (formula "5") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0"))
                                 (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
                                 (rule "add_literals" (formula "5") (term "1,0"))
                                 (rule "times_zero_1" (formula "5") (term "0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "true_left" (formula "5"))
                                 (rule "nnf_imp2or" (formula "14") (term "0"))
                                 (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "14") (term "0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,1,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0"))
                                 (rule "Class_invariant_axiom_for_BitSet" (formula "10") (inst "i_0=i_0") (inst "wordIndex=wordIndex") (inst "bitIndex=bitIndex") (inst "x=x_12") (inst "i=i") (ifseqformula "8"))
                                  (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "18")) (ifInst ""  (formula "1")))
                                 (rule "andLeft" (formula "10"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "translateJavaCastLong" (formula "14") (term "0,1,1,1,0"))
                                 (rule "translateJavaMulLong" (formula "13") (term "0,0,0,1,0,0"))
                                 (rule "translateJavaSubInt" (formula "11") (term "0,2,0,0,1"))
                                 (rule "translateJavaMulLong" (formula "14") (term "1,1,1,0"))
                                 (rule "translateJavaCastLong" (formula "13") (term "0,0,0,0,1,0,0"))
                                 (rule "expand_inInt" (formula "12") (term "1,0,0"))
                                 (rule "expand_inInt" (formula "13") (term "1,0,0,0,0"))
                                 (rule "expand_inInt" (formula "13") (term "1,0,0,0"))
                                 (rule "expand_inLong" (formula "14") (term "1,0,0"))
                                 (rule "expand_inInt" (formula "15") (term "1,0,0"))
                                 (rule "replace_int_MAX" (formula "12") (term "1,0,1,0,0"))
                                 (rule "replace_int_MIN" (formula "12") (term "0,1,1,0,0"))
                                 (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,0,0"))
                                 (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,0,0"))
                                 (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,0"))
                                 (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,0"))
                                 (rule "replace_long_MAX" (formula "14") (term "1,0,1,0,0"))
                                 (rule "replace_long_MIN" (formula "14") (term "0,1,1,0,0"))
                                 (rule "replace_int_MAX" (formula "15") (term "1,0,1,0,0"))
                                 (rule "replace_int_MIN" (formula "15") (term "0,1,1,0,0"))
                                 (rule "translateJavaAddLong" (formula "13") (term "0,0,1,0,0"))
                                 (rule "bitAtDef" (formula "13") (term "0,1,1,0,0"))
                                 (rule "ifEqualsInteger" (formula "13") (term "1,1,0,0"))
                                 (rule "equal_literals" (formula "13") (term "1,1,1,1,0,0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "15") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "10"))
                                 (rule "inEqSimp_commuteLeq" (formula "14") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0,0,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "13") (term "0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,1,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,1,1,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,1,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_contradEq7" (formula "11") (term "0,0") (ifseqformula "3"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,0,0"))
                                 (rule "leq_literals" (formula "11") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "notLeft" (formula "11"))
                                 (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "3"))
                                 (rule "leq_literals" (formula "10") (term "0"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "true_left" (formula "10"))
                                 (rule "expand_addJlong" (formula "11") (term "0,0,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "11") (term "0,0,0,1,0,0"))
                                 (rule "nnf_imp2or" (formula "13") (term "0"))
                                 (rule "expand_mulJlong" (formula "12") (term "1,1,1,1,0"))
                                 (rule "nnf_imp2or" (formula "10") (term "0"))
                                 (rule "expand_subJint" (formula "19") (term "0,2,0"))
                                 (rule "polySimp_elimSub" (formula "19") (term "0,0,2,0"))
                                 (rule "mul_literals" (formula "19") (term "1,0,0,2,0"))
                                 (rule "polySimp_addComm0" (formula "19") (term "0,0,2,0"))
                                 (rule "expand_moduloLong" (formula "11") (term "0,1,0,0,0,1,0,0"))
                                 (rule "replace_long_HALFRANGE" (formula "11") (term "0,0,1,0,1,0,0,0,1,0,0"))
                                 (rule "replace_long_MIN" (formula "11") (term "0,0,1,0,0,0,1,0,0"))
                                 (rule "replace_long_RANGE" (formula "11") (term "1,1,0,1,0,0,0,1,0,0"))
                                 (rule "mod_axiom" (formula "11") (term "1,0,1,0,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,1,0,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,1,0,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,1,0,0"))
                                 (rule "expand_moduloLong" (formula "12") (term "0,0,1,1,1,1,0"))
                                 (rule "replace_long_RANGE" (formula "12") (term "1,1,0,0,1,1,1,1,0"))
                                 (rule "replace_long_HALFRANGE" (formula "12") (term "0,0,1,0,0,1,1,1,1,0"))
                                 (rule "replace_long_MIN" (formula "12") (term "0,0,0,1,1,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "0,1,1,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "0,1,1,1,1,0"))
                                 (rule "mul_literals" (formula "12") (term "0,0,1,1,1,1,0"))
                                 (rule "mod_axiom" (formula "12") (term "0,1,0,1,1,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,1,1,1,1,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,1,1,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,1,1,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,1,1,1,1,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "0,1,0,1,1,1,1,0"))
                                 (rule "mul_literals" (formula "12") (term "0,0,1,0,1,1,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,1,1,1,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0,1,1,1,1,0"))
                                 (rule "add_zero_left" (formula "12") (term "0,0,1,1,1,1,0"))
                                 (rule "expand_moduloInteger" (formula "19") (term "0,2,0"))
                                 (rule "replace_int_RANGE" (formula "19") (term "1,1,0,2,0"))
                                 (rule "replace_int_HALFRANGE" (formula "19") (term "0,0,1,0,2,0"))
                                 (rule "replace_int_MIN" (formula "19") (term "0,0,2,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,1,0,2,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,1,0,2,0"))
                                 (rule "mod_axiom" (formula "19") (term "1,0,2,0"))
                                 (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,2,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,2,0"))
                                 (rule "polySimp_addAssoc" (formula "19") (term "0,0,2,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0,2,0"))
                                 (rule "applyEq" (formula "19") (term "0,1,0,2,0") (ifseqformula "4"))
                                 (rule "times_zero_2" (formula "19") (term "1,0,2,0"))
                                 (rule "add_zero_right" (formula "19") (term "0,2,0"))
                                 (rule "expand_moduloLong" (formula "11") (term "0,0,1,0,0"))
                                 (rule "replace_long_RANGE" (formula "11") (term "1,1,0,0,1,0,0"))
                                 (rule "replace_long_HALFRANGE" (formula "11") (term "0,0,1,0,0,1,0,0"))
                                 (rule "replace_long_MIN" (formula "11") (term "0,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,1,0,0,1,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "10") (term "0,0"))
                                 (rule "expand_moduloLong" (formula "12") (term "1,1,1,1,0"))
                                 (rule "replace_long_RANGE" (formula "12") (term "1,1,1,1,1,1,0"))
                                 (rule "replace_long_HALFRANGE" (formula "12") (term "0,0,1,1,1,1,1,0"))
                                 (rule "replace_long_MIN" (formula "12") (term "0,1,1,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,1,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "1,1,1,0"))
                                 (rule "add_literals" (formula "12") (term "0,1,1,1,0"))
                                 (rule "polyMod_pullOut" (formula "12") (term "1,1,1,1,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            int::select(heap,
                        self,
                        BitSet::$wordsInUse)),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,1,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,1,1,1,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,1,1,1,1,0"))
                                 (rule "add_literals" (formula "12") (term "1,1,0,1,1,1,1,0"))
                                 (rule "times_zero_1" (formula "12") (term "1,0,1,1,1,1,0"))
                                 (rule "add_zero_right" (formula "12") (term "0,1,1,1,1,0"))
                                 (rule "mod_axiom" (formula "12") (term "1,1,1,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "1,1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,1,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,1,1,1,0"))
                                 (rule "expand_mulJlong" (formula "11") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "0,1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "0,1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "0,0,1,0,1,0,0,1,0,0"))
                                 (rule "expand_moduloLong" (formula "11") (term "1,0,1,0,0,1,0,0"))
                                 (rule "replace_long_RANGE" (formula "11") (term "1,1,1,0,1,0,0,1,0,0"))
                                 (rule "replace_long_HALFRANGE" (formula "11") (term "0,0,1,1,0,1,0,0,1,0,0"))
                                 (rule "replace_long_MIN" (formula "11") (term "0,1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,1,1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "11") (term "0,0,1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,0,0"))
                                 (rule "mod_axiom" (formula "11") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
                                 (rule "polySimp_addComm0" (formula "11") (term "0,0,0,0,1,0,0,1,0,0"))
                                 (rule "polyMod_pullOut" (formula "11") (term "1,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
                mul(wordIndex, Z(4(6(#))))),
            mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
                        wordIndex),
                    Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
                Z(neglit(4(2(4(3(0(3(1(1(4(7(1(7(0(2(6(1(9(5(0(8(1(1(#)))))))))))))))))))))))))),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(1(#))))"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,1,0,0,1,0,0"))
                                 (rule "polyMod_pullOut" (formula "11") (term "1,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,1,0,0,1,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,1,0,0,1,0,0"))
                                 (rule "mod_axiom" (formula "11") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,0,0,1,0,0"))
                                 (rule "nnf_imp2or" (formula "12") (term "0"))
                                 (rule "nnf_notAnd" (formula "13") (term "1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "13") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0"))
                                 (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "10") (term "1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "10") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "1,1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "10") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "10") (term "1,0,1,0,0"))
                                 (rule "nnf_imp2or" (formula "11") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
                                 (rule "nnf_notAnd" (formula "12") (term "1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "12") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,0,1,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "12") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,1,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
                                 (rule "shift_paren_or" (formula "17") (term "0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "0,1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,1,1,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "0,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,1,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,1,1,0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,1,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,1,1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,1,0,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,1,0,0,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,0,0,0"))
                                 (rule "div_axiom" (formula "23") (term "0,1,2,0") (inst "quotient=quotient_0"))
                                 (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                                 (rule "qeq_literals" (formula "1") (term "0,1,1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "equal_literals" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                                 (rule "add_literals" (formula "3") (term "0,0,1"))
                                 (rule "polySimp_addComm1" (formula "3") (term "1"))
                                 (rule "add_literals" (formula "3") (term "0,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "3"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0"))
                                 (rule "applyEq" (formula "26") (term "0,1,2,0") (ifseqformula "1"))
                                 (rule "polySimp_addComm1" (formula "26") (term "2,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1"))
                                 (rule "mul_literals" (formula "2") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                 (rule "mul_literals" (formula "3") (term "0,1"))
                                 (rule "div_axiom" (formula "23") (term "0") (inst "quotient=quotient_1"))
                                 (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                                 (rule "equal_literals" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "qeq_literals" (formula "1") (term "0,1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                                 (rule "add_literals" (formula "3") (term "0,0,1"))
                                 (rule "polySimp_addComm1" (formula "3") (term "1"))
                                 (rule "add_literals" (formula "3") (term "0,1"))
                                 (rule "inEqSimp_homoInEq0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_homoInEq1" (formula "3"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0"))
                                 (rule "applyEq" (formula "24") (term "0,0,0,1") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq0" (formula "24") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,1"))
                                 (rule "polySimp_addComm1" (formula "24") (term "0,0,1"))
                                 (rule "applyEq" (formula "26") (term "0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "24") (term "0,1,1,1,0,0,1,1") (ifseqformula "1"))
                                 (rule "polySimp_addComm1" (formula "24") (term "1,1,0,0,1,1"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "24") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "24") (term "0,0,1"))
                                 (rule "polySimp_elimOne" (formula "24") (term "0,0,1"))
                                 (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "22"))
                                 (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                 (rule "mul_literals" (formula "3") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1"))
                                 (rule "elimGcdGeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                                 (rule "leq_literals" (formula "3") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                                 (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "3") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                                 (rule "add_literals" (formula "3") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "3") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "3") (term "0,0"))
                                 (rule "leq_literals" (formula "3") (term "0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "27"))
                                 (rule "add_literals" (formula "3") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "27") (ifseqformula "3"))
                                 (rule "add_zero_left" (formula "27") (term "0,0"))
                                 (rule "mul_literals" (formula "27") (term "0,0"))
                                 (rule "leq_literals" (formula "27") (term "0"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "false_right" (formula "27"))
                                 (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "2"))
                                 (rule "times_zero_1" (formula "22") (term "0,0"))
                                 (rule "add_zero_left" (formula "22") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "22"))
                                 (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                                 (rule "inEqSimp_contradInEq5" (formula "22") (ifseqformula "3"))
                                 (rule "times_zero_1" (formula "22") (term "1,1,0"))
                                 (rule "greater_literals" (formula "22") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "qeq_literals" (formula "22") (term "0"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "closeFalse" (formula "22"))
                              )
                           )
                           (branch "Assume -2147483648 + (2147483649 + iset_max(self.iSet)) % 4294967296 != moduloInt(iset_max(self.iSet) + 1)"
                              (rule "notLeft" (formula "1"))
                              (rule "eqSymm" (formula "3"))
                              (rule "eqSymm" (formula "1"))
                              (rule "eqSymm" (formula "2"))
                              (rule "polySimp_elimSub" (formula "22") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "22") (term "1,1,0,0,1"))
                              (rule "polySimp_elimSub" (formula "22") (term "1,0,1"))
                              (rule "polySimp_elimSub" (formula "21") (term "0"))
                              (rule "mul_literals" (formula "21") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "20") (term "0"))
                              (rule "mul_literals" (formula "20") (term "1,0"))
                              (rule "polySimp_homoEq" (formula "16"))
                              (rule "polySimp_elimSub" (formula "3") (term "0"))
                              (rule "polySimp_elimSub" (formula "1") (term "0"))
                              (rule "mul_literals" (formula "1") (term "1,0"))
                              (rule "polySimp_elimSub" (formula "2") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "2") (term "1,1,0,0,0"))
                              (rule "polySimp_elimSub" (formula "2") (term "0,0,1,1"))
                              (rule "polySimp_elimSub" (formula "2") (term "1,0,0"))
                              (rule "polySimp_homoEq" (formula "3"))
                              (rule "polySimp_homoEq" (formula "1"))
                              (rule "polySimp_homoEq" (formula "2"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                              (rule "polySimp_addComm0" (formula "22") (term "1,0,0,1"))
                              (rule "polySimp_addComm0" (formula "21") (term "0"))
                              (rule "polySimp_addComm0" (formula "20") (term "0"))
                              (rule "polySimp_addComm0" (formula "16") (term "0,0,0"))
                              (rule "polySimp_addComm0" (formula "2") (term "1,0,0,0,1,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "1,1,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,0"))
                              (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                              (rule "mul_literals" (formula "3") (term "0,1,0"))
                              (rule "polySimp_elimOne" (formula "3") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "0,0,1"))
                              (rule "mul_literals" (formula "22") (term "0,0,0,1"))
                              (rule "polySimp_addComm1" (formula "3") (term "0"))
                              (rule "polySimp_addComm1" (formula "22") (term "0,1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0"))
                              (rule "polySimp_rightDist" (formula "2") (term "0,0,0,1,0,0"))
                              (rule "mul_literals" (formula "2") (term "0,0,0,0,1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0,0,1,0,0"))
                              (rule "inEqSimp_gtToGeq" (formula "14") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                              (rule "polySimp_addComm1" (formula "14") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0"))
                              (rule "polySimp_addComm0" (formula "16") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,0,1"))
                              (rule "add_literals" (formula "22") (term "0,0,0,1"))
                              (rule "add_zero_left" (formula "22") (term "0,0,1"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "inEqSimp_ltRight" (formula "21"))
                              (rule "times_zero_1" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_geqRight" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0"))
                              (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "4") (term "0,0,0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "mod_axiom" (formula "17") (term "0,1,0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "17") (term "0,1,0,1,0,0,1"))
                              (rule "mul_literals" (formula "17") (term "0,0,1,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1"))
                              (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1"))
                              (rule "mod_axiom" (formula "17") (term "1,0,2,0,0,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,2,0,0,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,2,0,0,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,2,0,0,0,1,1"))
                              (rule "add_literals" (formula "17") (term "0,0,0,2,0,0,0,1,1"))
                              (rule "mod_axiom" (formula "16") (term "1,0,2,0,0,0,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,2,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,2,0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,0,2,0,0,0,1,1,0"))
                              (rule "add_literals" (formula "16") (term "0,0,0,2,0,0,0,1,1,0"))
                              (rule "mod_axiom" (formula "22") (term "1,2,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,2,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "2,0"))
                              (rule "polySimp_addAssoc" (formula "22") (term "0,2,0"))
                              (rule "add_literals" (formula "22") (term "0,0,2,0"))
                              (rule "mod_axiom" (formula "17") (term "0,1,0,1,1,1,0,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0,1,1,1,0,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,1,1,1,0,0,1,1"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,1,1,1,0,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,1,1,1,0,0,1,1"))
                              (rule "polySimp_rightDist" (formula "17") (term "0,1,0,1,1,1,0,0,1,1"))
                              (rule "mul_literals" (formula "17") (term "0,0,1,0,1,1,1,0,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,1,1,1,0,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,1,1,0,0,1,1"))
                              (rule "add_literals" (formula "17") (term "0,0,0,1,1,1,0,0,1,1"))
                              (rule "mod_axiom" (formula "16") (term "1,1,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "1,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,1,1,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,1,1,0,0"))
                              (rule "mod_axiom" (formula "4") (term "1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0,0,0,1,0"))
                              (rule "add_literals" (formula "4") (term "0,0,0,0,1,0"))
                              (rule "mod_axiom" (formula "5") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "5") (term "0"))
                              (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
                              (rule "add_literals" (formula "5") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "5") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1" (formula "5") (term "0,0"))
                              (rule "add_literals" (formula "5") (term "1,0,0"))
                              (rule "times_zero_1" (formula "5") (term "0,0"))
                              (rule "add_zero_left" (formula "5") (term "0"))
                              (rule "mod_axiom" (formula "3") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                              (rule "add_literals" (formula "3") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "3") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor2" (formula "3") (term "0,0"))
                              (rule "add_literals" (formula "3") (term "1,0,0"))
                              (rule "times_zero_1" (formula "3") (term "0,0"))
                              (rule "add_zero_left" (formula "3") (term "0"))
                              (rule "mod_axiom" (formula "18") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "0,1,0"))
                              (rule "mul_literals" (formula "18") (term "0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "18") (term "0"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "18") (term "0,0,0"))
                              (rule "add_literals" (formula "18") (term "0,0,0,0"))
                              (rule "mod_axiom" (formula "4") (term "0,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,1,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0,1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "4") (term "0,0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "4") (term "0,0,0,0,1,0,0,1,0"))
                              (rule "mod_axiom" (formula "4") (term "0,1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "0,1,0,1,0"))
                              (rule "mul_literals" (formula "4") (term "0,0,1,0,1,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0,0,0,0,1,0"))
                              (rule "add_literals" (formula "4") (term "0,0,0,0,0,1,0"))
                              (rule "polySimp_invertEq" (formula "5"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                              (rule "times_zero_2" (formula "5") (term "1"))
                              (rule "polySimp_invertEq" (formula "3"))
                              (rule "times_zero_2" (formula "3") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                              (rule "polySimp_sepPosMonomial" (formula "18"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1"))
                              (rule "polySimp_rightDist" (formula "18") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "18") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1"))
                              (rule "mul_literals" (formula "18") (term "0,0,1"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,0,1"))
                              (rule "polySimp_sepPosMonomial" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "mul_literals" (formula "4") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "16") (term "0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "mul_literals" (formula "2") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,1"))
                              (rule "mul_literals" (formula "17") (term "1,0,1"))
                              (rule "inEqSimp_contradEq7" (formula "19") (ifseqformula "2"))
                              (rule "times_zero_1" (formula "19") (term "1,0,0"))
                              (rule "add_zero_right" (formula "19") (term "0,0"))
                              (rule "leq_literals" (formula "19") (term "0"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "false_right" (formula "19"))
                              (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "15"))
                              (rule "leq_literals" (formula "12") (term "0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "13"))
                              (rule "leq_literals" (formula "12") (term "0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "elimGcdEq" (formula "3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))") (inst "elimGcdLeftDiv=div(add(Z(7(4(6(3(8(4(7(4(1(2(#))))))))))),
        int::select(heap, self, BitSet::$wordsInUse)),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcdRightDiv=Z(0(#))"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "add_zero_left" (formula "3") (term "0,0,1"))
                              (rule "add_zero_left" (formula "3") (term "0,1,0"))
                              (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
                              (rule "add_literals" (formula "3") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "3") (term "0,0,1"))
                              (rule "times_zero_1" (formula "3") (term "0,1,0"))
                              (rule "add_zero_left" (formula "3") (term "0,0,0"))
                              (rule "mul_literals" (formula "3") (term "0,0,1"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "leq_literals" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "qeq_literals" (formula "3") (term "0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEq" (formula "4") (term "0,1,0,0,1,0,0") (ifseqformula "3"))
                              (rule "times_zero_2" (formula "4") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "4") (term "0,0,1,0,0"))
                              (rule "applyEq" (formula "15") (term "0,1,0,2,0,0,0,1,1") (ifseqformula "3"))
                              (rule "times_zero_2" (formula "15") (term "1,0,2,0,0,0,1,1"))
                              (rule "add_zero_right" (formula "15") (term "0,2,0,0,0,1,1"))
                              (rule "applyEq" (formula "14") (term "0,1,0,2,0,0,0,1,1,0") (ifseqformula "3"))
                              (rule "times_zero_2" (formula "14") (term "1,0,2,0,0,0,1,1,0"))
                              (rule "add_zero_right" (formula "14") (term "0,2,0,0,0,1,1,0"))
                              (rule "applyEq" (formula "4") (term "0,1,0,0,0") (ifseqformula "3"))
                              (rule "times_zero_2" (formula "4") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "4") (term "0,0,0"))
                              (rule "elimGcdEq" (formula "5") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))") (inst "elimGcdLeftDiv=div(add(Z(2(1(7(3(8(4(7(4(1(2(#))))))))))),
        mul(result_numberOfLeadingZeros,
            Z(neglit(1(#))))),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcdRightDiv=Z(0(#))"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "add_zero_left" (formula "5") (term "0,0,1"))
                              (rule "times_zero_1" (formula "5") (term "1,0,1,0"))
                              (rule "add_zero_left" (formula "5") (term "0,0,0"))
                              (rule "add_literals" (formula "5") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "0,0,1"))
                              (rule "add_zero_left" (formula "5") (term "0,1,0"))
                              (rule "times_zero_1" (formula "5") (term "0,0,0"))
                              (rule "mul_literals" (formula "5") (term "0,0,1"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "qeq_literals" (formula "5") (term "1,0"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "leq_literals" (formula "5") (term "0"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "applyEq" (formula "14") (term "0,1,1,1,0,0") (ifseqformula "5"))
                              (rule "times_zero_2" (formula "14") (term "1,1,1,0,0"))
                              (rule "add_zero_right" (formula "14") (term "1,1,0,0"))
                              (rule "polyMod_pullOut" (formula "15") (term "1,1,1,0,0,1,1") (inst "polyDivCoeff=div(add(Z(9(4(6(3(8(4(7(4(1(2(#))))))))))),
        result_numberOfLeadingZeros),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,1,1,0,0,1,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,1,1,1,0,0,1,1"))
                              (rule "add_literals" (formula "15") (term "1,1,0,1,1,1,0,0,1,1"))
                              (rule "times_zero_1" (formula "15") (term "1,0,1,1,1,0,0,1,1"))
                              (rule "add_zero_right" (formula "15") (term "0,1,1,1,0,0,1,1"))
                              (rule "mod_axiom" (formula "15") (term "1,1,1,0,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,1,0,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "15") (term "1,1,0,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0,1,1,0,0,1,1"))
                              (rule "add_literals" (formula "15") (term "0,0,1,1,0,0,1,1"))
                              (rule "polyDiv_pullOut" (formula "19") (term "0,1,2,0") (inst "polyDivCoeff=Z(1(#))"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,2,0,1,2,0"))
                              (rule "equal_literals" (formula "19") (term "0,0,1,2,0"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "mul_literals" (formula "19") (term "1,0,0,0,1,2,0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,2,0"))
                              (rule "polySimp_addComm1" (formula "19") (term "0,0,1,1,2,0"))
                              (rule "add_literals" (formula "19") (term "0,0,0,1,1,2,0"))
                              (rule "polySimp_addComm0" (formula "19") (term "1,1,2,0"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,2,0"))
                              (rule "mul_literals" (formula "19") (term "0,1,2,0"))
                              (rule "polySimp_addAssoc" (formula "19") (term "2,0"))
                              (rule "polySimp_addComm1" (formula "19") (term "0,2,0"))
                              (rule "add_literals" (formula "19") (term "0,0,2,0"))
                              (rule "polyDiv_pullOut" (formula "15") (term "0,1,0,0,0,1") (inst "polyDivCoeff=Z(1(#))"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,2,0,1,0,0,0,1"))
                              (rule "equal_literals" (formula "15") (term "0,0,1,0,0,0,1"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "mul_literals" (formula "15") (term "1,0,0,0,1,0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1"))
                              (rule "polySimp_addComm0" (formula "15") (term "1,1,0,0,0,1"))
                              (rule "polySimp_addComm1" (formula "15") (term "0,1,1,1,0,0,0,1"))
                              (rule "add_literals" (formula "15") (term "0,0,1,1,1,0,0,0,1"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1"))
                              (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1"))
                              (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0,1"))
                              (rule "add_literals" (formula "15") (term "0,0,0,0,0,1"))
                              (rule "polyDiv_pullOut" (formula "16") (term "0,1,1") (inst "polyDivCoeff=Z(1(#))"))
                              (rule "equal_literals" (formula "16") (term "0,0,1,1"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,1,1"))
                              (rule "mul_literals" (formula "16") (term "1,0,0,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,1"))
                              (rule "polySimp_addComm1" (formula "16") (term "0,0,1,1,1"))
                              (rule "add_literals" (formula "16") (term "0,0,0,1,1,1"))
                              (rule "polySimp_addComm0" (formula "16") (term "1,1,1"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,1"))
                              (rule "mul_literals" (formula "16") (term "0,1,1"))
                              (rule "polySimp_addAssoc" (formula "16") (term "1"))
                              (rule "polySimp_addComm1" (formula "16") (term "0,1"))
                              (rule "add_literals" (formula "16") (term "0,0,1"))
                              (rule "polyDiv_pullOut" (formula "5") (term "0") (inst "polyDivCoeff=Z(1(#))"))
                              (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,2,0"))
                              (rule "equal_literals" (formula "5") (term "0,0"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
                              (rule "add_literals" (formula "5") (term "0,0,0,0"))
                              (rule "polySimp_addComm0" (formula "5") (term "0"))
                              (rule "polySimp_sepPosMonomial" (formula "5"))
                              (rule "mul_literals" (formula "5") (term "1"))
                              (rule "polyMod_pullOut" (formula "4") (term "0") (inst "polyDivCoeff=mul(div(add(Z(4(8(5(3(8(4(7(4(1(2(#))))))))))),
            mul(int::select(heap,
                            self,
                            BitSet::$wordsInUse),
                Z(4(6(#))))),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                              (rule "add_literals" (formula "4") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0,0"))
                              (rule "add_zero_right" (formula "4") (term "0,0"))
                              (rule "mod_axiom" (formula "4") (term "0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                              (rule "polySimp_homoEq" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "4") (term "0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,1,0"))
                              (rule "mul_literals" (formula "4") (term "0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "4") (term "1,0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "4") (term "0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0,0,0"))
                              (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0"))
                              (rule "add_literals" (formula "4") (term "0,0,0,0,0"))
                              (rule "add_zero_left" (formula "4") (term "0,0,0,0"))
                              (rule "polySimp_sepPosMonomial" (formula "4"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1"))
                              (rule "polySimp_rightDist" (formula "4") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "4") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                              (rule "polySimp_mulComm0" (formula "4") (term "0,0,1"))
                              (rule "applyEq" (formula "19") (term "1") (ifseqformula "4"))
                              (rule "polyMod_pullOut" (formula "15") (term "0,0,1") (inst "polyDivCoeff=div(add(Z(neglit(7(4(6(3(8(4(7(4(1(2(#)))))))))))),
        result_numberOfLeadingZeros),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0,0,1"))
                              (rule "add_literals" (formula "15") (term "1,1,0,0,0,1"))
                              (rule "times_zero_1" (formula "15") (term "1,0,0,0,1"))
                              (rule "add_zero_right" (formula "15") (term "0,0,0,1"))
                              (rule "mod_axiom" (formula "15") (term "0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,1"))
                              (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "15") (term "0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,0,1"))
                              (rule "mul_literals" (formula "15") (term "0,0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0,0,1"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1"))
                              (rule "add_literals" (formula "15") (term "0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,1"))
                              (rule "mul_literals" (formula "15") (term "0,1,0,1"))
                              (rule "polyDiv_pullOut" (formula "15") (term "0,1,1,1,0,0,1,1") (inst "polyDivCoeff=Z(1(#))"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,2,0,1,1,1,0,0,1,1"))
                              (rule "equal_literals" (formula "15") (term "0,0,1,1,1,0,0,1,1"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "mul_literals" (formula "15") (term "1,0,0,0,1,1,1,0,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,1,1,0,0,1,1"))
                              (rule "polySimp_addComm0" (formula "15") (term "1,1,1,1,0,0,1,1"))
                              (rule "polySimp_addComm1" (formula "15") (term "0,1,1,1,1,1,0,0,1,1"))
                              (rule "add_literals" (formula "15") (term "0,0,1,1,1,1,1,0,0,1,1"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,1,1,0,0,1,1"))
                              (rule "mul_literals" (formula "15") (term "0,1,1,1,0,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "15") (term "1,1,0,0,1,1"))
                              (rule "polySimp_addComm1" (formula "15") (term "0,1,1,0,0,1,1"))
                              (rule "add_literals" (formula "15") (term "0,0,1,1,0,0,1,1"))
                              (rule "polyDiv_pullOut" (formula "15") (term "0,0,0,1") (inst "polyDivCoeff=Z(2(#))"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,2,0,0,0,1"))
                              (rule "equal_literals" (formula "15") (term "0,0,0,0,1"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "15") (term "0,0,1"))
                              (rule "polySimp_addComm1" (formula "15") (term "0,0,1,0,0,1"))
                              (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1"))
                              (rule "polySimp_addComm0" (formula "15") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "15") (term "0,0,1"))
                              (rule "mul_literals" (formula "15") (term "0,0,0,1"))
                              (rule "inEqSimp_homoInEq0" (formula "15") (term "0,1"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "15") (term "0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0,0,1"))
                              (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1"))
                              (rule "add_literals" (formula "15") (term "0,0,0,0,1"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "15") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "0,0,1"))
                              (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                              (rule "mul_literals" (formula "2") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                              (rule "mul_literals" (formula "2") (term "1"))
                              (rule "inEqSimp_notGeq" (formula "15") (term "0,1,0"))
                              (rule "times_zero_1" (formula "15") (term "1,0,0,0,1,0"))
                              (rule "add_zero_right" (formula "15") (term "0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,1,0"))
                              (rule "mul_literals" (formula "15") (term "1,0,1,0"))
                              (rule "expand_moduloInteger" (formula "17") (term "0"))
                              (rule "replace_int_RANGE" (formula "17") (term "1,1,0"))
                              (rule "replace_int_HALFRANGE" (formula "17") (term "0,0,1,0"))
                              (rule "replace_int_MIN" (formula "17") (term "0,0"))
                              (rule "polySimp_homoEq" (formula "17"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,1,0"))
                              (rule "add_literals" (formula "17") (term "0,0,0,1,1,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0"))
                              (rule "polySimp_addComm1" (formula "17") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
                              (rule "add_literals" (formula "17") (term "0,0,0,0"))
                              (rule "mod_axiom" (formula "17") (term "0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "0,1,0"))
                              (rule "mul_literals" (formula "17") (term "0,0,1,0"))
                              (rule "polySimp_addComm1" (formula "17") (term "0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "17") (term "0,0,0,0"))
                              (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,0"))
                              (rule "add_literals" (formula "17") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "17") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "17") (term "0,0,0"))
                              (rule "polySimp_sepNegMonomial" (formula "17"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                              (rule "elimGcdEq" (formula "17") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))") (inst "elimGcdLeftDiv=div(add(Z(neglit(7(4(6(3(8(4(7(4(1(2(#)))))))))))),
        iset_max(Free::select(heap,
                              self,
                              BitSet::$iSet))),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcdRightDiv=add(Z(neglit(1(#))),
    div(add(Z(9(4(6(3(8(4(7(4(1(2(#))))))))))),
            iset_max(Free::select(heap,
                                  self,
                                  BitSet::$iSet))),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))))"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
                              (rule "add_literals" (formula "17") (term "1,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,1,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,1,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "17") (term "0,0,0,0"))
                              (rule "add_literals" (formula "17") (term "0,0,0,0,0"))
                              (rule "add_zero_left" (formula "17") (term "0,0,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "17") (term "0,0,0"))
                              (rule "add_literals" (formula "17") (term "1,0,0,0"))
                              (rule "times_zero_1" (formula "17") (term "0,0,0"))
                              (rule "leq_literals" (formula "17") (term "0,0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
                              (rule "add_literals" (formula "17") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "17") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "17") (term "0,0"))
                              (rule "add_literals" (formula "17") (term "1,0,0"))
                              (rule "times_zero_1" (formula "17") (term "0,0"))
                              (rule "qeq_literals" (formula "17") (term "0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                              (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
                              (rule "add_literals" (formula "17") (term "0,0,0,0"))
                              (rule "add_zero_left" (formula "17") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor0" (formula "17") (term "0,0"))
                              (rule "add_literals" (formula "17") (term "1,0,0"))
                              (rule "times_zero_1" (formula "17") (term "0,0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "polyDiv_pullOut" (formula "17") (term "1,1") (inst "polyDivCoeff=Z(1(#))"))
                              (rule "equal_literals" (formula "17") (term "0,1,1"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,1,1"))
                              (rule "mul_literals" (formula "17") (term "1,0,0,1,1"))
                              (rule "polySimp_addComm1" (formula "17") (term "0,0,1,1"))
                              (rule "add_literals" (formula "17") (term "0,0,0,1,1"))
                              (rule "polySimp_addComm0" (formula "17") (term "1,1"))
                              (rule "polySimp_addAssoc" (formula "17") (term "1"))
                              (rule "add_literals" (formula "17") (term "0,1"))
                              (rule "add_zero_left" (formula "17") (term "1"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "closeTrue" (formula "17"))
                           )
                        )
                        (branch "Assume -2147483648 + (2147483647 + self.wordsInUse) % 4294967296 != self.wordsInUse - 1"
                           (rule "notLeft" (formula "1"))
                           (rule "eqSymm" (formula "2"))
                           (rule "eqSymm" (formula "1"))
                           (rule "eqSymm" (formula "15"))
                           (rule "polySimp_elimSub" (formula "21") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "21") (term "1,1,0,0,1"))
                           (rule "polySimp_elimSub" (formula "21") (term "1,0,1"))
                           (rule "polySimp_elimSub" (formula "2") (term "0"))
                           (rule "polySimp_elimSub" (formula "1") (term "1,0,0"))
                           (rule "polySimp_elimSub" (formula "1") (term "0,0,1,1"))
                           (rule "polySimp_elimSub" (formula "1") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,1,0,0,0"))
                           (rule "polySimp_elimSub" (formula "15") (term "0"))
                           (rule "mul_literals" (formula "15") (term "1,0"))
                           (rule "polySimp_homoEq" (formula "2"))
                           (rule "polySimp_homoEq" (formula "1"))
                           (rule "polySimp_homoEq" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "21") (term "1,0,0,1"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "polySimp_addComm0" (formula "15") (term "1,1,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "polySimp_rightDist" (formula "21") (term "0,0,1"))
                           (rule "mul_literals" (formula "21") (term "0,0,0,1"))
                           (rule "polySimp_addComm1" (formula "21") (term "0,1"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                           (rule "mul_literals" (formula "15") (term "0,1,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "0,0,0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,0,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,0"))
                           (rule "inEqSimp_geqRight" (formula "19"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_ltRight" (formula "20"))
                           (rule "times_zero_1" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0"))
                           (rule "inEqSimp_gtToGeq" (formula "15") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0,0,0"))
                           (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0,1"))
                           (rule "add_literals" (formula "21") (term "0,0,0,1"))
                           (rule "add_zero_left" (formula "21") (term "0,0,1"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "3") (term "0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0"))
                           (rule "mod_axiom" (formula "15") (term "1,0,2,0,0,0,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,2,0,0,0,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,2,0,0,0,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,0,2,0,0,0,1,1,0"))
                           (rule "add_literals" (formula "15") (term "0,0,0,2,0,0,0,1,1,0"))
                           (rule "mod_axiom" (formula "16") (term "0,1,0,1,1,1,0,0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0,1,1,1,0,0,1,1"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,1,1,0,0,1,1"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0,1,1,1,0,0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,1,1,1,0,0,1,1"))
                           (rule "polySimp_rightDist" (formula "16") (term "0,1,0,1,1,1,0,0,1,1"))
                           (rule "mul_literals" (formula "16") (term "0,0,1,0,1,1,1,0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1,1,1,0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,1,1,0,0,1,1"))
                           (rule "add_literals" (formula "16") (term "0,0,0,1,1,1,0,0,1,1"))
                           (rule "mod_axiom" (formula "21") (term "1,2,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,2,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "2,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,2,0"))
                           (rule "add_literals" (formula "21") (term "0,0,2,0"))
                           (rule "mod_axiom" (formula "16") (term "0,1,0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0,1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "16") (term "0,1,0,1,0,0,1"))
                           (rule "mul_literals" (formula "16") (term "0,0,1,0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1"))
                           (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1"))
                           (rule "mod_axiom" (formula "15") (term "1,1,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "1,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "15") (term "0,1,1,0,0"))
                           (rule "add_literals" (formula "15") (term "0,0,1,1,0,0"))
                           (rule "mod_axiom" (formula "16") (term "1,0,2,0,0,0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,2,0,0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,2,0,0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "16") (term "0,0,2,0,0,0,1,1"))
                           (rule "add_literals" (formula "16") (term "0,0,0,2,0,0,0,1,1"))
                           (rule "mod_axiom" (formula "3") (term "0,1,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0,1,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0,1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,1,0,1,0,1,0"))
                           (rule "mul_literals" (formula "3") (term "0,0,1,0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,1,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,1,0,1,0"))
                           (rule "mod_axiom" (formula "4") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "4") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1" (formula "4") (term "0,0"))
                           (rule "add_literals" (formula "4") (term "1,0,0"))
                           (rule "times_zero_1" (formula "4") (term "0,0"))
                           (rule "add_zero_left" (formula "4") (term "0"))
                           (rule "mod_axiom" (formula "17") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0"))
                           (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
                           (rule "add_literals" (formula "17") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "17") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor2" (formula "17") (term "0,0"))
                           (rule "add_literals" (formula "17") (term "1,0,0"))
                           (rule "times_zero_1" (formula "17") (term "0,0"))
                           (rule "add_zero_left" (formula "17") (term "0"))
                           (rule "mod_axiom" (formula "1") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "mod_axiom" (formula "2") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0,0"))
                           (rule "add_zero_left" (formula "2") (term "0,0,0"))
                           (rule "mod_axiom" (formula "3") (term "1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,0,0,1,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,0,0,1,0"))
                           (rule "polySimp_invertEq" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                           (rule "times_zero_2" (formula "4") (term "1"))
                           (rule "polySimp_invertEq" (formula "17"))
                           (rule "times_zero_2" (formula "17") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                           (rule "polySimp_sepPosMonomial" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "15") (term "0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,1"))
                           (rule "mul_literals" (formula "16") (term "1,0,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "13"))
                           (rule "leq_literals" (formula "12") (term "0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "13"))
                           (rule "leq_literals" (formula "11") (term "0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "elimGcdEq" (formula "15") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))") (inst "elimGcdLeftDiv=div(add(Z(7(4(6(3(8(4(7(4(1(2(#))))))))))),
        int::select(heap, self, BitSet::$wordsInUse)),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcdRightDiv=Z(0(#))"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "add_zero_left" (formula "15") (term "0,1,0"))
                           (rule "add_zero_left" (formula "15") (term "0,0,1"))
                           (rule "add_zero_left" (formula "15") (term "0,0,0"))
                           (rule "add_literals" (formula "15") (term "1,0,0"))
                           (rule "times_zero_1" (formula "15") (term "0,1,0"))
                           (rule "times_zero_1" (formula "15") (term "0,0,1"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "qeq_literals" (formula "15") (term "1,0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "times_zero_1" (formula "15") (term "0,0"))
                           (rule "leq_literals" (formula "15") (term "0"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "elimGcdEq" (formula "4") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))") (inst "elimGcdLeftDiv=div(add(Z(2(1(7(3(8(4(7(4(1(2(#))))))))))),
        mul(result_numberOfLeadingZeros,
            Z(neglit(1(#))))),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcdRightDiv=Z(0(#))"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "add_zero_left" (formula "4") (term "0,0,0"))
                           (rule "add_zero_left" (formula "4") (term "0,1,0"))
                           (rule "add_zero_left" (formula "4") (term "0,0,1"))
                           (rule "add_literals" (formula "4") (term "1,0,0"))
                           (rule "times_zero_1" (formula "4") (term "0,0,0"))
                           (rule "times_zero_1" (formula "4") (term "0,1,0"))
                           (rule "times_zero_1" (formula "4") (term "0,0,1"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "qeq_literals" (formula "4") (term "1,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "leq_literals" (formula "4") (term "0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "applyEq" (formula "13") (term "0,1,1,1,0,0") (ifseqformula "4"))
                           (rule "times_zero_2" (formula "13") (term "1,1,1,0,0"))
                           (rule "add_zero_right" (formula "13") (term "1,1,0,0"))
                           (rule "polyDiv_pullOut" (formula "19") (term "0,1,2,0") (inst "polyDivCoeff=Z(1(#))"))
                           (rule "equal_literals" (formula "19") (term "0,0,1,2,0"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,0,1,2,0"))
                           (rule "mul_literals" (formula "19") (term "1,0,0,0,1,2,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,2,0"))
                           (rule "polySimp_addComm0" (formula "19") (term "1,1,2,0"))
                           (rule "polySimp_addComm1" (formula "19") (term "0,1,1,1,2,0"))
                           (rule "add_literals" (formula "19") (term "0,0,1,1,1,2,0"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,2,0"))
                           (rule "mul_literals" (formula "19") (term "0,1,2,0"))
                           (rule "polySimp_addAssoc" (formula "19") (term "2,0"))
                           (rule "polySimp_addComm1" (formula "19") (term "0,2,0"))
                           (rule "add_literals" (formula "19") (term "0,0,2,0"))
                           (rule "polyMod_pullOut" (formula "14") (term "1,1,1,0,0,1,1") (inst "polyDivCoeff=div(add(Z(9(4(6(3(8(4(7(4(1(2(#))))))))))),
        result_numberOfLeadingZeros),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,1,1,0,0,1,1"))
                           (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,1,1,1,0,0,1,1"))
                           (rule "add_literals" (formula "14") (term "1,1,0,1,1,1,0,0,1,1"))
                           (rule "times_zero_1" (formula "14") (term "1,0,1,1,1,0,0,1,1"))
                           (rule "add_zero_right" (formula "14") (term "0,1,1,1,0,0,1,1"))
                           (rule "mod_axiom" (formula "14") (term "1,1,1,0,0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,1,0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "14") (term "1,1,0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "14") (term "0,1,1,0,0,1,1"))
                           (rule "add_literals" (formula "14") (term "0,0,1,1,0,0,1,1"))
                           (rule "polyMod_pullOut" (formula "14") (term "0,0,1") (inst "polyDivCoeff=div(add(Z(9(4(6(3(8(4(7(4(1(2(#))))))))))),
        result_numberOfLeadingZeros),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,1"))
                           (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0,0,1"))
                           (rule "add_literals" (formula "14") (term "1,1,0,0,0,1"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0,0,1"))
                           (rule "add_zero_right" (formula "14") (term "0,0,0,1"))
                           (rule "mod_axiom" (formula "14") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,1"))
                           (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "14") (term "0,1,0,0,1"))
                           (rule "mul_literals" (formula "14") (term "0,0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "14") (term "0,0,1"))
                           (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1"))
                           (rule "add_literals" (formula "14") (term "0,0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,0,1"))
                           (rule "mul_literals" (formula "14") (term "0,1,0,1"))
                           (rule "polyMod_pullOut" (formula "3") (term "0") (inst "polyDivCoeff=mul(div(add(add(Z(4(8(5(3(8(4(7(4(1(2(#))))))))))),
                mul(int::select(heap,
                                self,
                                BitSet::$wordsInUse),
                    Z(4(6(#))))),
            mul(div(add(Z(7(4(6(3(8(4(7(4(1(2(#))))))))))),
                        int::select(heap,
                                    self,
                                    BitSet::$wordsInUse)),
                    Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
                Z(neglit(4(4(9(6(0(9(7(7(8(4(7(2(#)))))))))))))))),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0"))
                           (rule "polyDiv_pullOut" (formula "4") (term "0") (inst "polyDivCoeff=Z(1(#))"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,2,0"))
                           (rule "equal_literals" (formula "4") (term "0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1,0,0,0"))
                           (rule "polySimp_addComm0" (formula "4") (term "0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,1,0"))
                           (rule "add_literals" (formula "4") (term "0,0,1,0"))
                           (rule "polySimp_sepPosMonomial" (formula "4"))
                           (rule "mul_literals" (formula "4") (term "1"))
                           (rule "polyDiv_pullOut" (formula "14") (term "0,1,1,1,0,0,1,1") (inst "polyDivCoeff=Z(1(#))"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,2,0,1,1,1,0,0,1,1"))
                           (rule "equal_literals" (formula "14") (term "0,0,1,1,1,0,0,1,1"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "mul_literals" (formula "14") (term "1,0,0,0,1,1,1,0,0,1,1"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,1,1,0,0,1,1"))
                           (rule "polySimp_addComm1" (formula "14") (term "0,0,1,1,1,1,0,0,1,1"))
                           (rule "add_literals" (formula "14") (term "0,0,0,1,1,1,1,0,0,1,1"))
                           (rule "polySimp_addComm0" (formula "14") (term "1,1,1,1,0,0,1,1"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,1,1,0,0,1,1"))
                           (rule "mul_literals" (formula "14") (term "0,1,1,1,0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "14") (term "1,1,0,0,1,1"))
                           (rule "polySimp_addComm1" (formula "14") (term "0,1,1,0,0,1,1"))
                           (rule "add_literals" (formula "14") (term "0,0,1,1,0,0,1,1"))
                           (rule "polyDiv_pullOut" (formula "14") (term "0,0,0,1") (inst "polyDivCoeff=Z(1(#))"))
                           (rule "equal_literals" (formula "14") (term "0,0,0,0,1"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0,0,1"))
                           (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "14") (term "0,0,1"))
                           (rule "polySimp_addComm0" (formula "14") (term "1,0,0,1"))
                           (rule "polySimp_addComm1" (formula "14") (term "0,1,1,0,0,1"))
                           (rule "add_literals" (formula "14") (term "0,0,1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "14") (term "0,0,1"))
                           (rule "mul_literals" (formula "14") (term "0,0,0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "14") (term "0,1"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "14") (term "0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "14") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1"))
                           (rule "add_literals" (formula "14") (term "0,0,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "14") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1"))
                           (rule "polyMod_pullOut" (formula "3") (term "0") (inst "polyDivCoeff=mul(div(add(Z(7(4(6(3(8(4(7(4(1(2(#))))))))))),
            int::select(heap,
                        self,
                        BitSet::$wordsInUse)),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(4(6(#)))))"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_zero_right" (formula "3") (term "0,0"))
                           (rule "mod_axiom" (formula "3") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                           (rule "polySimp_homoEq" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,0,1,0"))
                           (rule "mul_literals" (formula "3") (term "0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,0,0"))
                           (rule "add_zero_left" (formula "3") (term "0,0,0,0"))
                           (rule "polySimp_sepPosMonomial" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1"))
                           (rule "polySimp_mulComm0" (formula "3") (term "0,0,1"))
                           (rule "applyEq" (formula "19") (term "1") (ifseqformula "3"))
                           (rule "inEqSimp_exactShadow0" (formula "2") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "greater_literals" (formula "2") (term "0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "1,1,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0"))
                           (rule "polySimp_addLiterals" (formula "2") (term "0"))
                           (rule "polySimp_addComm0" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "2") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))") (inst "elimGcdLeftDiv=length(long[]::select(heap, self, BitSet::$words))") (inst "elimGcdRightDiv=Z(1(#))"))
                           (rule "leq_literals" (formula "2") (term "0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                           (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                           (rule "add_literals" (formula "2") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0"))
                           (rule "leq_literals" (formula "2") (term "0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "inEqSimp_notGeq" (formula "14") (term "0,1,0"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0,0,1,0"))
                           (rule "add_literals" (formula "14") (term "0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,1,0"))
                           (rule "mul_literals" (formula "14") (term "1,0,1,0"))
                           (rule "expand_moduloInteger" (formula "4") (term "0"))
                           (rule "replace_int_MIN" (formula "4") (term "0,0"))
                           (rule "replace_int_HALFRANGE" (formula "4") (term "0,0,1,0"))
                           (rule "replace_int_RANGE" (formula "4") (term "1,1,0"))
                           (rule "polySimp_homoEq" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "mul_literals" (formula "4") (term "0,1,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                           (rule "polySimp_addComm0" (formula "4") (term "0,0,0,0"))
                           (rule "mod_axiom" (formula "4") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0"))
                           (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                           (rule "add_literals" (formula "4") (term "1,0"))
                           (rule "times_zero_1" (formula "4") (term "0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "nnf_imp2or" (formula "13") (term "0"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,1,0,0"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,1,0,0,0,0"))
                           (rule "Class_invariant_axiom_for_BitSet" (formula "9") (inst "i_0=i_0") (inst "wordIndex=wordIndex") (inst "bitIndex=bitIndex") (inst "x=x_12") (inst "i=i") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "18")) (ifInst ""  (formula "16")))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "notLeft" (formula "10"))
                           (rule "andLeft" (formula "9"))
                           (rule "translateJavaCastLong" (formula "13") (term "0,1,1,1,0"))
                           (rule "translateJavaMulLong" (formula "12") (term "0,0,0,1,0,0"))
                           (rule "translateJavaSubInt" (formula "20") (term "0,2,0"))
                           (rule "translateJavaMulLong" (formula "13") (term "1,1,1,0"))
                           (rule "translateJavaCastLong" (formula "12") (term "0,0,0,0,1,0,0"))
                           (rule "expand_inInt" (formula "11") (term "1,0,0"))
                           (rule "expand_inInt" (formula "12") (term "1,0,0,0,0"))
                           (rule "expand_inInt" (formula "12") (term "1,0,0,0"))
                           (rule "expand_inLong" (formula "13") (term "1,0,0"))
                           (rule "expand_inInt" (formula "14") (term "1,0,0"))
                           (rule "replace_int_MIN" (formula "11") (term "0,1,1,0,0"))
                           (rule "replace_int_MAX" (formula "11") (term "1,0,1,0,0"))
                           (rule "replace_int_MIN" (formula "12") (term "0,1,1,0,0,0,0"))
                           (rule "replace_int_MAX" (formula "12") (term "1,0,1,0,0,0,0"))
                           (rule "replace_int_MIN" (formula "12") (term "0,1,1,0,0,0"))
                           (rule "replace_int_MAX" (formula "12") (term "1,0,1,0,0,0"))
                           (rule "replace_long_MIN" (formula "13") (term "0,1,1,0,0"))
                           (rule "replace_long_MAX" (formula "13") (term "1,0,1,0,0"))
                           (rule "replace_int_MIN" (formula "14") (term "0,1,1,0,0"))
                           (rule "replace_int_MAX" (formula "14") (term "1,0,1,0,0"))
                           (rule "translateJavaAddLong" (formula "12") (term "0,0,1,0,0"))
                           (rule "bitAtDef" (formula "12") (term "0,1,1,0,0"))
                           (rule "ifEqualsInteger" (formula "12") (term "1,1,0,0"))
                           (rule "equal_literals" (formula "12") (term "1,1,1,1,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "9"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "0,1,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,1,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,1,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_strengthen1" (formula "9") (ifseqformula "22"))
                           (rule "add_zero_right" (formula "9") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "22") (ifseqformula "9"))
                           (rule "times_zero_1" (formula "22") (term "1,0,0"))
                           (rule "add_zero_right" (formula "22") (term "0,0"))
                           (rule "leq_literals" (formula "22") (term "0"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "false_right" (formula "22"))
                           (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "10"))
                           (rule "mul_literals" (formula "9") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                           (rule "mul_literals" (formula "9") (term "1"))
                           (rule "expand_subJint" (formula "20") (term "0,2,0"))
                           (rule "polySimp_elimSub" (formula "20") (term "0,0,2,0"))
                           (rule "mul_literals" (formula "20") (term "1,0,0,2,0"))
                           (rule "polySimp_addComm0" (formula "20") (term "0,0,2,0"))
                           (rule "expand_moduloLong" (formula "12") (term "0,0,0,0,1,0,0"))
                           (rule "replace_long_RANGE" (formula "12") (term "1,1,0,0,0,0,1,0,0"))
                           (rule "replace_long_HALFRANGE" (formula "12") (term "0,0,1,0,0,0,0,1,0,0"))
                           (rule "replace_long_MIN" (formula "12") (term "0,0,0,0,0,1,0,0"))
                           (rule "mod_axiom" (formula "12") (term "1,0,0,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,1,0,0"))
                           (rule "expand_moduloLong" (formula "13") (term "0,1,1,1,1,0"))
                           (rule "replace_long_MIN" (formula "13") (term "0,0,1,1,1,1,0"))
                           (rule "replace_long_RANGE" (formula "13") (term "1,1,0,1,1,1,1,0"))
                           (rule "replace_long_HALFRANGE" (formula "13") (term "0,0,1,0,1,1,1,1,0"))
                           (rule "mod_axiom" (formula "13") (term "1,0,1,1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,1,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,1,1,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,1,1,1,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,1,1,1,1,0"))
                           (rule "add_zero_left" (formula "13") (term "0,0,1,1,1,1,0"))
                           (rule "nnf_imp2or" (formula "11") (term "0"))
                           (rule "nnf_imp2or" (formula "14") (term "0"))
                           (rule "expand_moduloInteger" (formula "20") (term "0,2,0"))
                           (rule "replace_int_RANGE" (formula "20") (term "1,1,0,2,0"))
                           (rule "replace_int_HALFRANGE" (formula "20") (term "0,0,1,0,2,0"))
                           (rule "replace_int_MIN" (formula "20") (term "0,0,2,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,1,0,2,0"))
                           (rule "add_literals" (formula "20") (term "0,0,1,0,2,0"))
                           (rule "mod_axiom" (formula "20") (term "1,0,2,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,2,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,2,0"))
                           (rule "polySimp_addAssoc" (formula "20") (term "0,0,2,0"))
                           (rule "add_literals" (formula "20") (term "0,0,0,2,0"))
                           (rule "expand_mulJlong" (formula "12") (term "0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "0,0,0,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "0,0,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0,1,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "0,0,0,0,0,1,0,0"))
                           (rule "expand_mulJlong" (formula "13") (term "1,1,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "0,1,1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "0,1,1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,1,1,1,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,1,1,1,0"))
                           (rule "expand_addJlong" (formula "12") (term "0,0,1,0,0"))
                           (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1,0,0"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0"))
                           (rule "nnf_notAnd" (formula "14") (term "0,0"))
                           (rule "expand_moduloLong" (formula "13") (term "1,1,1,1,0"))
                           (rule "replace_long_RANGE" (formula "13") (term "1,1,1,1,1,1,0"))
                           (rule "replace_long_HALFRANGE" (formula "13") (term "0,0,1,1,1,1,1,0"))
                           (rule "replace_long_MIN" (formula "13") (term "0,1,1,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,1,1,1,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "1,1,1,0"))
                           (rule "add_literals" (formula "13") (term "0,1,1,1,0"))
                           (rule "polyMod_pullOut" (formula "13") (term "1,1,1,1,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            int::select(heap,
                        self,
                        BitSet::$wordsInUse)),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,1,1,1,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,1,1,1,1,0"))
                           (rule "add_literals" (formula "13") (term "1,1,0,1,1,1,1,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0,1,1,1,1,0"))
                           (rule "add_zero_right" (formula "13") (term "0,1,1,1,1,0"))
                           (rule "mod_axiom" (formula "13") (term "1,1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "1,1,1,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,1,1,1,0"))
                           (rule "add_literals" (formula "13") (term "0,0,1,1,1,0"))
                           (rule "expand_moduloLong" (formula "12") (term "1,0,0,0,1,0,0"))
                           (rule "replace_long_RANGE" (formula "12") (term "1,1,1,0,0,0,1,0,0"))
                           (rule "replace_long_HALFRANGE" (formula "12") (term "0,0,1,1,0,0,0,1,0,0"))
                           (rule "replace_long_MIN" (formula "12") (term "0,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
                           (rule "polySimp_addComm0" (formula "12") (term "0,0,0,0,1,0,0"))
                           (rule "polyMod_pullOut" (formula "12") (term "1,0,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,1,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "12") (term "1,1,0,1,0,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0,1,0,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,1,0,0,0,1,0,0"))
                           (rule "mod_axiom" (formula "12") (term "1,0,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,1,0,0"))
                           (rule "polySimp_addComm1" (formula "12") (term "0,0,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,1,0,0"))
                           (rule "nnf_imp2or" (formula "13") (term "0"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0"))
                           (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "11") (term "1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "11") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "11") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,1,1,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,1,1,0,0"))
                           (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0"))
                           (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0"))
                           (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0"))
                           (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                           (rule "nnf_notAnd" (formula "14") (term "1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "14") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "14") (term "1,0,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "14") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "14") (term "1,0,0,1,1,0,0"))
                           (rule "add_literals" (formula "14") (term "0,0,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
                           (rule "expand_moduloLong" (formula "12") (term "0,0,1,0,0"))
                           (rule "replace_long_RANGE" (formula "12") (term "1,1,0,0,1,0,0"))
                           (rule "replace_long_HALFRANGE" (formula "12") (term "0,0,1,0,0,1,0,0"))
                           (rule "replace_long_MIN" (formula "12") (term "0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0,0"))
                           (rule "polyMod_pullOut" (formula "12") (term "1,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            mul(wordIndex, Z(4(6(#))))),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(1(#))))"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,1,0,0,1,0,0"))
                           (rule "add_literals" (formula "12") (term "1,1,0,1,0,0,1,0,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0,1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,1,0,0,1,0,0"))
                           (rule "mod_axiom" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,0,0,1,0,0"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0"))
                           (rule "nnf_imp2or" (formula "12") (term "0,0"))
                           (rule "nnf_notAnd" (formula "13") (term "1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "13") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,1,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "13") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,1,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,1,1,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "18") (term "0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "1,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "0,1,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,1,0,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,0,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "1,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "1,1,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,1,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,1,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "0,1,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,1,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,0,0,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0,0,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "11") (term "0,0"))
                           (rule "div_axiom" (formula "21") (term "0") (inst "quotient=quotient_0"))
                           (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                           (rule "qeq_literals" (formula "1") (term "0,1,1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "equal_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                           (rule "add_literals" (formula "3") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "3") (term "1"))
                           (rule "add_literals" (formula "3") (term "0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "6"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "6") (term "0"))
                           (rule "polySimp_addComm0" (formula "6") (term "0,0"))
                           (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "4"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0"))
                           (rule "applyEq" (formula "22") (term "0,1,0,2,0,0,0,1,1") (ifseqformula "1"))
                           (rule "polySimp_addComm1" (formula "22") (term "0,2,0,0,0,1,1"))
                           (rule "applyEq" (formula "21") (term "0,1,0,2,0,0,0,1,0") (ifseqformula "1"))
                           (rule "polySimp_addComm1" (formula "21") (term "0,2,0,0,0,1,0"))
                           (rule "applyEq" (formula "24") (term "0") (ifseqformula "1"))
                           (rule "applyEq" (formula "23") (term "0,1,0,2,0") (ifseqformula "1"))
                           (rule "polySimp_addComm1" (formula "23") (term "0,2,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                           (rule "polySimp_mulComm0" (formula "6") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "mul_literals" (formula "4") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "4"))
                           (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                           (rule "add_literals" (formula "2") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0,0"))
                           (rule "add_zero_right" (formula "2") (term "0,0"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "2"))
                           (rule "mul_literals" (formula "11") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0"))
                           (rule "add_literals" (formula "11") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                           (rule "mul_literals" (formula "11") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "leq_literals" (formula "11") (term "0,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
                           (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                           (rule "add_literals" (formula "11") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "11") (term "1,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0"))
                           (rule "leq_literals" (formula "11") (term "0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "inEqSimp_strengthen1" (formula "11") (ifseqformula "24"))
                           (rule "add_zero_right" (formula "11") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "24") (ifseqformula "11"))
                           (rule "times_zero_1" (formula "24") (term "1,0,0"))
                           (rule "add_zero_right" (formula "24") (term "0,0"))
                           (rule "leq_literals" (formula "24") (term "0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "false_right" (formula "24"))
                           (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "5"))
                           (rule "mul_literals" (formula "12") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1"))
                           (rule "polySimp_rightDist" (formula "12") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                           (rule "mul_literals" (formula "12") (term "0,1"))
                           (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "5"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                           (rule "add_literals" (formula "3") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1"))
                           (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "14"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "div_axiom" (formula "24") (term "0,0,0,1") (inst "quotient=quotient_1"))
                           (rule "mul_literals" (formula "24") (term "1,1,1,1,1"))
                           (rule "qeq_literals" (formula "24") (term "0,1,1"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "equal_literals" (formula "24") (term "0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "polySimp_addAssoc" (formula "26") (term "0,1"))
                           (rule "add_literals" (formula "26") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "26") (term "1"))
                           (rule "add_literals" (formula "26") (term "0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "25"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "25") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "26"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "26") (term "0"))
                           (rule "applyEq" (formula "27") (term "0,1,1,1,0,0,1,1") (ifseqformula "24"))
                           (rule "polySimp_addComm1" (formula "27") (term "1,1,0,0,1,1"))
                           (rule "applyEq" (formula "27") (term "0,0,0,1") (ifseqformula "24"))
                           (rule "inEqSimp_homoInEq0" (formula "27") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,1"))
                           (rule "polySimp_addComm1" (formula "27") (term "0,0,1"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "25"))
                           (rule "polySimp_mulLiterals" (formula "25") (term "0"))
                           (rule "polySimp_elimOne" (formula "25") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "26"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "0"))
                           (rule "polySimp_elimOne" (formula "26") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "27") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "0,0,1"))
                           (rule "polySimp_elimOne" (formula "27") (term "0,0,1"))
                           (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "25"))
                           (rule "times_zero_1" (formula "21") (term "0,0"))
                           (rule "add_zero_left" (formula "21") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "21"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "21") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,0,0,1,0"))
                           (rule "neg_literal" (formula "21") (term "0,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "21") (term "0,0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "21") (term "0,0,0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0"))
                           (rule "add_literals" (formula "21") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "21") (term "1,0,0"))
                           (rule "add_zero_right" (formula "21") (term "0,0"))
                           (rule "qeq_literals" (formula "21") (term "0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "23"))
                           (rule "polySimp_rightDist" (formula "27") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0"))
                           (rule "mul_literals" (formula "27") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "27") (term "0"))
                           (rule "add_literals" (formula "27") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "27"))
                           (rule "mul_literals" (formula "27") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "27") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "27") (term "0,0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
                           (rule "polySimp_addLiterals" (formula "27") (term "0,0,0,0"))
                           (rule "add_literals" (formula "27") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "27") (term "0,0"))
                           (rule "add_literals" (formula "27") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "27") (term "1,0,0"))
                           (rule "add_zero_right" (formula "27") (term "0,0"))
                           (rule "leq_literals" (formula "27") (term "0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_antiSymm" (formula "27") (ifseqformula "21"))
                           (rule "applyEq" (formula "29") (term "0,1,1") (ifseqformula "27"))
                           (rule "mul_literals" (formula "29") (term "1,1"))
                           (rule "add_literals" (formula "29") (term "1"))
                           (rule "applyEq" (formula "30") (term "0,1,1,0,1") (ifseqformula "27"))
                           (rule "mul_literals" (formula "30") (term "1,1,0,1"))
                           (rule "add_literals" (formula "30") (term "1,0,1"))
                           (rule "applyEq" (formula "28") (term "0") (ifseqformula "27"))
                           (rule "qeq_literals" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "applyEq" (formula "26") (term "0,1,1") (ifseqformula "27"))
                           (rule "mul_literals" (formula "26") (term "1,1"))
                           (rule "add_literals" (formula "26") (term "1"))
                           (rule "applyEq" (formula "21") (term "0") (ifseqformula "27"))
                           (rule "leq_literals" (formula "21"))
                           (rule "true_left" (formula "21"))
                           (rule "applyEq" (formula "24") (term "1") (ifseqformula "26"))
                           (rule "applyEqRigid" (formula "28") (term "0,1,0,1,1,0,0,1,1") (ifseqformula "26"))
                           (rule "mul_literals" (formula "28") (term "1,0,1,1,0,0,1,1"))
                           (rule "add_literals" (formula "28") (term "0,1,1,0,0,1,1"))
                           (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "21"))
                           (rule "leq_literals" (formula "27") (term "0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "inEqSimp_subsumption0" (formula "25") (ifseqformula "22"))
                           (rule "leq_literals" (formula "25") (term "0"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "div_axiom" (formula "30") (term "0,1,2,0") (inst "quotient=quotient_2"))
                           (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                           (rule "qeq_literals" (formula "1") (term "0,1,1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "equal_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                           (rule "add_literals" (formula "3") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "3") (term "1"))
                           (rule "add_literals" (formula "3") (term "0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "applyEq" (formula "33") (term "0,1,2,0") (ifseqformula "1"))
                           (rule "polySimp_addComm1" (formula "33") (term "2,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "div_axiom" (formula "10") (term "0") (inst "quotient=quotient_3"))
                           (rule "mul_literals" (formula "10") (term "1,1,1,1,1"))
                           (rule "equal_literals" (formula "10") (term "0"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "qeq_literals" (formula "10") (term "0,1"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,1"))
                           (rule "add_literals" (formula "12") (term "0,0,1"))
                           (rule "polySimp_addComm1" (formula "12") (term "1"))
                           (rule "add_literals" (formula "12") (term "0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "11"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "11") (term "0"))
                           (rule "inEqSimp_homoInEq1" (formula "12"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "12") (term "0"))
                           (rule "applyEq" (formula "10") (term "0") (ifseqformula "13"))
                           (rule "eqSymm" (formula "10"))
                           (rule "applyEqRigid" (formula "12") (term "0,1,0,0") (ifseqformula "10"))
                           (rule "mul_literals" (formula "12") (term "1,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0"))
                           (rule "applyEq" (formula "11") (term "0,1,0,0") (ifseqformula "10"))
                           (rule "mul_literals" (formula "11") (term "1,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                           (rule "polySimp_elimOne" (formula "12") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                           (rule "polySimp_elimOne" (formula "11") (term "0"))
                           (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "27"))
                           (rule "leq_literals" (formula "12") (term "0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "true_left" (formula "12"))
                           (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "27"))
                           (rule "leq_literals" (formula "11") (term "0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "true_left" (formula "11"))
                           (rule "div_axiom" (formula "34") (term "0,1,1") (inst "quotient=quotient_4"))
                           (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                           (rule "qeq_literals" (formula "1") (term "0,1,1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "equal_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "3") (term "1"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0,1"))
                           (rule "add_literals" (formula "3") (term "0,0,0,1"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,1"))
                           (rule "add_literals" (formula "3") (term "0,0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                           (rule "applyEq" (formula "37") (term "0,1,1") (ifseqformula "1"))
                           (rule "polySimp_addComm1" (formula "37") (term "1"))
                           (rule "polySimp_addComm0" (formula "37") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
                           (rule "mul_literals" (formula "2") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1"))
                           (rule "mul_literals" (formula "3") (term "0,0,1"))
                           (rule "inEqSimp_exactShadow2" (formula "21") (ifseqformula "3"))
                           (rule "mul_literals" (formula "21") (term "1,0,0,1"))
                           (rule "greater_literals" (formula "21") (term "0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "mul_literals" (formula "21") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0"))
                           (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                           (rule "add_literals" (formula "21") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1"))
                           (rule "polySimp_rightDist" (formula "21") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                           (rule "mul_literals" (formula "21") (term "0,1"))
                           (rule "inEqSimp_exactShadow2" (formula "10") (ifseqformula "3"))
                           (rule "greater_literals" (formula "10") (term "0"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0"))
                           (rule "polySimp_addComm1" (formula "10") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1"))
                           (rule "polySimp_rightDist" (formula "10") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "10") (term "0,1"))
                           (rule "mul_literals" (formula "10") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1"))
                           (rule "inEqSimp_exactShadow1" (formula "2") (ifseqformula "24"))
                           (rule "greater_literals" (formula "2") (term "0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                           (rule "mul_literals" (formula "2") (term "0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
                           (rule "inEqSimp_exactShadow1" (formula "3") (ifseqformula "9"))
                           (rule "greater_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                           (rule "mul_literals" (formula "3") (term "0,1,0"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "3") (term "0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_exactShadow1" (formula "4") (ifseqformula "15"))
                           (rule "greater_literals" (formula "4") (term "0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "0,1,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1"))
                           (rule "polySimp_rightDist" (formula "4") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,0,1"))
                           (rule "mul_literals" (formula "4") (term "0,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,1"))
                           (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "34"))
                           (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0"))
                           (rule "polySimp_rightDist" (formula "13") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                           (rule "elimGcdLeq_antec" (formula "13") (inst "elimGcdRightDiv=add(Z(0(#)), quotient_4)") (inst "elimGcdLeftDiv=mul(quotient_0, Z(4(6(#))))") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "add_zero_left" (formula "13") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,1,0"))
                           (rule "add_zero_left" (formula "13") (term "1,1,0,0,0,0,1,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,1,0"))
                           (rule "neg_literal" (formula "13") (term "0,0,0,0,0,1,0"))
                           (rule "leq_literals" (formula "13") (term "0,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
                           (rule "add_literals" (formula "13") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
                           (rule "add_literals" (formula "13") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0"))
                           (rule "qeq_literals" (formula "13") (term "0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "3"))
                           (rule "times_zero_1" (formula "34") (term "0,0"))
                           (rule "add_zero_left" (formula "34") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1"))
                           (rule "polySimp_rightDist" (formula "34") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                           (rule "mul_literals" (formula "34") (term "0,1"))
                           (rule "elimGcdGeq_antec" (formula "34") (inst "elimGcdRightDiv=add(Z(neglit(2(3(#)))), quotient_4)") (inst "elimGcdLeftDiv=mul(quotient_0, Z(4(6(#))))") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0,1,0"))
                           (rule "leq_literals" (formula "34") (term "0,0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "mul_literals" (formula "34") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "34") (term "0,0"))
                           (rule "add_literals" (formula "34") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "34") (term "1,0,0"))
                           (rule "add_zero_right" (formula "34") (term "0,0"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "34") (term "0,0,0"))
                           (rule "add_literals" (formula "34") (term "0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "34") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "34") (term "0,0,0"))
                           (rule "add_literals" (formula "34") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "34") (term "0,0"))
                           (rule "add_literals" (formula "34") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "34") (term "1,0,0"))
                           (rule "add_zero_right" (formula "34") (term "0,0"))
                           (rule "leq_literals" (formula "34") (term "0"))
                            (builtin "One Step Simplification" (formula "34"))
                           (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "3"))
                           (rule "polySimp_rightDist" (formula "26") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0"))
                           (rule "mul_literals" (formula "26") (term "0,0,0"))
                           (rule "polySimp_addAssoc" (formula "26") (term "0"))
                           (rule "polySimp_addAssoc" (formula "26") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "26") (term "0,0,0"))
                           (rule "add_literals" (formula "26") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,0"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0"))
                           (rule "add_literals" (formula "26") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                           (rule "mul_literals" (formula "26") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "26") (ifseqformula "24"))
                           (rule "mul_literals" (formula "26") (term "1,1,0"))
                           (rule "greater_literals" (formula "26") (term "0,0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "leq_literals" (formula "26") (term "0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "36"))
                           (rule "polySimp_rightDist" (formula "26") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0"))
                           (rule "mul_literals" (formula "26") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "26") (term "0"))
                           (rule "add_literals" (formula "26") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                           (rule "mul_literals" (formula "26") (term "1"))
                           (rule "elimGcdGeq_antec" (formula "26") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_4") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,0,1,0"))
                           (rule "leq_literals" (formula "26") (term "0,0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0"))
                           (rule "add_literals" (formula "26") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "26") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "26") (term "0,0"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0"))
                           (rule "add_zero_right" (formula "26") (term "0,0"))
                           (rule "leq_literals" (formula "26") (term "0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_exactShadow2" (formula "24") (ifseqformula "13"))
                           (rule "mul_literals" (formula "24") (term "1,0,0,1"))
                           (rule "greater_literals" (formula "24") (term "0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "mul_literals" (formula "24") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                           (rule "mul_literals" (formula "24") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "24"))
                           (rule "leq_literals" (formula "27") (term "0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "commute_or_2" (formula "33") (term "0,0"))
                           (rule "commute_or_2" (formula "38") (term "0,0"))
                           (rule "shift_paren_or" (formula "32") (term "0,0"))
                           (rule "arrayLengthIsAnInt" (formula "29") (term "1"))
                           (rule "expand_inInt" (formula "29"))
                           (rule "replace_int_MAX" (formula "29") (term "1,0"))
                           (rule "replace_int_MIN" (formula "29") (term "0,1"))
                           (rule "andLeft" (formula "29"))
                           (rule "inEqSimp_commuteLeq" (formula "30"))
                           (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "16"))
                           (rule "leq_literals" (formula "30") (term "0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "29"))
                           (rule "polySimp_rightDist" (formula "26") (term "0,0"))
                           (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0"))
                           (rule "mul_literals" (formula "26") (term "0,0,0"))
                           (rule "polySimp_addComm1" (formula "26") (term "0"))
                           (rule "add_literals" (formula "26") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "26"))
                           (rule "mul_literals" (formula "26") (term "1"))
                           (rule "inEqSimp_subsumption6" (formula "26") (ifseqformula "25"))
                           (rule "greater_literals" (formula "26") (term "0,0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "mul_literals" (formula "26") (term "1,0"))
                           (rule "leq_literals" (formula "26") (term "0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "inEqSimp_exactShadow1" (formula "2") (ifseqformula "29"))
                           (rule "mul_literals" (formula "2") (term "1,0,1"))
                           (rule "greater_literals" (formula "2") (term "0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0,0"))
                           (rule "mul_literals" (formula "2") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                           (rule "add_literals" (formula "2") (term "0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_exactShadow1" (formula "5") (ifseqformula "30"))
                           (rule "mul_literals" (formula "5") (term "1,0,1"))
                           (rule "greater_literals" (formula "5") (term "0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0"))
                           (rule "polySimp_rightDist" (formula "5") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                           (rule "polySimp_rightDist" (formula "5") (term "0,0,0,0"))
                           (rule "mul_literals" (formula "5") (term "0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0,0"))
                           (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
                           (rule "add_literals" (formula "5") (term "0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                           (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                           (rule "polySimp_elimOne" (formula "5") (term "0"))
                           (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "5"))
                           (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
                           (rule "polySimp_rightDist" (formula "4") (term "0,1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,0"))
                           (rule "mul_literals" (formula "4") (term "0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                           (rule "add_literals" (formula "4") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0"))
                           (rule "add_zero_right" (formula "4") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
                           (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
                           (rule "add_literals" (formula "4") (term "0,0,0,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
                           (rule "add_literals" (formula "4") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "4") (term "1,0,0"))
                           (rule "add_zero_right" (formula "4") (term "0,0"))
                           (rule "qeq_literals" (formula "4") (term "0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "30"))
                           (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                           (rule "mul_literals" (formula "13") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0"))
                           (rule "add_literals" (formula "13") (term "0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "13"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                           (rule "inEqSimp_contradInEq5" (formula "13") (ifseqformula "27"))
                           (rule "mul_literals" (formula "13") (term "1,1,0"))
                           (rule "greater_literals" (formula "13") (term "0,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "qeq_literals" (formula "13") (term "0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "closeFalse" (formula "13"))
                        )
                     )
                     (branch "Assume -2147483648 + ( 64 - result_numberOfLeadingZeros + ( -135291469824 + (2147483647 + self.wordsInUse) % 4294967296 * 64) % 4294967296) % 4294967296 != moduloInt( 64 * (self.wordsInUse - 1) + (64 - result_numberOfLeadingZeros))"
                        (rule "notLeft" (formula "1"))
                        (rule "eqSymm" (formula "1"))
                        (rule "eqSymm" (formula "14"))
                        (rule "polySimp_elimSub" (formula "20") (term "0,0,1,1"))
                        (rule "polySimp_elimSub" (formula "1") (term "0"))
                        (rule "polySimp_elimSub" (formula "14") (term "0,0,1,1"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                        (rule "polySimp_elimSub" (formula "14") (term "1,0,0"))
                        (rule "polySimp_homoEq" (formula "1"))
                        (rule "polySimp_homoEq" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "14") (term "1,0,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0,0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "inEqSimp_geqRight" (formula "18"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_ltRight" (formula "19"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "16") (term "0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                        (rule "add_literals" (formula "2") (term "0,0,0"))
                        (rule "inEqSimp_gtToGeq" (formula "14") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0,0,0,0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                        (rule "mod_axiom" (formula "15") (term "1,0,2,0,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,2,0,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,2,0,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,2,0,0,0,1,1"))
                        (rule "add_literals" (formula "15") (term "0,0,0,2,0,0,0,1,1"))
                        (rule "mod_axiom" (formula "14") (term "1,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,1,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,1,1,0,0"))
                        (rule "mod_axiom" (formula "20") (term "1,2,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,2,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "2,0"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,2,0"))
                        (rule "add_literals" (formula "20") (term "0,0,2,0"))
                        (rule "mod_axiom" (formula "20") (term "0,1,0,1,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0,1,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,0,1,1"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,1,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,0,1,1"))
                        (rule "polySimp_rightDist" (formula "20") (term "0,1,0,1,0,1,1"))
                        (rule "mul_literals" (formula "20") (term "0,0,1,0,1,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,1,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,1,1"))
                        (rule "add_literals" (formula "20") (term "0,0,0,1,0,1,1"))
                        (rule "mod_axiom" (formula "15") (term "0,1,0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,1,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "15") (term "0,1,0,1,0,0,1"))
                        (rule "mul_literals" (formula "15") (term "0,0,1,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1"))
                        (rule "mod_axiom" (formula "15") (term "0,1,0,1,1,1,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,1,1,1,0,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,1,1,1,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,1,1,1,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,1,1,1,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "15") (term "0,1,0,1,1,1,0,0,1,1"))
                        (rule "mul_literals" (formula "15") (term "0,0,1,0,1,1,1,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,1,1,1,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,1,1,0,0,1,1"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,1,1,0,0,1,1"))
                        (rule "mod_axiom" (formula "14") (term "1,0,2,0,0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,2,0,0,0,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,2,0,0,0,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,2,0,0,0,1,1,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,2,0,0,0,1,1,0"))
                        (rule "mod_axiom" (formula "16") (term "1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0,0,0,1,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0"))
                        (rule "mod_axiom" (formula "3") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "3") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "0,0"))
                        (rule "add_zero_left" (formula "3") (term "0"))
                        (rule "mod_axiom" (formula "1") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                        (rule "add_literals" (formula "1") (term "0,0,0"))
                        (rule "mod_axiom" (formula "2") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                        (rule "add_literals" (formula "2") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "2") (term "0,0,0"))
                        (rule "mod_axiom" (formula "20") (term "1,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,1,1"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,1,1"))
                        (rule "polySimp_addComm1" (formula "20") (term "0,0,0,0,1,1"))
                        (rule "add_literals" (formula "20") (term "0,0,0,0,0,1,1"))
                        (rule "mod_axiom" (formula "16") (term "0,1,0,0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0,1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "0,1,0,0,1,0,0,1,0"))
                        (rule "mul_literals" (formula "16") (term "0,0,1,0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0,0,1,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,1,0,0,1,0"))
                        (rule "mod_axiom" (formula "16") (term "0,1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "0,1,0,1,0"))
                        (rule "mul_literals" (formula "16") (term "0,0,1,0,1,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0,0,0,0,1,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,0,0,1,0"))
                        (rule "polySimp_invertEq" (formula "3"))
                        (rule "times_zero_2" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_sepPosMonomial" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1"))
                        (rule "polySimp_rightDist" (formula "16") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                        (rule "mul_literals" (formula "16") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "14") (term "0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1"))
                        (rule "mul_literals" (formula "15") (term "1,0,1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "13"))
                        (rule "leq_literals" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "11"))
                        (rule "leq_literals" (formula "10") (term "0"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "elimGcdEq" (formula "3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))") (inst "elimGcdLeftDiv=div(add(Z(2(1(7(3(8(4(7(4(1(2(#))))))))))),
        mul(result_numberOfLeadingZeros,
            Z(neglit(1(#))))),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcdRightDiv=Z(0(#))"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0,1"))
                        (rule "times_zero_1" (formula "3") (term "1,0,1,0"))
                        (rule "add_zero_left" (formula "3") (term "0,0,0"))
                        (rule "add_literals" (formula "3") (term "1,0,0"))
                        (rule "add_zero_left" (formula "3") (term "0,0,1"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "times_zero_1" (formula "3") (term "0,0,0"))
                        (rule "add_zero_left" (formula "3") (term "0,1,0"))
                        (rule "leq_literals" (formula "3") (term "0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEq" (formula "12") (term "0,1,1,1,0,0") (ifseqformula "3"))
                        (rule "times_zero_2" (formula "12") (term "1,1,1,0,0"))
                        (rule "add_zero_right" (formula "12") (term "1,1,0,0"))
                        (rule "polyDiv_pullOut" (formula "18") (term "0,1,2,0") (inst "polyDivCoeff=Z(1(#))"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,2,0,1,2,0"))
                        (rule "equal_literals" (formula "18") (term "0,0,1,2,0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "mul_literals" (formula "18") (term "1,0,0,0,1,2,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,2,0"))
                        (rule "polySimp_addComm0" (formula "18") (term "1,1,2,0"))
                        (rule "polySimp_addComm1" (formula "18") (term "0,1,1,1,2,0"))
                        (rule "add_literals" (formula "18") (term "0,0,1,1,1,2,0"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,2,0"))
                        (rule "mul_literals" (formula "18") (term "0,1,2,0"))
                        (rule "polySimp_addAssoc" (formula "18") (term "2,0"))
                        (rule "polySimp_addComm1" (formula "18") (term "0,2,0"))
                        (rule "add_literals" (formula "18") (term "0,0,2,0"))
                        (rule "polyMod_pullOut" (formula "13") (term "0,0,1") (inst "polyDivCoeff=div(add(Z(9(4(6(3(8(4(7(4(1(2(#))))))))))),
        result_numberOfLeadingZeros),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,1"))
                        (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0,0,1"))
                        (rule "add_literals" (formula "13") (term "1,1,0,0,0,1"))
                        (rule "times_zero_1" (formula "13") (term "1,0,0,0,1"))
                        (rule "add_zero_right" (formula "13") (term "0,0,0,1"))
                        (rule "mod_axiom" (formula "13") (term "0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,1"))
                        (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1"))
                        (rule "mul_literals" (formula "13") (term "0,0,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,1"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,1"))
                        (rule "polyMod_pullOut" (formula "14") (term "0") (inst "polyDivCoeff=mul(div(add(add(Z(4(8(5(3(8(4(7(4(1(2(#))))))))))),
                mul(int::select(heap,
                                self,
                                BitSet::$wordsInUse),
                    Z(4(6(#))))),
            mul(div(add(Z(7(4(6(3(8(4(7(4(1(2(#))))))))))),
                        int::select(heap,
                                    self,
                                    BitSet::$wordsInUse)),
                    Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
                Z(neglit(4(4(9(6(0(9(7(7(8(4(7(2(#)))))))))))))))),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "polyMod_pullOut" (formula "13") (term "1,1,1,0,0,1,1") (inst "polyDivCoeff=div(add(Z(9(4(6(3(8(4(7(4(1(2(#))))))))))),
        result_numberOfLeadingZeros),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,1,1,0,0,1,1"))
                        (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,1,1,1,0,0,1,1"))
                        (rule "add_literals" (formula "13") (term "1,1,0,1,1,1,0,0,1,1"))
                        (rule "times_zero_1" (formula "13") (term "1,0,1,1,1,0,0,1,1"))
                        (rule "add_zero_right" (formula "13") (term "0,1,1,1,0,0,1,1"))
                        (rule "mod_axiom" (formula "13") (term "1,1,1,0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,1,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "13") (term "1,1,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,1,1,0,0,1,1"))
                        (rule "add_literals" (formula "13") (term "0,0,1,1,0,0,1,1"))
                        (rule "polyDiv_pullOut" (formula "3") (term "0") (inst "polyDivCoeff=Z(1(#))"))
                        (rule "equal_literals" (formula "3") (term "0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "3") (term "1,0,0,0"))
                        (rule "polySimp_addComm0" (formula "3") (term "0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,1,0"))
                        (rule "add_literals" (formula "3") (term "0,0,1,0"))
                        (rule "polySimp_sepPosMonomial" (formula "3"))
                        (rule "mul_literals" (formula "3") (term "1"))
                        (rule "polyDiv_pullOut" (formula "18") (term "0,1,0,1,1") (inst "polyDivCoeff=mul(div(add(Z(7(4(6(3(8(4(7(4(1(2(#))))))))))),
            int::select(heap,
                        self,
                        BitSet::$wordsInUse)),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(4(6(#)))))"))
                        (rule "equal_literals" (formula "18") (term "0,0,1,0,1,1"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0,1,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0,1,0,1,1"))
                        (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0,0,1,0,1,1"))
                        (rule "add_literals" (formula "18") (term "1,1,0,0,0,1,0,1,1"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0,0,1,0,1,1"))
                        (rule "add_zero_right" (formula "18") (term "0,0,0,1,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,1,1"))
                        (rule "polySimp_addComm0" (formula "18") (term "1,1,0,1,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,1,1"))
                        (rule "polySimp_mulAssoc" (formula "18") (term "0,1,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1,1"))
                        (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0,1,1"))
                        (rule "add_literals" (formula "18") (term "1,1,0,0,1,1"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0,1,1"))
                        (rule "add_zero_right" (formula "18") (term "0,0,1,1"))
                        (rule "polyDiv_pullOut" (formula "13") (term "0,1,1,1,0,0,1,1") (inst "polyDivCoeff=Z(1(#))"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,2,0,1,1,1,0,0,1,1"))
                        (rule "equal_literals" (formula "13") (term "0,0,1,1,1,0,0,1,1"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0,1,1,1,0,0,1,1"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,1,0,0,1,1"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,0,1,1,1,1,0,0,1,1"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1,1,1,1,0,0,1,1"))
                        (rule "polySimp_addComm0" (formula "13") (term "1,1,1,1,0,0,1,1"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,1,0,0,1,1"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,1,0,0,1,1"))
                        (rule "polySimp_addAssoc" (formula "13") (term "1,1,0,0,1,1"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,1,1,0,0,1,1"))
                        (rule "add_literals" (formula "13") (term "0,0,1,1,0,0,1,1"))
                        (rule "polyMod_pullOut" (formula "14") (term "0") (inst "polyDivCoeff=mul(div(add(Z(7(4(6(3(8(4(7(4(1(2(#))))))))))),
            int::select(heap,
                        self,
                        BitSet::$wordsInUse)),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(4(6(#)))))"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "mod_axiom" (formula "14") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                        (rule "polySimp_homoEq" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,0,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,0,0,1,0"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_sepPosMonomial" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1"))
                        (rule "polySimp_rightDist" (formula "14") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,0,1"))
                        (rule "polyDiv_pullOut" (formula "13") (term "0,0,0,1") (inst "polyDivCoeff=Z(1(#))"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,2,0,0,0,1"))
                        (rule "equal_literals" (formula "13") (term "0,0,0,0,1"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,1"))
                        (rule "polySimp_mulComm0" (formula "13") (term "0,0,1"))
                        (rule "polySimp_addComm0" (formula "13") (term "1,0,0,1"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,1,1,0,0,1"))
                        (rule "add_literals" (formula "13") (term "0,0,1,1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "13") (term "0,0,1"))
                        (rule "mul_literals" (formula "13") (term "0,0,0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "13") (term "0,1"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,1"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "13") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1"))
                        (rule "polyMod_pullOut" (formula "18") (term "1,1") (inst "polyDivCoeff=mul(div(add(Z(4(8(5(3(8(4(7(4(1(2(#))))))))))),
            mul(int::select(heap,
                            self,
                            BitSet::$wordsInUse),
                Z(4(6(#))))),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,1"))
                        (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,1,1"))
                        (rule "add_literals" (formula "18") (term "1,1,0,1,1"))
                        (rule "times_zero_1" (formula "18") (term "1,0,1,1"))
                        (rule "add_zero_right" (formula "18") (term "0,1,1"))
                        (rule "mod_axiom" (formula "18") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,1"))
                        (rule "polySimp_addAssoc" (formula "18") (term "0,0,1"))
                        (rule "add_literals" (formula "18") (term "0,0,0,1"))
                        (rule "add_zero_left" (formula "18") (term "0,0,1"))
                        (rule "inEqSimp_exactShadow0" (formula "2") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "greater_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "2") (term "0"))
                        (rule "add_literals" (formula "2") (term "1,1,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0"))
                        (rule "polySimp_addLiterals" (formula "2") (term "0"))
                        (rule "polySimp_addComm0" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "2") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))") (inst "elimGcdLeftDiv=length(long[]::select(heap, self, BitSet::$words))") (inst "elimGcdRightDiv=Z(1(#))"))
                        (rule "leq_literals" (formula "2") (term "0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                        (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
                        (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                        (rule "add_literals" (formula "2") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0"))
                        (rule "add_zero_right" (formula "2") (term "0,0"))
                        (rule "leq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "inEqSimp_notGeq" (formula "13") (term "0,1,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0,0,0,1,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,1,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,1,0"))
                        (rule "expand_moduloInteger" (formula "15") (term "0"))
                        (rule "replace_int_RANGE" (formula "15") (term "1,1,0"))
                        (rule "replace_int_HALFRANGE" (formula "15") (term "0,0,1,0"))
                        (rule "replace_int_MIN" (formula "15") (term "0,0"))
                        (rule "polySimp_homoEq" (formula "15"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
                        (rule "polySimp_addComm0" (formula "15") (term "0,0,0,0"))
                        (rule "mod_axiom" (formula "15") (term "0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
                        (rule "polySimp_pullOutFactor1" (formula "15") (term "0"))
                        (rule "add_literals" (formula "15") (term "1,0"))
                        (rule "times_zero_1" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "closeTrue" (formula "15"))
                     )
                  )
                  (branch "Assume -2147483648 + (2147483712 + result_numberOfLeadingZeros * -1) % 4294967296 != 64 - result_numberOfLeadingZeros"
                     (rule "notLeft" (formula "1"))
                     (rule "eqSymm" (formula "13"))
                     (rule "polySimp_elimSub" (formula "13") (term "0"))
                     (rule "polySimp_homoEq" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0"))
                     (rule "inEqSimp_ltRight" (formula "18"))
                     (rule "times_zero_1" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "18"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "inEqSimp_gtToGeq" (formula "13") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                     (rule "mod_axiom" (formula "13") (term "1,1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,1,1,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,1,1,0,0"))
                     (rule "mod_axiom" (formula "14") (term "0,1,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0,1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "14") (term "0,1,0,1,0,0,1"))
                     (rule "mul_literals" (formula "14") (term "0,0,1,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "14") (term "0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1"))
                     (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1"))
                     (rule "mod_axiom" (formula "14") (term "0,1,0,1,1,1,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0,1,1,1,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,1,1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,0,1,1,1,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,1,1,1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "14") (term "0,1,0,1,1,1,0,0,1,1"))
                     (rule "mul_literals" (formula "14") (term "0,0,1,0,1,1,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "14") (term "0,1,1,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,1,1,0,0,1,1"))
                     (rule "add_literals" (formula "14") (term "0,0,0,1,1,1,0,0,1,1"))
                     (rule "mod_axiom" (formula "19") (term "0,1,0,1,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,0,1,0,1,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0,1,0,1,1"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0,1,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,1,0,1,1"))
                     (rule "polySimp_rightDist" (formula "19") (term "0,1,0,1,0,1,1"))
                     (rule "mul_literals" (formula "19") (term "0,0,1,0,1,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,1,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,1,1"))
                     (rule "add_literals" (formula "19") (term "0,0,0,1,0,1,1"))
                     (rule "mod_axiom" (formula "19") (term "1,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,1"))
                     (rule "add_literals" (formula "19") (term "0,0,0,0,1,1"))
                     (rule "mod_axiom" (formula "13") (term "1,0,2,0,0,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,2,0,0,0,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,2,0,0,0,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,2,0,0,0,1,1,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,2,0,0,0,1,1,0"))
                     (rule "mod_axiom" (formula "14") (term "1,0,2,0,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,2,0,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "14") (term "0,2,0,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "14") (term "0,0,2,0,0,0,1,1"))
                     (rule "add_literals" (formula "14") (term "0,0,0,2,0,0,0,1,1"))
                     (rule "mod_axiom" (formula "19") (term "1,2,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,1,2,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "2,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,2,0"))
                     (rule "add_literals" (formula "19") (term "0,0,2,0"))
                     (rule "mod_axiom" (formula "15") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0,0"))
                     (rule "add_zero_left" (formula "15") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1" (formula "15") (term "0,0"))
                     (rule "add_literals" (formula "15") (term "1,0,0"))
                     (rule "times_zero_1" (formula "15") (term "0,0"))
                     (rule "add_zero_left" (formula "15") (term "0"))
                     (rule "mod_axiom" (formula "2") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0"))
                     (rule "mod_axiom" (formula "1") (term "1,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0,0"))
                     (rule "mod_axiom" (formula "19") (term "1,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,1"))
                     (rule "polySimp_addComm1" (formula "19") (term "0,0,0,0,1,1"))
                     (rule "polySimp_addComm1" (formula "19") (term "0,0,0,0,0,1,1"))
                     (rule "add_literals" (formula "19") (term "0,0,0,0,0,0,1,1"))
                     (rule "polySimp_invertEq" (formula "15"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                     (rule "times_zero_2" (formula "15") (term "1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "13") (term "0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,1"))
                     (rule "mul_literals" (formula "14") (term "1,0,1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "12"))
                     (rule "leq_literals" (formula "9") (term "0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "10"))
                     (rule "leq_literals" (formula "9") (term "0"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "true_left" (formula "9"))
                     (rule "elimGcdEq" (formula "13") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))") (inst "elimGcdLeftDiv=div(add(Z(2(1(7(3(8(4(7(4(1(2(#))))))))))),
        mul(result_numberOfLeadingZeros,
            Z(neglit(1(#))))),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcdRightDiv=Z(0(#))"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "add_zero_left" (formula "13") (term "0,1,0"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,0"))
                     (rule "add_zero_left" (formula "13") (term "0,0,1"))
                     (rule "add_literals" (formula "13") (term "1,0,0"))
                     (rule "times_zero_1" (formula "13") (term "0,1,0"))
                     (rule "add_zero_left" (formula "13") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1"))
                     (rule "qeq_literals" (formula "13") (term "1,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "leq_literals" (formula "13") (term "0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "times_zero_1" (formula "13") (term "0,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "polyDiv_pullOut" (formula "11") (term "0,1,1,1,0,0") (inst "polyDivCoeff=Z(1(#))"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,2,0,1,1,1,0,0"))
                     (rule "equal_literals" (formula "11") (term "0,0,1,1,1,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,0,1,1,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,0,1,1,1,1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,1,1,1,1,0,0"))
                     (rule "polySimp_addComm0" (formula "11") (term "1,1,1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,1,1,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "1,1,0,0"))
                     (rule "polySimp_addComm1" (formula "11") (term "0,1,1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,1,1,0,0"))
                     (rule "polyDiv_pullOut" (formula "12") (term "0,1,0,0,0,1") (inst "polyDivCoeff=Z(1(#))"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,2,0,1,0,0,0,1"))
                     (rule "equal_literals" (formula "12") (term "0,0,1,0,0,0,1"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1"))
                     (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,1,1,1,0,0,0,1"))
                     (rule "add_literals" (formula "12") (term "0,0,1,1,1,0,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,0,0,0,1"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0,0,1"))
                     (rule "polyMod_pullOut" (formula "17") (term "1,1") (inst "polyDivCoeff=mul(div(add(add(Z(4(8(5(3(8(4(7(4(1(2(#))))))))))),
                mul(int::select(heap,
                                self,
                                BitSet::$wordsInUse),
                    Z(4(6(#))))),
            mul(div(add(Z(7(4(6(3(8(4(7(4(1(2(#))))))))))),
                        int::select(heap,
                                    self,
                                    BitSet::$wordsInUse)),
                    Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
                Z(neglit(4(4(9(6(0(9(7(7(8(4(7(2(#)))))))))))))))),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,1"))
                     (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,1,1"))
                     (rule "add_literals" (formula "17") (term "1,1,0,1,1"))
                     (rule "times_zero_1" (formula "17") (term "1,0,1,1"))
                     (rule "add_zero_right" (formula "17") (term "0,1,1"))
                     (rule "polyDiv_pullOut" (formula "17") (term "0,1,2,0") (inst "polyDivCoeff=Z(1(#))"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,2,0,1,2,0"))
                     (rule "equal_literals" (formula "17") (term "0,0,1,2,0"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,0,1,2,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,2,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,0,1,1,2,0"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,1,2,0"))
                     (rule "polySimp_addComm0" (formula "17") (term "1,1,2,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,2,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,2,0"))
                     (rule "polySimp_addAssoc" (formula "17") (term "2,0"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,2,0"))
                     (rule "add_literals" (formula "17") (term "0,0,2,0"))
                     (rule "polyDiv_pullOut" (formula "13") (term "0") (inst "polyDivCoeff=Z(1(#))"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,2,0"))
                     (rule "equal_literals" (formula "13") (term "0,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "mul_literals" (formula "13") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "0"))
                     (rule "polySimp_sepPosMonomial" (formula "13"))
                     (rule "mul_literals" (formula "13") (term "1"))
                     (rule "polyMod_pullOut" (formula "12") (term "0,0,1") (inst "polyDivCoeff=div(add(Z(neglit(7(4(6(3(8(4(7(4(1(2(#)))))))))))),
        result_numberOfLeadingZeros),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,1"))
                     (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0,0,1"))
                     (rule "add_literals" (formula "12") (term "1,1,0,0,0,1"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,0,1"))
                     (rule "add_zero_right" (formula "12") (term "0,0,0,1"))
                     (rule "mod_axiom" (formula "12") (term "0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,1"))
                     (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,1"))
                     (rule "polyMod_pullOut" (formula "12") (term "1,1,1,0,0,1,1") (inst "polyDivCoeff=div(add(Z(9(4(6(3(8(4(7(4(1(2(#))))))))))),
        result_numberOfLeadingZeros),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,1,1,0,0,1,1"))
                     (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,1,1,1,0,0,1,1"))
                     (rule "add_literals" (formula "12") (term "1,1,0,1,1,1,0,0,1,1"))
                     (rule "times_zero_1" (formula "12") (term "1,0,1,1,1,0,0,1,1"))
                     (rule "add_zero_right" (formula "12") (term "0,1,1,1,0,0,1,1"))
                     (rule "mod_axiom" (formula "12") (term "1,1,1,0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "1,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,0,0,1,1"))
                     (rule "add_literals" (formula "12") (term "0,0,1,1,0,0,1,1"))
                     (rule "polyDiv_pullOut" (formula "17") (term "0,1,0,0,0,1,1") (inst "polyDivCoeff=Z(1(#))"))
                     (rule "equal_literals" (formula "17") (term "0,0,1,0,0,0,1,1"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0,1,0,0,0,1,1"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,0,1,0,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,1"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,0,1,1,0,0,0,1,1"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,1,0,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "17") (term "1,1,0,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,1"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,1"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,0,0,0,1,1"))
                     (rule "add_literals" (formula "17") (term "0,0,0,0,0,1,1"))
                     (rule "polyMod_pullOut" (formula "17") (term "1,1") (inst "polyDivCoeff=mul(div(add(Z(7(4(6(3(8(4(7(4(1(2(#))))))))))),
            int::select(heap,
                        self,
                        BitSet::$wordsInUse)),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(4(6(#)))))"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,1"))
                     (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,1,1"))
                     (rule "add_literals" (formula "17") (term "1,1,0,1,1"))
                     (rule "times_zero_1" (formula "17") (term "1,0,1,1"))
                     (rule "add_zero_right" (formula "17") (term "0,1,1"))
                     (rule "polyDiv_pullOut" (formula "12") (term "0,1,1,1,0,0,1,1") (inst "polyDivCoeff=Z(1(#))"))
                     (rule "equal_literals" (formula "12") (term "0,0,1,1,1,0,0,1,1"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,1,1,1,0,0,1,1"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0,1,1,1,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,1,0,0,1,1"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1,1,1,0,0,1,1"))
                     (rule "add_literals" (formula "12") (term "0,0,0,1,1,1,1,0,0,1,1"))
                     (rule "polySimp_addComm0" (formula "12") (term "1,1,1,1,0,0,1,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,1,0,0,1,1"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,1,0,0,1,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "1,1,0,0,1,1"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,1,1,0,0,1,1"))
                     (rule "add_literals" (formula "12") (term "0,0,1,1,0,0,1,1"))
                     (rule "polyDiv_pullOut" (formula "12") (term "0,0,0,1") (inst "polyDivCoeff=Z(2(#))"))
                     (rule "equal_literals" (formula "12") (term "0,0,0,0,1"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0,0,1"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "0,0,1"))
                     (rule "polySimp_addComm0" (formula "12") (term "1,0,0,1"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,1,1,0,0,1"))
                     (rule "add_literals" (formula "12") (term "0,0,1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "0,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,0,0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "12") (term "0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "12") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "0,0,1"))
                     (rule "polyMod_pullOut" (formula "17") (term "1,1") (inst "polyDivCoeff=mul(div(add(Z(neglit(4(8(5(3(8(4(7(4(1(2(#)))))))))))),
            mul(result_numberOfLeadingZeros,
                Z(neglit(1(#))))),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,1"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,1,1"))
                     (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0,1,1"))
                     (rule "add_literals" (formula "17") (term "1,1,0,0,1,1"))
                     (rule "times_zero_1" (formula "17") (term "1,0,0,1,1"))
                     (rule "add_zero_right" (formula "17") (term "0,0,1,1"))
                     (rule "mod_axiom" (formula "17") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
                     (rule "polySimp_addAssoc" (formula "17") (term "1"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,1"))
                     (rule "polySimp_addAssoc" (formula "17") (term "0,0,1"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1"))
                     (rule "polyDiv_pullOut" (formula "17") (term "0,1,1") (inst "polyDivCoeff=Z(neglit(1(#)))"))
                     (rule "equal_literals" (formula "17") (term "0,0,1,1"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0,1,1"))
                     (rule "mul_literals" (formula "17") (term "1,0,0,0,1,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
                     (rule "polySimp_addComm0" (formula "17") (term "1,1,1"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,1,1,1,1"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,0,1,1,1,1"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1,1,1,1"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,1"))
                     (rule "mul_literals" (formula "17") (term "0,1,1"))
                     (rule "polySimp_addAssoc" (formula "17") (term "1"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,1"))
                     (rule "polySimp_addComm1" (formula "17") (term "0,0,1"))
                     (rule "add_literals" (formula "17") (term "0,0,0,1"))
                     (rule "add_zero_left" (formula "17") (term "0,0,1"))
                     (rule "inEqSimp_exactShadow0" (formula "1") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "greater_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "polySimp_addLiterals" (formula "1") (term "0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))") (inst "elimGcdLeftDiv=length(long[]::select(heap, self, BitSet::$words))") (inst "elimGcdRightDiv=Z(1(#))"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addLiterals" (formula "1") (term "0,0,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "leq_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "0,1,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0,0,0,1,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,1,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,1,0"))
                     (rule "nnf_imp2or" (formula "12") (term "0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,0,1,1,0,0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,1,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,1,0,0,0,0"))
                     (rule "Class_invariant_axiom_for_BitSet" (formula "8") (inst "i_0=i_0") (inst "wordIndex=wordIndex") (inst "bitIndex=bitIndex") (inst "x=x_12") (inst "i=i") (ifseqformula "6"))
                      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "17")) (ifInst ""  (formula "15")))
                     (rule "andLeft" (formula "8"))
                     (rule "andLeft" (formula "8"))
                     (rule "andLeft" (formula "8"))
                     (rule "andLeft" (formula "8"))
                     (rule "andLeft" (formula "8"))
                     (rule "notLeft" (formula "9"))
                     (rule "andLeft" (formula "8"))
                     (rule "translateJavaCastLong" (formula "12") (term "0,1,1,1,0"))
                     (rule "translateJavaMulLong" (formula "11") (term "0,0,0,1,0,0"))
                     (rule "translateJavaSubInt" (formula "19") (term "0,2,0"))
                     (rule "translateJavaMulLong" (formula "12") (term "1,1,1,0"))
                     (rule "translateJavaCastLong" (formula "11") (term "0,0,0,0,1,0,0"))
                      (opengoal " ")
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "5")))
                  (rule "closeTrue" (formula "18"))
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "18"))
               (rule "closeTrue" (formula "18"))
            )
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "18"))
            (rule "closeTrue" (formula "18"))
         )
      )
      (branch "Exceptional Post (numberOfLeadingZeros)"
          (builtin "One Step Simplification" (formula "12"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "expand_inInt" (formula "6") (term "1,0,0,0,1,0,1"))
         (rule "replace_int_MAX" (formula "6") (term "1,0,1,0,0,0,1,0,1"))
         (rule "replace_int_MIN" (formula "6") (term "0,1,1,0,0,0,1,0,1"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "6"))
         (rule "close" (formula "9") (ifseqformula "8"))
      )
      (branch "Pre (numberOfLeadingZeros)"
          (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "1")))
         (rule "expand_inLong" (formula "11"))
         (rule "replace_long_MIN" (formula "11") (term "0,1"))
         (rule "replace_long_MAX" (formula "11") (term "1,0"))
         (rule "inEqSimp_ltRight" (formula "10"))
         (rule "mul_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "10"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "11") (term "1"))
         (rule "mod_axiom" (formula "11") (term "1,0,2,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,2,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,2,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,2,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,2,0,0"))
         (rule "mod_axiom" (formula "2") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
         (rule "add_literals" (formula "2") (term "0,0,0"))
         (rule "mod_axiom" (formula "1") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,0"))
         (rule "mod_axiom" (formula "11") (term "1,0,2,0,1"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,2,0,1"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,2,0,1"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,2,0,1"))
         (rule "add_literals" (formula "11") (term "0,0,0,2,0,1"))
         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "inEqSimp_exactShadow0" (formula "1") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "greater_literals" (formula "1") (term "0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "elimGcdGeq_antec" (formula "1") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))") (inst "elimGcdLeftDiv=length(long[]::select(heap, self, BitSet::$words))") (inst "elimGcdRightDiv=Z(1(#))"))
         (rule "leq_literals" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
         (rule "polySimp_addLiterals" (formula "1") (term "0,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "leq_literals" (formula "1") (term "0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "commute_and" (formula "12"))
         (rule "Class_invariant_axiom_for_BitSet" (formula "8") (inst "i_0=i_0") (inst "wordIndex=wordIndex") (inst "bitIndex=bitIndex") (inst "x=x_12") (inst "i=i") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "11")) (ifInst ""  (formula "9")))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "9"))
         (rule "andLeft" (formula "8"))
         (rule "translateJavaMulLong" (formula "12") (term "1,1,1,0"))
         (rule "translateJavaMulLong" (formula "11") (term "0,0,0,1,0,0"))
         (rule "translateJavaSubInt" (formula "14") (term "0,2,0"))
         (rule "translateJavaCastLong" (formula "12") (term "0,1,1,1,0"))
         (rule "translateJavaCastLong" (formula "11") (term "0,0,0,0,1,0,0"))
         (rule "andRight" (formula "18"))
         (branch "Case 1"
            (rule "expand_inInt" (formula "10") (term "1,0,0"))
            (rule "expand_inInt" (formula "11") (term "1,0,0,0,0"))
            (rule "expand_inInt" (formula "11") (term "1,0,0,0"))
            (rule "expand_inLong" (formula "12") (term "1,0,0"))
            (rule "expand_inInt" (formula "13") (term "1,0,0"))
            (rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0"))
            (rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0"))
            (rule "replace_int_MAX" (formula "11") (term "1,0,1,0,0,0,0"))
            (rule "replace_int_MIN" (formula "11") (term "0,1,1,0,0,0,0"))
            (rule "replace_int_MAX" (formula "11") (term "1,0,1,0,0,0"))
            (rule "replace_int_MIN" (formula "11") (term "0,1,1,0,0,0"))
            (rule "replace_long_MIN" (formula "12") (term "0,1,1,0,0"))
            (rule "replace_long_MAX" (formula "12") (term "1,0,1,0,0"))
            (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0"))
            (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0"))
            (rule "translateJavaAddLong" (formula "11") (term "0,0,1,0,0"))
            (rule "bitAtDef" (formula "11") (term "0,1,1,0,0"))
            (rule "inEqSimp_geqRight" (formula "18"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "ifEqualsInteger" (formula "12") (term "1,1,0,0"))
            (rule "equal_literals" (formula "12") (term "1,1,1,1,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,1,0"))
            (rule "mul_literals" (formula "13") (term "0,1,1,1,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0"))
            (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_strengthen1" (formula "9") (ifseqformula "16"))
            (rule "add_zero_right" (formula "9") (term "1"))
            (rule "inEqSimp_contradEq7" (formula "16") (ifseqformula "9"))
            (rule "times_zero_1" (formula "16") (term "1,0,0"))
            (rule "add_zero_right" (formula "16") (term "0,0"))
            (rule "leq_literals" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "false_right" (formula "16"))
            (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "10"))
            (rule "mul_literals" (formula "9") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9"))
            (rule "mul_literals" (formula "9") (term "1"))
            (rule "expand_subJint" (formula "15") (term "0,2,0"))
            (rule "polySimp_elimSub" (formula "15") (term "0,0,2,0"))
            (rule "mul_literals" (formula "15") (term "1,0,0,2,0"))
            (rule "polySimp_addComm0" (formula "15") (term "0,0,2,0"))
            (rule "expand_mulJlong" (formula "12") (term "0,0,0,1,0,0"))
            (rule "expand_moduloLong" (formula "13") (term "0,1,1,1,1,0"))
            (rule "replace_long_MIN" (formula "13") (term "0,0,1,1,1,1,0"))
            (rule "replace_long_HALFRANGE" (formula "13") (term "0,0,1,0,1,1,1,1,0"))
            (rule "replace_long_RANGE" (formula "13") (term "1,1,0,1,1,1,1,0"))
            (rule "mod_axiom" (formula "13") (term "1,0,1,1,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,1,1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,1,1,1,0"))
            (rule "add_literals" (formula "13") (term "0,0,0,1,1,1,1,0"))
            (rule "add_zero_left" (formula "13") (term "0,0,1,1,1,1,0"))
            (rule "nnf_imp2or" (formula "14") (term "0"))
            (rule "nnf_imp2or" (formula "11") (term "0"))
            (rule "expand_moduloInteger" (formula "15") (term "0,2,0"))
            (rule "replace_int_RANGE" (formula "15") (term "1,1,0,2,0"))
            (rule "replace_int_HALFRANGE" (formula "15") (term "0,0,1,0,2,0"))
            (rule "replace_int_MIN" (formula "15") (term "0,0,2,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,2,0"))
            (rule "add_literals" (formula "15") (term "0,0,1,0,2,0"))
            (rule "mod_axiom" (formula "15") (term "1,0,2,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,2,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,2,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,2,0"))
            (rule "add_literals" (formula "15") (term "0,0,0,2,0"))
            (rule "inEqSimp_contradEq3" (formula "15") (ifseqformula "1"))
            (rule "times_zero_1" (formula "15") (term "1,0,0"))
            (rule "add_zero_right" (formula "15") (term "0,0"))
            (rule "qeq_literals" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "false_right" (formula "15"))
            (rule "expand_moduloLong" (formula "12") (term "0,0,0,1,0,0"))
            (rule "replace_long_RANGE" (formula "12") (term "1,1,0,0,0,1,0,0"))
            (rule "replace_long_HALFRANGE" (formula "12") (term "0,0,1,0,0,0,1,0,0"))
            (rule "replace_long_MIN" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "mod_axiom" (formula "12") (term "1,0,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "expand_mulJlong" (formula "13") (term "1,1,1,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,1,1,1,1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "0,1,1,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,1,1,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,1,1,1,0"))
            (rule "nnf_notAnd" (formula "14") (term "0,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0"))
            (rule "expand_moduloLong" (formula "12") (term "0,1,0,0,1,0,0,0,1,0,0"))
            (rule "replace_long_MIN" (formula "12") (term "0,0,1,0,0,1,0,0,0,1,0,0"))
            (rule "replace_long_HALFRANGE" (formula "12") (term "0,0,1,0,1,0,0,1,0,0,0,1,0,0"))
            (rule "replace_long_RANGE" (formula "12") (term "1,1,0,1,0,0,1,0,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,1,0,0"))
            (rule "mod_axiom" (formula "12") (term "0,1,0,0,1,0,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,0,0,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,0,0,0,0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0,0,1,0,0"))
            (rule "polyDiv_pullOut" (formula "12") (term "0,0,0,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
            (rule "equal_literals" (formula "12") (term "0,0,0,0,0,0,1,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0,0,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0,0,0,0,1,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0,0,0,0,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,0,0,0,0,0,0,1,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,0,0,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "polySimp_mulAssoc" (formula "12") (term "0,0,0,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0,0,0,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,0,0,1,0,0"))
            (rule "expand_moduloLong" (formula "13") (term "1,1,1,1,0"))
            (rule "replace_long_RANGE" (formula "13") (term "1,1,1,1,1,1,0"))
            (rule "replace_long_HALFRANGE" (formula "13") (term "0,0,1,1,1,1,1,0"))
            (rule "replace_long_MIN" (formula "13") (term "0,1,1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,1,1,1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "1,1,1,0"))
            (rule "add_literals" (formula "13") (term "0,1,1,1,0"))
            (rule "polyMod_pullOut" (formula "13") (term "1,1,1,1,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            int::select(heap,
                        self,
                        BitSet::$wordsInUse)),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,1,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,1,1,1,0"))
            (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,1,1,1,1,0"))
            (rule "add_literals" (formula "13") (term "1,1,0,1,1,1,1,0"))
            (rule "times_zero_1" (formula "13") (term "1,0,1,1,1,1,0"))
            (rule "add_zero_right" (formula "13") (term "0,1,1,1,1,0"))
            (rule "mod_axiom" (formula "13") (term "1,1,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,1,1,1,0"))
            (rule "add_literals" (formula "13") (term "0,0,1,1,1,0"))
            (rule "expand_moduloLong" (formula "12") (term "0,1,0,0,0,1,0,0"))
            (rule "replace_long_MIN" (formula "12") (term "0,0,1,0,0,0,1,0,0"))
            (rule "replace_long_HALFRANGE" (formula "12") (term "0,0,1,0,1,0,0,0,1,0,0"))
            (rule "replace_long_RANGE" (formula "12") (term "1,1,0,1,0,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,0,0,0,0,1,0,0"))
            (rule "mod_axiom" (formula "12") (term "0,1,0,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,0,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,0,1,0,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,0,0,0,1,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,0,0,0,1,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "nnf_notAnd" (formula "14") (term "1,0,0"))
            (rule "inEqSimp_notGeq" (formula "14") (term "1,1,0,0"))
            (rule "mul_literals" (formula "14") (term "1,0,0,1,1,0,0"))
            (rule "add_literals" (formula "14") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,1,0,0"))
            (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "14") (term "0,1,0,0"))
            (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,1,0,0"))
            (rule "mul_literals" (formula "14") (term "1,0,1,0,0"))
            (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0"))
            (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0"))
            (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0"))
            (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "11") (term "1,0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "1,1,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,1,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,1,0,0"))
            (rule "mul_literals" (formula "11") (term "1,1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "0,1,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,1,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,1,0,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0"))
            (rule "nnf_imp2or" (formula "13") (term "0"))
            (rule "expand_addJlong" (formula "12") (term "0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "expand_moduloLong" (formula "12") (term "0,0,1,0,0"))
            (rule "replace_long_HALFRANGE" (formula "12") (term "0,0,1,0,0,1,0,0"))
            (rule "replace_long_RANGE" (formula "12") (term "1,1,0,0,1,0,0"))
            (rule "replace_long_MIN" (formula "12") (term "0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0,0"))
            (rule "polyMod_pullOut" (formula "12") (term "1,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            mul(wordIndex, Z(4(6(#))))),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(1(#))))"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,1,0,0,1,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "mod_axiom" (formula "12") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "nnf_notAnd" (formula "13") (term "0,0"))
            (rule "nnf_imp2or" (formula "12") (term "0,0"))
            (rule "nnf_notAnd" (formula "13") (term "1,0,0"))
            (rule "inEqSimp_notLeq" (formula "13") (term "0,1,0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0"))
            (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,1,0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "13") (term "1,1,0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0"))
            (rule "add_literals" (formula "13") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0,0"))
            (rule "mul_literals" (formula "13") (term "1,1,1,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "0,1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,1,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "1,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "0,1,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,1,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "1,1,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,1,1,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0,0,0"))
            (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_0"))
            (rule "mul_literals" (formula "4") (term "1,1,1,1,1"))
            (rule "qeq_literals" (formula "4") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "equal_literals" (formula "4") (term "0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "4"))
            (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
            (rule "add_literals" (formula "6") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "6") (term "1"))
            (rule "add_literals" (formula "6") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "5"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
            (rule "polySimp_addComm1" (formula "5") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "6"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
            (rule "polySimp_addComm1" (formula "6") (term "0"))
            (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "4"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "polySimp_addComm0" (formula "3") (term "0,0"))
            (rule "applyEq" (formula "1") (term "0,1,0,2,0") (ifseqformula "4"))
            (rule "polySimp_addComm1" (formula "1") (term "0,2,0"))
            (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "4"))
            (rule "inEqSimp_homoInEq0" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "5"))
            (rule "polySimp_mulComm0" (formula "5") (term "1"))
            (rule "polySimp_rightDist" (formula "5") (term "1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
            (rule "mul_literals" (formula "5") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6"))
            (rule "polySimp_mulComm0" (formula "6") (term "1"))
            (rule "polySimp_rightDist" (formula "6") (term "1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
            (rule "mul_literals" (formula "6") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1"))
            (rule "polySimp_rightDist" (formula "3") (term "1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
            (rule "polySimp_elimOne" (formula "3") (term "1,1"))
            (rule "polySimp_mulComm0" (formula "3") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1"))
            (rule "polySimp_rightDist" (formula "7") (term "1"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
            (rule "mul_literals" (formula "7") (term "0,1"))
            (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
            (rule "inEqSimp_homoInEq0" (formula "5") (term "0"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
            (rule "mul_literals" (formula "5") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
            (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
            (rule "add_literals" (formula "5") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
            (rule "add_literals" (formula "5") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "5") (term "1,0,0"))
            (rule "add_zero_right" (formula "5") (term "0,0"))
            (rule "qeq_literals" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "3"))
            (rule "mul_literals" (formula "11") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11"))
            (rule "polySimp_mulComm0" (formula "11") (term "1"))
            (rule "polySimp_rightDist" (formula "11") (term "1"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
            (rule "mul_literals" (formula "11") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "5"))
            (rule "mul_literals" (formula "12") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0"))
            (rule "add_literals" (formula "12") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12"))
            (rule "mul_literals" (formula "12") (term "1"))
            (rule "elimGcdGeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "12") (term "0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "polySimp_addLiterals" (formula "12") (term "0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0"))
            (rule "leq_literals" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "3"))
            (rule "polySimp_rightDist" (formula "6") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
            (rule "mul_literals" (formula "6") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "6") (term "0"))
            (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
            (rule "add_literals" (formula "6") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "6") (term "1,0,0"))
            (rule "add_zero_right" (formula "6") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "6"))
            (rule "mul_literals" (formula "6") (term "1"))
            (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "14"))
            (rule "polySimp_rightDist" (formula "6") (term "0,0"))
            (rule "mul_literals" (formula "6") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "6"))
            (rule "polySimp_mulComm0" (formula "6") (term "1"))
            (rule "polySimp_rightDist" (formula "6") (term "1"))
            (rule "mul_literals" (formula "6") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
            (rule "commute_or_2" (formula "19") (term "0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0"))
            (rule "arrayLengthIsAnInt" (formula "15") (term "1"))
            (rule "expand_inInt" (formula "15"))
            (rule "replace_int_MIN" (formula "15") (term "0,1"))
            (rule "replace_int_MAX" (formula "15") (term "1,0"))
            (rule "andLeft" (formula "15"))
            (rule "inEqSimp_commuteLeq" (formula "16"))
            (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "2"))
            (rule "leq_literals" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "15"))
            (rule "polySimp_rightDist" (formula "6") (term "0,0"))
            (rule "mul_literals" (formula "6") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "6") (term "0"))
            (rule "add_literals" (formula "6") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "6"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0"))
            (rule "elimGcdLeq_antec" (formula "6") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
            (rule "neg_literal" (formula "6") (term "0,0,0,0,0,1,0"))
            (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "6") (term "0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,0"))
            (rule "add_literals" (formula "6") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
            (rule "add_literals" (formula "6") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "6") (term "1,0,0"))
            (rule "add_zero_right" (formula "6") (term "0,0"))
            (rule "qeq_literals" (formula "6") (term "0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "16"))
            (rule "polySimp_rightDist" (formula "13") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
            (rule "mul_literals" (formula "13") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "13") (term "0"))
            (rule "add_literals" (formula "13") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13"))
            (rule "mul_literals" (formula "13") (term "1"))
            (rule "inEqSimp_subsumption6" (formula "13") (ifseqformula "15"))
            (rule "greater_literals" (formula "13") (term "0,0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "mul_literals" (formula "13") (term "1,0"))
            (rule "leq_literals" (formula "13") (term "0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "6"))
            (rule "applyEqRigid" (formula "6") (term "0") (ifseqformula "14"))
            (rule "leq_literals" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "applyEqRigid" (formula "12") (term "0,1,1") (ifseqformula "13"))
            (rule "times_zero_2" (formula "12") (term "1,1"))
            (rule "add_zero_right" (formula "12") (term "1"))
            (rule "applyEqRigid" (formula "5") (term "0,1,1") (ifseqformula "12"))
            (rule "times_zero_2" (formula "5") (term "1,1"))
            (rule "add_zero_right" (formula "5") (term "1"))
            (rule "applyEq" (formula "7") (term "0,1,1") (ifseqformula "12"))
            (rule "times_zero_2" (formula "7") (term "1,1"))
            (rule "add_zero_right" (formula "7") (term "1"))
            (rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "11"))
            (rule "times_zero_2" (formula "6") (term "1,1"))
            (rule "add_zero_right" (formula "6") (term "1"))
            (rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "10"))
            (rule "qeq_literals" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "applyEqRigid" (formula "3") (term "0,0,1") (ifseqformula "10"))
            (rule "times_zero_2" (formula "3") (term "0,1"))
            (rule "add_zero_left" (formula "3") (term "1"))
            (rule "applyEq" (formula "1") (term "0,1,0,0,2,0") (ifseqformula "9"))
            (rule "times_zero_2" (formula "1") (term "1,0,0,2,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,2,0"))
            (rule "applyEq" (formula "3") (term "1") (ifseqformula "9"))
            (rule "arrayLengthNotNegative" (formula "12") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "2"))
            (rule "leq_literals" (formula "12") (term "0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "shift_paren_or" (formula "15") (term "0,0"))
            (rule "commute_or" (formula "14") (term "1,0,0,0"))
            (rule "commute_or" (formula "14") (term "1,0,0,0,0"))
            (rule "cnf_eqv" (formula "14") (term "1,0,0"))
            (rule "nnf_notAnd" (formula "14") (term "1,0,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "14") (term "0,1,0,1,0,0"))
            (rule "times_zero_1" (formula "14") (term "1,0,0,0,1,0,1,0,0"))
            (rule "add_zero_right" (formula "14") (term "0,0,0,1,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,1,0,1,0,0"))
            (rule "mul_literals" (formula "14") (term "1,0,1,0,1,0,0"))
            (rule "commute_or_2" (formula "14") (term "0,0,0,0,0,0"))
            (rule "div_axiom" (formula "15") (term "0,1,1,1,1,0") (inst "quotient=quotient_1"))
            (rule "qeq_literals" (formula "15") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "mul_literals" (formula "15") (term "1,1,1,1"))
            (rule "equal_literals" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,1"))
            (rule "add_literals" (formula "17") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "17") (term "1"))
            (rule "add_literals" (formula "17") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "16"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,0"))
            (rule "polySimp_addComm1" (formula "16") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "17"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,0"))
            (rule "polySimp_addComm1" (formula "17") (term "0"))
            (rule "applyEq" (formula "18") (term "0,1,1,1,1,0") (ifseqformula "15"))
            (rule "polySimp_addComm1" (formula "18") (term "1,1,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16"))
            (rule "polySimp_mulComm0" (formula "16") (term "1"))
            (rule "polySimp_rightDist" (formula "16") (term "1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
            (rule "mul_literals" (formula "16") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17"))
            (rule "polySimp_mulComm0" (formula "17") (term "1"))
            (rule "polySimp_rightDist" (formula "17") (term "1"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
            (rule "mul_literals" (formula "17") (term "0,1"))
            (rule "elimGcdLeq_antec" (formula "17") (inst "elimGcdRightDiv=add(Z(1(7(8(5(5(8(5(7(0(8(8(1(5(1(1(4(4(1(#))))))))))))))))))),
    mul(quotient_1,
        Z(4(4(7(1(1(7(1(5(1(6(7(3(0(3(2(8(8(2(#)))))))))))))))))))))") (inst "elimGcdLeftDiv=int::select(heap, self, BitSet::$wordsInUse)") (inst "elimGcd=Z(4(6(#)))"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
            (rule "neg_literal" (formula "17") (term "0,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "17") (term "0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
            (rule "add_literals" (formula "17") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "17") (term "1,0,0"))
            (rule "add_zero_right" (formula "17") (term "0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
            (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
            (rule "add_literals" (formula "17") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "17") (term "1,0,0"))
            (rule "add_zero_right" (formula "17") (term "0,0"))
            (rule "qeq_literals" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcdRightDiv=add(Z(neglit(2(7(8(5(5(8(5(7(0(8(8(1(5(1(1(4(4(1(#)))))))))))))))))))),
    mul(quotient_1,
        Z(4(4(7(1(1(7(1(5(1(6(7(3(0(3(2(8(8(2(#)))))))))))))))))))))") (inst "elimGcdLeftDiv=int::select(heap, self, BitSet::$wordsInUse)") (inst "elimGcd=Z(4(6(#)))"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "16") (term "0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
            (rule "add_literals" (formula "16") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "16") (term "1,0,0"))
            (rule "add_zero_right" (formula "16") (term "0,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
            (rule "polySimp_addComm1" (formula "16") (term "0,0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
            (rule "add_literals" (formula "16") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "16") (term "1,0,0"))
            (rule "add_zero_right" (formula "16") (term "0,0"))
            (rule "leq_literals" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "4"))
            (rule "polySimp_rightDist" (formula "16") (term "0,0"))
            (rule "mul_literals" (formula "16") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "16") (term "0"))
            (rule "add_literals" (formula "16") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "16"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0"))
            (rule "elimGcdLeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(4(4(7(1(1(7(1(5(1(6(7(3(0(3(2(8(8(2(#)))))))))))))))))))"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
            (rule "neg_literal" (formula "16") (term "0,0,0,0,0,1,0"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "16") (term "0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
            (rule "add_literals" (formula "16") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "16") (term "1,0,0"))
            (rule "add_zero_right" (formula "16") (term "0,0"))
            (rule "qeq_literals" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "18"))
            (rule "mul_literals" (formula "10") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0"))
            (rule "add_literals" (formula "10") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10"))
            (rule "mul_literals" (formula "10") (term "1"))
            (rule "elimGcdGeq_antec" (formula "10") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(4(4(7(1(1(7(1(5(1(6(7(3(0(3(2(8(8(2(#)))))))))))))))))))"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "10") (term "0,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "polySimp_addLiterals" (formula "10") (term "0,0,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "10") (term "0,0"))
            (rule "add_literals" (formula "10") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "13"))
            (rule "polySimp_rightDist" (formula "18") (term "0,0"))
            (rule "mul_literals" (formula "18") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "18"))
            (rule "polySimp_mulComm0" (formula "18") (term "1"))
            (rule "polySimp_rightDist" (formula "18") (term "1"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
            (rule "mul_literals" (formula "18") (term "0,1"))
            (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "17"))
            (rule "applyEq" (formula "19") (term "0,1,1") (ifseqformula "10"))
            (rule "times_zero_2" (formula "19") (term "1,1"))
            (rule "add_zero_right" (formula "19") (term "1"))
            (rule "applyEq" (formula "18") (term "0") (ifseqformula "10"))
            (rule "leq_literals" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
            (rule "qeq_literals" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "applyEq" (formula "18") (term "0,1,1") (ifseqformula "10"))
            (rule "times_zero_2" (formula "18") (term "1,1"))
            (rule "add_zero_right" (formula "18") (term "1"))
            (rule "applyEqRigid" (formula "19") (term "0,1,1") (ifseqformula "10"))
            (rule "times_zero_2" (formula "19") (term "1,1"))
            (rule "add_zero_right" (formula "19") (term "1"))
            (rule "applyEq" (formula "16") (term "1") (ifseqformula "10"))
            (rule "applyEq" (formula "20") (term "0,1,0,1,1,1,0") (ifseqformula "10"))
            (rule "times_zero_2" (formula "20") (term "1,0,1,1,1,0"))
            (rule "add_zero_right" (formula "20") (term "0,1,1,1,0"))
            (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "2"))
            (rule "leq_literals" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "inEqSimp_subsumption0" (formula "18") (ifseqformula "4"))
            (rule "leq_literals" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "11"))
            (rule "leq_literals" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "commute_or" (formula "14") (term "0,0,0"))
            (rule "shift_paren_or" (formula "18") (term "0,0,0"))
            (rule "commute_or_2" (formula "17") (term "0,0"))
            (rule "shift_paren_or" (formula "15") (term "0,1,0,0"))
            (rule "shift_paren_or" (formula "15") (term "0,0,0,0"))
            (rule "cnf_rightDist" (formula "15") (term "1,1,0,0"))
            (rule "commute_or_2" (formula "14") (term "0,0"))
            (rule "commute_or_2" (formula "18") (term "0,0,0"))
            (rule "commute_or_2" (formula "15") (term "0,0,0"))
            (rule "cnf_rightDist" (formula "17") (term "0"))
            (rule "distr_forallAnd" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "commute_or_2" (formula "17") (term "0"))
            (rule "inEqSimp_or_subsumption3" (formula "17") (term "0"))
            (rule "qeq_literals" (formula "17") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "commute_or" (formula "18") (term "0"))
            (rule "cnf_rightDist" (formula "19") (term "0"))
            (rule "distr_forallAnd" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "commute_or" (formula "20") (term "0"))
            (rule "commute_or" (formula "14") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
            (rule "commute_or" (formula "19") (term "0,0,0,0"))
            (rule "inEqSimp_or_subsumption0" (formula "19") (term "0,0,0,0"))
            (rule "qeq_literals" (formula "19") (term "0,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "commute_or" (formula "20") (term "0,0,0,0"))
            (rule "inEqSimp_or_subsumption0" (formula "20") (term "0,0,0,0"))
            (rule "qeq_literals" (formula "20") (term "0,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0") (ifseqformula "5"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "commute_or" (formula "16") (term "1,1,1,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0"))
            (rule "shift_paren_or" (formula "16") (term "0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0"))
            (rule "cnf_rightDist" (formula "16") (term "0,0"))
            (rule "distr_forallAnd" (formula "16") (term "0"))
            (rule "distr_forallAnd" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "commute_or" (formula "17") (term "0,0"))
            (rule "shift_paren_or" (formula "16") (term "0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0"))
            (rule "cnf_rightDist" (formula "17") (term "0,0"))
            (rule "distr_forallAnd" (formula "17") (term "0"))
            (rule "distr_forallAnd" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "commute_or_2" (formula "18") (term "0,0"))
            (rule "commute_or_2" (formula "17") (term "0,0"))
            (rule "commute_or_2" (formula "17") (term "0,0,0"))
            (rule "shift_paren_or" (formula "18") (term "0,0,0"))
            (rule "commute_or_2" (formula "17") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0"))
            (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "17") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0"))
            (rule "shift_paren_or" (formula "17") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_or_subsumption3" (formula "17") (term "0,0,0,0,0"))
            (rule "qeq_literals" (formula "17") (term "0,1,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "commute_or_2" (formula "17") (term "0,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "17") (term "0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "17") (term "0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "17") (term "0,0,0,0,0"))
            (rule "inEqSimp_or_subsumption3" (formula "17") (term "0,0,0,0,0"))
            (rule "qeq_literals" (formula "17") (term "0,1,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "commute_or_2" (formula "17") (term "0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "17") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_or_subsumption1" (formula "17") (term "0,0,0,0,0,0"))
            (rule "qeq_literals" (formula "17") (term "0,1,0,0,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "inEqSimp_or_tautInEq1" (formula "17") (term "0,0,0,0,0"))
            (rule "add_zero_right" (formula "17") (term "1,1,0,0,0,0,0"))
            (rule "qeq_literals" (formula "17") (term "1,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "shift_paren_or" (formula "16") (term "0,0,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "17") (term "0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_or_subsumption1" (formula "16") (term "0,0,0,0,0,0,0"))
            (rule "qeq_literals" (formula "16") (term "0,1,0,0,0,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,0"))
            (rule "inEqSimp_or_subsumption3" (formula "16") (term "0,0,0,0,0,0"))
            (rule "qeq_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "commute_or" (formula "16") (term "0,0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0"))
            (rule "inEqSimp_or_subsumption1" (formula "16") (term "0,0,0,0,0"))
            (rule "qeq_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "shift_paren_or" (formula "17") (term "0,0,0,0,0,0,0,0"))
            (rule "allLeft" (formula "21") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, BitSet::$wordsInUse))"))
            (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,0,0"))
            (rule "add_zero_left" (formula "21") (term "0,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,1,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,1,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,1,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "21") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,1,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,1,0"))
            (rule "mul_literals" (formula "21") (term "0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "21") (term "0,0,1,0"))
            (rule "inEqSimp_invertInEq1" (formula "21") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "0,0,0,0"))
            (rule "times_zero_2" (formula "21") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "0,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "21") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "21") (term "0,1,0"))
            (rule "inEqSimp_contradInEq0" (formula "21") (term "1,0,0") (ifseqformula "5"))
            (rule "qeq_literals" (formula "21") (term "0,1,0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_contradInEq0" (formula "21") (term "1") (ifseqformula "2"))
            (rule "qeq_literals" (formula "21") (term "0,1"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_contradInEq0" (formula "21") (term "1") (ifseqformula "14"))
            (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
            (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "21") (term "0,0,1"))
            (rule "leq_literals" (formula "21") (term "0,1"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "21"))
            (rule "leq_literals" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "20"))
            (rule "qeq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "closeFalse" (formula "11"))
         )
         (branch "Case 2"
            (rule "expand_inInt" (formula "10") (term "1,0,0"))
            (rule "expand_inInt" (formula "11") (term "1,0,0,0,0"))
            (rule "expand_inInt" (formula "11") (term "1,0,0,0"))
            (rule "expand_inLong" (formula "12") (term "1,0,0"))
            (rule "expand_inInt" (formula "13") (term "1,0,0"))
            (rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0"))
            (rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0"))
            (rule "replace_int_MAX" (formula "11") (term "1,0,1,0,0,0,0"))
            (rule "replace_int_MIN" (formula "11") (term "0,1,1,0,0,0,0"))
            (rule "replace_int_MAX" (formula "11") (term "1,0,1,0,0,0"))
            (rule "replace_int_MIN" (formula "11") (term "0,1,1,0,0,0"))
            (rule "replace_long_MIN" (formula "12") (term "0,1,1,0,0"))
            (rule "replace_long_MAX" (formula "12") (term "1,0,1,0,0"))
            (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0"))
            (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0"))
            (rule "translateJavaAddLong" (formula "11") (term "0,0,1,0,0"))
            (rule "bitAtDef" (formula "11") (term "0,1,1,0,0"))
            (rule "inEqSimp_leqRight" (formula "18"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "ifEqualsInteger" (formula "12") (term "1,1,0,0"))
            (rule "equal_literals" (formula "12") (term "1,1,1,1,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,0,0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,1,0"))
            (rule "mul_literals" (formula "13") (term "0,1,1,1,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_strengthen1" (formula "9") (ifseqformula "16"))
            (rule "add_zero_right" (formula "9") (term "1"))
            (rule "inEqSimp_contradEq7" (formula "16") (ifseqformula "9"))
            (rule "times_zero_1" (formula "16") (term "1,0,0"))
            (rule "add_zero_right" (formula "16") (term "0,0"))
            (rule "leq_literals" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "false_right" (formula "16"))
            (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "10"))
            (rule "mul_literals" (formula "9") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9"))
            (rule "mul_literals" (formula "9") (term "1"))
            (rule "expand_subJint" (formula "15") (term "0,2,0"))
            (rule "polySimp_elimSub" (formula "15") (term "0,0,2,0"))
            (rule "mul_literals" (formula "15") (term "1,0,0,2,0"))
            (rule "polySimp_addComm0" (formula "15") (term "0,0,2,0"))
            (rule "expand_addJlong" (formula "12") (term "0,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,0,0,1,0,0"))
            (rule "expand_mulJlong" (formula "13") (term "1,1,1,1,0"))
            (rule "nnf_imp2or" (formula "14") (term "0"))
            (rule "nnf_imp2or" (formula "11") (term "0"))
            (rule "expand_moduloInteger" (formula "15") (term "0,2,0"))
            (rule "replace_int_RANGE" (formula "15") (term "1,1,0,2,0"))
            (rule "replace_int_HALFRANGE" (formula "15") (term "0,0,1,0,2,0"))
            (rule "replace_int_MIN" (formula "15") (term "0,0,2,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,2,0"))
            (rule "add_literals" (formula "15") (term "0,0,1,0,2,0"))
            (rule "mod_axiom" (formula "15") (term "1,0,2,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,2,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,2,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,2,0"))
            (rule "add_literals" (formula "15") (term "0,0,0,2,0"))
            (rule "inEqSimp_contradEq7" (formula "15") (ifseqformula "1"))
            (rule "times_zero_1" (formula "15") (term "1,0,0"))
            (rule "add_zero_right" (formula "15") (term "0,0"))
            (rule "leq_literals" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "false_right" (formula "15"))
            (rule "expand_moduloLong" (formula "12") (term "0,0,1,0,0"))
            (rule "replace_long_RANGE" (formula "12") (term "1,1,0,0,1,0,0"))
            (rule "replace_long_HALFRANGE" (formula "12") (term "0,0,1,0,0,1,0,0"))
            (rule "replace_long_MIN" (formula "12") (term "0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "mod_axiom" (formula "12") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "expand_moduloLong" (formula "13") (term "0,0,1,1,1,1,0"))
            (rule "replace_long_RANGE" (formula "13") (term "1,1,0,0,1,1,1,1,0"))
            (rule "replace_long_HALFRANGE" (formula "13") (term "0,0,1,0,0,1,1,1,1,0"))
            (rule "replace_long_MIN" (formula "13") (term "0,0,0,1,1,1,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "0,1,1,1,1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "0,1,1,1,1,0"))
            (rule "mul_literals" (formula "13") (term "0,0,1,1,1,1,0"))
            (rule "mod_axiom" (formula "13") (term "0,1,0,1,1,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,1,1,1,1,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,1,1,1,1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,1,1,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,1,1,1,0"))
            (rule "polySimp_rightDist" (formula "13") (term "0,1,0,1,1,1,1,0"))
            (rule "mul_literals" (formula "13") (term "0,0,1,0,1,1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,1,1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,1,1,1,0"))
            (rule "add_literals" (formula "13") (term "0,0,0,1,1,1,1,0"))
            (rule "add_zero_left" (formula "13") (term "0,0,1,1,1,1,0"))
            (rule "nnf_notAnd" (formula "14") (term "0,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0"))
            (rule "expand_moduloLong" (formula "12") (term "0,1,0,0,1,0,0,1,0,0"))
            (rule "replace_long_RANGE" (formula "12") (term "1,1,0,1,0,0,1,0,0,1,0,0"))
            (rule "replace_long_HALFRANGE" (formula "12") (term "0,0,1,0,1,0,0,1,0,0,1,0,0"))
            (rule "replace_long_MIN" (formula "12") (term "0,0,1,0,0,1,0,0,1,0,0"))
            (rule "mod_axiom" (formula "12") (term "1,0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,1,0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,0,0,0,1,0,0"))
            (rule "expand_moduloLong" (formula "13") (term "1,1,1,1,0"))
            (rule "replace_long_RANGE" (formula "13") (term "1,1,1,1,1,1,0"))
            (rule "replace_long_HALFRANGE" (formula "13") (term "0,0,1,1,1,1,1,0"))
            (rule "replace_long_MIN" (formula "13") (term "0,1,1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,1,1,1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "1,1,1,0"))
            (rule "add_literals" (formula "13") (term "0,1,1,1,0"))
            (rule "polyMod_pullOut" (formula "13") (term "1,1,1,1,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            int::select(heap,
                        self,
                        BitSet::$wordsInUse)),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,1,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,1,1,1,0"))
            (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,1,1,1,1,0"))
            (rule "add_literals" (formula "13") (term "1,1,0,1,1,1,1,0"))
            (rule "times_zero_1" (formula "13") (term "1,0,1,1,1,1,0"))
            (rule "add_zero_right" (formula "13") (term "0,1,1,1,1,0"))
            (rule "mod_axiom" (formula "13") (term "1,1,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,1,1,1,0"))
            (rule "add_literals" (formula "13") (term "0,0,1,1,1,0"))
            (rule "expand_moduloLong" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "replace_long_MIN" (formula "12") (term "0,0,1,0,0,1,0,0"))
            (rule "replace_long_HALFRANGE" (formula "12") (term "0,0,1,0,1,0,0,1,0,0"))
            (rule "replace_long_RANGE" (formula "12") (term "1,1,0,1,0,0,1,0,0"))
            (rule "mod_axiom" (formula "12") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0,0"))
            (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0"))
            (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0"))
            (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0"))
            (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "14") (term "1,0,0"))
            (rule "inEqSimp_notGeq" (formula "14") (term "1,1,0,0"))
            (rule "mul_literals" (formula "14") (term "1,0,0,1,1,0,0"))
            (rule "add_literals" (formula "14") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,1,0,0"))
            (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "14") (term "0,1,0,0"))
            (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,1,0,0"))
            (rule "mul_literals" (formula "14") (term "1,0,1,0,0"))
            (rule "nnf_notAnd" (formula "11") (term "1,0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "1,1,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,1,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,1,0,0"))
            (rule "mul_literals" (formula "11") (term "1,1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "0,1,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,1,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,1,0,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0"))
            (rule "nnf_imp2or" (formula "13") (term "0"))
            (rule "expand_mulJlong" (formula "12") (term "1,0,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,0,1,0,0"))
            (rule "expand_mulJlong" (formula "12") (term "1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0,0"))
            (rule "expand_moduloLong" (formula "12") (term "1,0,0,0,1,0,0"))
            (rule "replace_long_RANGE" (formula "12") (term "1,1,1,0,0,0,1,0,0"))
            (rule "replace_long_HALFRANGE" (formula "12") (term "0,0,1,1,0,0,0,1,0,0"))
            (rule "replace_long_MIN" (formula "12") (term "0,1,0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0,0"))
            (rule "polyMod_pullOut" (formula "12") (term "1,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,1,0,0,1,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "mod_axiom" (formula "12") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,0,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,1,0,0"))
            (rule "nnf_notAnd" (formula "13") (term "0,0"))
            (rule "expand_moduloLong" (formula "12") (term "1,0,0,1,0,0,1,0,0"))
            (rule "replace_long_MIN" (formula "12") (term "0,1,0,0,1,0,0,1,0,0"))
            (rule "replace_long_HALFRANGE" (formula "12") (term "0,0,1,1,0,0,1,0,0,1,0,0"))
            (rule "replace_long_RANGE" (formula "12") (term "1,1,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,1,0,0,1,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
            (rule "polyMod_pullOut" (formula "12") (term "1,0,0,1,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,1,0,0,1,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,1,0,0,1,0,0,1,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,1,0,0,1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,1,0,0,1,0,0,1,0,0"))
            (rule "mod_axiom" (formula "12") (term "1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,0,0,0,1,0,0,1,0,0"))
            (rule "polyDiv_pullOut" (formula "12") (term "0,1,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            mul(wordIndex, Z(4(6(#))))),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(1(#))))"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,2,0,1,0,0,1,0,0"))
            (rule "equal_literals" (formula "12") (term "0,0,1,0,0,1,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,1,0,0,1,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,0,0,1,0,0,1,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "12") (term "1,1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
            (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0,1,0,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "1,1,0,0,0,1,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,1,0,0"))
            (rule "nnf_notAnd" (formula "13") (term "1,0,0"))
            (rule "inEqSimp_notGeq" (formula "13") (term "1,1,0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0"))
            (rule "add_literals" (formula "13") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0,0"))
            (rule "mul_literals" (formula "13") (term "1,1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "13") (term "0,1,0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0"))
            (rule "add_literals" (formula "13") (term "0,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,1,0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,1,0,0"))
            (rule "nnf_imp2or" (formula "12") (term "0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "0,1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,1,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "1,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "0,1,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,1,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "1,1,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,1,1,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0,0,0,0"))
            (rule "div_axiom" (formula "3") (term "0,0") (inst "quotient=quotient_0"))
            (rule "mul_literals" (formula "3") (term "1,1,1,1,1"))
            (rule "qeq_literals" (formula "3") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "equal_literals" (formula "3") (term "0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "andLeft" (formula "3"))
            (rule "andLeft" (formula "3"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,1"))
            (rule "add_literals" (formula "5") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "5") (term "1"))
            (rule "add_literals" (formula "5") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
            (rule "polySimp_addComm1" (formula "4") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "5"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
            (rule "polySimp_addComm1" (formula "5") (term "0"))
            (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "6"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
            (rule "polySimp_addComm1" (formula "6") (term "0"))
            (rule "polySimp_addComm0" (formula "6") (term "0,0"))
            (rule "applyEq" (formula "1") (term "0,1,0,2,0") (ifseqformula "3"))
            (rule "polySimp_addComm1" (formula "1") (term "0,2,0"))
            (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq0" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "4"))
            (rule "polySimp_mulComm0" (formula "4") (term "1"))
            (rule "polySimp_rightDist" (formula "4") (term "1"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
            (rule "mul_literals" (formula "4") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5"))
            (rule "polySimp_mulComm0" (formula "5") (term "1"))
            (rule "polySimp_rightDist" (formula "5") (term "1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
            (rule "mul_literals" (formula "5") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6"))
            (rule "polySimp_mulComm0" (formula "6") (term "1"))
            (rule "polySimp_rightDist" (formula "6") (term "1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1"))
            (rule "polySimp_mulComm0" (formula "6") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1"))
            (rule "polySimp_rightDist" (formula "7") (term "1"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
            (rule "mul_literals" (formula "7") (term "0,1"))
            (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "7"))
            (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
            (rule "mul_literals" (formula "4") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
            (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
            (rule "add_literals" (formula "4") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
            (rule "add_literals" (formula "4") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "4") (term "1,0,0"))
            (rule "add_zero_right" (formula "4") (term "0,0"))
            (rule "qeq_literals" (formula "4") (term "0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "5"))
            (rule "mul_literals" (formula "11") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11"))
            (rule "polySimp_mulComm0" (formula "11") (term "1"))
            (rule "polySimp_rightDist" (formula "11") (term "1"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
            (rule "mul_literals" (formula "11") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
            (rule "polySimp_rightDist" (formula "6") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
            (rule "mul_literals" (formula "6") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "6") (term "0"))
            (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
            (rule "add_literals" (formula "6") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "6") (term "1,0,0"))
            (rule "add_zero_right" (formula "6") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "6"))
            (rule "mul_literals" (formula "6") (term "1"))
            (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "13"))
            (rule "polySimp_rightDist" (formula "6") (term "0,0"))
            (rule "mul_literals" (formula "6") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "6"))
            (rule "polySimp_mulComm0" (formula "6") (term "1"))
            (rule "polySimp_rightDist" (formula "6") (term "1"))
            (rule "mul_literals" (formula "6") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "4"))
            (rule "mul_literals" (formula "13") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0"))
            (rule "add_literals" (formula "13") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13"))
            (rule "mul_literals" (formula "13") (term "1"))
            (rule "elimGcdGeq_antec" (formula "13") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "13") (term "0,0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "polySimp_addLiterals" (formula "13") (term "0,0,0,0"))
            (rule "add_literals" (formula "13") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
            (rule "add_literals" (formula "13") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "13") (term "1,0,0"))
            (rule "add_zero_right" (formula "13") (term "0,0"))
            (rule "leq_literals" (formula "13") (term "0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "commute_or_2" (formula "19") (term "0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0"))
            (rule "arrayLengthNotNegative" (formula "15") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "2"))
            (rule "leq_literals" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "arrayLengthIsAnInt" (formula "2") (term "0"))
            (rule "expand_inInt" (formula "2"))
            (rule "replace_int_MAX" (formula "2") (term "1,0"))
            (rule "replace_int_MIN" (formula "2") (term "0,1"))
            (rule "andLeft" (formula "2"))
            (rule "inEqSimp_commuteLeq" (formula "3"))
            (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "4"))
            (rule "leq_literals" (formula "3") (term "0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "2"))
            (rule "polySimp_rightDist" (formula "13") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
            (rule "mul_literals" (formula "13") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "13") (term "0"))
            (rule "add_literals" (formula "13") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13"))
            (rule "mul_literals" (formula "13") (term "1"))
            (rule "inEqSimp_subsumption6" (formula "13") (ifseqformula "15"))
            (rule "times_zero_1" (formula "13") (term "1,1,0"))
            (rule "greater_literals" (formula "13") (term "0,0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "leq_literals" (formula "13") (term "0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "2"))
            (rule "polySimp_rightDist" (formula "7") (term "0,0"))
            (rule "mul_literals" (formula "7") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0"))
            (rule "add_literals" (formula "7") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "0"))
            (rule "elimGcdLeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
            (rule "leq_literals" (formula "7") (term "0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
            (rule "neg_literal" (formula "7") (term "0,0,0,0,0,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
            (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
            (rule "add_literals" (formula "7") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0"))
            (rule "qeq_literals" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_antiSymm" (formula "15") (ifseqformula "7"))
            (rule "applyEqRigid" (formula "14") (term "0,1,1") (ifseqformula "15"))
            (rule "times_zero_2" (formula "14") (term "1,1"))
            (rule "add_zero_right" (formula "14") (term "1"))
            (rule "applyEqRigid" (formula "15") (term "0") (ifseqformula "14"))
            (rule "qeq_literals" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "applyEqRigid" (formula "5") (term "0,1,1") (ifseqformula "14"))
            (rule "times_zero_2" (formula "5") (term "1,1"))
            (rule "add_zero_right" (formula "5") (term "1"))
            (rule "applyEq" (formula "9") (term "0,1,1") (ifseqformula "14"))
            (rule "times_zero_2" (formula "9") (term "1,1"))
            (rule "add_zero_right" (formula "9") (term "1"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "13"))
            (rule "leq_literals" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "applyEq" (formula "7") (term "0,1,1") (ifseqformula "12"))
            (rule "times_zero_2" (formula "7") (term "1,1"))
            (rule "add_zero_right" (formula "7") (term "1"))
            (rule "applyEqRigid" (formula "4") (term "1") (ifseqformula "11"))
            (rule "applyEqRigid" (formula "1") (term "0,1,0,0,2,0") (ifseqformula "11"))
            (rule "times_zero_2" (formula "1") (term "1,0,0,2,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,2,0"))
            (rule "applyEqRigid" (formula "6") (term "0,0,1") (ifseqformula "11"))
            (rule "times_zero_2" (formula "6") (term "0,1"))
            (rule "add_zero_left" (formula "6") (term "1"))
            (rule "commute_or" (formula "15") (term "1,0,0"))
            (rule "commute_or" (formula "14") (term "1,0,0,0"))
            (rule "commute_or" (formula "14") (term "1,0,0,0,0"))
            (rule "cnf_eqv" (formula "14") (term "1,0,0"))
            (rule "nnf_notAnd" (formula "14") (term "1,0,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "14") (term "0,1,0,1,0,0"))
            (rule "times_zero_1" (formula "14") (term "1,0,0,0,1,0,1,0,0"))
            (rule "add_zero_right" (formula "14") (term "0,0,0,1,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,1,0,1,0,0"))
            (rule "mul_literals" (formula "14") (term "1,0,1,0,1,0,0"))
            (rule "div_axiom" (formula "15") (term "0,1,1,1,1,0") (inst "quotient=quotient_1"))
            (rule "qeq_literals" (formula "15") (term "0,1,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "mul_literals" (formula "15") (term "1,1,1,1"))
            (rule "equal_literals" (formula "15") (term "0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,1"))
            (rule "add_literals" (formula "17") (term "0,0,1"))
            (rule "polySimp_addComm1" (formula "17") (term "1"))
            (rule "add_literals" (formula "17") (term "0,1"))
            (rule "inEqSimp_homoInEq0" (formula "16"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,0"))
            (rule "polySimp_addComm1" (formula "16") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "17"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,0"))
            (rule "polySimp_addComm1" (formula "17") (term "0"))
            (rule "applyEq" (formula "18") (term "0,1,1,1,1,0") (ifseqformula "15"))
            (rule "polySimp_addComm1" (formula "18") (term "1,1,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16"))
            (rule "polySimp_mulComm0" (formula "16") (term "1"))
            (rule "polySimp_rightDist" (formula "16") (term "1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
            (rule "mul_literals" (formula "16") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17"))
            (rule "polySimp_mulComm0" (formula "17") (term "1"))
            (rule "polySimp_rightDist" (formula "17") (term "1"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
            (rule "mul_literals" (formula "17") (term "0,1"))
            (rule "elimGcdLeq_antec" (formula "17") (inst "elimGcdRightDiv=add(Z(1(7(8(5(5(8(5(7(0(8(8(1(5(1(1(4(4(1(#))))))))))))))))))),
    mul(quotient_1,
        Z(4(4(7(1(1(7(1(5(1(6(7(3(0(3(2(8(8(2(#)))))))))))))))))))))") (inst "elimGcdLeftDiv=int::select(heap, self, BitSet::$wordsInUse)") (inst "elimGcd=Z(4(6(#)))"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0"))
            (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,1,0"))
            (rule "neg_literal" (formula "17") (term "0,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "17") (term "0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
            (rule "add_literals" (formula "17") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "17") (term "1,0,0"))
            (rule "add_zero_right" (formula "17") (term "0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
            (rule "polySimp_addComm1" (formula "17") (term "0,0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0"))
            (rule "add_literals" (formula "17") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "17") (term "1,0,0"))
            (rule "add_zero_right" (formula "17") (term "0,0"))
            (rule "qeq_literals" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcdRightDiv=add(Z(neglit(2(7(8(5(5(8(5(7(0(8(8(1(5(1(1(4(4(1(#)))))))))))))))))))),
    mul(quotient_1,
        Z(4(4(7(1(1(7(1(5(1(6(7(3(0(3(2(8(8(2(#)))))))))))))))))))))") (inst "elimGcdLeftDiv=int::select(heap, self, BitSet::$wordsInUse)") (inst "elimGcd=Z(4(6(#)))"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
            (rule "leq_literals" (formula "16") (term "0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
            (rule "add_literals" (formula "16") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "16") (term "1,0,0"))
            (rule "add_zero_right" (formula "16") (term "0,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
            (rule "polySimp_addComm1" (formula "16") (term "0,0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
            (rule "add_literals" (formula "16") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "16") (term "1,0,0"))
            (rule "add_zero_right" (formula "16") (term "0,0"))
            (rule "leq_literals" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "17"))
            (rule "mul_literals" (formula "11") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0"))
            (rule "add_literals" (formula "11") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11"))
            (rule "mul_literals" (formula "11") (term "1"))
            (rule "elimGcdGeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(4(4(7(1(1(7(1(5(1(6(7(3(0(3(2(8(8(2(#)))))))))))))))))))"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "11") (term "0,0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
            (rule "add_literals" (formula "11") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0"))
            (rule "add_zero_right" (formula "11") (term "0,0"))
            (rule "leq_literals" (formula "11") (term "0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "13"))
            (rule "polySimp_rightDist" (formula "17") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0"))
            (rule "mul_literals" (formula "17") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "17"))
            (rule "polySimp_mulComm0" (formula "17") (term "1"))
            (rule "polySimp_rightDist" (formula "17") (term "1"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1"))
            (rule "mul_literals" (formula "17") (term "0,1"))
            (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "5"))
            (rule "polySimp_rightDist" (formula "18") (term "0,0"))
            (rule "mul_literals" (formula "18") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "18") (term "0"))
            (rule "add_literals" (formula "18") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "18"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0"))
            (rule "elimGcdLeq_antec" (formula "18") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(4(4(7(1(1(7(1(5(1(6(7(3(0(3(2(8(8(2(#)))))))))))))))))))"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,1,0"))
            (rule "neg_literal" (formula "18") (term "0,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "18") (term "0,0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "polySimp_addLiterals" (formula "18") (term "0,0,0,0"))
            (rule "add_literals" (formula "18") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0"))
            (rule "add_literals" (formula "18") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "18") (term "1,0,0"))
            (rule "add_zero_right" (formula "18") (term "0,0"))
            (rule "qeq_literals" (formula "18") (term "0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "18"))
            (rule "applyEq" (formula "21") (term "0,1,1") (ifseqformula "11"))
            (rule "times_zero_2" (formula "21") (term "1,1"))
            (rule "add_zero_right" (formula "21") (term "1"))
            (rule "applyEq" (formula "19") (term "0") (ifseqformula "11"))
            (rule "leq_literals" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "applyEqRigid" (formula "19") (term "0,1,1") (ifseqformula "11"))
            (rule "times_zero_2" (formula "19") (term "1,1"))
            (rule "add_zero_right" (formula "19") (term "1"))
            (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
            (rule "qeq_literals" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "applyEqRigid" (formula "17") (term "0,1,1") (ifseqformula "11"))
            (rule "times_zero_2" (formula "17") (term "1,1"))
            (rule "add_zero_right" (formula "17") (term "1"))
            (rule "applyEq" (formula "20") (term "0,1,0,1,1,1,0") (ifseqformula "11"))
            (rule "times_zero_2" (formula "20") (term "1,0,1,1,1,0"))
            (rule "add_zero_right" (formula "20") (term "0,1,1,1,0"))
            (rule "applyEq" (formula "16") (term "1") (ifseqformula "11"))
            (rule "inEqSimp_subsumption0" (formula "19") (ifseqformula "5"))
            (rule "leq_literals" (formula "19") (term "0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "3"))
            (rule "leq_literals" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "12"))
            (rule "leq_literals" (formula "17") (term "0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "commute_or_2" (formula "15") (term "0,0,0,0,0,0"))
            (rule "commute_or" (formula "14") (term "0,0,0"))
            (rule "commute_or" (formula "18") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "17") (term "0,0"))
            (rule "shift_paren_or" (formula "15") (term "0,1,0,0"))
            (rule "cnf_rightDist" (formula "15") (term "1,1,0,0"))
            (rule "commute_or_2" (formula "14") (term "0,0"))
            (rule "cnf_rightDist" (formula "17") (term "0"))
            (rule "distr_forallAnd" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "commute_or_2" (formula "17") (term "0"))
            (rule "inEqSimp_or_subsumption3" (formula "17") (term "0"))
            (rule "qeq_literals" (formula "17") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "commute_or" (formula "18") (term "0"))
            (rule "shift_paren_or" (formula "19") (term "0,0,0"))
            (rule "cnf_rightDist" (formula "19") (term "0"))
            (rule "distr_forallAnd" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "commute_or" (formula "20") (term "0"))
            (rule "commute_or" (formula "14") (term "0,0,0,0"))
            (rule "commute_or" (formula "19") (term "0,0,0,0"))
            (rule "inEqSimp_or_subsumption0" (formula "19") (term "0,0,0,0"))
            (rule "qeq_literals" (formula "19") (term "0,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "commute_or" (formula "20") (term "0,0,0,0"))
            (rule "inEqSimp_or_subsumption0" (formula "20") (term "0,0,0,0"))
            (rule "qeq_literals" (formula "20") (term "0,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "commute_or_2" (formula "15") (term "0,0,0,0,0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "0,1") (ifseqformula "6"))
            (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "commute_or" (formula "16") (term "1,1,1,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "16") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0"))
            (rule "shift_paren_or" (formula "16") (term "0,0,0,0,0,0"))
            (rule "cnf_rightDist" (formula "16") (term "0,0"))
            (rule "distr_forallAnd" (formula "16") (term "0"))
            (rule "distr_forallAnd" (formula "16"))
            (rule "andLeft" (formula "16"))
            (rule "commute_or" (formula "17") (term "0,0"))
            (rule "shift_paren_or" (formula "16") (term "0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0"))
            (rule "cnf_rightDist" (formula "17") (term "0,0"))
            (rule "distr_forallAnd" (formula "17") (term "0"))
            (rule "distr_forallAnd" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "commute_or_2" (formula "18") (term "0,0"))
            (rule "commute_or_2" (formula "17") (term "0,0"))
            (rule "commute_or_2" (formula "17") (term "0,0,0"))
            (rule "shift_paren_or" (formula "18") (term "0,0,0"))
            (rule "commute_or_2" (formula "17") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0"))
            (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "17") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "17") (term "0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "17") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_or_subsumption3" (formula "17") (term "0,0,0,0,0"))
            (rule "qeq_literals" (formula "17") (term "0,1,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "shift_paren_or" (formula "18") (term "0,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "17") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_or_subsumption3" (formula "17") (term "0,0,0,0,0"))
            (rule "qeq_literals" (formula "17") (term "0,1,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "commute_or_2" (formula "17") (term "0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "17") (term "0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "17") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_or_tautInEq1" (formula "17") (term "0,0,0,0,0"))
            (rule "add_zero_right" (formula "17") (term "1,1,0,0,0,0,0"))
            (rule "qeq_literals" (formula "17") (term "1,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "shift_paren_or" (formula "16") (term "0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "17") (term "1,0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,0,0"))
            (rule "inEqSimp_or_subsumption1" (formula "16") (term "0,0,0,0,0,0,0"))
            (rule "qeq_literals" (formula "16") (term "0,1,0,0,0,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "shift_paren_or" (formula "17") (term "0,0,0,0,0,0,0"))
            (rule "inEqSimp_or_subsumption3" (formula "17") (term "0,0,0,0,0,0"))
            (rule "qeq_literals" (formula "17") (term "0,1,0,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,0"))
            (rule "inEqSimp_or_subsumption3" (formula "16") (term "0,0,0,0,0,0"))
            (rule "qeq_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "shift_paren_or" (formula "17") (term "0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "commute_or" (formula "16") (term "0,0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0,0,0,0"))
            (rule "inEqSimp_or_subsumption1" (formula "16") (term "0,0,0,0,0"))
            (rule "qeq_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "commute_or" (formula "17") (term "1,0,0,0,0,0,0,0,0"))
            (rule "allLeft" (formula "22") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, BitSet::$wordsInUse))"))
            (rule "inEqSimp_homoInEq0" (formula "22") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
            (rule "add_zero_left" (formula "22") (term "0,0,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "22") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,1,0,0"))
            (rule "mul_literals" (formula "22") (term "0,1,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,1,0,0"))
            (rule "add_literals" (formula "22") (term "0,0,1,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "22") (term "1,0"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,1,0"))
            (rule "polySimp_rightDist" (formula "22") (term "1,0,1,0"))
            (rule "mul_literals" (formula "22") (term "0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "22") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "22") (term "0,0,1,0"))
            (rule "inEqSimp_invertInEq1" (formula "22") (term "0,0,0"))
            (rule "times_zero_2" (formula "22") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "0,0,0,0"))
            (rule "polySimp_elimOne" (formula "22") (term "0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "22") (term "0,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "22") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "22") (term "0,1,0"))
            (rule "inEqSimp_contradInEq0" (formula "22") (term "1,0") (ifseqformula "14"))
            (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1,0"))
            (rule "add_literals" (formula "22") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "22") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "22") (term "0,0,1,0"))
            (rule "leq_literals" (formula "22") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_contradInEq0" (formula "22") (term "1,0") (ifseqformula "5"))
            (rule "qeq_literals" (formula "22") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "12"))
            (rule "qeq_literals" (formula "22") (term "0,0"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_contradInEq1" (formula "22") (ifseqformula "1"))
            (rule "qeq_literals" (formula "22") (term "0"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "closeFalse" (formula "22"))
         )
      )
   )
   (branch "Null Reference (x_arr_1 = null)"
       (builtin "One Step Simplification" (formula "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "blockThrow" (formula "9") (term "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "2"))
      (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "throwUnfold" (formula "9") (term "1") (inst "#v0=n"))
      (rule "variableDeclarationAssign" (formula "9") (term "1"))
      (rule "variableDeclaration" (formula "9") (term "1") (newnames "n"))
       (builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_NullPointerException,self_0,exc_0,heapAfter_NullPointerException,anon_heap_NullPointerException") (contract "java.lang.NullPointerException[java.lang.NullPointerException::NullPointerException()].JML normal_behavior operation contract.0"))
      (branch "Post (NullPointerException)"
          (builtin "One Step Simplification" (formula "8"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "notLeft" (formula "9"))
         (rule "assignment" (formula "19") (term "1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=java_lang_Throwable_message_0"))
         (rule "simplifySelectOfAnonEQ" (formula "11") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "17")) (ifInst ""  (formula "16")))
         (rule "applyEqReverse" (formula "12") (term "0") (ifseqformula "11"))
         (rule "hideAuxiliaryEq" (formula "11"))
         (rule "pullOutSelect" (formula "12") (term "0") (inst "selectSK=java_lang_Throwable_cause_0"))
         (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "17")) (ifInst ""  (formula "16")))
         (rule "applyEqReverse" (formula "13") (term "0") (ifseqformula "12"))
         (rule "hideAuxiliaryEq" (formula "12"))
         (rule "pullOutSelect" (formula "9") (term "0") (inst "selectSK=java_lang_Object_created__0"))
         (rule "simplifySelectOfAnonEQ" (formula "9") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "17")) (ifInst ""  (formula "16")))
         (rule "applyEqReverse" (formula "10") (term "0") (ifseqformula "9"))
         (rule "hideAuxiliaryEq" (formula "9"))
         (rule "commuteUnion" (formula "8") (term "1,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0") (ifseqformula "7"))
         (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "13"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "0") (ifseqformula "7"))
         (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "methodCallParamThrow" (formula "19") (term "1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "tryCatchThrow" (formula "19") (term "1"))
         (rule "ifElseUnfold" (formula "19") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_12"))
         (rule "equality_comparison_simple" (formula "19") (term "1"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "replace_known_right" (formula "19") (term "0,0,1,0") (ifseqformula "16"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "ifElseSplit" (formula "19"))
         (branch "if x_12 true"
             (builtin "One Step Simplification" (formula "20"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_12 false"
             (builtin "One Step Simplification" (formula "20"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "elim_double_block" (formula "19") (term "1"))
            (rule "ifElseSplit" (formula "19"))
            (branch "if n instanceof java.lang.Throwable true"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
               (rule "true_left" (formula "1"))
               (rule "variableDeclaration" (formula "19") (term "1") (newnames "e"))
               (rule "delete_unnecessary_cast" (formula "19") (term "1"))
                (builtin "One Step Simplification" (formula "20"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "19") (term "1"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "emptyModality" (formula "19") (term "1"))
               (rule "andRight" (formula "19"))
               (branch "Case 1"
                  (rule "andRight" (formula "19"))
                  (branch "Case 1"
                     (rule "andRight" (formula "19"))
                     (branch "Case 1"
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "mod_axiom" (formula "19") (term "1,2,0"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "1,1,2,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "2,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "0,2,0"))
                        (rule "add_literals" (formula "19") (term "0,0,2,0"))
                        (rule "polyDiv_pullOut" (formula "19") (term "0,1,2,0") (inst "polyDivCoeff=Z(1(#))"))
                        (rule "equal_literals" (formula "19") (term "0,0,1,2,0"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,0,1,2,0"))
                        (rule "mul_literals" (formula "19") (term "1,0,0,0,1,2,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,2,0"))
                        (rule "polySimp_addComm0" (formula "19") (term "1,1,2,0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0,1,1,1,2,0"))
                        (rule "add_literals" (formula "19") (term "0,0,1,1,1,2,0"))
                        (rule "polySimp_rightDist" (formula "19") (term "1,2,0"))
                        (rule "mul_literals" (formula "19") (term "0,1,2,0"))
                        (rule "polySimp_addAssoc" (formula "19") (term "2,0"))
                        (rule "polySimp_addComm1" (formula "19") (term "0,2,0"))
                        (rule "add_literals" (formula "19") (term "0,0,2,0"))
                        (rule "pullOutSelect" (formula "19") (term "1,0,0,0,0") (inst "selectSK=BitSet_iSet_0"))
                        (rule "applyEq" (formula "20") (term "0,1,0,2,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "20") (term "0,1,0,0,1,2,0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")) (ifInst ""  (formula "4")))
                        (rule "setEquality" (formula "1") (inst "n=n_1"))
                        (rule "elementOfUnion" (formula "1") (term "0,1,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,1,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "0,1,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "Class_invariant_axiom_for_BitSet" (formula "7") (inst "i_0=i_0") (inst "wordIndex=wordIndex") (inst "bitIndex=bitIndex") (inst "x=x_13") (inst "i=i") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "2")) (ifInst ""  (formula "18")))
                        (rule "closeFalse" (formula "7"))
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "Class_invariant_axiom_for_BitSet" (formula "19") (inst "i_0=i_0") (inst "wordIndex=wordIndex") (inst "bitIndex=bitIndex") (inst "x=x_13") (inst "i=i") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "translateJavaMulLong" (formula "19") (term "1,1,1,0,1,0"))
                        (rule "translateJavaMulLong" (formula "19") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "translateJavaSubInt" (formula "19") (term "0,2,0,0,1,1,0,0,0,0"))
                        (rule "translateJavaCastLong" (formula "19") (term "0,1,1,1,0,1,0"))
                        (rule "translateJavaCastLong" (formula "19") (term "0,0,0,0,1,0,0,1,0,0"))
                        (rule "andRight" (formula "19"))
                        (branch "Case 1"
                           (rule "andRight" (formula "19"))
                           (branch "Case 1"
                              (rule "andRight" (formula "19"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "19"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "19"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "19"))
                                       (branch "Case 1"
                                          (rule "notRight" (formula "19"))
                                          (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=BitSet_words_0"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")) (ifInst ""  (formula "5")))
                                          (rule "applyEq" (formula "1") (term "1") (ifseqformula "2"))
                                          (rule "ifEqualsNull" (formula "1"))
                                          (rule "replace_known_left" (formula "1") (term "1,1") (ifseqformula "3"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfUnion" (formula "1") (term "0,1"))
                                          (rule "elementOfSingleton" (formula "1") (term "1,0,1"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfSingleton" (formula "1") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "Class_invariant_axiom_for_BitSet" (formula "7") (inst "i=i") (inst "x=x_13") (inst "bitIndex=bitIndex") (inst "wordIndex=wordIndex") (inst "i_0=i_0") (ifseqformula "5"))
                                           (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "2")) (ifInst ""  (formula "18")))
                                          (rule "closeFalse" (formula "7"))
                                       )
                                       (branch "Case 2"
                                          (rule "andRight" (formula "19"))
                                          (branch "Case 1"
                                             (rule "inEqSimp_leqRight" (formula "19"))
                                             (rule "add_zero_right" (formula "1") (term "0"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=BitSet_wordsInUse_0"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")) (ifInst ""  (formula "5")))
                                             (rule "elementOfUnion" (formula "1") (term "0,0"))
                                             (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "inEqSimp_contradEq3" (formula "18") (ifseqformula "1"))
                                             (rule "mul_literals" (formula "18") (term "1,0,0"))
                                             (rule "add_literals" (formula "18") (term "0,0"))
                                             (rule "qeq_literals" (formula "18") (term "0"))
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "false_right" (formula "18"))
                                             (rule "Class_invariant_axiom_for_BitSet" (formula "7") (inst "i=i") (inst "x=x_13") (inst "bitIndex=bitIndex") (inst "wordIndex=wordIndex") (inst "i_0=i_0") (ifseqformula "5"))
                                              (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "2")))
                                             (rule "closeFalse" (formula "7"))
                                          )
                                          (branch "Case 2"
                                             (rule "inEqSimp_leqRight" (formula "19"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "pullOutSelect" (formula "1") (term "1,1") (inst "selectSK=BitSet_wordsInUse_0"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")) (ifInst ""  (formula "5")))
                                             (rule "elementOfUnion" (formula "1") (term "0,0"))
                                             (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "pullOutSelect" (formula "1") (term "0,0") (inst "selectSK=BitSet_words_0"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")) (ifInst ""  (formula "5")))
                                             (rule "inEqSimp_homoInEq0" (formula "2"))
                                             (rule "polySimp_addComm1" (formula "2") (term "0"))
                                             (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "3"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                             (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                             (rule "polySimp_rightDist" (formula "2") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                             (rule "mul_literals" (formula "2") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                             (rule "elementOfUnion" (formula "1") (term "0,0"))
                                             (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "applyEqReverse" (formula "2") (term "0,1,1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "Class_invariant_axiom_for_BitSet" (formula "7") (inst "i=i") (inst "x=x_13") (inst "bitIndex=bitIndex") (inst "wordIndex=wordIndex") (inst "i_0=i_0") (ifseqformula "5"))
                                              (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "2")) (ifInst ""  (formula "18")))
                                             (rule "closeFalse" (formula "7"))
                                          )
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "impRight" (formula "19"))
                                       (rule "notRight" (formula "20"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "pullOutSelect" (formula "1") (term "0,0,2,0") (inst "selectSK=BitSet_wordsInUse_0"))
                                       (rule "applyEq" (formula "17") (term "0") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")) (ifInst ""  (formula "5")))
                                       (rule "elementOfUnion" (formula "1") (term "0,0"))
                                       (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "17") (term "0") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "2") (term "0,0,2,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=BitSet_words_0"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")) (ifInst ""  (formula "5")))
                                       (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "3"))
                                       (rule "elementOfUnion" (formula "1") (term "0,0"))
                                       (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_0"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "2"))
                                       (rule "ifEqualsInteger" (formula "1"))
                                       (rule "elementOfUnion" (formula "1") (term "0,0,1"))
                                       (rule "elementOfSingleton" (formula "1") (term "1,0,0,1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0,1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "elementOfUnion" (formula "1") (term "0,0"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "expand_subJint" (formula "1") (term "0,2,0"))
                                       (rule "polySimp_elimSub" (formula "1") (term "0,0,2,0"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0,2,0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0,0,2,0"))
                                       (rule "expand_moduloInteger" (formula "1") (term "0,2,0"))
                                       (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0,2,0"))
                                       (rule "replace_int_RANGE" (formula "1") (term "1,1,0,2,0"))
                                       (rule "replace_int_MIN" (formula "1") (term "0,0,2,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,2,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,1,0,2,0"))
                                       (rule "mod_axiom" (formula "1") (term "1,0,2,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,2,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,2,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,2,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,2,0"))
                                       (rule "Class_invariant_axiom_for_BitSet" (formula "8") (inst "i=i") (inst "x=x_13") (inst "bitIndex=bitIndex") (inst "wordIndex=wordIndex") (inst "i_0=i_0") (ifseqformula "6"))
                                        (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "3")) (ifInst ""  (formula "19")))
                                       (rule "closeFalse" (formula "8"))
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "expand_inInt" (formula "19") (term "1,0,0"))
                                    (rule "replace_int_MAX" (formula "19") (term "1,0,1,0,0"))
                                    (rule "replace_int_MIN" (formula "19") (term "0,1,1,0,0"))
                                    (rule "allRight" (formula "19") (inst "sk=i_0_0"))
                                    (rule "impRight" (formula "19"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "inEqSimp_ltToLeq" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "4"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "pullOutSelect" (formula "23") (term "1,0") (inst "selectSK=BitSet_words_0"))
                                    (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "8")))
                                    (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "6"))
                                    (rule "elementOfUnion" (formula "1") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "24") (term "1,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=BitSet_wordsInUse_0"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "8")))
                                    (rule "inEqSimp_commuteLeq" (formula "2"))
                                    (rule "elementOfUnion" (formula "1") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "inEqSimp_commuteGeq" (formula "1"))
                                    (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=arr_0"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfUnion" (formula "1") (term "0,0"))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "24") (term "0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "Class_invariant_axiom_for_BitSet" (formula "10") (inst "i=i") (inst "x=x_13") (inst "bitIndex=bitIndex") (inst "wordIndex=wordIndex") (inst "i_0=i_0") (ifseqformula "8"))
                                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "5")) (ifInst ""  (formula "21")))
                                    (rule "closeFalse" (formula "10"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "expand_inInt" (formula "19") (term "1,0,0,0,0"))
                                 (rule "expand_inInt" (formula "19") (term "1,0,0,0"))
                                 (rule "replace_int_MIN" (formula "19") (term "0,1,1,0,0,0,0"))
                                 (rule "replace_int_MAX" (formula "19") (term "1,0,1,0,0,0,0"))
                                 (rule "replace_int_MIN" (formula "19") (term "0,1,1,0,0,0"))
                                 (rule "replace_int_MAX" (formula "19") (term "1,0,1,0,0,0"))
                                 (rule "allRight" (formula "19") (inst "sk=bitIndex_0"))
                                 (rule "allRight" (formula "19") (inst "sk=wordIndex_0"))
                                 (rule "impRight" (formula "19"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "3"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "translateJavaAddLong" (formula "27") (term "0,0"))
                                 (rule "bitAtDef" (formula "27") (term "0,1"))
                                 (rule "replace_known_left" (formula "27") (term "0,0,1") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_ltToLeq" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1,0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "2") (term "0"))
                                 (rule "inEqSimp_commuteLeq" (formula "8"))
                                 (rule "inEqSimp_commuteLeq" (formula "6"))
                                 (rule "inEqSimp_commuteLeq" (formula "3"))
                                 (rule "inEqSimp_commuteLeq" (formula "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "4"))
                                 (rule "leq_literals" (formula "7") (term "0"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "3"))
                                 (rule "leq_literals" (formula "7") (term "0"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "true_left" (formula "7"))
                                 (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "1"))
                                 (rule "leq_literals" (formula "6") (term "0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "true_left" (formula "6"))
                                 (rule "pullOutSelect" (formula "24") (term "1,0,0,0,1") (inst "selectSK=BitSet_words_0"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "9")))
                                 (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "7"))
                                 (rule "elementOfUnion" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "25") (term "1,0,0,0,1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "24") (term "1,0") (inst "selectSK=BitSet_iSet_0"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "9")))
                                 (rule "setEquality" (formula "1") (inst "n=n_1"))
                                 (rule "elementOfUnion" (formula "1") (term "0,1,0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,1,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=BitSet_wordsInUse_0"))
                                 (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "25")) (ifInst ""  (formula "10")))
                                 (rule "inEqSimp_homoInEq1" (formula "4"))
                                 (rule "polySimp_addComm1" (formula "4") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1"))
                                 (rule "mul_literals" (formula "4") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                 (rule "elementOfUnion" (formula "3") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "elementOfSingleton" (formula "3") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "inEqSimp_homoInEq0" (formula "3"))
                                 (rule "polySimp_addComm1" (formula "3") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1"))
                                 (rule "mul_literals" (formula "3") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                 (rule "pullOutSelect" (formula "25") (term "0,0,0,1") (inst "selectSK=arr_0"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1") (term "0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "26") (term "0,0,0,1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "expand_addJlong" (formula "25") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "25") (term "0,0,0"))
                                 (rule "expand_moduloLong" (formula "25") (term "0,0"))
                                 (rule "replace_long_HALFRANGE" (formula "25") (term "0,0,1,0,0"))
                                 (rule "replace_long_RANGE" (formula "25") (term "1,1,0,0"))
                                 (rule "replace_long_MIN" (formula "25") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,1,0,0"))
                                 (rule "mod_axiom" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "25") (term "0,0,0,0"))
                                 (rule "expand_mulJlong" (formula "25") (term "1,0,0,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                                 (rule "expand_moduloLong" (formula "25") (term "1,0,0,1,0,0,0"))
                                 (rule "replace_long_HALFRANGE" (formula "25") (term "0,0,1,1,0,0,1,0,0,0"))
                                 (rule "replace_long_MIN" (formula "25") (term "0,1,0,0,1,0,0,0"))
                                 (rule "replace_long_RANGE" (formula "25") (term "1,1,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0,0"))
                                 (rule "add_zero_left" (formula "25") (term "0,0,0,1,0,0,0"))
                                 (rule "mod_axiom" (formula "25") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "25") (term "0,0,0,0,1,0,0,0"))
                                 (rule "polyDiv_pullOut" (formula "25") (term "0,1,0,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            mul(moduloLong(wordIndex_0), Z(4(6(#))))),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(1(#))))"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,2,0,1,0,0,0"))
                                 (rule "equal_literals" (formula "25") (term "0,0,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,0,1,0,0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "25") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,0"))
                                 (rule "expand_moduloLong" (formula "25") (term "0,1,0,0"))
                                 (rule "replace_long_MIN" (formula "25") (term "0,0,1,0,0"))
                                 (rule "replace_long_RANGE" (formula "25") (term "1,1,0,1,0,0"))
                                 (rule "replace_long_HALFRANGE" (formula "25") (term "0,0,1,0,1,0,0"))
                                 (rule "mod_axiom" (formula "25") (term "1,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,1,0,0"))
                                 (rule "add_zero_left" (formula "25") (term "0,0,1,0,0"))
                                 (rule "expand_moduloLong" (formula "25") (term "0,1,0,0,1,0,0,0,0"))
                                 (rule "replace_long_HALFRANGE" (formula "25") (term "0,0,1,0,1,0,0,1,0,0,0,0"))
                                 (rule "replace_long_MIN" (formula "25") (term "0,0,1,0,0,1,0,0,0,0"))
                                 (rule "replace_long_RANGE" (formula "25") (term "1,1,0,1,0,0,1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0"))
                                 (rule "mod_axiom" (formula "25") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,0,1,0,0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0,0,0"))
                                 (rule "polyDiv_pullOut" (formula "25") (term "0,1,0,0,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex_0),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,2,0,1,0,0,0,0"))
                                 (rule "equal_literals" (formula "25") (term "0,0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,0,1,0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,0,0,1,0,0,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,0,1,0,0,0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,0,1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "25") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0"))
                                 (rule "expand_moduloLong" (formula "25") (term "0,1,0,0,1,0,0,0"))
                                 (rule "replace_long_MIN" (formula "25") (term "0,0,1,0,0,1,0,0,0"))
                                 (rule "replace_long_HALFRANGE" (formula "25") (term "0,0,1,0,1,0,0,1,0,0,0"))
                                 (rule "replace_long_RANGE" (formula "25") (term "1,1,0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,0,1,0,0,0"))
                                 (rule "mod_axiom" (formula "25") (term "0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0,1,0,0,0"))
                                 (rule "mul_literals" (formula "25") (term "0,0,1,0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,0,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,0,0,1,0,0,0"))
                                 (rule "polyDiv_pullOut" (formula "25") (term "0,1,0,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex_0),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,2,0,1,0,0,0"))
                                 (rule "equal_literals" (formula "25") (term "0,0,1,0,0,0"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,0,1,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,0,0,1,0,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,0,1,0,0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "25") (term "1,1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
                                 (rule "polySimp_mulAssoc" (formula "25") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "0,1,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,0,0,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,0,0,0"))
                                 (rule "expand_mulJlong" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "0,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "25") (term "0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,0,0"))
                                 (rule "expand_moduloLong" (formula "25") (term "1,0,0"))
                                 (rule "replace_long_RANGE" (formula "25") (term "1,1,1,0,0"))
                                 (rule "replace_long_HALFRANGE" (formula "25") (term "0,0,1,1,0,0"))
                                 (rule "replace_long_MIN" (formula "25") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,1,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,0,0,0"))
                                 (rule "polySimp_addComm0" (formula "25") (term "0,0,0,0,0"))
                                 (rule "polyMod_pullOut" (formula "25") (term "1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex_0),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,1,0,0"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,1,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,1,0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,1,0,0"))
                                 (rule "mod_axiom" (formula "25") (term "1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,0,0,0"))
                                 (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0,0"))
                                 (rule "add_literals" (formula "25") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "25") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "25") (term "0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "25") (term "0,0,0"))
                                 (rule "polySimp_addComm1" (formula "25") (term "0,0,0,0"))
                                 (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "25") (term "0,0,0,0"))
                                 (rule "cnf_eqv" (formula "1") (term "0"))
                                 (rule "distr_forallAnd" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "Class_invariant_axiom_for_BitSet" (formula "13") (inst "i=i") (inst "x=x_13") (inst "bitIndex=bitIndex") (inst "wordIndex=wordIndex") (inst "i_0=i_0") (ifseqformula "11"))
                                  (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "8")) (ifInst ""  (formula "24")))
                                 (rule "closeFalse" (formula "13"))
                              )
                           )
                           (branch "Case 2"
                              (rule "expand_inLong" (formula "19") (term "1,0,0"))
                              (rule "replace_long_MAX" (formula "19") (term "1,0,1,0,0"))
                              (rule "replace_long_MIN" (formula "19") (term "0,1,1,0,0"))
                              (rule "allRight" (formula "19") (inst "sk=x_13_0"))
                              (rule "impRight" (formula "19"))
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "2"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                              (rule "polySimp_addComm1" (formula "22") (term "0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "22") (term "0"))
                              (rule "inEqSimp_commuteLeq" (formula "3"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "22") (term "0,1"))
                              (rule "pullOutSelect" (formula "1") (term "1") (inst "selectSK=BitSet_iSet_0"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")) (ifInst ""  (formula "7")))
                              (rule "setEquality" (formula "1") (inst "n=n_1"))
                              (rule "elementOfUnion" (formula "1") (term "0,1,0,0"))
                              (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "0,1,0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "pullOutSelect" (formula "23") (term "0,0,0,1") (inst "selectSK=BitSet_wordsInUse_0"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "8")))
                              (rule "elementOfUnion" (formula "1") (term "0,0"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "24") (term "0,0,0,1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "expand_mulJlong" (formula "23") (term "0,1"))
                              (rule "expand_moduloLong" (formula "23") (term "0,0,0,1"))
                              (rule "replace_long_RANGE" (formula "23") (term "1,1,0,0,0,1"))
                              (rule "replace_long_HALFRANGE" (formula "23") (term "0,0,1,0,0,0,1"))
                              (rule "replace_long_MIN" (formula "23") (term "0,0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "23") (term "0,0,1"))
                              (rule "polySimp_rightDist" (formula "23") (term "0,0,1"))
                              (rule "mul_literals" (formula "23") (term "0,0,0,1"))
                              (rule "mod_axiom" (formula "23") (term "0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,1"))
                              (rule "mul_literals" (formula "23") (term "0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "23") (term "0,0,1"))
                              (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1"))
                              (rule "add_literals" (formula "23") (term "0,0,0,0,1"))
                              (rule "add_zero_left" (formula "23") (term "0,0,0,1"))
                              (rule "expand_moduloLong" (formula "23") (term "0,1"))
                              (rule "replace_long_RANGE" (formula "23") (term "1,1,0,1"))
                              (rule "replace_long_MIN" (formula "23") (term "0,0,1"))
                              (rule "replace_long_HALFRANGE" (formula "23") (term "0,0,1,0,1"))
                              (rule "polySimp_addAssoc" (formula "23") (term "0,1,0,1"))
                              (rule "inEqSimp_homoInEq1" (formula "23") (term "1"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,0,1"))
                              (rule "mul_literals" (formula "23") (term "0,1,0,1"))
                              (rule "polySimp_addAssoc" (formula "23") (term "0,1"))
                              (rule "polySimp_addComm1" (formula "23") (term "0,0,1"))
                              (rule "add_literals" (formula "23") (term "0,0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "23") (term "0,1"))
                              (rule "polyMod_pullOut" (formula "23") (term "0,1") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            int::select(heap,
                        self,
                        BitSet::$wordsInUse)),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,1"))
                              (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0,1"))
                              (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "23") (term "0,0,1"))
                              (rule "mod_axiom" (formula "23") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1"))
                              (rule "inEqSimp_homoInEq1" (formula "23") (term "1"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,1"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1"))
                              (rule "polySimp_rightDist" (formula "23") (term "0,1,0,1"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,1"))
                              (rule "mul_literals" (formula "23") (term "0,0,1,0,1"))
                              (rule "polySimp_addAssoc" (formula "23") (term "0,1"))
                              (rule "polySimp_addAssoc" (formula "23") (term "0,0,1"))
                              (rule "polySimp_addComm1" (formula "23") (term "0,0,0,1"))
                              (rule "add_literals" (formula "23") (term "0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,1"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1"))
                              (rule "polySimp_rightDist" (formula "23") (term "0,1,1"))
                              (rule "mul_literals" (formula "23") (term "0,0,1,1"))
                              (rule "Class_invariant_axiom_for_BitSet" (formula "10") (inst "i=i") (inst "x=x_13") (inst "bitIndex=bitIndex") (inst "wordIndex=wordIndex") (inst "i_0=i_0") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "5")) (ifInst ""  (formula "21")))
                              (rule "closeFalse" (formula "10"))
                           )
                        )
                        (branch "Case 2"
                           (rule "expand_inInt" (formula "19") (term "1,0,0"))
                           (rule "replace_int_MAX" (formula "19") (term "1,0,1,0,0"))
                           (rule "replace_int_MIN" (formula "19") (term "0,1,1,0,0"))
                           (rule "allRight" (formula "19") (inst "sk=i_0"))
                           (rule "impRight" (formula "19"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "3"))
                           (rule "inEqSimp_ltToLeq" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "23") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "1"))
                           (rule "inEqSimp_commuteLeq" (formula "4"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
                           (rule "leq_literals" (formula "4") (term "0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "pullOutSelect" (formula "22") (term "0,1") (inst "selectSK=arr_0"))
                           (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "12"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                           (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "pullOutSelect" (formula "3") (term "0,0") (inst "selectSK=BitSet_words_0"))
                           (rule "applyEq" (formula "1") (term "1,1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "1") (term "1,2,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "1") (term "0,0,0,0,0") (ifseqformula "3"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "13"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "23")) (ifInst ""  (formula "8")))
                           (rule "applyEq" (formula "3") (term "2,0") (ifseqformula "6"))
                           (rule "elementOfUnion" (formula "3") (term "0,0"))
                           (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "elementOfSingleton" (formula "3") (term "0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "3"))
                           (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "24") (term "0,1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "Class_invariant_axiom_for_BitSet" (formula "9") (inst "i=i") (inst "x=x_13") (inst "bitIndex=bitIndex") (inst "wordIndex=wordIndex") (inst "i_0=i_0") (ifseqformula "7"))
                            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "4")) (ifInst ""  (formula "20")))
                           (rule "closeFalse" (formula "9"))
                        )
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "16")))
                     (rule "false_right" (formula "19"))
                     (rule "Class_invariant_axiom_for_BitSet" (formula "6") (inst "i_0=i_0") (inst "wordIndex=wordIndex") (inst "bitIndex=bitIndex") (inst "x=x_13") (inst "i=i") (ifseqformula "4"))
                      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "1")) (ifInst ""  (formula "17")))
                     (rule "closeFalse" (formula "6"))
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "allRight" (formula "19") (inst "sk=f_0"))
                  (rule "allRight" (formula "19") (inst "sk=o_0"))
                  (rule "eqSymm" (formula "19"))
                  (rule "pullOutSelect" (formula "19") (term "0") (inst "selectSK=f_0_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "eqSymm" (formula "20"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                  (rule "Class_invariant_axiom_for_BitSet" (formula "7") (inst "i_0=i_0") (inst "wordIndex=wordIndex") (inst "bitIndex=bitIndex") (inst "x=x_13") (inst "i=i") (ifseqformula "5"))
                   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "2")) (ifInst ""  (formula "18")))
                  (rule "closeFalse" (formula "7"))
               )
            )
            (branch "if n instanceof java.lang.Throwable false"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Exceptional Post (NullPointerException)"
          (builtin "One Step Simplification" (formula "11"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "13"))
         (rule "notLeft" (formula "9"))
         (rule "close" (formula "16") (ifseqformula "15"))
      )
      (branch "Pre (NullPointerException)"
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "2")))
         (rule "closeTrue" (formula "9"))
      )
   )
   (branch "Index Out of Bounds (x_arr_1 != null, but x_10 Out of Bounds!)"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
      (rule "blockThrow" (formula "10") (term "1"))
      (rule "expand_subJint" (formula "1") (term "0,1"))
      (rule "polySimp_elimSub" (formula "1") (term "0,0,1"))
      (rule "mul_literals" (formula "1") (term "1,0,0,1"))
      (rule "polySimp_addComm0" (formula "1") (term "0,0,1"))
      (rule "expand_subJint" (formula "1") (term "0,0"))
      (rule "polySimp_elimSub" (formula "1") (term "0,0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0,0,0"))
      (rule "expand_moduloInteger" (formula "1") (term "0,1"))
      (rule "replace_int_MIN" (formula "1") (term "0,0,1"))
      (rule "replace_int_RANGE" (formula "1") (term "1,1,0,1"))
      (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0,1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,1"))
      (rule "add_literals" (formula "1") (term "0,0,1,0,1"))
      (rule "expand_moduloInteger" (formula "1") (term "0,0"))
      (rule "replace_int_RANGE" (formula "1") (term "1,1,0,0"))
      (rule "replace_int_MIN" (formula "1") (term "0,0,0"))
      (rule "replace_int_HALFRANGE" (formula "1") (term "0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,1,0,0"))
      (rule "commute_or" (formula "1"))
      (rule "arrayLengthNotNegative" (formula "1") (term "1,1"))
      (rule "arrayLengthIsAnInt" (formula "2") (term "1,1"))
      (rule "expand_inInt" (formula "2"))
      (rule "replace_int_MAX" (formula "2") (term "1,0"))
      (rule "replace_int_MIN" (formula "2") (term "0,1"))
      (rule "andLeft" (formula "2"))
      (rule "inEqSimp_commuteLeq" (formula "3"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0,1,1") (ifseqformula "5"))
      (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "throwUnfold" (formula "14") (term "1") (inst "#v0=a"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "a"))
      (rule "instanceCreationAssignment" (formula "14") (term "1") (inst "#v0=a_1"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "a_1"))
      (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "14") (term "1") (inst "#v0=a_2"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "a_2"))
      (rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "__NEW__"))
      (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "14") (term "1") (inst "#v0=a_3"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "a_3"))
      (rule "allocateInstance" (formula "14"))
       (builtin "One Step Simplification" (formula "15"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "blockEmpty" (formula "17") (term "1"))
      (rule "assignment" (formula "17") (term "1"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "assignment_write_attribute_this" (formula "17") (term "1"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallWithinClass" (formula "17") (term "1"))
      (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallSuper" (formula "17") (term "1"))
      (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallSuper" (formula "17") (term "1"))
      (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallSuper" (formula "17") (term "1"))
      (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallSuper" (formula "17") (term "1"))
      (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallSuper" (formula "17") (term "1"))
      (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<prepare>_3,savedHeapBefore_<prepare>_3"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallEmpty" (formula "17") (term "1"))
      (rule "blockEmpty" (formula "17") (term "1"))
      (rule "assignment_write_attribute_this" (formula "17") (term "1"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "assignment_write_attribute_this" (formula "17") (term "1"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallEmpty" (formula "17") (term "1"))
      (rule "methodCallEmpty" (formula "17") (term "1"))
      (rule "methodCallEmpty" (formula "17") (term "1"))
      (rule "methodCallEmpty" (formula "17") (term "1"))
      (rule "methodCallEmpty" (formula "17") (term "1"))
      (rule "blockEmpty" (formula "17") (term "1"))
      (rule "methodCallReturnIgnoreResult" (formula "17") (term "1"))
      (rule "methodCallReturn" (formula "17") (term "1"))
      (rule "assignment" (formula "17") (term "1"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallEmpty" (formula "17") (term "1"))
      (rule "blockEmpty" (formula "17") (term "1"))
      (rule "assignment" (formula "17") (term "1"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallSuper" (formula "17") (term "1"))
      (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallSuper" (formula "17") (term "1"))
      (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallSuper" (formula "17") (term "1"))
      (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallSuper" (formula "17") (term "1"))
      (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallSuper" (formula "17") (term "1"))
      (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_<init>_4,savedHeapBefore_<init>_4"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallEmpty" (formula "17") (term "1"))
      (rule "blockEmpty" (formula "17") (term "1"))
      (rule "assignment_write_attribute_this" (formula "17") (term "1"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "assignment_write_attribute_this" (formula "17") (term "1"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "methodCallEmpty" (formula "17") (term "1"))
      (rule "methodCallEmpty" (formula "17") (term "1"))
      (rule "methodCallEmpty" (formula "17") (term "1"))
      (rule "methodCallEmpty" (formula "17") (term "1"))
      (rule "methodCallEmpty" (formula "17") (term "1"))
      (rule "blockEmpty" (formula "17") (term "1"))
      (rule "assignment_write_attribute" (formula "17") (term "1"))
      (branch "Normal Execution (a_1 != null)"
          (builtin "One Step Simplification" (formula "18"))
          (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "13")))
         (rule "false_right" (formula "17"))
         (rule "assignment" (formula "17") (term "1"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "methodCallParamThrow" (formula "17") (term "1"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "tryCatchThrow" (formula "17") (term "1"))
         (rule "ifElseUnfold" (formula "17") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_12"))
         (rule "equality_comparison_simple" (formula "17") (term "1"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "replace_known_right" (formula "17") (term "0,0,1,0") (ifseqformula "13"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "ifElseSplit" (formula "17"))
         (branch "if x_12 true"
             (builtin "One Step Simplification" (formula "18"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_12 false"
             (builtin "One Step Simplification" (formula "18"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "elim_double_block" (formula "17") (term "1"))
            (rule "ifElseSplit" (formula "17"))
            (branch "if a instanceof java.lang.Throwable true"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
               (rule "true_left" (formula "1"))
               (rule "variableDeclaration" (formula "17") (term "1") (newnames "e"))
               (rule "delete_unnecessary_cast" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "18"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "17") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "emptyModality" (formula "17") (term "1"))
               (rule "andRight" (formula "17"))
               (branch "Case 1"
                  (rule "andRight" (formula "17"))
                  (branch "Case 1"
                     (rule "andRight" (formula "17"))
                     (branch "Case 1"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,1,2,0"))
                        (rule "dismissNonSelectedField" (formula "17") (term "1,0,0,0,0"))
                        (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,1,2,0"))
                        (rule "dismissNonSelectedField" (formula "17") (term "1,0,0,0,0"))
                        (rule "dismissNonSelectedField" (formula "17") (term "0,1,0,1,2,0"))
                        (rule "dismissNonSelectedField" (formula "17") (term "1,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "0"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "6") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                        (rule "add_literals" (formula "6") (term "0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "6") (term "1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,1"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "6") (term "0,0,1"))
                        (rule "mod_axiom" (formula "17") (term "1,2,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,2,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "2,0"))
                        (rule "polySimp_addAssoc" (formula "17") (term "0,2,0"))
                        (rule "add_literals" (formula "17") (term "0,0,2,0"))
                        (rule "mod_axiom" (formula "6") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0,0"))
                        (rule "add_literals" (formula "6") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "6") (term "0,0,0"))
                        (rule "mod_axiom" (formula "6") (term "0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "0,1,0,1"))
                        (rule "mul_literals" (formula "6") (term "0,0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "0,1,1"))
                        (rule "mul_literals" (formula "6") (term "0,0,1,1"))
                        (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                        (rule "leq_literals" (formula "4") (term "0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "polyDiv_pullOut" (formula "16") (term "0,1,2,0") (inst "polyDivCoeff=Z(1(#))"))
                        (rule "equal_literals" (formula "16") (term "0,0,1,2,0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,1,2,0"))
                        (rule "mul_literals" (formula "16") (term "1,0,0,0,1,2,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,2,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0,0,1,1,2,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,1,1,2,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "1,1,2,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,2,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,2,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "2,0"))
                        (rule "polySimp_addComm1" (formula "16") (term "0,2,0"))
                        (rule "add_literals" (formula "16") (term "0,0,2,0"))
                        (rule "pullOutSelect" (formula "16") (term "1,0,0,0,0") (inst "selectSK=BitSet_iSet_0"))
                        (rule "applyEq" (formula "17") (term "0,1,0,0,1,2,0") (ifseqformula "1"))
                        (rule "applyEq" (formula "17") (term "0,1,0,2,0") (ifseqformula "1"))
                        (rule "simplifySelectOfCreate" (formula "1"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                        (rule "applyEqReverse" (formula "17") (term "1,0,0,0,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "17") (term "0,1,0,0,1,2,0") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "17") (term "0,1,0,2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "Class_invariant_axiom_for_BitSet" (formula "10") (inst "i_0=i_0") (inst "wordIndex=wordIndex") (inst "bitIndex=bitIndex") (inst "x=x_13") (inst "i=i") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "notLeft" (formula "12"))
                        (rule "translateJavaCastLong" (formula "14") (term "0,1,1,1,0"))
                        (rule "translateJavaCastLong" (formula "13") (term "0,0,0,0,1,0,0"))
                        (rule "translateJavaSubInt" (formula "16") (term "0,2,0"))
                        (rule "translateJavaMulLong" (formula "14") (term "1,1,1,0"))
                        (rule "translateJavaMulLong" (formula "13") (term "0,0,0,1,0,0"))
                        (rule "expand_inInt" (formula "12") (term "1,0,0"))
                        (rule "expand_inInt" (formula "13") (term "1,0,0,0,0"))
                        (rule "expand_inInt" (formula "13") (term "1,0,0,0"))
                        (rule "expand_inLong" (formula "14") (term "1,0,0"))
                        (rule "expand_inInt" (formula "15") (term "1,0,0"))
                        (rule "replace_int_MIN" (formula "12") (term "0,1,1,0,0"))
                        (rule "replace_int_MAX" (formula "12") (term "1,0,1,0,0"))
                        (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,0,0"))
                        (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,0,0"))
                        (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,0"))
                        (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,0"))
                        (rule "replace_long_MIN" (formula "14") (term "0,1,1,0,0"))
                        (rule "replace_long_MAX" (formula "14") (term "1,0,1,0,0"))
                        (rule "replace_int_MIN" (formula "15") (term "0,1,1,0,0"))
                        (rule "replace_int_MAX" (formula "15") (term "1,0,1,0,0"))
                        (rule "translateJavaAddLong" (formula "13") (term "0,0,1,0,0"))
                        (rule "bitAtDef" (formula "13") (term "0,1,1,0,0"))
                        (rule "ifEqualsInteger" (formula "13") (term "1,1,0,0"))
                        (rule "equal_literals" (formula "13") (term "1,1,1,1,0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "0,1,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_strengthen1" (formula "10") (ifseqformula "20"))
                        (rule "add_zero_right" (formula "10") (term "1"))
                        (rule "inEqSimp_contradEq7" (formula "20") (ifseqformula "10"))
                        (rule "times_zero_1" (formula "20") (term "1,0,0"))
                        (rule "add_zero_right" (formula "20") (term "0,0"))
                        (rule "leq_literals" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "false_right" (formula "20"))
                        (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "11"))
                        (rule "mul_literals" (formula "10") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                        (rule "mul_literals" (formula "10") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "10"))
                        (rule "leq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "expand_subJint" (formula "16") (term "0,2,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "0,0,2,0"))
                        (rule "mul_literals" (formula "16") (term "1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,0,2,0"))
                        (rule "expand_moduloLong" (formula "13") (term "0,0,0,0,1,0,0"))
                        (rule "replace_long_RANGE" (formula "13") (term "1,1,0,0,0,0,1,0,0"))
                        (rule "replace_long_HALFRANGE" (formula "13") (term "0,0,1,0,0,0,0,1,0,0"))
                        (rule "replace_long_MIN" (formula "13") (term "0,0,0,0,0,1,0,0"))
                        (rule "mod_axiom" (formula "13") (term "1,0,0,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,1,0,0"))
                        (rule "expand_moduloLong" (formula "14") (term "0,1,1,1,1,0"))
                        (rule "replace_long_HALFRANGE" (formula "14") (term "0,0,1,0,1,1,1,1,0"))
                        (rule "replace_long_MIN" (formula "14") (term "0,0,1,1,1,1,0"))
                        (rule "replace_long_RANGE" (formula "14") (term "1,1,0,1,1,1,1,0"))
                        (rule "mod_axiom" (formula "14") (term "1,0,1,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,1,1,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,1,1,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,1,1,1,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,1,1,1,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,1,1,1,1,0"))
                        (rule "nnf_imp2or" (formula "15") (term "0"))
                        (rule "nnf_imp2or" (formula "12") (term "0"))
                        (rule "expand_moduloInteger" (formula "16") (term "0,2,0"))
                        (rule "replace_int_RANGE" (formula "16") (term "1,1,0,2,0"))
                        (rule "replace_int_HALFRANGE" (formula "16") (term "0,0,1,0,2,0"))
                        (rule "replace_int_MIN" (formula "16") (term "0,0,2,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,1,0,2,0"))
                        (rule "add_literals" (formula "16") (term "0,0,1,0,2,0"))
                        (rule "mod_axiom" (formula "16") (term "1,0,2,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,2,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,2,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,2,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,2,0"))
                        (rule "expand_addJlong" (formula "13") (term "0,0,1,0,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,0,0,1,0,0"))
                        (rule "expand_mulJlong" (formula "14") (term "1,1,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,1,1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,1,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,1,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,1,1,1,0"))
                        (rule "expand_mulJlong" (formula "13") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "expand_moduloLong" (formula "14") (term "1,1,1,1,0"))
                        (rule "replace_long_HALFRANGE" (formula "14") (term "0,0,1,1,1,1,1,0"))
                        (rule "replace_long_RANGE" (formula "14") (term "1,1,1,1,1,1,0"))
                        (rule "replace_long_MIN" (formula "14") (term "0,1,1,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,1,1,1,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "1,1,1,0"))
                        (rule "add_literals" (formula "14") (term "0,1,1,1,0"))
                        (rule "polyMod_pullOut" (formula "14") (term "1,1,1,1,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            int::select(heap,
                        self,
                        BitSet::$wordsInUse)),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,1,1,1,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,1,1,1,1,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,1,1,1,1,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,1,1,1,1,0"))
                        (rule "add_zero_right" (formula "14") (term "0,1,1,1,1,0"))
                        (rule "mod_axiom" (formula "14") (term "1,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "1,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,1,1,1,0"))
                        (rule "add_literals" (formula "14") (term "0,0,1,1,1,0"))
                        (rule "nnf_notAnd" (formula "15") (term "0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0"))
                        (rule "expand_moduloLong" (formula "13") (term "1,0,0,0,1,0,0"))
                        (rule "replace_long_RANGE" (formula "13") (term "1,1,1,0,0,0,1,0,0"))
                        (rule "replace_long_MIN" (formula "13") (term "0,1,0,0,0,1,0,0"))
                        (rule "replace_long_HALFRANGE" (formula "13") (term "0,0,1,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,1,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,1,0,0"))
                        (rule "polyMod_pullOut" (formula "13") (term "1,0,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "1,1,0,1,0,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0,1,0,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,1,0,0,0,1,0,0"))
                        (rule "mod_axiom" (formula "13") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,1,0,0"))
                        (rule "nnf_imp2or" (formula "14") (term "0"))
                        (rule "expand_moduloLong" (formula "13") (term "0,0,1,0,0"))
                        (rule "replace_long_RANGE" (formula "13") (term "1,1,0,0,1,0,0"))
                        (rule "replace_long_HALFRANGE" (formula "13") (term "0,0,1,0,0,1,0,0"))
                        (rule "replace_long_MIN" (formula "13") (term "0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0,0"))
                        (rule "polyMod_pullOut" (formula "13") (term "1,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            mul(wordIndex, Z(4(6(#))))),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(1(#))))"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,1,0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "1,1,0,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0,1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,1,0,0,1,0,0"))
                        (rule "mod_axiom" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,0,0,1,0,0"))
                        (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0"))
                        (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0"))
                        (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "15") (term "1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "15") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,1,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,1,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0"))
                        (rule "nnf_imp2or" (formula "13") (term "0,0"))
                        (rule "nnf_notAnd" (formula "14") (term "1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,1,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "13") (term "0,1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "13") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,1,0,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "1,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "13") (term "1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,1,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,1,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "13") (term "0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,0,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,0,0,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "div_axiom" (formula "4") (term "0,0,0") (inst "quotient=quotient_0"))
                        (rule "equal_literals" (formula "4") (term "0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "qeq_literals" (formula "4") (term "0,1"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "mul_literals" (formula "4") (term "1,1,1"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEq" (formula "19") (term "0,1,0,2,0") (ifseqformula "4"))
                        (rule "polySimp_addComm1" (formula "19") (term "0,2,0"))
                        (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "4"))
                        (rule "inEqSimp_commuteGeq" (formula "7") (term "0"))
                        (rule "applyEq" (formula "7") (term "0,0,1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1,1"))
                        (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "14"))
                        (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "7"))
                        (rule "mul_literals" (formula "14") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0"))
                        (rule "add_literals" (formula "14") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                        (rule "mul_literals" (formula "14") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "14") (term "0,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "polySimp_addLiterals" (formula "14") (term "0,0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_zero_right" (formula "14") (term "0,0"))
                        (rule "leq_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "2"))
                        (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "mul_literals" (formula "5") (term "0,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "add_literals" (formula "5") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "5") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,1,0"))
                        (rule "neg_literal" (formula "5") (term "0,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "5") (term "0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "polySimp_addLiterals" (formula "5") (term "0,0,0,0"))
                        (rule "add_literals" (formula "5") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                        (rule "add_literals" (formula "5") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0"))
                        (rule "add_zero_right" (formula "5") (term "0,0"))
                        (rule "qeq_literals" (formula "5") (term "0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "inEqSimp_antiSymm" (formula "15") (ifseqformula "5"))
                        (rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "15"))
                        (rule "times_zero_2" (formula "6") (term "1,1"))
                        (rule "add_zero_right" (formula "6") (term "1"))
                        (rule "applyEq" (formula "9") (term "0,1,0") (ifseqformula "15"))
                        (rule "times_zero_2" (formula "9") (term "1,0"))
                        (rule "applyEq" (formula "7") (term "0,1,1") (ifseqformula "15"))
                        (rule "mul_literals" (formula "7") (term "1,1"))
                        (rule "add_zero_right" (formula "7") (term "1"))
                        (rule "applyEq" (formula "5") (term "0") (ifseqformula "15"))
                        (rule "leq_literals" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "applyEqRigid" (formula "7") (term "0,1,1") (ifseqformula "14"))
                        (rule "mul_literals" (formula "7") (term "1,1"))
                        (rule "add_zero_right" (formula "7") (term "1"))
                        (rule "applyEqRigid" (formula "15") (term "0") (ifseqformula "14"))
                        (rule "qeq_literals" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "applyEq" (formula "8") (term "0,1,0,1,1") (ifseqformula "14"))
                        (rule "times_zero_2" (formula "8") (term "1,0,1,1"))
                        (rule "add_zero_right" (formula "8") (term "0,1,1"))
                        (rule "applyEq" (formula "4") (term "1") (ifseqformula "14"))
                        (rule "applyEqRigid" (formula "21") (term "0,1,0,0,2,0") (ifseqformula "14"))
                        (rule "times_zero_2" (formula "21") (term "1,0,0,2,0"))
                        (rule "add_zero_right" (formula "21") (term "0,0,2,0"))
                        (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "13"))
                        (rule "leq_literals" (formula "5") (term "0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "inEqSimp_contradInEq1" (formula "7") (term "0") (ifseqformula "14"))
                        (rule "qeq_literals" (formula "7") (term "0,0"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "14"))
                        (rule "leq_literals" (formula "5") (term "0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "14"))
                        (rule "andLeft" (formula "6"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_pullOutFactor1b" (formula "6") (term "0"))
                        (rule "add_literals" (formula "6") (term "1,1,0"))
                        (rule "times_zero_1" (formula "6") (term "1,0"))
                        (rule "add_zero_right" (formula "6") (term "0"))
                        (rule "leq_literals" (formula "6"))
                        (rule "closeFalse" (formula "6"))
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "inEqSimp_ltToLeq" (formula "6") (term "0"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
                        (rule "add_zero_right" (formula "6") (term "0,0,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                        (rule "add_literals" (formula "6") (term "0,0,0"))
                        (rule "inEqSimp_homoInEq1" (formula "6") (term "1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,1"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "polySimp_addComm0" (formula "6") (term "0,0,1"))
                        (rule "mod_axiom" (formula "6") (term "1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0,0"))
                        (rule "add_literals" (formula "6") (term "0,0,0,0"))
                        (rule "add_zero_left" (formula "6") (term "0,0,0"))
                        (rule "mod_axiom" (formula "6") (term "0,1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0,1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "0,1,0,1"))
                        (rule "mul_literals" (formula "6") (term "0,0,1,0,1"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,1"))
                        (rule "polySimp_rightDist" (formula "6") (term "0,1,1"))
                        (rule "mul_literals" (formula "6") (term "0,0,1,1"))
                        (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                        (rule "leq_literals" (formula "4") (term "0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "Class_invariant_axiom_for_BitSet" (formula "10") (inst "i_0=i_0") (inst "wordIndex=wordIndex") (inst "bitIndex=bitIndex") (inst "x=x_13") (inst "i=i") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "notLeft" (formula "12"))
                        (rule "translateJavaCastLong" (formula "14") (term "0,1,1,1,0"))
                        (rule "translateJavaCastLong" (formula "13") (term "0,0,0,0,1,0,0"))
                        (rule "translateJavaSubInt" (formula "16") (term "0,2,0"))
                        (rule "translateJavaMulLong" (formula "14") (term "1,1,1,0"))
                        (rule "translateJavaMulLong" (formula "13") (term "0,0,0,1,0,0"))
                        (rule "expand_inInt" (formula "12") (term "1,0,0"))
                        (rule "expand_inInt" (formula "13") (term "1,0,0,0,0"))
                        (rule "expand_inInt" (formula "13") (term "1,0,0,0"))
                        (rule "expand_inLong" (formula "14") (term "1,0,0"))
                        (rule "expand_inInt" (formula "15") (term "1,0,0"))
                        (rule "replace_int_MIN" (formula "12") (term "0,1,1,0,0"))
                        (rule "replace_int_MAX" (formula "12") (term "1,0,1,0,0"))
                        (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,0,0"))
                        (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,0,0"))
                        (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,0"))
                        (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,0"))
                        (rule "replace_long_MIN" (formula "14") (term "0,1,1,0,0"))
                        (rule "replace_long_MAX" (formula "14") (term "1,0,1,0,0"))
                        (rule "replace_int_MIN" (formula "15") (term "0,1,1,0,0"))
                        (rule "replace_int_MAX" (formula "15") (term "1,0,1,0,0"))
                        (rule "translateJavaAddLong" (formula "13") (term "0,0,1,0,0"))
                        (rule "bitAtDef" (formula "13") (term "0,1,1,0,0"))
                        (rule "ifEqualsInteger" (formula "13") (term "1,1,0,0"))
                        (rule "equal_literals" (formula "13") (term "1,1,1,1,0,0"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_ltToLeq" (formula "14") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "10"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "0,1,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_strengthen1" (formula "10") (ifseqformula "20"))
                        (rule "add_zero_right" (formula "10") (term "1"))
                        (rule "inEqSimp_contradEq7" (formula "20") (ifseqformula "10"))
                        (rule "times_zero_1" (formula "20") (term "1,0,0"))
                        (rule "add_zero_right" (formula "20") (term "0,0"))
                        (rule "leq_literals" (formula "20") (term "0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "false_right" (formula "20"))
                        (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "11"))
                        (rule "mul_literals" (formula "10") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                        (rule "mul_literals" (formula "10") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "10"))
                        (rule "leq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "expand_subJint" (formula "16") (term "0,2,0"))
                        (rule "polySimp_elimSub" (formula "16") (term "0,0,2,0"))
                        (rule "mul_literals" (formula "16") (term "1,0,0,2,0"))
                        (rule "polySimp_addComm0" (formula "16") (term "0,0,2,0"))
                        (rule "expand_addJlong" (formula "13") (term "0,0,1,0,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,0,0,1,0,0"))
                        (rule "expand_mulJlong" (formula "14") (term "1,1,1,1,0"))
                        (rule "nnf_imp2or" (formula "15") (term "0"))
                        (rule "nnf_imp2or" (formula "12") (term "0"))
                        (rule "expand_moduloInteger" (formula "16") (term "0,2,0"))
                        (rule "replace_int_HALFRANGE" (formula "16") (term "0,0,1,0,2,0"))
                        (rule "replace_int_RANGE" (formula "16") (term "1,1,0,2,0"))
                        (rule "replace_int_MIN" (formula "16") (term "0,0,2,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,1,0,2,0"))
                        (rule "add_literals" (formula "16") (term "0,0,1,0,2,0"))
                        (rule "mod_axiom" (formula "16") (term "1,0,2,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,2,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,2,0"))
                        (rule "polySimp_addAssoc" (formula "16") (term "0,0,2,0"))
                        (rule "add_literals" (formula "16") (term "0,0,0,2,0"))
                        (rule "expand_moduloLong" (formula "13") (term "0,1,0,0,0,1,0,0"))
                        (rule "replace_long_RANGE" (formula "13") (term "1,1,0,1,0,0,0,1,0,0"))
                        (rule "replace_long_HALFRANGE" (formula "13") (term "0,0,1,0,1,0,0,0,1,0,0"))
                        (rule "replace_long_MIN" (formula "13") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "mod_axiom" (formula "13") (term "1,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "expand_moduloLong" (formula "14") (term "0,0,1,1,1,1,0"))
                        (rule "replace_long_MIN" (formula "14") (term "0,0,0,1,1,1,1,0"))
                        (rule "replace_long_RANGE" (formula "14") (term "1,1,0,0,1,1,1,1,0"))
                        (rule "replace_long_HALFRANGE" (formula "14") (term "0,0,1,0,0,1,1,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "0,1,1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,1,1,1,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,1,1,1,1,0"))
                        (rule "mod_axiom" (formula "14") (term "0,1,0,1,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0,1,1,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,1,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,1,1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "0,1,0,1,1,1,1,0"))
                        (rule "mul_literals" (formula "14") (term "0,0,1,0,1,1,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,1,1,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,1,1,1,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,1,1,1,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,1,1,1,1,0"))
                        (rule "nnf_notAnd" (formula "15") (term "0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0"))
                        (rule "expand_mulJlong" (formula "13") (term "1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "0,0,1,0,0,0,1,0,0"))
                        (rule "expand_moduloLong" (formula "14") (term "1,1,1,1,0"))
                        (rule "replace_long_RANGE" (formula "14") (term "1,1,1,1,1,1,0"))
                        (rule "replace_long_HALFRANGE" (formula "14") (term "0,0,1,1,1,1,1,0"))
                        (rule "replace_long_MIN" (formula "14") (term "0,1,1,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,1,1,1,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "1,1,1,0"))
                        (rule "add_literals" (formula "14") (term "0,1,1,1,0"))
                        (rule "polyMod_pullOut" (formula "14") (term "1,1,1,1,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            int::select(heap,
                        self,
                        BitSet::$wordsInUse)),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,1,1,1,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,1,1,1,1,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,1,1,1,1,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,1,1,1,1,0"))
                        (rule "add_zero_right" (formula "14") (term "0,1,1,1,1,0"))
                        (rule "mod_axiom" (formula "14") (term "1,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "1,1,1,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,1,1,1,0"))
                        (rule "add_literals" (formula "14") (term "0,0,1,1,1,0"))
                        (rule "expand_moduloLong" (formula "13") (term "0,0,1,0,0"))
                        (rule "replace_long_HALFRANGE" (formula "13") (term "0,0,1,0,0,1,0,0"))
                        (rule "replace_long_RANGE" (formula "13") (term "1,1,0,0,1,0,0"))
                        (rule "replace_long_MIN" (formula "13") (term "0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,1,0,0"))
                        (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0"))
                        (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0"))
                        (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                        (rule "nnf_notAnd" (formula "15") (term "1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "15") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "15") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,0,0,1,1,0,0"))
                        (rule "add_literals" (formula "15") (term "0,0,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "15") (term "1,1,1,0,0"))
                        (rule "expand_moduloLong" (formula "13") (term "1,0,1,0,0,1,0,0"))
                        (rule "replace_long_HALFRANGE" (formula "13") (term "0,0,1,1,0,1,0,0,1,0,0"))
                        (rule "replace_long_MIN" (formula "13") (term "0,1,0,1,0,0,1,0,0"))
                        (rule "replace_long_RANGE" (formula "13") (term "1,1,1,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,1,1,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addComm1" (formula "13") (term "0,0,1,0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0,0"))
                        (rule "mod_axiom" (formula "13") (term "1,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,0,1,0,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,1,0,0,1,0,0"))
                        (rule "polyMod_pullOut" (formula "13") (term "1,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
                mul(wordIndex, Z(4(6(#))))),
            mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
                        wordIndex),
                    Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
                Z(neglit(4(2(4(3(0(3(1(1(4(7(1(7(0(2(6(1(9(5(0(8(1(1(#)))))))))))))))))))))))))),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(1(#))))"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,1,0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "1,1,0,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0,1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,1,0,0,1,0,0"))
                        (rule "polyMod_pullOut" (formula "13") (term "1,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,1,0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "1,1,0,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0,1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,1,0,0,1,0,0"))
                        (rule "mod_axiom" (formula "13") (term "1,0,0,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,0,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,0,0,1,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
                        (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0"))
                        (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0"))
                        (rule "nnf_imp2or" (formula "14") (term "0"))
                        (rule "nnf_imp2or" (formula "13") (term "0,0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                        (rule "nnf_notAnd" (formula "14") (term "1,0,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,1,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,1,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,1,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "1,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "13") (term "0,1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "13") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,1,0,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,0,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "1,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "13") (term "0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,1,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,1,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "13") (term "1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,1,1,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,1,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,1,0,0,0,0,0,0"))
                        (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0,0,0"))
                        (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,0,0,0"))
                        (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0,0,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0,0,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "15") (term "0,0"))
                        (rule "div_axiom" (formula "4") (term "0,0,1") (inst "quotient=quotient_0"))
                        (rule "qeq_literals" (formula "4") (term "0,1,1"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "mul_literals" (formula "4") (term "1,1,1,1"))
                        (rule "equal_literals" (formula "4") (term "0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                        (rule "add_literals" (formula "6") (term "0,0,1"))
                        (rule "polySimp_addComm1" (formula "6") (term "1"))
                        (rule "add_literals" (formula "6") (term "0,1"))
                        (rule "inEqSimp_homoInEq0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0"))
                        (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "4"))
                        (rule "inEqSimp_commuteGeq" (formula "7") (term "0"))
                        (rule "applyEq" (formula "7") (term "0,0,1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq0" (formula "7") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,1"))
                        (rule "polySimp_addComm1" (formula "7") (term "0,0,1"))
                        (rule "applyEq" (formula "19") (term "0,1,0,2,0") (ifseqformula "4"))
                        (rule "polySimp_addComm1" (formula "19") (term "0,2,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1,1"))
                        (rule "polySimp_rightDist" (formula "7") (term "0,1,1"))
                        (rule "mul_literals" (formula "7") (term "0,0,1,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,1"))
                        (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "14"))
                        (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                        (rule "mul_literals" (formula "5") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "7"))
                        (rule "mul_literals" (formula "14") (term "0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0"))
                        (rule "add_literals" (formula "14") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                        (rule "mul_literals" (formula "14") (term "1"))
                        (rule "elimGcdGeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,1,0"))
                        (rule "leq_literals" (formula "14") (term "0,0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "polySimp_addLiterals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                        (rule "add_literals" (formula "14") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0"))
                        (rule "leq_literals" (formula "14") (term "0"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "2"))
                        (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                        (rule "mul_literals" (formula "5") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "5") (term "0"))
                        (rule "add_literals" (formula "5") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                        (rule "elimGcdLeq_antec" (formula "5") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0"))
                        (rule "leq_literals" (formula "5") (term "0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "neg_literal" (formula "5") (term "0,0,0,0,0,0"))
                        (rule "polySimp_addLiterals" (formula "5") (term "0,0,0,0"))
                        (rule "add_literals" (formula "5") (term "0,0,0,0"))
                        (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                        (rule "add_literals" (formula "5") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "5") (term "1,0,0"))
                        (rule "add_literals" (formula "5") (term "0,0"))
                        (rule "qeq_literals" (formula "5") (term "0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "inEqSimp_antiSymm" (formula "15") (ifseqformula "5"))
                        (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "15"))
                        (rule "leq_literals" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "14"))
                        (rule "mul_literals" (formula "8") (term "1,0"))
                        (rule "applyEqRigid" (formula "6") (term "0,1,1") (ifseqformula "14"))
                        (rule "times_zero_2" (formula "6") (term "1,1"))
                        (rule "add_zero_right" (formula "6") (term "1"))
                        (rule "applyEqRigid" (formula "5") (term "0,1,1") (ifseqformula "14"))
                        (rule "times_zero_2" (formula "5") (term "1,1"))
                        (rule "add_zero_right" (formula "5") (term "1"))
                        (rule "applyEqRigid" (formula "15") (term "0") (ifseqformula "14"))
                        (rule "qeq_literals" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "applyEq" (formula "7") (term "0,1,1") (ifseqformula "14"))
                        (rule "times_zero_2" (formula "7") (term "1,1"))
                        (rule "add_zero_right" (formula "7") (term "1"))
                        (rule "applyEq" (formula "21") (term "0,1,0,0,2,0") (ifseqformula "14"))
                        (rule "times_zero_2" (formula "21") (term "1,0,0,2,0"))
                        (rule "add_zero_right" (formula "21") (term "0,0,2,0"))
                        (rule "applyEq" (formula "4") (term "1") (ifseqformula "14"))
                        (rule "applyEq" (formula "8") (term "0,1,0,1,1") (ifseqformula "14"))
                        (rule "times_zero_2" (formula "8") (term "1,0,1,1"))
                        (rule "add_literals" (formula "8") (term "0,1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "15"))
                        (rule "qeq_literals" (formula "8") (term "0,0"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "15"))
                        (rule "leq_literals" (formula "6") (term "0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "12"))
                        (rule "leq_literals" (formula "5") (term "0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (ifseqformula "6"))
                        (rule "andLeft" (formula "14"))
                        (rule "inEqSimp_homoInEq1" (formula "14"))
                        (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
                        (rule "add_literals" (formula "14") (term "1,1,0"))
                        (rule "times_zero_1" (formula "14") (term "1,0"))
                        (rule "add_literals" (formula "14") (term "0"))
                        (rule "leq_literals" (formula "14"))
                        (rule "closeFalse" (formula "14"))
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "13")))
                     (rule "false_right" (formula "17"))
                     (rule "inEqSimp_ltToLeq" (formula "6") (term "0"))
                     (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
                     (rule "add_zero_right" (formula "6") (term "0,0,0"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                     (rule "add_literals" (formula "6") (term "0,0,0"))
                     (rule "inEqSimp_homoInEq1" (formula "6") (term "1"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0,1"))
                     (rule "mul_literals" (formula "6") (term "0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                     (rule "polySimp_addComm0" (formula "6") (term "0,0,1"))
                     (rule "mod_axiom" (formula "6") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0,0"))
                     (rule "add_literals" (formula "6") (term "0,0,0,0"))
                     (rule "add_zero_left" (formula "6") (term "0,0,0"))
                     (rule "mod_axiom" (formula "6") (term "0,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "0,1,0,1"))
                     (rule "mul_literals" (formula "6") (term "0,0,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1"))
                     (rule "add_literals" (formula "6") (term "0,0,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1"))
                     (rule "polySimp_elimOne" (formula "6") (term "1,1,1"))
                     (rule "polySimp_rightDist" (formula "6") (term "0,1,1"))
                     (rule "mul_literals" (formula "6") (term "0,0,1,1"))
                     (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                     (rule "leq_literals" (formula "4") (term "0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "Class_invariant_axiom_for_BitSet" (formula "10") (inst "i_0=i_0") (inst "wordIndex=wordIndex") (inst "bitIndex=bitIndex") (inst "x=x_13") (inst "i=i") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "notLeft" (formula "12"))
                     (rule "translateJavaMulLong" (formula "14") (term "1,1,1,0"))
                     (rule "translateJavaCastLong" (formula "13") (term "0,0,0,0,1,0,0"))
                     (rule "translateJavaSubInt" (formula "16") (term "0,2,0"))
                     (rule "translateJavaCastLong" (formula "14") (term "0,1,1,1,0"))
                     (rule "translateJavaMulLong" (formula "13") (term "0,0,0,1,0,0"))
                     (rule "expand_inInt" (formula "12") (term "1,0,0"))
                     (rule "expand_inInt" (formula "13") (term "1,0,0,0,0"))
                     (rule "expand_inInt" (formula "13") (term "1,0,0,0"))
                     (rule "expand_inLong" (formula "14") (term "1,0,0"))
                     (rule "expand_inInt" (formula "15") (term "1,0,0"))
                     (rule "replace_int_MIN" (formula "12") (term "0,1,1,0,0"))
                     (rule "replace_int_MAX" (formula "12") (term "1,0,1,0,0"))
                     (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,0,0"))
                     (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,0,0"))
                     (rule "replace_int_MAX" (formula "13") (term "1,0,1,0,0,0"))
                     (rule "replace_int_MIN" (formula "13") (term "0,1,1,0,0,0"))
                     (rule "replace_long_MAX" (formula "14") (term "1,0,1,0,0"))
                     (rule "replace_long_MIN" (formula "14") (term "0,1,1,0,0"))
                     (rule "replace_int_MAX" (formula "15") (term "1,0,1,0,0"))
                     (rule "replace_int_MIN" (formula "15") (term "0,1,1,0,0"))
                     (rule "translateJavaAddLong" (formula "13") (term "0,0,1,0,0"))
                     (rule "bitAtDef" (formula "13") (term "0,1,1,0,0"))
                     (rule "ifEqualsInteger" (formula "13") (term "1,1,0,0"))
                     (rule "equal_literals" (formula "13") (term "1,1,1,1,0,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "14") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "10"))
                     (rule "inEqSimp_commuteLeq" (formula "14") (term "0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "0,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "0,1,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,1,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "1,1,1,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_strengthen1" (formula "10") (ifseqformula "20"))
                     (rule "add_zero_right" (formula "10") (term "1"))
                     (rule "inEqSimp_contradEq7" (formula "20") (ifseqformula "10"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0"))
                     (rule "add_zero_right" (formula "20") (term "0,0"))
                     (rule "leq_literals" (formula "20") (term "0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "false_right" (formula "20"))
                     (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "11"))
                     (rule "mul_literals" (formula "10") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                     (rule "mul_literals" (formula "10") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "10"))
                     (rule "leq_literals" (formula "2") (term "0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "expand_subJint" (formula "16") (term "0,2,0"))
                     (rule "polySimp_elimSub" (formula "16") (term "0,0,2,0"))
                     (rule "mul_literals" (formula "16") (term "1,0,0,2,0"))
                     (rule "polySimp_addComm0" (formula "16") (term "0,0,2,0"))
                     (rule "expand_mulJlong" (formula "13") (term "0,0,0,1,0,0"))
                     (rule "expand_moduloLong" (formula "14") (term "0,1,1,1,1,0"))
                     (rule "replace_long_RANGE" (formula "14") (term "1,1,0,1,1,1,1,0"))
                     (rule "replace_long_HALFRANGE" (formula "14") (term "0,0,1,0,1,1,1,1,0"))
                     (rule "replace_long_MIN" (formula "14") (term "0,0,1,1,1,1,0"))
                     (rule "mod_axiom" (formula "14") (term "1,0,1,1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,1,1,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "14") (term "0,1,1,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,1,1,1,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,1,1,1,1,0"))
                     (rule "add_zero_left" (formula "14") (term "0,0,1,1,1,1,0"))
                     (rule "nnf_imp2or" (formula "12") (term "0"))
                     (rule "nnf_imp2or" (formula "15") (term "0"))
                     (rule "expand_moduloInteger" (formula "16") (term "0,2,0"))
                     (rule "replace_int_RANGE" (formula "16") (term "1,1,0,2,0"))
                     (rule "replace_int_HALFRANGE" (formula "16") (term "0,0,1,0,2,0"))
                     (rule "replace_int_MIN" (formula "16") (term "0,0,2,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0,1,0,2,0"))
                     (rule "add_literals" (formula "16") (term "0,0,1,0,2,0"))
                     (rule "mod_axiom" (formula "16") (term "1,0,2,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,2,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0,2,0"))
                     (rule "polySimp_addAssoc" (formula "16") (term "0,0,2,0"))
                     (rule "add_literals" (formula "16") (term "0,0,0,2,0"))
                     (rule "expand_moduloLong" (formula "13") (term "0,0,0,1,0,0"))
                     (rule "replace_long_RANGE" (formula "13") (term "1,1,0,0,0,1,0,0"))
                     (rule "replace_long_HALFRANGE" (formula "13") (term "0,0,1,0,0,0,1,0,0"))
                     (rule "replace_long_MIN" (formula "13") (term "0,0,0,0,1,0,0"))
                     (rule "mod_axiom" (formula "13") (term "1,0,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "13") (term "0,0,0,0,1,0,0"))
                     (rule "expand_mulJlong" (formula "14") (term "1,1,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "0,1,1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "0,1,1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,1,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,1,1,1,0"))
                     (rule "expand_moduloLong" (formula "13") (term "0,1,0,0,1,0,0,0,1,0,0"))
                     (rule "replace_long_MIN" (formula "13") (term "0,0,1,0,0,1,0,0,0,1,0,0"))
                     (rule "replace_long_HALFRANGE" (formula "13") (term "0,0,1,0,1,0,0,1,0,0,0,1,0,0"))
                     (rule "replace_long_RANGE" (formula "13") (term "1,1,0,1,0,0,1,0,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,1,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,1,0,0"))
                     (rule "mod_axiom" (formula "13") (term "0,1,0,0,1,0,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1,0,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,1,0,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "0,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,0,0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,0,1,0,0,0,0,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0,0,1,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0,0,1,0,0"))
                     (rule "polyDiv_pullOut" (formula "13") (term "0,0,0,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                     (rule "equal_literals" (formula "13") (term "0,0,0,0,0,0,1,0,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0,0,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0,0,0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0,0,0,0,0,0,1,0,0"))
                     (rule "add_literals" (formula "13") (term "1,1,0,0,0,0,0,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "0,0,0,0,1,0,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "1,0,0,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "0,0,0,0,1,0,0"))
                     (rule "polySimp_mulAssoc" (formula "13") (term "0,0,0,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "0,0,0,0,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,0,1,0,0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0"))
                     (rule "nnf_notAnd" (formula "15") (term "0,0"))
                     (rule "expand_moduloLong" (formula "14") (term "1,1,1,1,0"))
                     (rule "replace_long_RANGE" (formula "14") (term "1,1,1,1,1,1,0"))
                     (rule "replace_long_HALFRANGE" (formula "14") (term "0,0,1,1,1,1,1,0"))
                     (rule "replace_long_MIN" (formula "14") (term "0,1,1,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "14") (term "0,1,1,1,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "14") (term "1,1,1,0"))
                     (rule "add_literals" (formula "14") (term "0,1,1,1,0"))
                     (rule "polyMod_pullOut" (formula "14") (term "1,1,1,1,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            int::select(heap,
                        self,
                        BitSet::$wordsInUse)),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,1,1,1,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,1,1,1,1,0"))
                     (rule "add_literals" (formula "14") (term "1,1,0,1,1,1,1,0"))
                     (rule "times_zero_1" (formula "14") (term "1,0,1,1,1,1,0"))
                     (rule "add_zero_right" (formula "14") (term "0,1,1,1,1,0"))
                     (rule "mod_axiom" (formula "14") (term "1,1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "14") (term "1,1,1,0"))
                     (rule "polySimp_addAssoc" (formula "14") (term "0,1,1,1,0"))
                     (rule "add_literals" (formula "14") (term "0,0,1,1,1,0"))
                     (rule "expand_moduloLong" (formula "13") (term "0,1,0,0,0,1,0,0"))
                     (rule "replace_long_MIN" (formula "13") (term "0,0,1,0,0,0,1,0,0"))
                     (rule "replace_long_HALFRANGE" (formula "13") (term "0,0,1,0,1,0,0,0,1,0,0"))
                     (rule "replace_long_RANGE" (formula "13") (term "1,1,0,1,0,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,1,0,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,0,1,0,0"))
                     (rule "mod_axiom" (formula "13") (term "0,1,0,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,0,1,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,0,1,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,0,1,0,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,0,0,0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0,0,0,1,0,0"))
                     (rule "add_literals" (formula "13") (term "1,1,0,0,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "13") (term "0,0,0,0,1,0,0"))
                     (rule "nnf_notAnd" (formula "12") (term "1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,1,1,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,0,1,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,1,0,0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0"))
                     (rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                     (rule "nnf_imp2or" (formula "14") (term "0"))
                     (rule "nnf_notAnd" (formula "15") (term "1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "15") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "15") (term "1,0,0,1,1,0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "15") (term "1,1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "15") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "15") (term "1,0,0,0,1,0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "15") (term "1,0,1,0,0"))
                     (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0"))
                     (rule "mul_literals" (formula "15") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0"))
                     (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                     (rule "expand_addJlong" (formula "13") (term "0,0,1,0,0"))
                     (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,0,0"))
                     (rule "polySimp_addComm0" (formula "13") (term "0,0,0,0,1,0,0"))
                     (rule "nnf_notAnd" (formula "14") (term "0,0"))
                     (rule "expand_moduloLong" (formula "13") (term "0,0,1,0,0"))
                     (rule "replace_long_HALFRANGE" (formula "13") (term "0,0,1,0,0,1,0,0"))
                     (rule "replace_long_MIN" (formula "13") (term "0,0,0,1,0,0"))
                     (rule "replace_long_RANGE" (formula "13") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0,0"))
                     (rule "polyMod_pullOut" (formula "13") (term "1,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            mul(wordIndex, Z(4(6(#))))),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(1(#))))"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,1,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,1,0,0,1,0,0"))
                     (rule "add_literals" (formula "13") (term "1,1,0,1,0,0,1,0,0"))
                     (rule "times_zero_1" (formula "13") (term "1,0,1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,1,0,0,1,0,0"))
                     (rule "mod_axiom" (formula "13") (term "1,0,0,1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "13") (term "0,0,0,0,1,0,0"))
                     (rule "nnf_notAnd" (formula "14") (term "1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "14") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,1,0,0"))
                     (rule "mul_literals" (formula "14") (term "1,0,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "14") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "14") (term "1,0,0,1,1,0,0"))
                     (rule "add_literals" (formula "14") (term "0,0,1,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
                     (rule "nnf_imp2or" (formula "13") (term "0,0"))
                     (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                     (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
                     (rule "nnf_notAnd" (formula "13") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "13") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,1,1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "13") (term "0,1,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,1,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,0,1,0,0,0"))
                     (rule "nnf_notAnd" (formula "13") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "13") (term "1,1,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,0,0,1,1,0,0,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,1,1,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,1,1,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "13") (term "0,1,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,1,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,0,1,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,1,0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,1,0,0,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0,0,0"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0,0"))
                     (rule "div_axiom" (formula "4") (term "0,0,0") (inst "quotient=quotient_0"))
                     (rule "qeq_literals" (formula "4") (term "0,1,1"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "mul_literals" (formula "4") (term "1,1,1,1"))
                     (rule "equal_literals" (formula "4") (term "0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                     (rule "add_literals" (formula "6") (term "0,0,1"))
                     (rule "polySimp_addComm1" (formula "6") (term "1"))
                     (rule "add_literals" (formula "6") (term "0,1"))
                     (rule "inEqSimp_homoInEq0" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "5") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "6"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                     (rule "polySimp_addComm1" (formula "6") (term "0"))
                     (rule "applyEq" (formula "19") (term "0,1,0,2,0") (ifseqformula "4"))
                     (rule "polySimp_addComm1" (formula "19") (term "0,2,0"))
                     (rule "applyEq" (formula "7") (term "0,0,1") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq0" (formula "7") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1"))
                     (rule "polySimp_addComm1" (formula "7") (term "0,1"))
                     (rule "polySimp_addComm1" (formula "7") (term "0,0,1"))
                     (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "4"))
                     (rule "inEqSimp_commuteGeq" (formula "7") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1"))
                     (rule "polySimp_rightDist" (formula "5") (term "1"))
                     (rule "mul_literals" (formula "5") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1"))
                     (rule "polySimp_rightDist" (formula "6") (term "1"))
                     (rule "mul_literals" (formula "6") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,1"))
                     (rule "polySimp_rightDist" (formula "7") (term "0,1,1"))
                     (rule "mul_literals" (formula "7") (term "0,0,1,1"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "14"))
                     (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                     (rule "mul_literals" (formula "5") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                     (rule "polySimp_mulComm0" (formula "5") (term "1"))
                     (rule "polySimp_rightDist" (formula "5") (term "1"))
                     (rule "mul_literals" (formula "5") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "7"))
                     (rule "mul_literals" (formula "14") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "14") (term "0"))
                     (rule "add_literals" (formula "14") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                     (rule "mul_literals" (formula "14") (term "1"))
                     (rule "elimGcdGeq_antec" (formula "14") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                     (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,0,1,0"))
                     (rule "leq_literals" (formula "14") (term "0,0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "polySimp_addLiterals" (formula "14") (term "0,0,0,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "14") (term "0,0"))
                     (rule "add_literals" (formula "14") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "14") (term "1,0,0"))
                     (rule "add_literals" (formula "14") (term "0,0"))
                     (rule "leq_literals" (formula "14") (term "0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "2"))
                     (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                     (rule "mul_literals" (formula "5") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "5") (term "0"))
                     (rule "add_literals" (formula "5") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                     (rule "elimGcdLeq_antec" (formula "5") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0"))
                     (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "5") (term "0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "neg_literal" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "polySimp_addLiterals" (formula "5") (term "0,0,0,0"))
                     (rule "add_literals" (formula "5") (term "0,0,0,0"))
                     (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0"))
                     (rule "add_literals" (formula "5") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "5") (term "1,0,0"))
                     (rule "add_literals" (formula "5") (term "0,0"))
                     (rule "qeq_literals" (formula "5") (term "0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "inEqSimp_antiSymm" (formula "15") (ifseqformula "5"))
                     (rule "applyEqRigid" (formula "6") (term "0,1,1") (ifseqformula "15"))
                     (rule "times_zero_2" (formula "6") (term "1,1"))
                     (rule "add_zero_right" (formula "6") (term "1"))
                     (rule "applyEqRigid" (formula "7") (term "0,1,1") (ifseqformula "15"))
                     (rule "mul_literals" (formula "7") (term "1,1"))
                     (rule "add_zero_right" (formula "7") (term "1"))
                     (rule "applyEq" (formula "5") (term "0") (ifseqformula "15"))
                     (rule "leq_literals" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "14"))
                     (rule "times_zero_2" (formula "8") (term "1,0"))
                     (rule "applyEqRigid" (formula "15") (term "0") (ifseqformula "14"))
                     (rule "qeq_literals" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "applyEqRigid" (formula "7") (term "0,1,1") (ifseqformula "14"))
                     (rule "times_zero_2" (formula "7") (term "1,1"))
                     (rule "add_zero_right" (formula "7") (term "1"))
                     (rule "applyEq" (formula "21") (term "0,1,0,0,2,0") (ifseqformula "14"))
                     (rule "times_zero_2" (formula "21") (term "1,0,0,2,0"))
                     (rule "add_zero_right" (formula "21") (term "0,0,2,0"))
                     (rule "applyEq" (formula "8") (term "0,1,0,1,1") (ifseqformula "14"))
                     (rule "times_zero_2" (formula "8") (term "1,0,1,1"))
                     (rule "add_zero_right" (formula "8") (term "0,1,1"))
                     (rule "applyEqRigid" (formula "4") (term "1") (ifseqformula "14"))
                     (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "13"))
                     (rule "leq_literals" (formula "5") (term "0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "14"))
                     (rule "leq_literals" (formula "5") (term "0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "13"))
                     (rule "qeq_literals" (formula "6") (term "0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "inEqSimp_contradInEq1" (formula "14") (ifseqformula "6"))
                     (rule "andLeft" (formula "14"))
                     (rule "inEqSimp_homoInEq1" (formula "14"))
                     (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
                     (rule "add_literals" (formula "14") (term "1,1,0"))
                     (rule "times_zero_1" (formula "14") (term "1,0"))
                     (rule "add_literals" (formula "14") (term "0"))
                     (rule "leq_literals" (formula "14"))
                     (rule "closeFalse" (formula "14"))
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "allRight" (formula "17") (inst "sk=f_0"))
                  (rule "allRight" (formula "17") (inst "sk=o_0"))
                  (rule "eqSymm" (formula "17"))
                  (rule "inEqSimp_ltToLeq" (formula "6") (term "0"))
                  (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "6") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0"))
                  (rule "inEqSimp_homoInEq1" (formula "6") (term "1"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,0,1"))
                  (rule "mul_literals" (formula "6") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "6") (term "0,0,1"))
                  (rule "mod_axiom" (formula "6") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,0,0"))
                  (rule "add_literals" (formula "6") (term "0,0,0,0"))
                  (rule "add_zero_left" (formula "6") (term "0,0,0"))
                  (rule "mod_axiom" (formula "6") (term "0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0,1"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,1"))
                  (rule "polySimp_rightDist" (formula "6") (term "0,1,0,1"))
                  (rule "mul_literals" (formula "6") (term "0,0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,1"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1"))
                  (rule "add_literals" (formula "6") (term "0,0,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,1,1"))
                  (rule "polySimp_rightDist" (formula "6") (term "0,1,1"))
                  (rule "mul_literals" (formula "6") (term "0,0,1,1"))
                  (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                  (rule "leq_literals" (formula "4") (term "0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=f_0_0"))
                  (rule "simplifySelectOfStore" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "17"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                  (rule "simplifySelectOfStore" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                  (rule "simplifySelectOfStore" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "16"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "Class_invariant_axiom_for_BitSet" (formula "14") (inst "i_0=i_0") (inst "wordIndex=wordIndex") (inst "bitIndex=bitIndex") (inst "x=x_13") (inst "i=i") (ifseqformula "12"))
                   (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "17")) (ifInst ""  (formula "18")))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "andLeft" (formula "14"))
                  (rule "notLeft" (formula "16"))
                  (rule "translateJavaCastLong" (formula "18") (term "0,1,1,1,0"))
                  (rule "translateJavaCastLong" (formula "17") (term "0,0,0,0,1,0,0"))
                  (rule "translateJavaSubInt" (formula "20") (term "0,2,0"))
                  (rule "translateJavaMulLong" (formula "18") (term "1,1,1,0"))
                  (rule "translateJavaMulLong" (formula "17") (term "0,0,0,1,0,0"))
                  (rule "expand_inInt" (formula "16") (term "1,0,0"))
                  (rule "expand_inInt" (formula "17") (term "1,0,0,0,0"))
                  (rule "expand_inInt" (formula "17") (term "1,0,0,0"))
                  (rule "expand_inLong" (formula "18") (term "1,0,0"))
                  (rule "expand_inInt" (formula "19") (term "1,0,0"))
                  (rule "replace_int_MIN" (formula "16") (term "0,1,1,0,0"))
                  (rule "replace_int_MAX" (formula "16") (term "1,0,1,0,0"))
                  (rule "replace_int_MIN" (formula "17") (term "0,1,1,0,0,0,0"))
                  (rule "replace_int_MAX" (formula "17") (term "1,0,1,0,0,0,0"))
                  (rule "replace_int_MIN" (formula "17") (term "0,1,1,0,0,0"))
                  (rule "replace_int_MAX" (formula "17") (term "1,0,1,0,0,0"))
                  (rule "replace_long_MIN" (formula "18") (term "0,1,1,0,0"))
                  (rule "replace_long_MAX" (formula "18") (term "1,0,1,0,0"))
                  (rule "replace_int_MIN" (formula "19") (term "0,1,1,0,0"))
                  (rule "replace_int_MAX" (formula "19") (term "1,0,1,0,0"))
                  (rule "translateJavaAddLong" (formula "17") (term "0,0,1,0,0"))
                  (rule "bitAtDef" (formula "17") (term "0,1,1,0,0"))
                  (rule "ifEqualsInteger" (formula "17") (term "1,1,0,0"))
                  (rule "equal_literals" (formula "17") (term "1,1,1,1,0,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "18") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0,0,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,1,0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "19") (term "0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "14"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "0,1,0"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "1,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "1,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "19") (term "1,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "1,1,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "17") (term "0,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,1,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0"))
                  (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,1,0,0,0,0,0"))
                  (rule "inEqSimp_strengthen1" (formula "14") (ifseqformula "24"))
                  (rule "add_zero_right" (formula "14") (term "1"))
                  (rule "inEqSimp_contradEq7" (formula "24") (ifseqformula "14"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0"))
                  (rule "add_zero_right" (formula "24") (term "0,0"))
                  (rule "leq_literals" (formula "24") (term "0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "false_right" (formula "24"))
                  (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "15"))
                  (rule "mul_literals" (formula "14") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                  (rule "mul_literals" (formula "14") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "14"))
                  (rule "leq_literals" (formula "6") (term "0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "expand_subJint" (formula "20") (term "0,2,0"))
                  (rule "polySimp_elimSub" (formula "20") (term "0,0,2,0"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,2,0"))
                  (rule "polySimp_addComm0" (formula "20") (term "0,0,2,0"))
                  (rule "expand_mulJlong" (formula "17") (term "0,0,0,1,0,0"))
                  (rule "expand_moduloLong" (formula "18") (term "0,1,1,1,1,0"))
                  (rule "replace_long_RANGE" (formula "18") (term "1,1,0,1,1,1,1,0"))
                  (rule "replace_long_HALFRANGE" (formula "18") (term "0,0,1,0,1,1,1,1,0"))
                  (rule "replace_long_MIN" (formula "18") (term "0,0,1,1,1,1,0"))
                  (rule "mod_axiom" (formula "18") (term "1,0,1,1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,1,1,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,1,1,1,0"))
                  (rule "add_literals" (formula "18") (term "0,0,0,1,1,1,1,0"))
                  (rule "add_zero_left" (formula "18") (term "0,0,1,1,1,1,0"))
                  (rule "nnf_imp2or" (formula "16") (term "0"))
                  (rule "nnf_imp2or" (formula "19") (term "0"))
                  (rule "expand_moduloInteger" (formula "20") (term "0,2,0"))
                  (rule "replace_int_HALFRANGE" (formula "20") (term "0,0,1,0,2,0"))
                  (rule "replace_int_RANGE" (formula "20") (term "1,1,0,2,0"))
                  (rule "replace_int_MIN" (formula "20") (term "0,0,2,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,1,0,2,0"))
                  (rule "add_literals" (formula "20") (term "0,0,1,0,2,0"))
                  (rule "mod_axiom" (formula "20") (term "1,0,2,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,2,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,2,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,2,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,2,0"))
                  (rule "expand_moduloLong" (formula "17") (term "0,0,0,1,0,0"))
                  (rule "replace_long_HALFRANGE" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "replace_long_MIN" (formula "17") (term "0,0,0,0,1,0,0"))
                  (rule "replace_long_RANGE" (formula "17") (term "1,1,0,0,0,1,0,0"))
                  (rule "mod_axiom" (formula "17") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "17") (term "0,0,0,0,1,0,0"))
                  (rule "expand_mulJlong" (formula "18") (term "1,1,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "0,1,1,1,1,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "0,1,1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,1,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "0,0,1,1,1,1,0"))
                  (rule "expand_moduloLong" (formula "17") (term "0,1,0,0,1,0,0,0,1,0,0"))
                  (rule "replace_long_RANGE" (formula "17") (term "1,1,0,1,0,0,1,0,0,0,1,0,0"))
                  (rule "replace_long_HALFRANGE" (formula "17") (term "0,0,1,0,1,0,0,1,0,0,0,1,0,0"))
                  (rule "replace_long_MIN" (formula "17") (term "0,0,1,0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,1,0,0"))
                  (rule "mod_axiom" (formula "17") (term "0,1,0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addComm0" (formula "17") (term "0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "0,1,0,0,0,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,0,1,0,0,0,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,0,0,0,0,0,0,1,0,0"))
                  (rule "polyDiv_pullOut" (formula "17") (term "0,0,0,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                  (rule "equal_literals" (formula "17") (term "0,0,0,0,0,0,1,0,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0,0,0,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0,0,0,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0,0,0,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "17") (term "1,1,0,0,0,0,0,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "0,0,0,0,1,0,0"))
                  (rule "polySimp_addComm0" (formula "17") (term "1,0,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "0,0,0,0,1,0,0"))
                  (rule "polySimp_mulAssoc" (formula "17") (term "0,0,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "0,0,0,0,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "0,0,0,0,0,1,0,0"))
                  (rule "nnf_notAnd" (formula "16") (term "0,0"))
                  (rule "nnf_notAnd" (formula "19") (term "0,0"))
                  (rule "expand_moduloLong" (formula "18") (term "1,1,1,1,0"))
                  (rule "replace_long_RANGE" (formula "18") (term "1,1,1,1,1,1,0"))
                  (rule "replace_long_HALFRANGE" (formula "18") (term "0,0,1,1,1,1,1,0"))
                  (rule "replace_long_MIN" (formula "18") (term "0,1,1,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,1,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "1,1,1,0"))
                  (rule "add_literals" (formula "18") (term "0,1,1,1,0"))
                  (rule "polyMod_pullOut" (formula "18") (term "1,1,1,1,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            int::select(heap,
                        self,
                        BitSet::$wordsInUse)),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,0,1,1,1,1,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,1,1,1,1,0"))
                  (rule "add_literals" (formula "18") (term "1,1,0,1,1,1,1,0"))
                  (rule "times_zero_1" (formula "18") (term "1,0,1,1,1,1,0"))
                  (rule "add_zero_right" (formula "18") (term "0,1,1,1,1,0"))
                  (rule "mod_axiom" (formula "18") (term "1,1,1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "1,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,1,1,1,0"))
                  (rule "add_literals" (formula "18") (term "0,0,1,1,1,0"))
                  (rule "expand_moduloLong" (formula "17") (term "0,1,0,0,0,1,0,0"))
                  (rule "replace_long_HALFRANGE" (formula "17") (term "0,0,1,0,1,0,0,0,1,0,0"))
                  (rule "replace_long_RANGE" (formula "17") (term "1,1,0,1,0,0,0,1,0,0"))
                  (rule "replace_long_MIN" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "17") (term "0,0,0,0,1,0,0"))
                  (rule "polySimp_addComm0" (formula "17") (term "0,0,0,0,0,1,0,0"))
                  (rule "mod_axiom" (formula "17") (term "0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "0,1,0,0,0,1,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,0,1,0,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "17") (term "0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "17") (term "0,0,0,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "17") (term "1,1,0,0,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "17") (term "0,0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "17") (term "0,0,0,0,1,0,0"))
                  (rule "nnf_notAnd" (formula "16") (term "1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "16") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "16") (term "1,0,0,1,1,0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "16") (term "1,1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "16") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "16") (term "1,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "16") (term "1,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "18") (term "0"))
                  (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "19") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0"))
                  (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "19") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0"))
                  (rule "mul_literals" (formula "19") (term "1,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "19") (term "1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "19") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "19") (term "1,0,0,1,1,0,0"))
                  (rule "add_literals" (formula "19") (term "0,0,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "19") (term "1,1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "19") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "19") (term "1,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "19") (term "1,0,1,0,0"))
                  (rule "expand_addJlong" (formula "17") (term "0,0,1,0,0"))
                  (rule "polySimp_addComm1" (formula "17") (term "0,0,0,1,0,0"))
                  (rule "polySimp_addComm0" (formula "17") (term "0,0,0,0,1,0,0"))
                  (rule "nnf_notAnd" (formula "18") (term "0,0"))
                  (rule "expand_moduloLong" (formula "17") (term "0,0,1,0,0"))
                  (rule "replace_long_HALFRANGE" (formula "17") (term "0,0,1,0,0,1,0,0"))
                  (rule "replace_long_MIN" (formula "17") (term "0,0,0,1,0,0"))
                  (rule "replace_long_RANGE" (formula "17") (term "1,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1,0,0"))
                  (rule "polyMod_pullOut" (formula "17") (term "1,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            mul(wordIndex, Z(4(6(#))))),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,0,1,0,0,1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "17") (term "0,1,0,0,1,0,0"))
                  (rule "add_literals" (formula "17") (term "1,1,0,1,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0,1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "17") (term "0,1,0,0,1,0,0"))
                  (rule "mod_axiom" (formula "17") (term "1,0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "17") (term "0,0,0,0,1,0,0"))
                  (rule "nnf_notAnd" (formula "18") (term "1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "18") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "1,0,0,0,1,0,0"))
                  (rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "1,0,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "18") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "1,0,0,1,1,0,0"))
                  (rule "add_literals" (formula "18") (term "0,0,1,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "1,1,1,0,0"))
                  (rule "nnf_imp2or" (formula "17") (term "0,0"))
                  (rule "commute_and" (formula "3") (term "0,0"))
                  (rule "commute_and" (formula "1") (term "0,0"))
                  (rule "commute_and" (formula "2") (term "0,0"))
                  (rule "commute_and" (formula "4") (term "0,0"))
                  (rule "nnf_notAnd" (formula "17") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "17") (term "1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "17") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,0,0,1,1,0,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,1,1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "17") (term "0,1,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,1,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,0,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "17") (term "0,0,0,0"))
                  (rule "nnf_notAnd" (formula "17") (term "0,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0,0,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,1,0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "17") (term "1,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "17") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,0,0,1,1,0,0,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,1,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,1,1,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "17") (term "0,1,0,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,0,0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,1,0,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,0,1,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "17") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0,0,0,0,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,1,0,0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "17") (term "0,0,0,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "1,0,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "div_axiom" (formula "8") (term "0,0,0") (inst "quotient=quotient_0"))
                  (rule "equal_literals" (formula "8") (term "0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "qeq_literals" (formula "8") (term "0,1"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "mul_literals" (formula "8") (term "1,1,1"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,1"))
                  (rule "add_literals" (formula "10") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "10") (term "1"))
                  (rule "add_literals" (formula "10") (term "0,1"))
                  (rule "inEqSimp_homoInEq0" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0"))
                  (rule "applyEq" (formula "11") (term "0,0,1") (ifseqformula "8"))
                  (rule "inEqSimp_homoInEq0" (formula "11") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,1"))
                  (rule "polySimp_addComm1" (formula "11") (term "0,0,1"))
                  (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "8"))
                  (rule "inEqSimp_commuteGeq" (formula "11") (term "0"))
                  (rule "applyEq" (formula "23") (term "0,1,0,2,0") (ifseqformula "8"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,2,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1"))
                  (rule "polySimp_rightDist" (formula "9") (term "1"))
                  (rule "mul_literals" (formula "9") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                  (rule "mul_literals" (formula "10") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,1"))
                  (rule "polySimp_rightDist" (formula "11") (term "0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,1"))
                  (rule "mul_literals" (formula "11") (term "0,0,1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "18"))
                  (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1"))
                  (rule "polySimp_rightDist" (formula "9") (term "1"))
                  (rule "mul_literals" (formula "9") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "11"))
                  (rule "mul_literals" (formula "18") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0"))
                  (rule "add_literals" (formula "18") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                  (rule "mul_literals" (formula "18") (term "1"))
                  (rule "elimGcdGeq_antec" (formula "18") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "18") (term "0,0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0"))
                  (rule "polySimp_addLiterals" (formula "18") (term "0,0,0,0"))
                  (rule "add_literals" (formula "18") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "18") (term "0,0"))
                  (rule "add_literals" (formula "18") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0"))
                  (rule "add_zero_right" (formula "18") (term "0,0"))
                  (rule "leq_literals" (formula "18") (term "0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "6"))
                  (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                  (rule "mul_literals" (formula "9") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "9") (term "0"))
                  (rule "add_literals" (formula "9") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,1,0"))
                  (rule "neg_literal" (formula "9") (term "0,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "9") (term "0,0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0"))
                  (rule "qeq_literals" (formula "9") (term "0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_antiSymm" (formula "19") (ifseqformula "9"))
                  (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "19"))
                  (rule "qeq_literals" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "19"))
                  (rule "times_zero_2" (formula "13") (term "1,0"))
                  (rule "applyEq" (formula "12") (term "0,1,1") (ifseqformula "19"))
                  (rule "times_zero_2" (formula "12") (term "1,1"))
                  (rule "add_zero_right" (formula "12") (term "1"))
                  (rule "applyEq" (formula "9") (term "0") (ifseqformula "19"))
                  (rule "leq_literals" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "applyEq" (formula "9") (term "0,1,1") (ifseqformula "18"))
                  (rule "times_zero_2" (formula "9") (term "1,1"))
                  (rule "add_zero_right" (formula "9") (term "1"))
                  (rule "applyEqRigid" (formula "10") (term "0,1,1") (ifseqformula "18"))
                  (rule "times_zero_2" (formula "10") (term "1,1"))
                  (rule "add_zero_right" (formula "10") (term "1"))
                  (rule "applyEqRigid" (formula "25") (term "0,1,0,0,2,0") (ifseqformula "18"))
                  (rule "times_zero_2" (formula "25") (term "1,0,0,2,0"))
                  (rule "add_zero_right" (formula "25") (term "0,0,2,0"))
                  (rule "applyEq" (formula "8") (term "1") (ifseqformula "18"))
                  (rule "applyEq" (formula "12") (term "0,1,0,1,1") (ifseqformula "18"))
                  (rule "times_zero_2" (formula "12") (term "1,0,1,1"))
                  (rule "add_zero_right" (formula "12") (term "0,1,1"))
                  (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "19"))
                  (rule "leq_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "inEqSimp_contradInEq0" (formula "11") (term "1") (ifseqformula "19"))
                  (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                  (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "11") (term "0,0,1"))
                  (rule "leq_literals" (formula "11") (term "0,1"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "16"))
                  (rule "leq_literals" (formula "9") (term "0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "10"))
                  (rule "qeq_literals" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "closeFalse" (formula "17"))
               )
            )
            (branch "if a instanceof java.lang.Throwable false"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Null Reference (a_1 = null)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
)
}
