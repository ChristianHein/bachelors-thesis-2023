\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Mar 14 18:57:16 CET 2023
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:on , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:allow , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[Labels]UseOriginLabels=true
[NewSMT]Axiomatisations=false
[NewSMT]Presburger=false
[NewSMT]sqrtSMTTranslation=SMT
[SMTSettings]SelectedTaclets=
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]maxGenericSorts=2
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[Strategy]ActiveStrategy=JavaCardDLStrategy
[Strategy]MaximumNumberOfAutomaticApplications=7000
[Strategy]Timeout=-1
"
}

\javaSource "..";

\include "../taclets/intSet.key",  "../taclets/binaryAxiomsExtension.key",  "../taclets/bitwiseOperations.key";

\proofObligation "#Proof Obligation Settings
#Tue Mar 14 18:57:16 CET 2023
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
contract=BitSet[BitSet\\:\\:expandTo(int)].JML normal_behavior operation contract.0
name=BitSet[BitSet\\:\\:expandTo(int)].JML normal_behavior operation contract.0
";

\proof {
(keyLog "0" (keyUser "christianhein" ) (keyVersion "208396f69e"))

(autoModeTime "672")

(branch "dummy ID"
(rule "expand_inInt" (formula "1") (term "1,0,0,0") (newnames "heapAtPre,o,f"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "10") (term "0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "7") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "assignment" (formula "10") (term "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "inEqSimp_sepNegMonomial0" (formula "7"))
(rule "polySimp_mulLiterals" (formula "7") (term "0"))
(rule "polySimp_elimOne" (formula "7") (term "0"))
(rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_expandTo,savedHeapBefore_expandTo"))
 (builtin "One Step Simplification" (formula "10"))
(rule "variableDeclarationAssign" (formula "10") (term "1"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "wordsRequired"))
(rule "assignmentAdditionInt" (formula "10") (term "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "translateJavaAddInt" (formula "10") (term "0,1,0"))
(rule "expand_addJint" (formula "10") (term "0,1,0"))
(rule "polySimp_addComm0" (formula "10") (term "0,0,1,0"))
(rule "expand_moduloInteger" (formula "10") (term "0,1,0"))
(rule "replace_int_RANGE" (formula "10") (term "1,1,0,1,0"))
(rule "replace_int_HALFRANGE" (formula "10") (term "0,0,1,0,1,0"))
(rule "replace_int_MIN" (formula "10") (term "0,0,1,0"))
(rule "polySimp_addAssoc" (formula "10") (term "0,1,0,1,0"))
(rule "add_literals" (formula "10") (term "0,0,1,0,1,0"))
(rule "polyMod_pullOut" (formula "10") (term "1,0,1,0") (inst "polyDivCoeff=Z(1(#))"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,1,0"))
(rule "mul_literals" (formula "10") (term "1,0,1,0,1,0"))
(rule "polySimp_addComm1" (formula "10") (term "0,1,0,1,0"))
(rule "add_literals" (formula "10") (term "0,0,1,0,1,0"))
(rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "x"))
(rule "compound_less_than_comparison_1" (formula "10") (term "1") (inst "#v0=x_1"))
(rule "variableDeclarationAssign" (formula "10") (term "1"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "x_1"))
(rule "assignment_read_attribute_this" (formula "10") (term "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "less_than_comparison_simple" (formula "10") (term "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,1,0"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,1,0"))
(rule "add_literals" (formula "10") (term "0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0"))
(rule "ifSplit" (formula "10"))
(branch "if x true"
    (builtin "One Step Simplification" (formula "1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "mod_axiom" (formula "1") (term "1,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "1"))
   (rule "polySimp_rightDist" (formula "8") (term "0,0"))
   (rule "mul_literals" (formula "8") (term "0,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
   (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor2b" (formula "8") (term "0,0"))
   (rule "add_literals" (formula "8") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "8"))
   (rule "polySimp_mulLiterals" (formula "8") (term "0"))
   (rule "elimGcdLeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(neglit(2(#)))") (inst "elimGcdLeftDiv=div(add(Z(neglit(7(4(6(3(8(4(7(4(1(2(#)))))))))))),
        wordIndex),
    Z(6(9(2(7(6(9(4(9(2(4(#))))))))))))") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
   (rule "neg_literal" (formula "8") (term "0,0,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
   (rule "leq_literals" (formula "8") (term "0,0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
   (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
   (rule "add_literals" (formula "8") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0"))
   (rule "qeq_literals" (formula "8") (term "0"))
    (builtin "One Step Simplification" (formula "8"))
    (builtin "Use Operation Contract" (formula "12") (newnames "heapBefore_ensureCapacity,exc_0,heapAfter_ensureCapacity,anon_heap_ensureCapacity") (contract "BitSet[BitSet::ensureCapacity(int)].JML normal_behavior operation contract.0#BitSet[BitSet::ensureCapacity(int)].JML normal_behavior operation contract.1"))
   (branch "Post (ensureCapacity)"
       (builtin "One Step Simplification" (formula "14"))
       (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
      (rule "expand_inInt" (formula "11") (term "1,0,0,0,1,1,1,0,1,1,1,1"))
      (rule "expand_inInt" (formula "11") (term "1,0,0,0,1,1,1,1,0,1,1,1,1"))
      (rule "replace_int_MAX" (formula "11") (term "1,0,1,0,0,0,1,1,1,0,1,1,1,1"))
      (rule "replace_int_MIN" (formula "11") (term "0,1,1,0,0,0,1,1,1,0,1,1,1,1"))
      (rule "replace_int_MAX" (formula "11") (term "1,0,1,0,0,0,1,1,1,1,0,1,1,1,1"))
      (rule "replace_int_MIN" (formula "11") (term "0,1,1,0,0,0,1,1,1,1,0,1,1,1,1"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "13"))
      (rule "replace_known_left" (formula "14") (term "1,1") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "true_left" (formula "13"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,1,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,0,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,1,1,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,1"))
      (rule "polySimp_addComm1" (formula "13") (term "0,0,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0,0,1,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,0,1,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,0,1,1,1,1,1"))
      (rule "assignment_write_attribute_this" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "mod_axiom" (formula "11") (term "1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,1,0,0,1,0"))
      (rule "add_literals" (formula "11") (term "0,0,1,0,0,1,0"))
      (rule "mod_axiom" (formula "13") (term "1,1,0,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,1,1,1"))
      (rule "polySimp_addAssoc" (formula "13") (term "1,0,1,1,1"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,1,1,1"))
      (rule "add_literals" (formula "13") (term "0,0,1,0,1,1,1"))
      (rule "mod_axiom" (formula "11") (term "0,1,0,0,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "11") (term "0,0,1,0,0,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,1,1,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,0,0,1,1,0"))
      (rule "mod_axiom" (formula "13") (term "0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "13") (term "0,1,0,0,0"))
      (rule "mul_literals" (formula "13") (term "0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,0"))
      (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0"))
      (rule "add_literals" (formula "13") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0,1,1,1,1"))
      (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0,1,1,1,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "13") (term "0,0,1,1"))
      (rule "polySimp_elimOne" (formula "13") (term "0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "0,1,0,1,1,0"))
      (rule "mul_literals" (formula "11") (term "0,0,1,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,0,1,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "0,1,0"))
      (rule "mul_literals" (formula "13") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,0,1,0"))
      (rule "pullOutSelect" (formula "13") (term "0,0,0,1,1,1") (inst "selectSK=BitSet_words_0"))
      (rule "applyEq" (formula "14") (term "0,1,1,1,0,0,0,0,1,1,1,1,1") (ifseqformula "13"))
      (rule "applyEq" (formula "14") (term "0,0,0,1") (ifseqformula "13"))
      (rule "applyEq" (formula "14") (term "1,0,1,0,0,1,1,1,1") (ifseqformula "13"))
      (rule "applyEq" (formula "14") (term "1,0,1,0,0,1,1,1,1,1") (ifseqformula "13"))
      (rule "applyEq" (formula "14") (term "0,0,0,1,1") (ifseqformula "13"))
      (rule "simplifySelectOfAnonEQ" (formula "13") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")) (ifInst ""  (formula "3")))
      (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1,1"))
      (rule "polySimp_addComm1" (formula "14") (term "0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,1,1"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,1,1"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,1,1"))
      (rule "mul_literals" (formula "14") (term "0,1,0,1,1"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,0,1,1"))
      (rule "elementOfIntersect" (formula "13") (term "0,0"))
      (rule "pullOutSelect" (formula "14") (term "0,0,1,1,1,1,1,1") (inst "selectSK=BitSet_sizeIsSticky_0"))
      (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")) (ifInst ""  (formula "3")))
      (rule "elementOfIntersect" (formula "14") (term "0,0"))
      (rule "commuteUnion" (formula "11") (term "1,1,1,0"))
      (rule "commuteUnion" (formula "13") (term "1,2,1,0,0"))
      (rule "commuteUnion" (formula "14") (term "1,2,1,0,0"))
      (rule "nnf_imp2or" (formula "15") (term "0,0,1,1,1,1"))
      (rule "nnf_imp2or" (formula "15") (term "0,0,1,1,1,1,1"))
      (rule "nnf_notAnd" (formula "15") (term "0,0,0,1,1,1,1"))
      (rule "nnf_notAnd" (formula "15") (term "0,0,0,1,1,1,1,1"))
      (rule "nnf_notAnd" (formula "15") (term "1,0,0,0,1,1,1,1"))
      (rule "inEqSimp_notLeq" (formula "15") (term "0,1,0,0,0,1,1,1,1"))
      (rule "mul_literals" (formula "15") (term "1,0,0,0,1,0,0,0,1,1,1,1"))
      (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1,0,0,0,1,1,1,1"))
      (rule "mul_literals" (formula "15") (term "1,0,1,0,0,0,1,1,1,1"))
      (rule "inEqSimp_notGeq" (formula "15") (term "1,1,0,0,0,1,1,1,1"))
      (rule "mul_literals" (formula "15") (term "1,0,0,1,1,0,0,0,1,1,1,1"))
      (rule "add_literals" (formula "15") (term "0,0,1,1,0,0,0,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,1,0,0,0,1,1,1,1"))
      (rule "mul_literals" (formula "15") (term "1,1,1,0,0,0,1,1,1,1"))
      (rule "nnf_notAnd" (formula "15") (term "0,0,0,0,1,1,1,1"))
      (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,0,1,1,1,1"))
      (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0,0,1,1,1,1"))
      (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0,0,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0,1,1,1,1"))
      (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,1,1,1,1"))
      (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,0,1,1,1,1"))
      (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,0,1,1,1,1"))
      (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,0,1,1,1,1"))
      (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,0,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,1,1,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,1,1,1,1"))
      (rule "nnf_notAnd" (formula "15") (term "0,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,0,1,1,1,1,1"))
      (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,0,1,1,1,1,1"))
      (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,1,1,1,1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0,1,1,1,1,1"))
      (rule "nnf_notAnd" (formula "15") (term "1,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_notGeq" (formula "15") (term "1,1,0,0,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "15") (term "1,0,0,1,1,0,0,0,1,1,1,1,1"))
      (rule "add_literals" (formula "15") (term "0,0,1,1,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,1,0,0,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "15") (term "1,1,1,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_notLeq" (formula "15") (term "0,1,0,0,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "15") (term "1,0,0,0,1,0,0,0,1,1,1,1,1"))
      (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,1,1,1,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1,0,0,0,1,1,1,1,1"))
      (rule "mul_literals" (formula "15") (term "1,0,1,0,0,0,1,1,1,1,1"))
      (rule "methodCallEmpty" (formula "18") (term "1"))
      (rule "div_axiom" (formula "1") (term "0,1,1") (inst "quotient=quotient_0"))
      (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
      (rule "qeq_literals" (formula "1") (term "0,1,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "equal_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
      (rule "add_literals" (formula "3") (term "0,0,1"))
      (rule "polySimp_addComm1" (formula "3") (term "1"))
      (rule "add_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_homoInEq0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "applyEq" (formula "14") (term "0,1,1,0,1,1,0") (ifseqformula "1"))
      (rule "polySimp_addComm1" (formula "14") (term "1,0,1,1,0"))
      (rule "applyEq" (formula "18") (term "0,1,1,0,1,1,1") (ifseqformula "1"))
      (rule "polySimp_addComm1" (formula "18") (term "1,0,1,1,1"))
      (rule "applyEq" (formula "16") (term "0,1,1,0,2,0,0,0") (ifseqformula "1"))
      (rule "polySimp_addComm1" (formula "16") (term "1,0,2,0,0,0"))
      (rule "applyEq" (formula "14") (term "0,1,1,0,0,1,0") (ifseqformula "1"))
      (rule "polySimp_addComm1" (formula "14") (term "1,0,0,1,0"))
      (rule "applyEq" (formula "11") (term "0") (ifseqformula "1"))
      (rule "applyEq" (formula "18") (term "0,1,1,0") (ifseqformula "1"))
      (rule "polySimp_addComm1" (formula "18") (term "1,0"))
      (rule "applyEq" (formula "17") (term "0,1,1,0,2,1,0,0") (ifseqformula "1"))
      (rule "polySimp_addComm1" (formula "17") (term "1,0,2,1,0,0"))
      (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "1"))
      (rule "polySimp_addComm1" (formula "4") (term "1"))
      (rule "applyEq" (formula "16") (term "0,1,1,0,2,1,0,0") (ifseqformula "1"))
      (rule "polySimp_addComm1" (formula "16") (term "1,0,2,1,0,0"))
      (rule "applyEq" (formula "17") (term "0,1,1,0,2,0,0,0") (ifseqformula "1"))
      (rule "polySimp_addComm1" (formula "17") (term "1,0,2,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1"))
      (rule "polySimp_rightDist" (formula "2") (term "1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
      (rule "mul_literals" (formula "2") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "3"))
      (rule "mul_literals" (formula "9") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0"))
      (rule "add_literals" (formula "9") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9"))
      (rule "mul_literals" (formula "9") (term "1"))
      (rule "inEqSimp_contradInEq3" (formula "9") (ifseqformula "12"))
      (rule "mul_literals" (formula "9") (term "0,1,0"))
      (rule "greater_literals" (formula "9") (term "0,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "qeq_literals" (formula "9") (term "0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "closeFalse" (formula "9"))
   )
   (branch "Exceptional Post (ensureCapacity)"
       (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
       (builtin "One Step Simplification" (formula "14"))
      (rule "expand_inInt" (formula "11") (term "1,0,0,0,1,1,1,1,0,1,1,1,1"))
      (rule "expand_inInt" (formula "11") (term "1,0,0,0,1,1,1,0,1,1,1,1"))
      (rule "replace_int_MAX" (formula "11") (term "1,0,1,0,0,0,1,1,1,1,0,1,1,1,1"))
      (rule "replace_int_MIN" (formula "11") (term "0,1,1,0,0,0,1,1,1,1,0,1,1,1,1"))
      (rule "replace_int_MAX" (formula "11") (term "1,0,1,0,0,0,1,1,1,0,1,1,1,1"))
      (rule "replace_int_MIN" (formula "11") (term "0,1,1,0,0,0,1,1,1,0,1,1,1,1"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "14"))
      (rule "notLeft" (formula "12"))
      (rule "replace_known_right" (formula "14") (term "1,1") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "notLeft" (formula "14"))
      (rule "replace_known_right" (formula "11") (term "0,1,1,0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "replace_known_right" (formula "13") (term "1") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "notLeft" (formula "13"))
      (rule "replace_known_right" (formula "11") (term "0,1,0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_ltRight" (formula "14"))
      (rule "polySimp_rightDist" (formula "1") (term "0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,0"))
      (rule "inEqSimp_geqRight" (formula "14"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "mod_axiom" (formula "2") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "2") (term "0,1,0,0"))
      (rule "mul_literals" (formula "2") (term "0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
      (rule "add_literals" (formula "2") (term "0,0,0,0"))
      (rule "mod_axiom" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1"))
      (rule "polySimp_rightDist" (formula "2") (term "1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
      (rule "polySimp_rightDist" (formula "2") (term "0,1"))
      (rule "mul_literals" (formula "2") (term "0,0,1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
      (rule "polySimp_elimOne" (formula "2") (term "1,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
      (rule "mul_literals" (formula "1") (term "0,0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_homoInEq1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "leq_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Pre (ensureCapacity)"
       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")) (ifInst ""  (formula "2")))
      (rule "expand_inInt" (formula "12") (term "1"))
      (rule "replace_int_MAX" (formula "12") (term "1,0,1"))
      (rule "replace_int_MIN" (formula "12") (term "0,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0"))
      (rule "add_literals" (formula "12") (term "0,0,0,1,0"))
      (rule "inEqSimp_homoInEq0" (formula "12") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0,1"))
      (rule "add_literals" (formula "12") (term "0,0,0,1"))
      (rule "inEqSimp_homoInEq0" (formula "12") (term "1,1"))
      (rule "mul_literals" (formula "12") (term "1,0,1,1"))
      (rule "polySimp_addComm1" (formula "12") (term "0,1,1"))
      (rule "add_literals" (formula "12") (term "0,0,1,1"))
      (rule "add_zero_left" (formula "12") (term "0,1,1"))
      (rule "mod_axiom" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "1,0,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,1,0,0"))
      (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
      (rule "mod_axiom" (formula "12") (term "0,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1,0"))
      (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1,0"))
      (rule "add_literals" (formula "12") (term "0,0,0,0,1,0"))
      (rule "mod_axiom" (formula "12") (term "0,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1"))
      (rule "mul_literals" (formula "12") (term "0,0,1,0,0,1"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0,1"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1"))
      (rule "add_literals" (formula "12") (term "0,0,0,0,1"))
      (rule "mod_axiom" (formula "12") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,1,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0"))
      (rule "polySimp_rightDist" (formula "12") (term "0,1,1,0"))
      (rule "mul_literals" (formula "12") (term "0,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,1"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,1"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,1"))
      (rule "mul_literals" (formula "12") (term "0,1,0,1"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,0,1"))
      (rule "inEqSimp_sepNegMonomial1" (formula "12") (term "1,1"))
      (rule "polySimp_mulLiterals" (formula "12") (term "0,1,1"))
      (rule "inEqSimp_or_tautInEq2" (formula "12") (term "0"))
      (rule "polySimp_addAssoc" (formula "12") (term "1,1,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,1,1,0"))
      (rule "add_literals" (formula "12") (term "0,0,1,1,0"))
      (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
      (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
      (rule "add_literals" (formula "12") (term "1,0,1,0"))
      (rule "times_zero_1" (formula "12") (term "0,1,0"))
      (rule "leq_literals" (formula "12") (term "1,0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "div_axiom" (formula "1") (term "0,1,1") (inst "quotient=quotient_0"))
      (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
      (rule "qeq_literals" (formula "1") (term "0,1,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "equal_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
      (rule "add_literals" (formula "3") (term "0,0,1"))
      (rule "polySimp_addComm1" (formula "3") (term "1"))
      (rule "add_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_homoInEq0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "applyEq" (formula "15") (term "0,0,1") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "15") (term "1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1"))
      (rule "polySimp_addComm1" (formula "15") (term "0,1"))
      (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "inEqSimp_geqRight" (formula "15"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "applyEq" (formula "5") (term "0,1,1") (ifseqformula "2"))
      (rule "polySimp_addComm1" (formula "5") (term "1"))
      (rule "applyEq" (formula "12") (term "0") (ifseqformula "2"))
      (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "2"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1"))
      (rule "polySimp_rightDist" (formula "4") (term "1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
      (rule "mul_literals" (formula "4") (term "0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
      (rule "mul_literals" (formula "3") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
      (rule "add_literals" (formula "3") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
      (rule "add_literals" (formula "3") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "3") (term "1,0,0"))
      (rule "add_zero_right" (formula "3") (term "0,0"))
      (rule "qeq_literals" (formula "3") (term "0"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "3"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_homoInEq1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "leq_literals" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "if x false"
    (builtin "One Step Simplification" (formula "11"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "inEqSimp_leqRight" (formula "8"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "mod_axiom" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "polySimp_rightDist" (formula "1") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
   (rule "mul_literals" (formula "1") (term "0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
   (rule "methodCallEmpty" (formula "11") (term "1"))
   (rule "tryEmpty" (formula "11") (term "1"))
   (rule "emptyModality" (formula "11") (term "1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "closeTrue" (formula "11"))
)
)
}
