\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Apr 26 16:01:03 CEST 2023
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:on , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:allow , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[Labels]UseOriginLabels=true
[NewSMT]Axiomatisations=false
[NewSMT]Presburger=false
[NewSMT]sqrtSMTTranslation=SMT
[SMTSettings]SelectedTaclets=
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]maxGenericSorts=2
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[Strategy]ActiveStrategy=JavaCardDLStrategy
[Strategy]MaximumNumberOfAutomaticApplications=7000
[Strategy]Timeout=-1
"
}

\javaSource "..";

\include "../taclets/intSet.key",  "../taclets/binaryAxiomsExtension.key",  "../taclets/bitwiseOperations.key";

\proofObligation "#Proof Obligation Settings
#Wed Apr 26 16:01:03 CEST 2023
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
contract=BitSet[BitSet\\:\\:set(int)].JML exceptional_behavior operation contract.0
name=BitSet[BitSet\\:\\:set(int)].JML exceptional_behavior operation contract.0
";

\proof {
(keyLog "0" (keyUser "christianhein" ) (keyVersion "208396f69e"))
(keyLog "1" (keyUser "christianhein" ) (keyVersion "208396f69e"))

(autoModeTime "26583")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "expand_inInt" (formula "1") (term "1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "10") (term "1,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7"))
(rule "times_zero_1" (formula "7") (term "1,0,0"))
(rule "add_zero_right" (formula "7") (term "0,0"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "assignment" (formula "10") (term "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "inEqSimp_sepPosMonomial0" (formula "7"))
(rule "mul_literals" (formula "7") (term "1"))
(rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "7"))
(rule "leq_literals" (formula "4") (term "0"))
 (builtin "One Step Simplification" (formula "4"))
(rule "true_left" (formula "4"))
(rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_set,savedHeapBefore_set"))
 (builtin "One Step Simplification" (formula "9"))
(rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "x"))
(rule "less_than_comparison_simple" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,0"))
(rule "times_zero_1" (formula "9") (term "1,0,0,0,0,1,0"))
(rule "add_zero_right" (formula "9") (term "0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1,0"))
(rule "mul_literals" (formula "9") (term "1,0,0,1,0"))
(rule "replace_known_left" (formula "9") (term "0,0,1,0") (ifseqformula "6"))
 (builtin "One Step Simplification" (formula "9"))
(rule "ifSplit" (formula "9"))
(branch "if x true"
    (builtin "One Step Simplification" (formula "10"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "throwUnfold" (formula "9") (term "1") (inst "#v0=i"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "i"))
   (rule "instanceCreationAssignmentUnfoldArguments" (formula "9") (term "1"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "var"))
   (rule "compound_addition_1" (formula "9") (term "1") (inst "#v=s"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "s"))
   (rule "stringAssignment" (formula "9") (term "1"))
    (builtin "One Step Simplification" (formula "11"))
    (builtin "One Step Simplification" (formula "1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "notLeft" (formula "1"))
   (rule "stringConcatIntExpRight" (formula "11") (term "1") (inst "sk=sk_0"))
    (builtin "One Step Simplification" (formula "13"))
    (builtin "One Step Simplification" (formula "12"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "poolKeyIsContentOfValue" (formula "1") (term "0,1"))
   (rule "equalityToSeqGetAndSeqLenLeft" (formula "1") (inst "iv=iv"))
   (rule "andLeft" (formula "1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
   (rule "add_literals" (formula "1") (term "0,0,1"))
   (rule "lenOfSeqConcat" (formula "1") (term "1,0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "add_literals" (formula "1") (term "1,0,1"))
   (rule "add_literals" (formula "1") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
   (rule "applyEq" (formula "2") (term "0,0,1,0,0,1,0,0") (ifseqformula "3"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "2") (term "0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "2") (term "0,1,0,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "add_literals" (formula "2") (term "0,1,0,0,0,1,0,0"))
   (rule "mul_literals" (formula "2") (term "1,0,0,0,1,0,0"))
   (rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
   (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "3"))
   (rule "lenOfSeqConcat" (formula "1") (term "0"))
   (rule "polySimp_homoEq" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,1,0"))
   (rule "times_zero_1" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "lenOfSeqConcat" (formula "1") (term "0,1,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "add_literals" (formula "1") (term "0,1,0"))
   (rule "mul_literals" (formula "1") (term "1,0"))
   (rule "add_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "instanceCreationAssignment" (formula "13") (term "1") (inst "#v0=i_1"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_1"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "13") (term "1") (inst "#v0=i_2"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_2"))
   (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "__NEW__"))
   (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "13") (term "1") (inst "#v0=i_3"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_3"))
   (rule "allocateInstance" (formula "13"))
    (builtin "One Step Simplification" (formula "14"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "wellFormedCreate" (formula "1") (term "0,1,0"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "blockEmpty" (formula "16") (term "1"))
   (rule "assignment" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=java_lang_Object_created__0"))
   (rule "simplifySelectOfCreate" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
   (rule "castDel" (formula "1") (term "1,0"))
   (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
   (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "16"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
   (rule "applyEqReverse" (formula "12") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "assignment_write_attribute_this" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodCallWithinClass" (formula "16") (term "1"))
   (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodCallSuper" (formula "16") (term "1"))
   (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodCallSuper" (formula "16") (term "1"))
   (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodCallSuper" (formula "16") (term "1"))
   (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodCallSuper" (formula "16") (term "1"))
   (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodCallEmpty" (formula "16") (term "1"))
   (rule "blockEmpty" (formula "16") (term "1"))
   (rule "assignment_write_attribute_this" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "assignment_write_attribute_this" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodCallEmpty" (formula "16") (term "1"))
   (rule "methodCallEmpty" (formula "16") (term "1"))
   (rule "methodCallEmpty" (formula "16") (term "1"))
   (rule "methodCallEmpty" (formula "16") (term "1"))
   (rule "blockEmpty" (formula "16") (term "1"))
   (rule "methodCallReturnIgnoreResult" (formula "16") (term "1"))
   (rule "methodCallReturn" (formula "16") (term "1"))
   (rule "assignment" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodCallEmpty" (formula "16") (term "1"))
   (rule "blockEmpty" (formula "16") (term "1"))
   (rule "assignment" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "var_1"))
   (rule "assignment" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodCallSuper" (formula "16") (term "1"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "arg0"))
   (rule "assignment" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodCallSuper" (formula "16") (term "1"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "arg0_1"))
   (rule "assignment" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodCallSuper" (formula "16") (term "1"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "arg0_2"))
   (rule "assignment" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodCall" (formula "16") (term "1") (newnames "target"))
   (branch "Normal Execution (this != null )"
       (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "12")))
      (rule "false_right" (formula "16"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "arg0_3"))
      (rule "assignment" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "arg1"))
      (rule "assignment" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "target"))
      (rule "delete_unnecessary_cast" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "17"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "methodCallSuper" (formula "16") (term "1"))
      (rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_<init>_4,savedHeapBefore_<init>_4"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "methodCallEmpty" (formula "16") (term "1"))
      (rule "blockEmpty" (formula "16") (term "1"))
      (rule "assignment_write_attribute_this" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "assignment_write_attribute_this" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "assignment_write_attribute_this" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "emptyStatement" (formula "16") (term "1"))
      (rule "assignment_write_attribute_this" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "emptyStatement" (formula "16") (term "1"))
      (rule "methodCallEmpty" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "methodCallEmpty" (formula "16") (term "1"))
      (rule "methodCallEmpty" (formula "16") (term "1"))
      (rule "methodCallEmpty" (formula "16") (term "1"))
      (rule "methodCallEmpty" (formula "16") (term "1"))
      (rule "blockEmpty" (formula "16") (term "1"))
      (rule "assignment_write_attribute" (formula "16") (term "1"))
      (branch "Normal Execution (i_1 != null)"
          (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "12")))
          (builtin "One Step Simplification" (formula "17"))
         (rule "false_right" (formula "16"))
         (rule "assignment" (formula "16") (term "1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "blockEmpty" (formula "16") (term "1"))
         (rule "methodCallThrow" (formula "16") (term "1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "tryCatchThrow" (formula "16") (term "1"))
         (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_1"))
         (rule "equality_comparison_simple" (formula "16") (term "1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "replace_known_right" (formula "16") (term "0,0,1,0") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "ifElseSplit" (formula "16"))
         (branch "if x_1 true"
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_1 false"
             (builtin "One Step Simplification" (formula "17"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "elim_double_block" (formula "16") (term "1"))
            (rule "ifElseSplit" (formula "16"))
            (branch "if i instanceof java.lang.Throwable true"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
               (rule "true_left" (formula "1"))
               (rule "variableDeclaration" (formula "16") (term "1") (newnames "e"))
               (rule "delete_unnecessary_cast" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "17"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "emptyModality" (formula "16") (term "1"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "12")))
               (rule "eqSymm" (formula "16") (term "1,0,0,1"))
               (rule "Class_invariant_axiom_for_BitSet" (formula "10") (inst "i=i_4") (inst "x=x_2") (inst "bitIndex=bitIndex_1") (inst "wordIndex=wordIndex") (inst "i_0=i_0") (ifseqformula "6"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "expand_inInt" (formula "10") (term "1,0,0,1,0,0,0"))
               (rule "expand_inInt" (formula "10") (term "1,0,0,1"))
               (rule "expand_inLong" (formula "10") (term "1,0,0,1,0"))
               (rule "expand_inInt" (formula "10") (term "1,0,0,0,1,0,0"))
               (rule "expand_inInt" (formula "10") (term "1,0,0,0,0,1,0,0"))
               (rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0,1,0,0,0"))
               (rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0,1,0,0,0"))
               (rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0,1"))
               (rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0,1"))
               (rule "replace_long_MAX" (formula "10") (term "1,0,1,0,0,1,0"))
               (rule "replace_long_MIN" (formula "10") (term "0,1,1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0,0,1,0,0"))
               (rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0,0,1,0,0"))
               (rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0,0,0,1,0,0"))
               (rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0,0,0,1,0,0"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "notLeft" (formula "10"))
               (rule "andLeft" (formula "10"))
               (rule "translateJavaMulLong" (formula "15") (term "1,1,1,0"))
               (rule "translateJavaMulLong" (formula "14") (term "0,0,0,1,0,0"))
               (rule "translateJavaSubInt" (formula "12") (term "0,2,0,0,1"))
               (rule "translateJavaCastLong" (formula "15") (term "0,1,1,1,0"))
               (rule "translateJavaAddLong" (formula "14") (term "0,0,1,0,0"))
               (rule "translateJavaCastLong" (formula "14") (term "0,0,0,0,1,0,0"))
               (rule "bitAtDef" (formula "14") (term "0,1,1,0,0"))
               (rule "ifEqualsInteger" (formula "14") (term "1,1,0,0"))
               (rule "equal_literals" (formula "14") (term "1,1,1,1,0,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "15") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0,0,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "16") (term "0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "10"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0,1,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,1,1,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,1,0"))
               (rule "mul_literals" (formula "15") (term "0,1,1,1,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "14") (term "1,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "11"))
               (rule "times_zero_1" (formula "10") (term "0,0"))
               (rule "add_zero_left" (formula "10") (term "0"))
               (rule "expand_subJint" (formula "13") (term "0,2,0,0,1"))
               (rule "polySimp_elimSub" (formula "13") (term "0,0,2,0,0,1"))
               (rule "mul_literals" (formula "13") (term "1,0,0,2,0,0,1"))
               (rule "polySimp_addComm0" (formula "13") (term "0,0,2,0,0,1"))
               (rule "expand_addJlong" (formula "15") (term "0,0,1,0,0"))
               (rule "polySimp_addComm0" (formula "15") (term "0,0,0,1,0,0"))
               (rule "nnf_imp2or" (formula "17") (term "0"))
               (rule "expand_moduloLong" (formula "16") (term "0,1,1,1,1,0"))
               (rule "replace_long_RANGE" (formula "16") (term "1,1,0,1,1,1,1,0"))
               (rule "replace_long_HALFRANGE" (formula "16") (term "0,0,1,0,1,1,1,1,0"))
               (rule "replace_long_MIN" (formula "16") (term "0,0,1,1,1,1,0"))
               (rule "mod_axiom" (formula "16") (term "1,0,1,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,1,1,1,1,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,1,1,1,1,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,1,1,1,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,1,1,1,1,0"))
               (rule "add_zero_left" (formula "16") (term "0,0,1,1,1,1,0"))
               (rule "nnf_imp2or" (formula "14") (term "0"))
               (rule "expand_moduloInteger" (formula "13") (term "0,2,0,0,1"))
               (rule "replace_int_RANGE" (formula "13") (term "1,1,0,2,0,0,1"))
               (rule "replace_int_HALFRANGE" (formula "13") (term "0,0,1,0,2,0,0,1"))
               (rule "replace_int_MIN" (formula "13") (term "0,0,2,0,0,1"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,2,0,0,1"))
               (rule "add_literals" (formula "13") (term "0,0,1,0,2,0,0,1"))
               (rule "mod_axiom" (formula "13") (term "1,0,2,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,2,0,0,1"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,2,0,0,1"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,0,2,0,0,1"))
               (rule "add_literals" (formula "13") (term "0,0,0,2,0,0,1"))
               (rule "expand_moduloLong" (formula "15") (term "0,0,1,0,0"))
               (rule "replace_long_RANGE" (formula "15") (term "1,1,0,0,1,0,0"))
               (rule "replace_long_HALFRANGE" (formula "15") (term "0,0,1,0,0,1,0,0"))
               (rule "replace_long_MIN" (formula "15") (term "0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,0,1,0,0"))
               (rule "mod_axiom" (formula "15") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,1,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "15") (term "0,0,0,0,1,0,0"))
               (rule "expand_mulJlong" (formula "16") (term "1,1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "0,1,1,1,1,0"))
               (rule "polySimp_rightDist" (formula "16") (term "0,1,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,1,1,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "0,0,1,1,1,1,0"))
               (rule "nnf_notAnd" (formula "17") (term "0,0"))
               (rule "expand_mulJlong" (formula "15") (term "1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,1,0,0"))
               (rule "nnf_notAnd" (formula "14") (term "0,0"))
               (rule "expand_moduloLong" (formula "16") (term "1,1,1,1,0"))
               (rule "replace_long_RANGE" (formula "16") (term "1,1,1,1,1,1,0"))
               (rule "replace_long_MIN" (formula "16") (term "0,1,1,1,1,0"))
               (rule "replace_long_HALFRANGE" (formula "16") (term "0,0,1,1,1,1,1,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,1,1,1,1,1,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "1,1,1,0"))
               (rule "add_literals" (formula "16") (term "0,1,1,1,0"))
               (rule "polyMod_pullOut" (formula "16") (term "1,1,1,1,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            int::select(heap,
                        self,
                        BitSet::$wordsInUse)),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,1,0,1,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,1,1,1,0"))
               (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,1,1,1,1,0"))
               (rule "add_literals" (formula "16") (term "1,1,0,1,1,1,1,0"))
               (rule "times_zero_1" (formula "16") (term "1,0,1,1,1,1,0"))
               (rule "add_zero_right" (formula "16") (term "0,1,1,1,1,0"))
               (rule "mod_axiom" (formula "16") (term "1,1,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,1,1,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "1,1,1,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,1,1,1,0"))
               (rule "add_literals" (formula "16") (term "0,0,1,1,1,0"))
               (rule "expand_moduloLong" (formula "15") (term "0,1,0,0,1,0,0"))
               (rule "replace_long_RANGE" (formula "15") (term "1,1,0,1,0,0,1,0,0"))
               (rule "replace_long_HALFRANGE" (formula "15") (term "0,0,1,0,1,0,0,1,0,0"))
               (rule "replace_long_MIN" (formula "15") (term "0,0,1,0,0,1,0,0"))
               (rule "mod_axiom" (formula "15") (term "1,0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,0,0"))
               (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,0,0"))
               (rule "expand_moduloLong" (formula "15") (term "1,0,0,1,0,0,0,1,0,0"))
               (rule "replace_long_RANGE" (formula "15") (term "1,1,1,0,0,1,0,0,0,1,0,0"))
               (rule "replace_long_HALFRANGE" (formula "15") (term "0,0,1,1,0,0,1,0,0,0,1,0,0"))
               (rule "replace_long_MIN" (formula "15") (term "0,1,0,0,1,0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,0,1,0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "15") (term "0,0,0,1,0,0,0,1,0,0"))
               (rule "mod_axiom" (formula "15") (term "1,0,0,1,0,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,0,0,0,1,0,0"))
               (rule "polySimp_addComm0" (formula "15") (term "0,0,0,0,1,0,0,0,1,0,0"))
               (rule "polyDiv_pullOut" (formula "15") (term "0,1,0,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            mul(moduloLong(wordIndex), Z(4(6(#))))),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(1(#))))"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,2,0,1,0,0,0,1,0,0"))
               (rule "equal_literals" (formula "15") (term "0,0,1,0,0,0,1,0,0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,1,0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0,0,1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "15") (term "1,1,0,0,0,1,0,0,0,1,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,1,0,0,0,1,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,1,0,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,0,0"))
               (rule "polySimp_addComm0" (formula "15") (term "1,1,0,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,0,0"))
               (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,0,0"))
               (rule "nnf_notAnd" (formula "17") (term "0,0,0"))
               (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,0"))
               (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "17") (term "1,0,0"))
               (rule "inEqSimp_notLeq" (formula "17") (term "0,1,0,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,1,0,0"))
               (rule "mul_literals" (formula "17") (term "1,0,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "17") (term "1,1,0,0"))
               (rule "mul_literals" (formula "17") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "17") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,1,0,0"))
               (rule "mul_literals" (formula "17") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "16") (term "0"))
               (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
               (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0"))
               (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "14") (term "1,0,0"))
               (rule "inEqSimp_notGeq" (formula "14") (term "1,1,0,0"))
               (rule "mul_literals" (formula "14") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,1,0,0"))
               (rule "mul_literals" (formula "14") (term "1,1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "14") (term "0,1,0,0"))
               (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,1,0,0"))
               (rule "mul_literals" (formula "14") (term "1,0,1,0,0"))
               (rule "expand_mulJlong" (formula "15") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0,0,1,0,0"))
               (rule "expand_moduloLong" (formula "15") (term "0,1,0,0,1,0,0,0,1,0,0"))
               (rule "replace_long_HALFRANGE" (formula "15") (term "0,0,1,0,1,0,0,1,0,0,0,1,0,0"))
               (rule "replace_long_RANGE" (formula "15") (term "1,1,0,1,0,0,1,0,0,0,1,0,0"))
               (rule "replace_long_MIN" (formula "15") (term "0,0,1,0,0,1,0,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,0,0,1,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,0,1,0,0,1,0,0"))
               (rule "mod_axiom" (formula "15") (term "0,1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "0,1,0,0,1,0,0,0,0,1,0,0"))
               (rule "mul_literals" (formula "15") (term "0,0,1,0,0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0,1,0,0,0,0,1,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,0,0,1,0,0,0,0,1,0,0"))
               (rule "polyDiv_pullOut" (formula "15") (term "0,1,0,0,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,2,0,1,0,0,0,0,1,0,0"))
               (rule "equal_literals" (formula "15") (term "0,0,1,0,0,0,0,1,0,0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0,0,1,0,0,0,0,1,0,0"))
               (rule "add_literals" (formula "15") (term "1,1,0,0,0,1,0,0,0,0,1,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,1,0,0,0,0,1,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1,0,0"))
               (rule "polySimp_addComm0" (formula "15") (term "1,1,0,0,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,1,0,0"))
               (rule "polySimp_mulAssoc" (formula "15") (term "0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "0,0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,1,0,0"))
               (rule "nnf_notAnd" (formula "16") (term "0,0"))
               (rule "expand_moduloLong" (formula "15") (term "1,0,0,1,0,0"))
               (rule "replace_long_HALFRANGE" (formula "15") (term "0,0,1,1,0,0,1,0,0"))
               (rule "replace_long_MIN" (formula "15") (term "0,1,0,0,1,0,0"))
               (rule "replace_long_RANGE" (formula "15") (term "1,1,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0,0,1,0,0"))
               (rule "polySimp_addComm0" (formula "15") (term "0,0,0,0,0,0,1,0,0"))
               (rule "polyMod_pullOut" (formula "15") (term "1,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,1,0,0,1,0,0"))
               (rule "add_literals" (formula "15") (term "1,1,0,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,1,0,0,1,0,0"))
               (rule "mod_axiom" (formula "15") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0,0,0,0,1,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0,0,1,0,0"))
               (rule "expand_moduloLong" (formula "15") (term "0,1,0,0,1,0,0,1,0,0"))
               (rule "replace_long_MIN" (formula "15") (term "0,0,1,0,0,1,0,0,1,0,0"))
               (rule "replace_long_RANGE" (formula "15") (term "1,1,0,1,0,0,1,0,0,1,0,0"))
               (rule "replace_long_HALFRANGE" (formula "15") (term "0,0,1,0,1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,0,0"))
               (rule "mod_axiom" (formula "15") (term "0,1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "0,1,0,0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "15") (term "0,0,1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,0,0,1,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,0,1,0,0,1,0,0"))
               (rule "polyDiv_pullOut" (formula "15") (term "0,1,0,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,2,0,1,0,0,1,0,0"))
               (rule "equal_literals" (formula "15") (term "0,0,1,0,0,1,0,0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,1,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0,0,1,0,0,1,0,0"))
               (rule "add_literals" (formula "15") (term "1,1,0,0,0,1,0,0,1,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
               (rule "polySimp_addComm0" (formula "15") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "15") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,0,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0,0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0,0,1,0,0"))
               (rule "add_literals" (formula "15") (term "1,1,0,0,0,1,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,1,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,1,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0,0,1,0,0"))
               (rule "add_literals" (formula "15") (term "1,1,0,0,0,1,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,1,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,1,0,0"))
               (rule "nnf_notAnd" (formula "16") (term "1,0,0"))
               (rule "inEqSimp_notLeq" (formula "16") (term "0,1,0,0"))
               (rule "mul_literals" (formula "16") (term "1,0,0,0,1,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,1,0,0"))
               (rule "mul_literals" (formula "16") (term "1,0,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "16") (term "1,1,0,0"))
               (rule "mul_literals" (formula "16") (term "1,0,0,1,1,0,0"))
               (rule "add_literals" (formula "16") (term "0,0,1,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,1,0,0"))
               (rule "mul_literals" (formula "16") (term "1,1,1,0,0"))
               (rule "nnf_imp2or" (formula "15") (term "0,0"))
               (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
               (rule "nnf_notAnd" (formula "15") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "15") (term "0,1,0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,0,0,0,1,0,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1,0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,0,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "15") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,0,0,1,1,0,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,1,1,0,0,0"))
               (rule "nnf_notAnd" (formula "15") (term "0,0,0,0"))
               (rule "nnf_notAnd" (formula "15") (term "1,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "15") (term "0,1,0,0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,0,0,0,1,0,0,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,1,0,0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,0,1,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "15") (term "1,1,0,0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,0,0,1,1,0,0,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,1,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,1,0,0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,1,1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "15") (term "0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,1,0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "15") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0,1,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,1,0,0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "15") (term "0,0,0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,0,0,0"))
               (rule "commute_or_2" (formula "17") (term "0,0"))
               (rule "commute_or_2" (formula "14") (term "0,0"))
               (rule "Class_invariant_axiom_for_BitSet" (formula "24") (term "0") (inst "i=i_4") (inst "x=x_2") (inst "bitIndex=bitIndex_1") (inst "wordIndex=wordIndex") (inst "i_0=i_0") (ifseqformula "6"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "expand_inInt" (formula "24") (term "1,0,0,0,1,0,0,0"))
               (rule "expand_inInt" (formula "24") (term "1,0,0,1,0"))
               (rule "expand_inInt" (formula "24") (term "1,0,0,0,0,1,0,0,0"))
               (rule "expand_inLong" (formula "24") (term "1,0,0,1,0,0"))
               (rule "expand_inInt" (formula "24") (term "1,0,0,1,0,0,0,0"))
               (rule "replace_int_MAX" (formula "24") (term "1,0,1,0,0,0,1,0,0,0"))
               (rule "replace_int_MIN" (formula "24") (term "0,1,1,0,0,0,1,0,0,0"))
               (rule "replace_int_MAX" (formula "24") (term "1,0,1,0,0,1,0"))
               (rule "replace_int_MIN" (formula "24") (term "0,1,1,0,0,1,0"))
               (rule "replace_int_MAX" (formula "24") (term "1,0,1,0,0,0,0,1,0,0,0"))
               (rule "replace_int_MIN" (formula "24") (term "0,1,1,0,0,0,0,1,0,0,0"))
               (rule "replace_long_MAX" (formula "24") (term "1,0,1,0,0,1,0,0"))
               (rule "replace_long_MIN" (formula "24") (term "0,1,1,0,0,1,0,0"))
               (rule "replace_int_MAX" (formula "24") (term "1,0,1,0,0,1,0,0,0,0"))
               (rule "replace_int_MIN" (formula "24") (term "0,1,1,0,0,1,0,0,0,0"))
               (rule "translateJavaCastLong" (formula "24") (term "0,1,1,1,0,1,0,0"))
               (rule "translateJavaSubInt" (formula "24") (term "0,2,0,0,1,1,0,0,0,0,0"))
               (rule "translateJavaAddLong" (formula "24") (term "0,0,1,0,0,1,0,0,0"))
               (rule "translateJavaMulLong" (formula "24") (term "1,1,1,0,1,0,0"))
               (rule "translateJavaMulLong" (formula "24") (term "0,0,0,1,0,0,1,0,0,0"))
               (rule "translateJavaCastLong" (formula "24") (term "0,0,0,0,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,1,1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,0,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,0,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,0,1,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,1,0,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,1,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,1,1,0,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,1,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,1,1,0,0,0,1,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,0,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,2,0,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,1,1,1,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "24") (term "1,0,0,1,0,0,0,0,0,1,0,0,0"))
               (rule "add_literals" (formula "24") (term "0,0,1,0,0,0,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,1,1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,0,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,0,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,1,1,0,0,0,0,0,0"))
               (rule "bitAtDef" (formula "24") (term "0,1,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,1,0,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,1,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,1,1,0,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,1,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,1,1,0,0,0,1,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,0,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,2,0,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,1,1,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,1,1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,0,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,0,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,1,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,1,0,1,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,1,0,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,1,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,1,1,0,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,1,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,1,1,0,0,0,1,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,0,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,2,0,0,1,1,0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,0,0,0,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,1,1,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,0,1,0,1,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,1,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0,1,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,1,0,1,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,1,0,1,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,1,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,1,0,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,1,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,0,1,0,1,1,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,1,1,0,1,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "1,0,1,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,1,1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "1,1,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "24") (term "0,0,1,0,1,1,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,1,1,0,0,1,0,0,0"))
               (rule "ifEqualsInteger" (formula "24") (term "1,1,0,0,1,0,0,0"))
               (rule "equal_literals" (formula "24") (term "1,1,1,1,0,0,1,0,0,0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0,0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,1,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,1,0,0,0,0"))
               (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "24") (term "1,1,0,0,0,0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,0,0,0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,1,1,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "24") (term "1,1,1,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,1,0,1,0,0"))
               (rule "mul_literals" (formula "24") (term "0,1,1,1,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "24") (term "1,1,1,1,0,1,0,0"))
               (rule "pullOutSelect" (formula "24") (term "0,0,1,1,0,0,0,0,0") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
               (rule "pullOutSelect" (formula "25") (term "1,0,0,0,1,1,1,0,0,1,0,0,0") (inst "selectSK=BitSet_words_0"))
               (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "26") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "26") (term "1,0,1,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "26") (term "1,0,1,1,0,1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "26") (term "0,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "26") (term "1,0,0,1,0,1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "26") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "26") (term "0,1,1,1,0,0,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
               (rule "applyEqReverse" (formula "26") (term "1,0,0,0,1,1,1,0,0,1,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "26") (term "1,0,1,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "26") (term "1,0,1,1,0,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "26") (term "0,0,1,1,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "26") (term "1,0,0,1,0,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "25") (term "0,0,0,0,0,0,0,0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0,0,0,0,0,0"))
               (rule "pullOutSelect" (formula "1") (term "0,0,2,0") (inst "selectSK=BitSet_wordsInUse_0"))
               (rule "applyEq" (formula "26") (term "0,0,0,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "26") (term "0,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "26") (term "0,1,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "26") (term "1,0,0,0,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "26") (term "0,0,1,1,1,1,0,1,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "26") (term "1,1,1,0,0,0,0,0,0,0,1,0,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
               (rule "applyEqReverse" (formula "26") (term "0,0,1,1,0,0,0,0,0") (ifseqformula "2"))
               (rule "applyEqReverse" (formula "2") (term "0,0,2,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "26") (term "0,0,0,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "26") (term "0,1,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "26") (term "1,0,0,0,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "26") (term "0,0,1,1,1,1,0,1,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "26") (term "1,1,1,0,0,0,0,0,0,0,1,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "26") (term "0,0,2,0,0,1,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_left" (formula "24") (term "0,0,0,0,0,0,0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "12")))
               (rule "pullOutSelect" (formula "24") (term "1,0,0,0,1,0,0") (inst "selectSK=BitSet_iSet_0"))
               (rule "applyEq" (formula "25") (term "1,0,1,0,0,1,0,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
               (rule "applyEqReverse" (formula "25") (term "1,0,0,0,1,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "25") (term "1,0,1,0,0,1,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "div_axiom" (formula "13") (term "0,1,0,2,0,0,1") (inst "quotient=quotient_0"))
               (rule "mul_literals" (formula "13") (term "1,1,1,1,1"))
               (rule "qeq_literals" (formula "13") (term "0,1,1"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "equal_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "andLeft" (formula "13"))
               (rule "andLeft" (formula "13"))
               (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
               (rule "add_literals" (formula "15") (term "0,0,1"))
               (rule "polySimp_addComm1" (formula "15") (term "1"))
               (rule "add_literals" (formula "15") (term "0,1"))
               (rule "inEqSimp_homoInEq0" (formula "14"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0"))
               (rule "inEqSimp_homoInEq1" (formula "15"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
               (rule "polySimp_addComm1" (formula "15") (term "0"))
               (rule "applyEq" (formula "16") (term "0,1,0,2,0,0,1") (ifseqformula "13"))
               (rule "polySimp_addComm1" (formula "16") (term "0,2,0,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14"))
               (rule "polySimp_mulComm0" (formula "14") (term "1"))
               (rule "polySimp_rightDist" (formula "14") (term "1"))
               (rule "mul_literals" (formula "14") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "15"))
               (rule "polySimp_mulComm0" (formula "15") (term "1"))
               (rule "polySimp_rightDist" (formula "15") (term "1"))
               (rule "mul_literals" (formula "15") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
               (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "15"))
               (rule "mul_literals" (formula "11") (term "0,0"))
               (rule "add_zero_left" (formula "11") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "11"))
               (rule "mul_literals" (formula "11") (term "1"))
               (rule "elimGcdGeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
               (rule "leq_literals" (formula "11") (term "0,0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
               (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
               (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "11") (term "0,0,0,0"))
               (rule "add_literals" (formula "11") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
               (rule "add_literals" (formula "11") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "11") (term "1,0,0"))
               (rule "add_zero_right" (formula "11") (term "0,0"))
               (rule "leq_literals" (formula "11") (term "0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "13"))
               (rule "polySimp_rightDist" (formula "15") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0"))
               (rule "mul_literals" (formula "15") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15"))
               (rule "polySimp_mulComm0" (formula "15") (term "1"))
               (rule "polySimp_rightDist" (formula "15") (term "1"))
               (rule "mul_literals" (formula "15") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
               (rule "cut_direct" (formula "18") (term "0,0"))
               (branch "CUT: self.wordsInUse = 0 TRUE"
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "replace_known_left" (formula "29") (term "0,0,0,0,0,0,0") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "applyEq" (formula "29") (term "1,1,1,0,0,0,0,0,0,0,1,0,0,0") (ifseqformula "18"))
                  (rule "add_zero_right" (formula "29") (term "1,1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "18"))
                  (rule "qeq_literals" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "applyEq" (formula "13") (term "1,0,0") (ifseqformula "17"))
                  (rule "add_zero_right" (formula "13") (term "0,0"))
                  (rule "div_literals" (formula "13") (term "0"))
                  (rule "eqSymm" (formula "13"))
                  (rule "applyEq" (formula "20") (term "0,1,0,0,1,1,1,1,0") (ifseqformula "17"))
                  (rule "mul_literals" (formula "20") (term "1,0,0,1,1,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0,1,1,1,1,0"))
                  (rule "div_literals" (formula "20") (term "0,1,1,1,1,0"))
                  (rule "mul_literals" (formula "20") (term "1,1,1,1,0"))
                  (rule "add_zero_right" (formula "20") (term "1,1,1,0"))
                  (rule "applyEq" (formula "28") (term "0,0,1,1,1,1,0,1,0,0") (ifseqformula "17"))
                  (rule "applyEq" (formula "18") (term "1,1,0,0,0,0") (ifseqformula "17"))
                  (rule "add_zero_right" (formula "18") (term "1,0,0,0,0"))
                  (rule "applyEq" (formula "16") (term "0") (ifseqformula "17"))
                  (rule "inEqSimp_homoInEq0" (formula "16"))
                  (rule "mul_literals" (formula "16") (term "1,0"))
                  (rule "add_zero_right" (formula "16") (term "0"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "17"))
                  (rule "inEqSimp_commuteLeq" (formula "12"))
                  (rule "applyEq" (formula "27") (term "1,0,0,0,0,0,0,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "18") (term "1,1,0,0,0,0,0,0,0") (ifseqformula "16"))
                  (rule "applyEq" (formula "14") (term "0") (ifseqformula "16"))
                  (rule "inEqSimp_homoInEq1" (formula "14"))
                  (rule "mul_literals" (formula "14") (term "1,0"))
                  (rule "add_zero_right" (formula "14") (term "0"))
                  (rule "applyEqRigid" (formula "14") (term "0,1,0") (ifseqformula "12"))
                  (rule "mul_literals" (formula "14") (term "1,0"))
                  (rule "add_zero_right" (formula "14") (term "0"))
                  (rule "leq_literals" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "applyEqRigid" (formula "14") (term "0,1,0") (ifseqformula "12"))
                  (rule "mul_literals" (formula "14") (term "1,0"))
                  (rule "add_zero_right" (formula "14") (term "0"))
                  (rule "qeq_literals" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "applyEq" (formula "13") (term "0,1,1") (ifseqformula "12"))
                  (rule "times_zero_2" (formula "13") (term "1,1"))
                  (rule "add_zero_right" (formula "13") (term "1"))
                  (rule "applyEq" (formula "17") (term "0,1,1,1,1,0") (ifseqformula "14"))
                  (rule "times_zero_2" (formula "17") (term "1,1,1,1,0"))
                  (rule "add_zero_right" (formula "17") (term "1,1,1,0"))
                  (rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "12"))
                  (rule "qeq_literals" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "10"))
                  (rule "leq_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "inEqSimp_or_tautInEq0" (formula "14") (term "0,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "14") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "qeq_literals" (formula "14") (term "1,0,0,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "arrayLengthIsAnInt" (formula "10") (term "0"))
                  (rule "expand_inInt" (formula "10"))
                  (rule "replace_int_MIN" (formula "10") (term "0,1"))
                  (rule "replace_int_MAX" (formula "10") (term "1,0"))
                  (rule "andLeft" (formula "10"))
                  (rule "inEqSimp_commuteLeq" (formula "11"))
                  (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "12"))
                  (rule "leq_literals" (formula "11") (term "0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                  (rule "commute_or" (formula "15") (term "1,0,0"))
                  (rule "expand_addJlong" (formula "23") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "23") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "expand_mulJlong" (formula "23") (term "1,1,1,1,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "23") (term "0,1,0"))
                  (rule "commute_or" (formula "16") (term "1,0,0,0"))
                  (rule "commute_or" (formula "14") (term "1,0,0,0"))
                  (rule "expand_mulJlong" (formula "23") (term "1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "expand_moduloLong" (formula "23") (term "1,1,1,1,0,1,0,0"))
                  (rule "replace_long_RANGE" (formula "23") (term "1,1,1,1,1,1,0,1,0,0"))
                  (rule "replace_long_HALFRANGE" (formula "23") (term "0,0,1,1,1,1,1,0,1,0,0"))
                  (rule "replace_long_MIN" (formula "23") (term "0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "1,1,1,0,1,0,0"))
                  (rule "add_literals" (formula "23") (term "0,1,1,1,0,1,0,0"))
                  (rule "mod_axiom" (formula "23") (term "1,1,1,1,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "1,1,1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,1,1,1,0,1,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,1,1,1,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "23") (term "0,0,0,0,0"))
                  (rule "expand_moduloLong" (formula "23") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_RANGE" (formula "23") (term "1,1,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_HALFRANGE" (formula "23") (term "0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_MIN" (formula "23") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "mod_axiom" (formula "23") (term "1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "23") (term "0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "expand_moduloLong" (formula "23") (term "0,1,0,0,1,1,1,1,0,1,0,0"))
                  (rule "replace_long_RANGE" (formula "23") (term "1,1,0,1,0,0,1,1,1,1,0,1,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,1,0,1,0,0,1,1,1,1,0,1,0,0"))
                  (rule "replace_long_MIN" (formula "23") (term "0,0,1,0,0,1,1,1,1,0,1,0,0"))
                  (rule "replace_long_HALFRANGE" (formula "23") (term "0,1,0,1,0,0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,1,1,1,0,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,1,1,1,0,1,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,1,1,1,1,0,1,0,0"))
                  (rule "mod_axiom" (formula "23") (term "0,1,0,0,1,1,1,1,0,1,0,0"))
                  (rule "div_literals" (formula "23") (term "0,0,1,0,1,0,0,1,1,1,1,0,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,1,0,0,1,1,1,1,0,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,1,0,0,1,1,1,1,0,1,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,1,0,0,1,1,1,1,0,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,1,1,1,1,0,1,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,1,1,1,1,0,1,0,0"))
                  (rule "div_literals" (formula "23") (term "0,1,1,1,1,0,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,1,1,1,0,1,0,0"))
                  (rule "add_zero_right" (formula "23") (term "1,1,1,0,1,0,0"))
                  (rule "expand_moduloLong" (formula "23") (term "1,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_RANGE" (formula "23") (term "1,1,1,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_HALFRANGE" (formula "23") (term "0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_MIN" (formula "23") (term "0,1,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "23") (term "0,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "mod_axiom" (formula "23") (term "1,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "23") (term "0,0,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polyDiv_pullOut" (formula "23") (term "0,1,0,0,0,1,0,0,1,0,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            mul(moduloLong(wordIndex), Z(4(6(#))))),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(1(#))))"))
                  (rule "equal_literals" (formula "23") (term "0,0,1,0,0,0,1,0,0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "23") (term "1,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulAssoc" (formula "23") (term "0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "expand_moduloLong" (formula "23") (term "0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_RANGE" (formula "23") (term "1,1,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_HALFRANGE" (formula "23") (term "0,0,1,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_MIN" (formula "23") (term "0,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "mod_axiom" (formula "23") (term "0,1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "0,1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,0,1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "expand_moduloLong" (formula "23") (term "0,1,1,1,1,0,1,0,0"))
                  (rule "replace_long_MIN" (formula "23") (term "0,0,1,1,1,1,0,1,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,1,0,1,1,1,1,0,1,0,0"))
                  (rule "replace_long_RANGE" (formula "23") (term "1,1,0,1,1,1,1,0,1,0,0"))
                  (rule "replace_long_HALFRANGE" (formula "23") (term "0,1,0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,1,1,1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,1,1,1,0,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "1,1,1,0,1,0,0"))
                  (rule "add_literals" (formula "23") (term "0,1,1,1,0,1,0,0"))
                  (rule "mod_axiom" (formula "23") (term "0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,1,1,1,0,1,0,0"))
                  (rule "div_literals" (formula "23") (term "0,1,0,1,1,1,1,0,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,1,1,1,1,0,1,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,1,1,1,1,0,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,1,1,1,0,1,0,0"))
                  (rule "add_literals" (formula "23") (term "1,1,1,0,1,0,0"))
                  (rule "expand_moduloLong" (formula "23") (term "0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_MIN" (formula "23") (term "0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_HALFRANGE" (formula "23") (term "0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_RANGE" (formula "23") (term "1,1,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "mod_axiom" (formula "23") (term "0,1,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polyDiv_pullOut" (formula "23") (term "0,1,0,0,0,0,1,0,0,1,0,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                  (rule "equal_literals" (formula "23") (term "0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "23") (term "1,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "expand_moduloLong" (formula "23") (term "0,1,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_MIN" (formula "23") (term "0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_RANGE" (formula "23") (term "1,1,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_HALFRANGE" (formula "23") (term "0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "mod_axiom" (formula "23") (term "0,1,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "0,1,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polyDiv_pullOut" (formula "23") (term "0,1,0,0,0,1,0,0,1,0,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                  (rule "equal_literals" (formula "23") (term "0,0,1,0,0,0,1,0,0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "23") (term "1,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulAssoc" (formula "23") (term "0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "0,0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "expand_moduloLong" (formula "23") (term "1,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_RANGE" (formula "23") (term "1,1,1,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_HALFRANGE" (formula "23") (term "0,0,1,1,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_MIN" (formula "23") (term "0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,1,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "23") (term "0,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polyMod_pullOut" (formula "23") (term "1,0,0,1,0,0,1,0,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "1,1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "mod_axiom" (formula "23") (term "1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "23") (term "0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "23") (term "0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "23") (term "0,0,1,0"))
                  (rule "nnf_imp2or" (formula "23") (term "0,1,0,0"))
                  (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "23") (term "1,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "23") (term "0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "23") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,1,1,0,0,1,0"))
                  (rule "add_literals" (formula "23") (term "0,0,1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "23") (term "1,1,1,0,0,1,0"))
                  (rule "nnf_notAnd" (formula "23") (term "0,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,1,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,1,0"))
                  (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,1,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0,1,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,1,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0,0,1,0"))
                  (rule "nnf_notAnd" (formula "23") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "23") (term "0,0,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "23") (term "1,0,0,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "23") (term "0,1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,1,0,0,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "23") (term "1,1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,1,1,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,1,1,0,0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0,0,0"))
                  (rule "commute_and" (formula "15") (term "1,0"))
                  (rule "inEqSimp_and_contradInEq0" (formula "15") (term "1,0"))
                  (rule "qeq_literals" (formula "15") (term "1,1,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "nnf_notAnd" (formula "23") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "23") (term "0,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0,1,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "23") (term "1,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,1,1,0,0,1,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,1,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,1,1,0,0,1,0,0"))
                  (rule "nnf_notAnd" (formula "23") (term "0,0,0,1,0,0,0"))
                  (rule "shift_paren_or" (formula "16") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "14") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "23") (term "1,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "23") (term "0,1,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,1,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "23") (term "1,1,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,1,1,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,1,1,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,1,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,1,1,0,0,0,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "23") (term "1,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "23") (term "0,1,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,1,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "23") (term "1,1,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,1,1,0,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,1,1,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,1,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,1,1,0,0,0,0,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,1,0,0,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,1,0,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,1,0,0,0,0,0,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "23") (term "1,0,0,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,1,0,0,0,0,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0,1,0,0,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,1,0,0,0,0,0,0,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "23") (term "0,0,1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "23") (term "0,1,0,0,0,0,0,0,0,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "shift_paren_or" (formula "15") (term "0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "cnf_rightDist" (formula "17") (term "0"))
                  (rule "distr_forallAnd" (formula "17"))
                  (rule "andLeft" (formula "17"))
                  (rule "commute_or" (formula "18") (term "0"))
                  (rule "commute_or" (formula "15") (term "0,0,0,0"))
                  (rule "inEqSimp_or_subsumption0" (formula "15") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "15") (term "0,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "commute_or" (formula "17") (term "0,0,0,0"))
                  (rule "inEqSimp_or_subsumption0" (formula "17") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "17") (term "0,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "commute_or" (formula "18") (term "0,0,0,0"))
                  (rule "inEqSimp_or_subsumption0" (formula "18") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "18") (term "0,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "andRight" (formula "25"))
                  (branch "Case 1"
                     (rule "andRight" (formula "25"))
                     (branch "Case 1"
                        (rule "andRight" (formula "25"))
                        (branch "Case 1"
                           (rule "allRight" (formula "25") (inst "sk=i_0_0"))
                           (rule "orRight" (formula "25"))
                           (rule "crossInst" (formula "18") (inst "sk=i_4_0") (ifseqformula "25"))
                           (rule "crossInst" (formula "15") (inst "sk=i_0_1") (ifseqformula "26"))
                           (rule "crossInst" (formula "18") (inst "sk=i_4_1") (ifseqformula "27"))
                           (rule "cutUpperBound" (formula "28") (ifseqformula "16"))
                           (branch "Case 1"
                              (rule "cutUpperBound" (formula "29") (ifseqformula "20"))
                              (branch "Case 1"
                                 (rule "cutUpperBound" (formula "29") (ifseqformula "22"))
                                 (branch "Case 1"
                                    (rule "orRight" (formula "29"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "orRight" (formula "33"))
                                    (rule "orRight" (formula "32"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "inEqSimp_leqRight" (formula "35"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_geqRight" (formula "35"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_leqRight" (formula "34"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_geqRight" (formula "35"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                                    (rule "applyEq" (formula "25") (term "0,2,0,1") (ifseqformula "24"))
                                    (rule "applyEqRigid" (formula "28") (term "1,1,0") (ifseqformula "27"))
                                    (rule "applyEqRigid" (formula "21") (term "1,1,0") (ifseqformula "20"))
                                    (rule "applyEq" (formula "21") (term "0,1,0") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq0" (formula "21") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "21") (term "0,1,0"))
                                    (rule "add_literals" (formula "21") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "21") (term "0,1,0"))
                                    (rule "qeq_literals" (formula "21") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "true_left" (formula "21"))
                                    (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "23"))
                                    (rule "applyEq" (formula "27") (term "0,1,0") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq0" (formula "27") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "27") (term "0,1,0"))
                                    (rule "add_literals" (formula "27") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "27") (term "0,1,0"))
                                    (rule "qeq_literals" (formula "27") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "applyEq" (formula "24") (term "0,1,0") (ifseqformula "5"))
                                    (rule "inEqSimp_homoInEq0" (formula "24") (term "1,0"))
                                    (rule "polySimp_pullOutFactor1" (formula "24") (term "0,1,0"))
                                    (rule "add_literals" (formula "24") (term "1,0,1,0"))
                                    (rule "times_zero_1" (formula "24") (term "0,1,0"))
                                    (rule "qeq_literals" (formula "24") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "true_left" (formula "24"))
                                    (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "5"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0"))
                                    (rule "add_literals" (formula "1") (term "0"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "Case 2"
                                    (rule "orRight" (formula "30"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "close" (formula "26") (ifseqformula "1"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "cutUpperBound" (formula "30") (ifseqformula "23"))
                                 (branch "Case 1"
                                    (rule "orRight" (formula "30"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "close" (formula "26") (ifseqformula "1"))
                                 )
                                 (branch "Case 2"
                                    (rule "orRight" (formula "30"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "close" (formula "26") (ifseqformula "1"))
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "cutUpperBound" (formula "29") (ifseqformula "20"))
                              (branch "Case 1"
                                 (rule "cutUpperBound" (formula "30") (ifseqformula "23"))
                                 (branch "Case 1"
                                    (rule "orRight" (formula "30"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "close" (formula "26") (ifseqformula "1"))
                                 )
                                 (branch "Case 2"
                                    (rule "orRight" (formula "30"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "close" (formula "26") (ifseqformula "1"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "cutUpperBound" (formula "29") (ifseqformula "22"))
                                 (branch "Case 1"
                                    (rule "orRight" (formula "30"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "andLeft" (formula "17"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "close" (formula "26") (ifseqformula "1"))
                                 )
                                 (branch "Case 2"
                                    (rule "orRight" (formula "29"))
                                    (rule "andLeft" (formula "21"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "andLeft" (formula "20"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "33"))
                                    (rule "orRight" (formula "32"))
                                    (rule "eqSymm" (formula "25"))
                                    (rule "inEqSimp_leqRight" (formula "35"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_geqRight" (formula "35"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_geqRight" (formula "35"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "35"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                                    (rule "applyEqRigid" (formula "20") (term "1,1,0") (ifseqformula "19"))
                                    (rule "applyEqRigid" (formula "27") (term "0,2,0,1") (ifseqformula "26"))
                                    (rule "applyEq" (formula "20") (term "0,1,0,0") (ifseqformula "19"))
                                    (rule "applyEqRigid" (formula "24") (term "1,1,0") (ifseqformula "23"))
                                    (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "26"))
                                    (rule "applyEqRigid" (formula "27") (term "0,0,0,0") (ifseqformula "26"))
                                    (rule "applyEqRigid" (formula "27") (term "0,1,0,0") (ifseqformula "26"))
                                    (rule "applyEqRigid" (formula "24") (term "0,1,0,0") (ifseqformula "23"))
                                    (rule "applyEqRigid" (formula "20") (term "0,2,0,1") (ifseqformula "19"))
                                    (rule "applyEqRigid" (formula "24") (term "0,0,0,0") (ifseqformula "23"))
                                    (rule "applyEqRigid" (formula "24") (term "0,2,0,1") (ifseqformula "23"))
                                    (rule "applyEq" (formula "20") (term "0,0,0,0") (ifseqformula "19"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                    (rule "mul_literals" (formula "3") (term "1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "inEqSimp_contradEq7" (formula "29") (ifseqformula "2"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                                    (rule "add_literals" (formula "29") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "29") (term "0,0"))
                                    (rule "leq_literals" (formula "29") (term "0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "false_right" (formula "29"))
                                    (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "20") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "20") (term "1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "20") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "20") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "20"))
                                    (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1,0"))
                                    (rule "add_literals" (formula "24") (term "1,1,0,0,1,0"))
                                    (rule "times_zero_1" (formula "24") (term "1,0,0,1,0"))
                                    (rule "add_zero_right" (formula "24") (term "0,0,1,0"))
                                    (rule "leq_literals" (formula "24") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "inEqSimp_contradInEq1" (formula "27") (term "0,0,0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "27") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "4") (term "0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "inEqSimp_contradInEq0" (formula "19") (term "1,0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "19") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "19"))
                                    (rule "inEqSimp_contradInEq0" (formula "23") (term "1,0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "23") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "23"))
                                    (rule "inEqSimp_contradInEq0" (formula "26") (term "0,0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "26") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "19") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "19"))
                                    (rule "applyEq" (formula "23") (term "0,1") (ifseqformula "19"))
                                    (rule "qeq_literals" (formula "23") (term "1"))
                                     (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "applyEq" (formula "25") (term "0,1") (ifseqformula "19"))
                                    (rule "leq_literals" (formula "25") (term "1"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "true_left" (formula "25"))
                                    (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=arr_1"))
                                    (rule "simplifySelectOfCreate" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
                                    (rule "simplifySelectOfCreate" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                                    (rule "applyEqReverse" (formula "33") (term "0") (ifseqformula "1"))
                                    (rule "close" (formula "33") (ifseqformula "20"))
                                 )
                              )
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "25") (inst "sk=x_2_0"))
                           (rule "orRight" (formula "25"))
                           (rule "orRight" (formula "25"))
                           (rule "notRight" (formula "25"))
                           (rule "orRight" (formula "26"))
                           (rule "inEqSimp_geqRight" (formula "26"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_leqRight" (formula "27"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "commute_and" (formula "28"))
                           (rule "inEqSimp_and_contradInEq0" (formula "28"))
                           (rule "qeq_literals" (formula "28") (term "1"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "false_right" (formula "28"))
                           (rule "allLeft" (formula "19") (inst "t=x_2_0"))
                           (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "19") (term "0,0"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "19"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "25") (inst "sk=i_4_0"))
                        (rule "orRight" (formula "25"))
                        (rule "crossInst" (formula "15") (inst "sk=i_0_0") (ifseqformula "25"))
                        (rule "crossInst" (formula "18") (inst "sk=i_4_1") (ifseqformula "26"))
                        (rule "crossInst" (formula "20") (inst "sk=i_4_2") (ifseqformula "27"))
                        (rule "cutUpperBound" (formula "28") (ifseqformula "16"))
                        (branch "Case 1"
                           (rule "cutUpperBound" (formula "29") (ifseqformula "20"))
                           (branch "Case 1"
                              (rule "cutUpperBound" (formula "29") (ifseqformula "22"))
                              (branch "Case 1"
                                 (rule "orRight" (formula "29"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "20"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "orRight" (formula "33"))
                                 (rule "orRight" (formula "32"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "eqSymm" (formula "16"))
                                 (rule "inEqSimp_leqRight" (formula "35"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_geqRight" (formula "35"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_leqRight" (formula "34"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "35"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "20"))
                                 (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "20"))
                                 (rule "applyEqRigid" (formula "25") (term "0,1,0,0") (ifseqformula "24"))
                                 (rule "applyEqRigid" (formula "25") (term "0,0,0,0") (ifseqformula "24"))
                                 (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "20"))
                                 (rule "applyEq" (formula "28") (term "0,1,0,0") (ifseqformula "27"))
                                 (rule "applyEqRigid" (formula "25") (term "0,2,0,1") (ifseqformula "24"))
                                 (rule "applyEq" (formula "29") (term "1,1,0,0") (ifseqformula "5"))
                                 (rule "applyEq" (formula "36") (term "0,2,0,0") (ifseqformula "20"))
                                 (rule "applyEq" (formula "28") (term "0,0,0,0") (ifseqformula "27"))
                                 (rule "applyEq" (formula "36") (term "0,2,0,1") (ifseqformula "20"))
                                 (rule "applyEqRigid" (formula "25") (term "1,1,0") (ifseqformula "24"))
                                 (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "5"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0"))
                                 (rule "add_literals" (formula "1") (term "0"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "Case 2"
                                 (rule "orRight" (formula "30"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "21"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "close" (formula "26") (ifseqformula "1"))
                              )
                           )
                           (branch "Case 2"
                              (rule "cutUpperBound" (formula "30") (ifseqformula "23"))
                              (branch "Case 1"
                                 (rule "orRight" (formula "30"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "21"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "close" (formula "26") (ifseqformula "1"))
                              )
                              (branch "Case 2"
                                 (rule "orRight" (formula "30"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "21"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "close" (formula "26") (ifseqformula "1"))
                              )
                           )
                        )
                        (branch "Case 2"
                           (rule "cutUpperBound" (formula "29") (ifseqformula "20"))
                           (branch "Case 1"
                              (rule "cutUpperBound" (formula "30") (ifseqformula "23"))
                              (branch "Case 1"
                                 (rule "orRight" (formula "30"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "21"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "close" (formula "26") (ifseqformula "1"))
                              )
                              (branch "Case 2"
                                 (rule "orRight" (formula "30"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "21"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "close" (formula "26") (ifseqformula "1"))
                              )
                           )
                           (branch "Case 2"
                              (rule "cutUpperBound" (formula "29") (ifseqformula "22"))
                              (branch "Case 1"
                                 (rule "orRight" (formula "30"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "andLeft" (formula "21"))
                                 (rule "andLeft" (formula "24"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "close" (formula "26") (ifseqformula "1"))
                              )
                              (branch "Case 2"
                                 (rule "orRight" (formula "29"))
                                 (rule "andLeft" (formula "16"))
                                 (rule "andLeft" (formula "20"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "orRight" (formula "32"))
                                 (rule "orRight" (formula "34"))
                                 (rule "eqSymm" (formula "15"))
                                 (rule "eqSymm" (formula "25"))
                                 (rule "inEqSimp_leqRight" (formula "32"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "33"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "34"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_leqRight" (formula "35"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
                                 (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0"))
                                 (rule "applyEqRigid" (formula "2") (term "1,0") (ifseqformula "19"))
                                 (rule "applyEqRigid" (formula "27") (term "0,0,0,0") (ifseqformula "26"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "23"))
                                 (rule "applyEqRigid" (formula "27") (term "1,1,0") (ifseqformula "26"))
                                 (rule "applyEqRigid" (formula "24") (term "0,2,0,1") (ifseqformula "23"))
                                 (rule "applyEq" (formula "4") (term "0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "27") (term "0,1,0,0") (ifseqformula "26"))
                                 (rule "applyEq" (formula "24") (term "0,0,0,0") (ifseqformula "23"))
                                 (rule "applyEqRigid" (formula "27") (term "0,2,0,1") (ifseqformula "26"))
                                 (rule "applyEq" (formula "36") (term "0,2,0,0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "24") (term "0,1,0,0") (ifseqformula "23"))
                                 (rule "applyEq" (formula "36") (term "0,2,0,1") (ifseqformula "19"))
                                 (rule "applyEqRigid" (formula "29") (term "1") (ifseqformula "19"))
                                 (rule "applyEq" (formula "23") (term "1") (ifseqformula "19"))
                                 (rule "applyEq" (formula "26") (term "1") (ifseqformula "19"))
                                 (rule "applyEq" (formula "3") (term "1,0,0") (ifseqformula "19"))
                                 (rule "applyEqRigid" (formula "27") (term "0,0,0,0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "19"))
                                 (rule "applyEqRigid" (formula "24") (term "1,1,0") (ifseqformula "19"))
                                 (rule "applyEqRigid" (formula "24") (term "0,2,0,1") (ifseqformula "19"))
                                 (rule "applyEq" (formula "24") (term "0,1,0,0") (ifseqformula "19"))
                                 (rule "applyEqRigid" (formula "24") (term "0,0,0,0") (ifseqformula "19"))
                                 (rule "applyEq" (formula "27") (term "0,2,0,1") (ifseqformula "19"))
                                 (rule "applyEq" (formula "27") (term "0,1,0,0") (ifseqformula "19"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                 (rule "mul_literals" (formula "2") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0"))
                                 (rule "inEqSimp_contradEq7" (formula "29") (ifseqformula "3"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                                 (rule "add_literals" (formula "29") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "29") (term "0,0"))
                                 (rule "leq_literals" (formula "29") (term "0"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "false_right" (formula "29"))
                                 (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0,0") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "20") (term "0,1,0,0"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "27") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "27") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "27") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "27") (term "0,1,0"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0,0") (ifseqformula "4"))
                                 (rule "qeq_literals" (formula "24") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
                                 (rule "leq_literals" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0") (ifseqformula "3"))
                                 (rule "qeq_literals" (formula "19") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "19"))
                                 (rule "inEqSimp_contradInEq0" (formula "26") (term "1,0") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "26") (term "0,1,0"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1,0"))
                                 (rule "add_literals" (formula "23") (term "1,1,0,0,1,0"))
                                 (rule "times_zero_1" (formula "23") (term "1,0,0,1,0"))
                                 (rule "add_zero_right" (formula "23") (term "0,0,1,0"))
                                 (rule "leq_literals" (formula "23") (term "0,1,0"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "19") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,0"))
                                 (rule "add_literals" (formula "19") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "19") (term "1,0,0,0"))
                                 (rule "add_literals" (formula "19") (term "0,0,0"))
                                 (rule "leq_literals" (formula "19") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "19"))
                                 (rule "applyEq" (formula "26") (term "0,1") (ifseqformula "19"))
                                 (rule "leq_literals" (formula "26") (term "1"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "applyEq" (formula "23") (term "0,1") (ifseqformula "19"))
                                 (rule "qeq_literals" (formula "23") (term "1"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "pullOutSelect" (formula "32") (term "0,0") (inst "selectSK=arr_1"))
                                 (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "1"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                                 (rule "applyEqReverse" (formula "33") (term "0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "33") (term "0,1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "applyEq" (formula "32") (term "0,1") (ifseqformula "19"))
                                 (rule "leq_literals" (formula "32") (term "1"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "inEqSimp_geqRight" (formula "32"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "20"))
                                 (rule "add_zero_right" (formula "1") (term "0"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "25") (inst "sk=f_0"))
                     (rule "allRight" (formula "25") (inst "sk=o_0"))
                     (rule "orRight" (formula "25"))
                     (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "27"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                     (rule "simplifySelectOfStore" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                     (rule "simplifySelectOfStore" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                     (rule "simplifySelectOfCreate" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
                     (rule "simplifySelectOfCreate" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "29"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_and" (formula "5") (term "0,0"))
                     (rule "commute_and" (formula "4") (term "0,0"))
                     (rule "commute_and" (formula "3") (term "0,0"))
                     (rule "commute_and" (formula "2") (term "0,0"))
                     (rule "commute_and" (formula "1") (term "0,0"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "f_0 = java.lang.Object::<created> ∧ o_0 = sk_0 TRUE"
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "applyEq" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "applyEqReverse" (formula "31") (term "1") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "applyEq" (formula "29") (term "1,0,0,1") (ifseqformula "2"))
                        (rule "applyEq" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEqReverse" (formula "30") (term "1") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "applyEqRigid" (formula "28") (term "0,0,0") (ifseqformula "2"))
                        (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "notRight" (formula "28"))
                        (rule "applyEq" (formula "29") (term "2,0") (ifseqformula "2"))
                        (rule "narrowSelectType" (formula "29") (term "0") (ifseqformula "9"))
                        (rule "eqSymm" (formula "29"))
                        (rule "applyEqRigid" (formula "4") (term "0,1,0,0") (ifseqformula "3"))
                        (rule "sortsDisjointModuloNull" (formula "4") (term "1,0,0"))
                        (rule "replace_known_right" (formula "4") (term "1,1,0,0") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "28")))
                        (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "eqSymm" (formula "28"))
                        (rule "applyEqRigid" (formula "28") (term "1,0") (ifseqformula "3"))
                        (rule "close" (formula "28") (ifseqformula "1"))
                     )
                     (branch "f_0 = java.lang.Object::<created> ∧ o_0 = sk_0 FALSE"
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch "f_0 = java.lang.Object::<created> ∧ o_0 = i_3 TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "applyEq" (formula "32") (term "2,0") (ifseqformula "1"))
                           (rule "narrowSelectType" (formula "32") (term "0") (ifseqformula "10"))
                           (rule "eqSymm" (formula "32"))
                           (rule "applyEq" (formula "31") (term "1,0,0,1") (ifseqformula "2"))
                           (rule "replace_known_right" (formula "31") (term "0,1") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "notRight" (formula "31"))
                           (rule "applyEqRigid" (formula "6") (term "0,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "6"))
                           (rule "hideAuxiliaryEq" (formula "6"))
                           (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "eqSymm" (formula "29"))
                           (rule "applyEq" (formula "22") (term "0") (ifseqformula "3"))
                           (rule "eqSymm" (formula "22"))
                           (rule "sortsDisjointModuloNull" (formula "22"))
                           (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "28")))
                           (rule "false_right" (formula "22"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                           (rule "close" (formula "24") (ifseqformula "1"))
                        )
                        (branch "f_0 = java.lang.Object::<created> ∧ o_0 = i_3 FALSE"
                           (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch "f_0 = java.lang.Throwable::$message ∧ o_0 = i_3 TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "false_right" (formula "24"))
                              (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "applyEqReverse" (formula "30") (term "1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "applyEqRigid" (formula "21") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "false_right" (formula "21"))
                              (rule "applyEq" (formula "27") (term "0,0,0") (ifseqformula "2"))
                              (rule "replace_known_right" (formula "27") (term "0,0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "notRight" (formula "27"))
                              (rule "applyEqRigid" (formula "28") (term "2,0") (ifseqformula "2"))
                              (rule "narrowSelectType" (formula "28") (term "0") (ifseqformula "8"))
                              (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                              (rule "close" (formula "23") (ifseqformula "1"))
                           )
                           (branch "f_0 = java.lang.Throwable::$message ∧ o_0 = i_3 FALSE"
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "ifthenelse_split" (formula "1") (term "0"))
                              (branch "f_0 = java.lang.Throwable::$cause ∧ o_0 = i_3 TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "23"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "false_right" (formula "24"))
                                 (rule "applyEq" (formula "31") (term "2,0") (ifseqformula "1"))
                                 (rule "narrowSelectType" (formula "31") (term "0") (ifseqformula "8"))
                                 (rule "eqSymm" (formula "31"))
                                 (rule "applyEq" (formula "23") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "false_right" (formula "23"))
                                 (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "eqSymm" (formula "29"))
                                 (rule "applyEq" (formula "21") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "false_right" (formula "21"))
                                 (rule "applyEq" (formula "27") (term "0,0,0") (ifseqformula "2"))
                                 (rule "replace_known_right" (formula "27") (term "0,0") (ifseqformula "23"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "notRight" (formula "27"))
                                 (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                 (rule "close" (formula "23") (ifseqformula "1"))
                              )
                              (branch "f_0 = java.lang.Throwable::$cause ∧ o_0 = i_3 FALSE"
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "ifthenelse_split" (formula "1") (term "0"))
                                 (branch "f_0 = java.lang.Object::<initialized> ∧ o_0 = i_3 TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "applyEqReverse" (formula "33") (term "1") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "23"))
                                    (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "23"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "false_right" (formula "24"))
                                    (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "2"))
                                    (rule "applyEq" (formula "31") (term "2,0") (ifseqformula "1"))
                                    (rule "narrowSelectType" (formula "31") (term "0") (ifseqformula "7"))
                                    (rule "applyEq" (formula "30") (term "1,0,0,1") (ifseqformula "2"))
                                    (rule "replace_known_right" (formula "30") (term "0,1") (ifseqformula "25"))
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "notRight" (formula "30"))
                                    (rule "applyEqRigid" (formula "24") (term "0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "false_right" (formula "24"))
                                    (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "false_right" (formula "22"))
                                    (rule "applyEq" (formula "22") (term "0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "false_right" (formula "22"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                                    (rule "close" (formula "24") (ifseqformula "1"))
                                 )
                                 (branch "f_0 = java.lang.Object::<initialized> ∧ o_0 = i_3 FALSE"
                                    (rule "close" (formula "32") (ifseqformula "1"))
                                 )
                              )
                           )
                        )
                     )
                  )
               )
               (branch "CUT: self.wordsInUse = 0 FALSE"
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "notLeft" (formula "18"))
                  (rule "replace_known_right" (formula "30") (term "0,0,0,0,0,0,0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "inEqSimp_strengthen1" (formula "12") (ifseqformula "23"))
                  (rule "add_zero_right" (formula "12") (term "1"))
                  (rule "inEqSimp_contradEq7" (formula "23") (ifseqformula "12"))
                  (rule "mul_literals" (formula "23") (term "1,0,0"))
                  (rule "add_zero_right" (formula "23") (term "0,0"))
                  (rule "leq_literals" (formula "23") (term "0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "false_right" (formula "23"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "17"))
                  (rule "mul_literals" (formula "12") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0"))
                  (rule "add_literals" (formula "12") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                  (rule "mul_literals" (formula "12") (term "1"))
                  (rule "inEqSimp_subsumption6" (formula "12") (ifseqformula "11"))
                  (rule "mul_literals" (formula "12") (term "1,1,0"))
                  (rule "greater_literals" (formula "12") (term "0,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "leq_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "13"))
                  (rule "mul_literals" (formula "12") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                  (rule "mul_literals" (formula "12") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "12"))
                  (rule "leq_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "arrayLengthNotNegative" (formula "13") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "11"))
                  (rule "leq_literals" (formula "13") (term "0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "arrayLengthIsAnInt" (formula "13") (term "1"))
                  (rule "expand_inInt" (formula "13"))
                  (rule "replace_int_MIN" (formula "13") (term "0,1"))
                  (rule "replace_int_MAX" (formula "13") (term "1,0"))
                  (rule "andLeft" (formula "13"))
                  (rule "inEqSimp_commuteLeq" (formula "14"))
                  (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "11"))
                  (rule "leq_literals" (formula "14") (term "0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "13"))
                  (rule "polySimp_rightDist" (formula "16") (term "0,0"))
                  (rule "mul_literals" (formula "16") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "16") (term "0"))
                  (rule "add_literals" (formula "16") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "16"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0,1,0"))
                  (rule "neg_literal" (formula "16") (term "0,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "16") (term "0,0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
                  (rule "add_literals" (formula "16") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
                  (rule "add_literals" (formula "16") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "16") (term "1,0,0"))
                  (rule "add_zero_right" (formula "16") (term "0,0"))
                  (rule "qeq_literals" (formula "16") (term "0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "16"))
                  (rule "applyEqRigid" (formula "18") (term "0,1,1") (ifseqformula "10"))
                  (rule "mul_literals" (formula "18") (term "1,1"))
                  (rule "add_zero_right" (formula "18") (term "1"))
                  (rule "applyEq" (formula "17") (term "0") (ifseqformula "10"))
                  (rule "leq_literals" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "applyEq" (formula "18") (term "0,1,1") (ifseqformula "10"))
                  (rule "times_zero_2" (formula "18") (term "1,1"))
                  (rule "add_literals" (formula "18") (term "1"))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "10"))
                  (rule "qeq_literals" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "applyEq" (formula "18") (term "0,1,1") (ifseqformula "10"))
                  (rule "mul_literals" (formula "18") (term "1,1"))
                  (rule "add_zero_right" (formula "18") (term "1"))
                  (rule "applyEqRigid" (formula "15") (term "1") (ifseqformula "10"))
                  (rule "applyEq" (formula "23") (term "0,1,0,0,2,0") (ifseqformula "10"))
                  (rule "mul_literals" (formula "23") (term "1,0,0,2,0"))
                  (rule "add_literals" (formula "23") (term "0,0,2,0"))
                  (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "12"))
                  (rule "leq_literals" (formula "17") (term "0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "11"))
                  (rule "leq_literals" (formula "16") (term "0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "commute_or" (formula "19") (term "1,0,0"))
                  (rule "expand_mulJlong" (formula "28") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "expand_subJint" (formula "28") (term "0,2,0,0,0,0,0,0,0"))
                  (rule "polySimp_elimSub" (formula "28") (term "0,0,2,0,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "28") (term "1,0,0,2,0,0,0,0,0,0,0"))
                  (rule "polySimp_addComm0" (formula "28") (term "0,0,2,0,0,0,0,0,0,0"))
                  (rule "expand_mulJlong" (formula "28") (term "1,1,1,1,0,1,0,0"))
                  (rule "commute_or" (formula "18") (term "1,0,0,0"))
                  (rule "div_axiom" (formula "19") (term "0,1,1,1,1,0") (inst "quotient=quotient_1"))
                  (rule "equal_literals" (formula "19") (term "0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "qeq_literals" (formula "19") (term "0,1"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "mul_literals" (formula "19") (term "1,1,1"))
                  (rule "andLeft" (formula "19"))
                  (rule "andLeft" (formula "19"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,1"))
                  (rule "add_literals" (formula "21") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "21") (term "1"))
                  (rule "add_literals" (formula "21") (term "0,1"))
                  (rule "inEqSimp_homoInEq0" (formula "20"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "20") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "21"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "21") (term "0"))
                  (rule "applyEq" (formula "22") (term "0,1,1,1,1,0") (ifseqformula "19"))
                  (rule "polySimp_addComm1" (formula "22") (term "1,1,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1"))
                  (rule "polySimp_rightDist" (formula "20") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                  (rule "mul_literals" (formula "20") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1"))
                  (rule "polySimp_rightDist" (formula "21") (term "1"))
                  (rule "mul_literals" (formula "21") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                  (rule "elimGcdLeq_antec" (formula "21") (inst "elimGcdRightDiv=add(Z(1(7(8(5(5(8(5(7(0(8(8(1(5(1(1(4(4(1(#))))))))))))))))))),
    mul(quotient_1,
        Z(4(4(7(1(1(7(1(5(1(6(7(3(0(3(2(8(8(2(#)))))))))))))))))))))") (inst "elimGcdLeftDiv=int::select(heap, self, BitSet::$wordsInUse)") (inst "elimGcd=Z(4(6(#)))"))
                  (rule "neg_literal" (formula "21") (term "0,0,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "21") (term "0,0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0"))
                  (rule "add_literals" (formula "21") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0"))
                  (rule "add_zero_right" (formula "21") (term "0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,0,0"))
                  (rule "add_literals" (formula "21") (term "0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "21") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "21") (term "0,0,0"))
                  (rule "add_literals" (formula "21") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0"))
                  (rule "add_literals" (formula "21") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0"))
                  (rule "add_zero_right" (formula "21") (term "0,0"))
                  (rule "qeq_literals" (formula "21") (term "0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "elimGcdGeq_antec" (formula "20") (inst "elimGcdRightDiv=add(Z(neglit(2(7(8(5(5(8(5(7(0(8(8(1(5(1(1(4(4(1(#)))))))))))))))))))),
    mul(quotient_1,
        Z(4(4(7(1(1(7(1(5(1(6(7(3(0(3(2(8(8(2(#)))))))))))))))))))))") (inst "elimGcdLeftDiv=int::select(heap, self, BitSet::$wordsInUse)") (inst "elimGcd=Z(4(6(#)))"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "20") (term "0,0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,0"))
                  (rule "add_literals" (formula "20") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "20") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "20") (term "0,0,0"))
                  (rule "add_literals" (formula "20") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "20") (term "0,0"))
                  (rule "add_literals" (formula "20") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0"))
                  (rule "leq_literals" (formula "20") (term "0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "21"))
                  (rule "mul_literals" (formula "12") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0"))
                  (rule "add_literals" (formula "12") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                  (rule "mul_literals" (formula "12") (term "1"))
                  (rule "elimGcdGeq_antec" (formula "12") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(4(4(7(1(1(7(1(5(1(6(7(3(0(3(2(8(8(2(#)))))))))))))))))))"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "12") (term "0,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "12") (term "0,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                  (rule "add_literals" (formula "12") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0"))
                  (rule "leq_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "15"))
                  (rule "polySimp_rightDist" (formula "21") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1"))
                  (rule "polySimp_rightDist" (formula "21") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                  (rule "mul_literals" (formula "21") (term "0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "17"))
                  (rule "polySimp_rightDist" (formula "22") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0"))
                  (rule "mul_literals" (formula "22") (term "0,0,0"))
                  (rule "polySimp_addComm1" (formula "22") (term "0"))
                  (rule "add_literals" (formula "22") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "22"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "22") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(4(4(7(1(1(7(1(5(1(6(7(3(0(3(2(8(8(2(#)))))))))))))))))))"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0,0,1,0"))
                  (rule "neg_literal" (formula "22") (term "0,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "22") (term "0,0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addLiterals" (formula "22") (term "0,0,0,0"))
                  (rule "add_literals" (formula "22") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0"))
                  (rule "add_literals" (formula "22") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0"))
                  (rule "add_zero_right" (formula "22") (term "0,0"))
                  (rule "qeq_literals" (formula "22") (term "0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_antiSymm" (formula "12") (ifseqformula "22"))
                  (rule "applyEqRigid" (formula "22") (term "0,1,1") (ifseqformula "12"))
                  (rule "mul_literals" (formula "22") (term "1,1"))
                  (rule "add_zero_right" (formula "22") (term "1"))
                  (rule "applyEq" (formula "25") (term "0,1,1") (ifseqformula "12"))
                  (rule "mul_literals" (formula "25") (term "1,1"))
                  (rule "add_zero_right" (formula "25") (term "1"))
                  (rule "applyEqRigid" (formula "13") (term "0") (ifseqformula "12"))
                  (rule "qeq_literals" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "applyEq" (formula "22") (term "0") (ifseqformula "12"))
                  (rule "leq_literals" (formula "22"))
                  (rule "true_left" (formula "22"))
                  (rule "applyEq" (formula "22") (term "0,1,1") (ifseqformula "12"))
                  (rule "mul_literals" (formula "22") (term "1,1"))
                  (rule "add_zero_right" (formula "22") (term "1"))
                  (rule "applyEq" (formula "24") (term "0,1,0,1,1,1,0") (ifseqformula "12"))
                  (rule "mul_literals" (formula "24") (term "1,0,1,1,1,0"))
                  (rule "add_zero_right" (formula "24") (term "0,1,1,1,0"))
                  (rule "applyEq" (formula "20") (term "1") (ifseqformula "12"))
                  (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "17"))
                  (rule "leq_literals" (formula "23") (term "0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "11"))
                  (rule "leq_literals" (formula "21") (term "0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "13"))
                  (rule "leq_literals" (formula "21") (term "0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "nnf_imp2or" (formula "30") (term "0,1,0"))
                  (rule "commute_or" (formula "18") (term "0,0,0"))
                  (rule "commute_or" (formula "19") (term "1,0,0,0,0"))
                  (rule "commute_or" (formula "22") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "30") (term "0,1,0,0,0,0"))
                  (rule "cnf_eqv" (formula "19") (term "1,0,0"))
                  (rule "commute_or_2" (formula "19") (term "0,0,0,0,0,0"))
                  (rule "expand_moduloLong" (formula "30") (term "0,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_RANGE" (formula "30") (term "1,1,0,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_HALFRANGE" (formula "30") (term "0,0,1,0,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_MIN" (formula "30") (term "0,0,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "mod_axiom" (formula "30") (term "0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,0,1,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "30") (term "0,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "expand_moduloInteger" (formula "30") (term "0,2,0,0,0,0,0,0,0"))
                  (rule "replace_int_MIN" (formula "30") (term "0,0,2,0,0,0,0,0,0,0"))
                  (rule "replace_int_RANGE" (formula "30") (term "1,1,0,2,0,0,0,0,0,0,0"))
                  (rule "replace_int_HALFRANGE" (formula "30") (term "0,0,1,0,2,0,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,1,0,2,0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,1,0,2,0,0,0,0,0,0,0"))
                  (rule "mod_axiom" (formula "30") (term "1,0,2,0,0,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,2,0,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,2,0,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,2,0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,2,0,0,0,0,0,0,0"))
                  (rule "applyEq" (formula "30") (term "0,1,0,2,0,0,0,0,0,0,0") (ifseqformula "16"))
                  (rule "times_zero_2" (formula "30") (term "1,0,2,0,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "30") (term "0,2,0,0,0,0,0,0,0"))
                  (rule "replace_known_right" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "expand_moduloLong" (formula "30") (term "0,0,1,1,1,1,0,1,0,0"))
                  (rule "replace_long_RANGE" (formula "30") (term "1,1,0,0,1,1,1,1,0,1,0,0"))
                  (rule "replace_long_HALFRANGE" (formula "30") (term "0,0,1,0,0,1,1,1,1,0,1,0,0"))
                  (rule "replace_long_MIN" (formula "30") (term "0,0,0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "0,1,1,1,1,0,1,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,0,1,1,1,1,0,1,0,0"))
                  (rule "mod_axiom" (formula "30") (term "0,1,0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "0,1,0,1,1,1,1,0,1,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,0,1,0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,1,1,1,0,1,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,1,1,1,1,0,1,0,0"))
                  (rule "add_zero_left" (formula "30") (term "0,0,1,1,1,1,0,1,0,0"))
                  (rule "expand_addJlong" (formula "30") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "30") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "19") (term "1,0,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "19") (term "0,1,0,1,0,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,0,1,0,1,0,0"))
                  (rule "add_zero_right" (formula "19") (term "0,0,0,1,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,1,0,1,0,0"))
                  (rule "mul_literals" (formula "19") (term "1,0,1,0,1,0,0"))
                  (rule "expand_moduloLong" (formula "30") (term "1,1,1,1,0,1,0,0"))
                  (rule "replace_long_RANGE" (formula "30") (term "1,1,1,1,1,1,0,1,0,0"))
                  (rule "replace_long_HALFRANGE" (formula "30") (term "0,0,1,1,1,1,1,0,1,0,0"))
                  (rule "replace_long_MIN" (formula "30") (term "0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,1,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "1,1,1,0,1,0,0"))
                  (rule "add_literals" (formula "30") (term "0,1,1,1,0,1,0,0"))
                  (rule "polyMod_pullOut" (formula "30") (term "1,1,1,1,0,1,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            int::select(heap,
                        self,
                        BitSet::$wordsInUse)),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "30") (term "0,1,1,1,1,0,1,0,0"))
                  (rule "add_literals" (formula "30") (term "1,1,0,1,1,1,1,0,1,0,0"))
                  (rule "times_zero_1" (formula "30") (term "1,0,1,1,1,1,0,1,0,0"))
                  (rule "add_zero_right" (formula "30") (term "0,1,1,1,1,0,1,0,0"))
                  (rule "mod_axiom" (formula "30") (term "1,1,1,1,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,1,1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "1,1,1,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,1,1,1,0,1,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,1,1,1,0,1,0,0"))
                  (rule "applyEq" (formula "30") (term "0,1,1,1,1,0,1,0,0") (ifseqformula "20"))
                  (rule "mul_literals" (formula "30") (term "1,1,1,1,0,1,0,0"))
                  (rule "add_zero_right" (formula "30") (term "1,1,1,0,1,0,0"))
                  (rule "expand_moduloLong" (formula "30") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_RANGE" (formula "30") (term "1,1,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_HALFRANGE" (formula "30") (term "0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_MIN" (formula "30") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "30") (term "0,0,1,0"))
                  (rule "expand_moduloLong" (formula "30") (term "1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_RANGE" (formula "30") (term "1,1,1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_MIN" (formula "30") (term "0,1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "replace_long_HALFRANGE" (formula "30") (term "0,0,1,1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "30") (term "0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "mod_axiom" (formula "30") (term "1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addComm0" (formula "30") (term "0,0,0,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polyMod_pullOut" (formula "30") (term "1,0,0,1,0,0,1,0,0,0") (inst "polyDivCoeff=mul(div(add(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
                mul(wordIndex, Z(4(6(#))))),
            mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
                        wordIndex),
                    Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
                Z(neglit(4(2(4(3(0(3(1(1(4(7(1(7(0(2(6(1(9(5(0(8(1(1(#)))))))))))))))))))))))))),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(1(#))))"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "30") (term "0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "30") (term "1,1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "30") (term "1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "30") (term "0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polyMod_pullOut" (formula "30") (term "1,0,0,1,0,0,1,0,0,0") (inst "polyDivCoeff=mul(div(add(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))),
            wordIndex),
        Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))),
    Z(neglit(4(6(#)))))"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "30") (term "0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "30") (term "1,1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "times_zero_1" (formula "30") (term "1,0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "30") (term "0,1,0,0,1,0,0,1,0,0,0"))
                  (rule "mod_axiom" (formula "30") (term "1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,1,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "30") (term "0,0,0,0,1,0,0,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "30") (term "0,0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "30") (term "0,1,0,0"))
                  (rule "shift_paren_or" (formula "21") (term "0,0"))
                  (rule "nnf_notAnd" (formula "30") (term "0,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0,1,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0,0,1,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,1,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0,1,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,1,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,1,0"))
                  (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,1,0"))
                  (rule "nnf_notAnd" (formula "30") (term "1,0,0,1,0"))
                  (rule "inEqSimp_notLeq" (formula "30") (term "0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,0,1,0,0,1,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,1,0,0,1,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,1,0,0,1,0"))
                  (rule "inEqSimp_notGeq" (formula "30") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,1,1,0,0,1,0"))
                  (rule "add_literals" (formula "30") (term "0,0,1,1,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,1,0,0,1,0"))
                  (rule "mul_literals" (formula "30") (term "1,1,1,0,0,1,0"))
                  (rule "nnf_notAnd" (formula "30") (term "0,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "30") (term "0,0,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "30") (term "1,0,0,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "30") (term "0,1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,0,1,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,1,0,0,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "30") (term "1,1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,1,1,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,1,1,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,1,1,0,0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "30") (term "0,0,0,0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,0,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "30") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "30") (term "0,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,0,1,0,0,1,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,1,0,0,1,0,0"))
                  (rule "inEqSimp_notGeq" (formula "30") (term "1,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,1,1,0,0,1,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,1,1,0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,1,1,0,0,1,0,0"))
                  (rule "nnf_notAnd" (formula "30") (term "0,0,0,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "30") (term "0,0,0,0,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "30") (term "1,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "30") (term "0,1,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,0,1,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,1,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,1,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "30") (term "1,1,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,1,1,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,1,1,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,1,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,1,1,0,0,0,1,0,0,0"))
                  (rule "commute_or_2" (formula "18") (term "0,0"))
                  (rule "nnf_notAnd" (formula "30") (term "0,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,1,0,0,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,1,0,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,1,0,0,0,0,0,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "30") (term "1,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "30") (term "0,1,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,0,1,0,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "0,1,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,1,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "30") (term "1,1,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,1,1,0,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,1,1,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,1,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,1,1,0,0,0,0,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "30") (term "0,0,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "30") (term "1,0,0,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,1,0,0,0,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,1,0,0,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,1,0,0,0,0,0,0,1,0,0,0"))
                  (rule "shift_paren_or" (formula "22") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "30") (term "0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "mul_literals" (formula "30") (term "1,0,0,0,0,0,0,0,0,1,0,0,0"))
                  (rule "commute_or_2" (formula "19") (term "0,0,0,0,0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0,1") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "cnf_rightDist" (formula "20") (term "1,1,0,0"))
                  (rule "shift_paren_or" (formula "20") (term "0,1,0,0"))
                  (rule "cnf_rightDist" (formula "22") (term "0"))
                  (rule "distr_forallAnd" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "commute_or" (formula "23") (term "0"))
                  (rule "commute_or_2" (formula "22") (term "0"))
                  (rule "inEqSimp_or_subsumption3" (formula "22") (term "0"))
                  (rule "qeq_literals" (formula "22") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "commute_or" (formula "19") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "24") (term "0"))
                  (rule "distr_forallAnd" (formula "24"))
                  (rule "andLeft" (formula "24"))
                  (rule "commute_or" (formula "25") (term "0"))
                  (rule "commute_or_2" (formula "20") (term "0,0,0,0"))
                  (rule "commute_or" (formula "24") (term "0,0,0,0"))
                  (rule "inEqSimp_or_subsumption0" (formula "24") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "24") (term "0,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "commute_or" (formula "25") (term "0,0,0,0"))
                  (rule "inEqSimp_or_subsumption0" (formula "25") (term "0,0,0,0"))
                  (rule "qeq_literals" (formula "25") (term "0,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "andRight" (formula "33"))
                  (branch "Case 1"
                     (rule "commute_or" (formula "20") (term "1,1,1,0,0"))
                     (rule "andRight" (formula "33"))
                     (branch "Case 1"
                        (rule "andRight" (formula "33"))
                        (branch "Case 1"
                           (rule "andRight" (formula "33"))
                           (branch "Case 1"
                              (rule "allRight" (formula "33") (inst "sk=i_0_0"))
                              (rule "orRight" (formula "33"))
                              (rule "orRight" (formula "33"))
                              (rule "orRight" (formula "34"))
                              (rule "orRight" (formula "33"))
                              (rule "inEqSimp_leqRight" (formula "36"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_geqRight" (formula "36"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_geqRight" (formula "36"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "36"))
                              (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                              (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                              (rule "add_literals" (formula "1") (term "0,0,0"))
                              (rule "add_zero_left" (formula "1") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "1") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                              (rule "mul_literals" (formula "4") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                              (rule "mul_literals" (formula "3") (term "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0"))
                              (rule "pullOutSelect" (formula "37") (term "0") (inst "selectSK=arr_1"))
                              (rule "simplifySelectOfCreate" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
                              (rule "simplifySelectOfCreate" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
                              (rule "applyEqReverse" (formula "38") (term "0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "1"))
                              (rule "mul_literals" (formula "17") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                              (rule "mul_literals" (formula "17") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "17"))
                              (rule "leq_literals" (formula "4") (term "0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "18"))
                              (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                              (rule "mul_literals" (formula "2") (term "0,0,0"))
                              (rule "polySimp_addComm1" (formula "2") (term "0"))
                              (rule "add_literals" (formula "2") (term "0,0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "2"))
                              (rule "leq_literals" (formula "4") (term "0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "shift_paren_or" (formula "24") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "24") (term "0,0,0"))
                              (rule "commute_or_2" (formula "24") (term "0,0,0,0"))
                              (rule "shift_paren_and" (formula "24") (term "1,0,0"))
                              (rule "commute_or_2" (formula "24") (term "0,0,0,0,0"))
                              (rule "shift_paren_or" (formula "24") (term "0,0,0,0,0,0"))
                              (rule "cnf_rightDist" (formula "24") (term "0,0"))
                              (rule "distr_forallAnd" (formula "24") (term "0"))
                              (rule "distr_forallAnd" (formula "24"))
                              (rule "andLeft" (formula "24"))
                              (rule "commute_or_2" (formula "25") (term "0,0"))
                              (rule "shift_paren_or" (formula "25") (term "0,0,0"))
                              (rule "cnf_rightDist" (formula "24") (term "0,0"))
                              (rule "distr_forallAnd" (formula "24") (term "0"))
                              (rule "distr_forallAnd" (formula "24"))
                              (rule "andLeft" (formula "24"))
                              (rule "shift_paren_or" (formula "25") (term "0,0"))
                              (rule "shift_paren_or" (formula "24") (term "0,0"))
                              (rule "commute_or_2" (formula "24") (term "0,0,0"))
                              (rule "shift_paren_or" (formula "25") (term "0,0,0"))
                              (rule "commute_or_2" (formula "24") (term "0,0,0,0"))
                              (rule "shift_paren_or" (formula "26") (term "0,0,0,0"))
                              (rule "shift_paren_or" (formula "25") (term "0,0,0,0"))
                              (rule "commute_or_2" (formula "24") (term "0,0,0,0,0"))
                              (rule "shift_paren_or" (formula "26") (term "0,0,0,0,0"))
                              (rule "shift_paren_or" (formula "25") (term "0,0,0,0,0"))
                              (rule "commute_or_2" (formula "24") (term "0,0,0,0,0,0"))
                              (rule "shift_paren_or" (formula "26") (term "0,0,0,0,0,0"))
                              (rule "commute_or_2" (formula "25") (term "1,0,0,0,0,0,0"))
                              (rule "shift_paren_or" (formula "25") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_or_subsumption3" (formula "25") (term "0,0,0,0,0"))
                              (rule "qeq_literals" (formula "25") (term "0,1,0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "commute_or_2" (formula "25") (term "1,0,0,0,0,0,0"))
                              (rule "inEqSimp_or_subsumption1" (formula "25") (term "1,0,0,0,0,0,0"))
                              (rule "qeq_literals" (formula "25") (term "0,1,0,1,0,0,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "allLeft" (formula "23") (inst "t=i_0_0"))
                              (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "40"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0"))
                              (rule "inEqSimp_homoInEq0" (formula "23") (term "1"))
                              (rule "polySimp_addComm1" (formula "23") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "23") (term "1,1"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1"))
                              (rule "mul_literals" (formula "23") (term "0,1,1"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "23") (term "0,0,0") (ifseqformula "16"))
                              (rule "qeq_literals" (formula "23") (term "0,0,0,0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_contradInEq0" (formula "23") (term "1") (ifseqformula "1"))
                              (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                              (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "23") (term "0,0,1"))
                              (rule "leq_literals" (formula "23") (term "0,1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                              (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "23") (term "0,0,1"))
                              (rule "leq_literals" (formula "23") (term "0,1"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "23"))
                              (rule "leq_literals" (formula "16") (term "0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "true_left" (formula "16"))
                              (rule "inEqSimp_contradInEq0" (formula "22") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "22") (term "0"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "closeFalse" (formula "22"))
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "33") (inst "sk=bitIndex_1_0"))
                              (rule "allRight" (formula "33") (inst "sk=wordIndex_0"))
                              (rule "orRight" (formula "33"))
                              (rule "orRight" (formula "33"))
                              (rule "orRight" (formula "34"))
                              (rule "orRight" (formula "33"))
                              (rule "orRight" (formula "34"))
                              (rule "orRight" (formula "33"))
                              (rule "crossInst" (formula "25") (inst "sk=i_4_0") (ifseqformula "33"))
                              (rule "crossInst" (formula "24") (inst "sk=i_4_1") (ifseqformula "34"))
                              (rule "cutUpperBound" (formula "35") (ifseqformula "25"))
                              (branch "Case 1"
                                 (rule "cutUpperBound" (formula "36") (ifseqformula "28"))
                                 (branch "Case 1"
                                    (rule "orRight" (formula "36"))
                                    (rule "andLeft" (formula "27"))
                                    (rule "andLeft" (formula "25"))
                                    (rule "orRight" (formula "38"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "eqSymm" (formula "28"))
                                    (rule "eqSymm" (formula "25"))
                                    (rule "inEqSimp_geqRight" (formula "44"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_leqRight" (formula "45"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_leqRight" (formula "45"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_geqRight" (formula "45"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_geqRight" (formula "45"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_leqRight" (formula "45"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "replace_known_left" (formula "46") (term "0,1") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "46"))
                                    (rule "inEqSimp_geqRight" (formula "45"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "45"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_commuteGeq" (formula "37") (term "1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "34") (term "1,0"))
                                    (rule "applyEqRigid" (formula "46") (term "0,1,0,0,1,0,0") (ifseqformula "33"))
                                    (rule "polySimp_addComm1" (formula "46") (term "0,0"))
                                    (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "36"))
                                    (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "36"))
                                    (rule "applyEq" (formula "25") (term "0") (ifseqformula "9"))
                                    (rule "inEqSimp_commuteLeq" (formula "25"))
                                    (rule "applyEqRigid" (formula "33") (term "0") (ifseqformula "36"))
                                    (rule "eqSymm" (formula "33"))
                                    (rule "applyEq" (formula "29") (term "1,1,0,0,0,0") (ifseqformula "9"))
                                    (rule "applyEq" (formula "28") (term "1,1,1,0,0") (ifseqformula "9"))
                                    (rule "applyEq" (formula "22") (term "0") (ifseqformula "9"))
                                    (rule "applyEq" (formula "46") (term "0,2,0,0,0,1") (ifseqformula "36"))
                                    (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "9"))
                                    (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                    (rule "add_literals" (formula "2") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "2") (term "1,0"))
                                    (rule "add_literals" (formula "2") (term "0"))
                                    (rule "leq_literals" (formula "2"))
                                    (rule "closeFalse" (formula "2"))
                                 )
                                 (branch "Case 2"
                                    (rule "orRight" (formula "37"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "close" (formula "31") (ifseqformula "1"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "cutUpperBound" (formula "36") (ifseqformula "28"))
                                 (branch "Case 1"
                                    (rule "orRight" (formula "37"))
                                    (rule "andLeft" (formula "28"))
                                    (rule "andLeft" (formula "26"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "close" (formula "31") (ifseqformula "1"))
                                 )
                                 (branch "Case 2"
                                    (rule "orRight" (formula "36"))
                                    (rule "andLeft" (formula "27"))
                                    (rule "andLeft" (formula "25"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "38"))
                                    (rule "eqSymm" (formula "27"))
                                    (rule "eqSymm" (formula "24"))
                                    (rule "eqSymm" (formula "30"))
                                    (rule "inEqSimp_geqRight" (formula "44"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_leqRight" (formula "45"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_leqRight" (formula "45"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_geqRight" (formula "45"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_geqRight" (formula "45"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_leqRight" (formula "45"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "replace_known_left" (formula "46") (term "0,1") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "46"))
                                    (rule "inEqSimp_geqRight" (formula "45"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_leqRight" (formula "45"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_commuteGeq" (formula "36") (term "1,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "33") (term "1,0"))
                                    (rule "applyEq" (formula "46") (term "0,1,0,0,1,0,0") (ifseqformula "35"))
                                    (rule "polySimp_addComm1" (formula "46") (term "0,0"))
                                    (rule "applyEq" (formula "46") (term "0,2,0,0,0,1") (ifseqformula "35"))
                                    (rule "applyEq" (formula "5") (term "1,0") (ifseqformula "35"))
                                    (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "35"))
                                    (rule "applyEq" (formula "32") (term "0") (ifseqformula "35"))
                                    (rule "eqSymm" (formula "32"))
                                    (rule "applyEq" (formula "1") (term "0") (ifseqformula "35"))
                                    (rule "applyEq" (formula "2") (term "1,0,0") (ifseqformula "35"))
                                    (rule "applyEqRigid" (formula "38") (term "1") (ifseqformula "35"))
                                    (rule "applyEqRigid" (formula "33") (term "0,2,0,1") (ifseqformula "32"))
                                    (rule "applyEqRigid" (formula "33") (term "1,1,0") (ifseqformula "32"))
                                    (rule "applyEq" (formula "46") (term "0,1,0,0") (ifseqformula "35"))
                                    (rule "polySimp_addComm1" (formula "46") (term "0,0"))
                                    (rule "applyEqRigid" (formula "33") (term "0,1,0,0") (ifseqformula "32"))
                                    (rule "applyEq" (formula "33") (term "0,0,0,0") (ifseqformula "32"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                                    (rule "mul_literals" (formula "8") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "7"))
                                    (rule "mul_literals" (formula "7") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                    (rule "mul_literals" (formula "5") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                    (rule "mul_literals" (formula "6") (term "1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "inEqSimp_contradEq7" (formula "38") (ifseqformula "2"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                                    (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "38") (term "0,0"))
                                    (rule "leq_literals" (formula "38") (term "0"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "false_right" (formula "38"))
                                    (rule "inEqSimp_contradInEq0" (formula "36") (term "1,0,0") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "36") (term "0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "3"))
                                    (rule "leq_literals" (formula "7") (term "0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "4"))
                                    (rule "leq_literals" (formula "7") (term "0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "inEqSimp_contradInEq0" (formula "31") (term "1,0,0") (ifseqformula "5"))
                                    (rule "qeq_literals" (formula "31") (term "0,1,0,0"))
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "6") (term "0"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "inEqSimp_contradInEq1" (formula "33") (term "0,0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "33") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "30") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "pullOutSelect" (formula "42") (term "0,0,0,1") (inst "selectSK=arr_1"))
                                    (rule "simplifySelectOfCreate" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
                                    (rule "simplifySelectOfCreate" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                                    (rule "applyEqReverse" (formula "43") (term "0,0,0,1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "23"))
                                    (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                    (rule "mul_literals" (formula "2") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "add_literals" (formula "2") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "21"))
                                    (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                    (rule "mul_literals" (formula "2") (term "0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                    (rule "mul_literals" (formula "2") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "31") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,0"))
                                    (rule "add_literals" (formula "31") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "31") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "31") (term "0,0,0"))
                                    (rule "leq_literals" (formula "31") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "2"))
                                    (rule "inEqSimp_homoInEq1" (formula "34") (term "0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,0"))
                                    (rule "add_literals" (formula "34") (term "1,1,0,0,0"))
                                    (rule "times_zero_1" (formula "34") (term "1,0,0,0"))
                                    (rule "add_zero_right" (formula "34") (term "0,0,0"))
                                    (rule "leq_literals" (formula "34") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "34"))
                                    (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "20"))
                                    (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                    (rule "mul_literals" (formula "2") (term "0,0,0"))
                                    (rule "polySimp_addComm1" (formula "2") (term "0"))
                                    (rule "add_literals" (formula "2") (term "0,0"))
                                    (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                    (rule "polySimp_elimOne" (formula "2") (term "0"))
                                    (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "2"))
                                    (rule "leq_literals" (formula "7") (term "0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "shift_paren_or" (formula "26") (term "0,0,0,0,0"))
                                    (rule "shift_paren_and" (formula "26") (term "1,0,0"))
                                    (rule "equiv_right" (formula "43"))
                                    (branch "Case '->'"
                                       (rule "commute_or_2" (formula "27") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "27") (term "0,0,0,0,0,0"))
                                       (rule "cnf_rightDist" (formula "27") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "27") (term "0"))
                                       (rule "distr_forallAnd" (formula "27"))
                                       (rule "andLeft" (formula "27"))
                                       (rule "commute_or_2" (formula "28") (term "0,0"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0,0"))
                                       (rule "cnf_rightDist" (formula "27") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "27") (term "0"))
                                       (rule "distr_forallAnd" (formula "27"))
                                       (rule "andLeft" (formula "27"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0"))
                                       (rule "shift_paren_or" (formula "27") (term "0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "29") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "29") (term "0,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "29") (term "0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "28") (term "1,0,0,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_or_subsumption3" (formula "28") (term "0,0,0,0,0"))
                                       (rule "qeq_literals" (formula "28") (term "0,1,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "27") (term "0,0,0,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "29") (term "0,0,0,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "28") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_or_subsumption1" (formula "28") (term "0,0,0,0,0,0"))
                                       (rule "qeq_literals" (formula "28") (term "0,1,0,0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "commute_or_2" (formula "28") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_or_tautInEq3" (formula "28") (term "0,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "28") (term "1,1,0,0,0,0,0,0,0"))
                                       (rule "qeq_literals" (formula "28") (term "1,0,0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "true_left" (formula "28"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_or_subsumption1" (formula "27") (term "0,0,0,0,0,0,0"))
                                       (rule "qeq_literals" (formula "27") (term "0,1,0,0,0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_or_subsumption3" (formula "27") (term "0,0,0,0,0,0"))
                                       (rule "qeq_literals" (formula "27") (term "0,1,0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0,0,0,0,0,0,0"))
                                       (rule "commute_or" (formula "27") (term "0,0,0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_or_subsumption1" (formula "27") (term "0,0,0,0,0"))
                                       (rule "qeq_literals" (formula "27") (term "0,1,0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "div_axiom" (formula "1") (term "0,1,0") (inst "quotient=quotient_2"))
                                       (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                                       (rule "qeq_literals" (formula "1") (term "0,1,1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "equal_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                                       (rule "polySimp_addComm1" (formula "3") (term "1"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,0,1"))
                                       (rule "add_literals" (formula "3") (term "0,0,0,1"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,1"))
                                       (rule "add_literals" (formula "3") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                       (rule "applyEqRigid" (formula "4") (term "0,1,0") (ifseqformula "1"))
                                       (rule "polySimp_addComm1" (formula "4") (term "0"))
                                       (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                                       (rule "mul_literals" (formula "2") (term "0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1"))
                                       (rule "polySimp_rightDist" (formula "3") (term "0,1"))
                                       (rule "mul_literals" (formula "3") (term "0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1"))
                                       (rule "inEqSimp_exactShadow1" (formula "2") (ifseqformula "6"))
                                       (rule "mul_literals" (formula "2") (term "1,0,1"))
                                       (rule "greater_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "2") (term "0,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                       (rule "mul_literals" (formula "2") (term "0,1"))
                                       (rule "inEqSimp_exactShadow2" (formula "6") (ifseqformula "4"))
                                       (rule "mul_literals" (formula "6") (term "1,0,0,1"))
                                       (rule "greater_literals" (formula "6") (term "0"))
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "mul_literals" (formula "6") (term "0,0"))
                                       (rule "add_zero_left" (formula "6") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                       (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                       (rule "polySimp_elimOne" (formula "6") (term "0"))
                                       (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "6"))
                                       (rule "mul_literals" (formula "11") (term "0,0"))
                                       (rule "add_zero_left" (formula "11") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                       (rule "mul_literals" (formula "11") (term "1"))
                                       (rule "elimGcdGeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0,1,0"))
                                       (rule "leq_literals" (formula "11") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0"))
                                       (rule "leq_literals" (formula "11") (term "0"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "13"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                                       (rule "mul_literals" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))"))
                                       (rule "leq_literals" (formula "2") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                                       (rule "neg_literal" (formula "2") (term "0,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0"))
                                       (rule "qeq_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "inEqSimp_antiSymm" (formula "12") (ifseqformula "2"))
                                       (rule "applyEqRigid" (formula "7") (term "0,1,1") (ifseqformula "12"))
                                       (rule "mul_literals" (formula "7") (term "1,1"))
                                       (rule "add_zero_right" (formula "7") (term "1"))
                                       (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "12"))
                                       (rule "leq_literals" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "11"))
                                       (rule "qeq_literals" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "applyEqRigid" (formula "2") (term "0,1,1") (ifseqformula "11"))
                                       (rule "times_zero_2" (formula "2") (term "1,1"))
                                       (rule "add_zero_right" (formula "2") (term "1"))
                                       (rule "applyEq" (formula "3") (term "0,1,0,1") (ifseqformula "11"))
                                       (rule "mul_literals" (formula "3") (term "1,0,1"))
                                       (rule "add_zero_right" (formula "3") (term "0,1"))
                                       (rule "applyEq" (formula "1") (term "1") (ifseqformula "11"))
                                       (rule "applyEqRigid" (formula "4") (term "0,1,0,1") (ifseqformula "11"))
                                       (rule "mul_literals" (formula "4") (term "1,0,1"))
                                       (rule "add_literals" (formula "4") (term "0,1"))
                                       (rule "applyEqRigid" (formula "5") (term "0,0,0,0") (ifseqformula "11"))
                                       (rule "times_zero_2" (formula "5") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "5") (term "0,0"))
                                       (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "12"))
                                       (rule "leq_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "12"))
                                       (rule "leq_literals" (formula "5") (term "0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "inEqSimp_exactShadow2" (formula "5") (ifseqformula "3"))
                                       (rule "mul_literals" (formula "5") (term "1,0,0,1"))
                                       (rule "greater_literals" (formula "5") (term "0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "mul_literals" (formula "5") (term "0,0"))
                                       (rule "add_zero_left" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                       (rule "polySimp_elimOne" (formula "5") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "12"))
                                       (rule "leq_literals" (formula "5") (term "0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "inEqSimp_exactShadow1" (formula "2") (ifseqformula "6"))
                                       (rule "greater_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                       (rule "mul_literals" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "11"))
                                       (rule "leq_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "div_axiom" (formula "49") (term "0,0") (inst "quotient=quotient_3"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,1,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,2,1,1"))
                                       (rule "polySimp_addComm1" (formula "1") (term "1,2,1,1"))
                                       (rule "polySimp_addComm1" (formula "1") (term "1,1,1,1"))
                                       (rule "shift_paren_or" (formula "33") (term "0,0,0,0,0,0,0,0,0"))
                                       (rule "allLeft" (formula "42") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, BitSet::$wordsInUse))"))
                                       (rule "inEqSimp_homoInEq0" (formula "42") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "42") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "42") (term "0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "42") (term "0,0,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "42") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,0,1,0,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "42") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "42") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "42") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "42") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "42") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "42") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "42") (term "0,0,1,0"))
                                       (rule "inEqSimp_invertInEq1" (formula "42") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "42") (term "0,0,0,0"))
                                       (rule "times_zero_2" (formula "42") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "42") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "42") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "42") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "42") (term "0,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "42") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "42") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "42") (term "0,1,0"))
                                       (rule "inEqSimp_contradInEq0" (formula "42") (term "1,0,0") (ifseqformula "30"))
                                       (rule "qeq_literals" (formula "42") (term "0,1,0,0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "inEqSimp_contradInEq1" (formula "42") (term "0,0") (ifseqformula "25"))
                                       (rule "qeq_literals" (formula "42") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "inEqSimp_contradInEq0" (formula "42") (term "0") (ifseqformula "28"))
                                       (rule "inEqSimp_homoInEq1" (formula "42") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0,0"))
                                       (rule "add_literals" (formula "42") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "42") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "42") (term "0,0,0"))
                                       (rule "leq_literals" (formula "42") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "allLeft" (formula "39") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, BitSet::$wordsInUse))"))
                                       (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "39") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "39") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "39") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "39") (term "0,0,1,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "39") (term "1,0,1,0,0"))
                                       (rule "mul_literals" (formula "39") (term "0,1,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "39") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "39") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0"))
                                       (rule "mul_literals" (formula "39") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "39") (term "0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "39") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "39") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "39") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "39") (term "0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "39") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "39") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "39") (term "0,1,0,0"))
                                       (rule "inEqSimp_invertInEq1" (formula "39") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "39") (term "0,0,0,0"))
                                       (rule "mul_literals" (formula "39") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "39") (term "0,0,0,0"))
                                       (rule "inEqSimp_contradInEq0" (formula "39") (term "1,0") (ifseqformula "28"))
                                       (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "39") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "39") (term "1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "39") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "39") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "inEqSimp_contradInEq0" (formula "39") (term "1,0") (ifseqformula "30"))
                                       (rule "qeq_literals" (formula "39") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "25"))
                                       (rule "qeq_literals" (formula "39") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "commute_and" (formula "1") (term "0,1"))
                                       (rule "commute_or_2" (formula "33") (term "0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_or_subsumption3" (formula "33") (term "0,0,0,0,0,0"))
                                       (rule "qeq_literals" (formula "33") (term "0,1,0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "commute_or_2" (formula "33") (term "0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_or_subsumption1" (formula "33") (term "0,0,0,0,0,0,0"))
                                       (rule "qeq_literals" (formula "33") (term "0,1,0,0,0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "commute_or_2" (formula "33") (term "0,0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "33") (term "0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "33") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_or_subsumption1" (formula "33") (term "0,0,0,0,0"))
                                       (rule "qeq_literals" (formula "33") (term "0,1,0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "allLeft" (formula "35") (inst "t=add(bitIndex_1_0, mul(i_4_0, Z(4(6(#)))))"))
                                       (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "5"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "inEqSimp_homoInEq0" (formula "35") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "35") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "35") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "35") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "35") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "35") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "35") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "35") (term "0,0,0,0,0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "35") (term "0,0,0"))
                                       (rule "add_literals" (formula "35") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "35") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "35") (term "0,0,0"))
                                       (rule "leq_literals" (formula "35") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "inEqSimp_subsumption5" (formula "3") (ifseqformula "35"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "greater_literals" (formula "3") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                       (rule "mul_literals" (formula "3") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "3") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "3") (term "0,0"))
                                       (rule "qeq_literals" (formula "3") (term "0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "inEqSimp_exactShadow1" (formula "34") (ifseqformula "6"))
                                       (rule "mul_literals" (formula "34") (term "1,0,1"))
                                       (rule "greater_literals" (formula "34") (term "0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "polySimp_mulAssoc" (formula "34") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "0,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "34") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "34"))
                                       (rule "mul_literals" (formula "34") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "10"))
                                       (rule "leq_literals" (formula "34") (term "0"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "true_left" (formula "34"))
                                       (rule "allLeft" (formula "36") (inst "t=add(bitIndex_1_0, mul(i_4_0, Z(4(6(#)))))"))
                                       (rule "replace_known_left" (formula "36") (term "0,0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "inEqSimp_homoInEq0" (formula "36") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0,1"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,1"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "0,1,0,1"))
                                       (rule "polySimp_addComm1" (formula "36") (term "0,1"))
                                       (rule "polySimp_addAssoc" (formula "36") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "36") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "36") (term "0,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "36") (term "0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,1"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1"))
                                       (rule "polySimp_rightDist" (formula "36") (term "0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,0,1,1"))
                                       (rule "mul_literals" (formula "36") (term "0,0,1,1"))
                                       (rule "polySimp_elimOne" (formula "36") (term "1,0,1,1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "36") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "36") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "0,1,0"))
                                       (rule "inEqSimp_contradInEq0" (formula "36") (term "1,0") (ifseqformula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0"))
                                       (rule "polySimp_addComm1" (formula "36") (term "0,0,0,1,0"))
                                       (rule "add_literals" (formula "36") (term "0,0,0,0,1,0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "36") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "36") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "36") (term "1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "36") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "36") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "inEqSimp_contradInEq4" (formula "36") (term "0") (ifseqformula "34"))
                                       (rule "greater_literals" (formula "36") (term "0,1,0,0"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "greater_literals" (formula "36") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "36") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "36") (term "0,0,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "36") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "36") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "36") (term "0,0,0"))
                                       (rule "polySimp_addComm0" (formula "36") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "36") (term "0,0,0"))
                                       (rule "add_literals" (formula "36") (term "1,1,0,0,0"))
                                       (rule "times_zero_1" (formula "36") (term "1,0,0,0"))
                                       (rule "add_zero_right" (formula "36") (term "0,0,0"))
                                       (rule "leq_literals" (formula "36") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "inEqSimp_exactShadow1" (formula "36") (ifseqformula "29"))
                                       (rule "greater_literals" (formula "36") (term "0"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "mul_literals" (formula "36") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "36") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "36") (term "0"))
                                       (rule "polySimp_rightDist" (formula "36") (term "0,0,0"))
                                       (rule "mul_literals" (formula "36") (term "0,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                                       (rule "add_literals" (formula "36") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "36"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "36"))
                                       (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
                                       (rule "add_literals" (formula "3") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "3") (term "0,0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "3") (term "0,0"))
                                       (rule "qeq_literals" (formula "3") (term "0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "inEqSimp_exactShadow1" (formula "36") (ifseqformula "26"))
                                       (rule "greater_literals" (formula "36") (term "0"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "36") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "36") (term "0,0,0"))
                                       (rule "mul_literals" (formula "36") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "36"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "36") (term "0,1"))
                                       (rule "mul_literals" (formula "36") (term "0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,0,1"))
                                       (rule "polySimp_elimOne" (formula "36") (term "1,0,1"))
                                       (rule "inEqSimp_exactShadow2" (formula "4") (ifseqformula "35"))
                                       (rule "mul_literals" (formula "4") (term "1,0,0,1"))
                                       (rule "greater_literals" (formula "4") (term "0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "0,0"))
                                       (rule "add_zero_left" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "11"))
                                       (rule "leq_literals" (formula "4") (term "0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "inEqSimp_exactShadow1" (formula "36") (ifseqformula "24"))
                                       (rule "mul_literals" (formula "36") (term "1,0,1"))
                                       (rule "greater_literals" (formula "36") (term "0"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "polySimp_rightDist" (formula "36") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "36") (term "0"))
                                       (rule "polySimp_rightDist" (formula "36") (term "0,0,0"))
                                       (rule "mul_literals" (formula "36") (term "0,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "36") (term "0,0"))
                                       (rule "add_literals" (formula "36") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "36"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                                       (rule "inEqSimp_subsumption2" (formula "35") (ifseqformula "36"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "greater_literals" (formula "35") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "polySimp_rightDist" (formula "35") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0"))
                                       (rule "mul_literals" (formula "35") (term "0,1,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0"))
                                       (rule "mul_literals" (formula "35") (term "0,0,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "35") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "35") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "35") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "35") (term "0,0,0"))
                                       (rule "add_literals" (formula "35") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "35") (term "0,0"))
                                       (rule "add_literals" (formula "35") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "35") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "35") (term "0,0"))
                                       (rule "qeq_literals" (formula "35") (term "0"))
                                        (builtin "One Step Simplification" (formula "35"))
                                       (rule "true_left" (formula "35"))
                                       (rule "inEqSimp_exactShadow2" (formula "4") (ifseqformula "35"))
                                       (rule "greater_literals" (formula "4") (term "0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1,0,0"))
                                       (rule "mul_literals" (formula "4") (term "0,0"))
                                       (rule "add_zero_left" (formula "4") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                                       (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                       (rule "polySimp_elimOne" (formula "4") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "11"))
                                       (rule "leq_literals" (formula "4") (term "0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "ifthenelse_split_for" (formula "1") (term "1,1"))
                                       (branch "pow(2, bitIndex_1_0) ≥ 0 TRUE"
                                          (rule "cut_direct" (formula "2") (term "0"))
                                          (branch "CUT: pow(2, bitIndex_1_0) = 0 TRUE"
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "2"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "applyEq" (formula "54") (term "1,0,0") (ifseqformula "1"))
                                             (rule "allLeft" (formula "30") (inst "t=bitIndex_1_0"))
                                             (rule "applyEq" (formula "30") (term "1,0,0,0,1,0") (ifseqformula "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0,0,0,0,0,0") (ifseqformula "9"))
                                             (rule "qeq_literals" (formula "30") (term "0,1,0,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "inEqSimp_contradInEq0" (formula "30") (term "1,0,0,0,0,0") (ifseqformula "10"))
                                             (rule "qeq_literals" (formula "30") (term "0,1,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "allLeft" (formula "31") (inst "t=mul(int::select(heap, self, BitSet::$wordsInUse),
    Z(4(6(#))))"))
                                             (rule "inEqSimp_contradInEq5" (formula "31") (term "1,0,0,0,0,0,0") (ifseqformula "23"))
                                             (rule "mul_literals" (formula "31") (term "1,1,0,1,0,0,0,0,0,0"))
                                             (rule "greater_literals" (formula "31") (term "0,0,1,0,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "qeq_literals" (formula "31") (term "0,1,0,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "inEqSimp_subsumption6" (formula "31") (term "1,0,0,0,0,0") (ifseqformula "23"))
                                             (rule "mul_literals" (formula "31") (term "1,1,0,1,0,0,0,0,0"))
                                             (rule "greater_literals" (formula "31") (term "0,0,1,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "leq_literals" (formula "31") (term "0,1,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "div_axiom" (formula "55") (term "0,0") (inst "quotient=quotient_4"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "allLeft" (formula "31") (inst "t=add(Z(1(#)), bitIndex_1_0)"))
                                             (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,1,0,0,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "31") (term "0,0,0,0,1,0,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "31") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,0,1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,0,1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "31") (term "0,1,0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "31") (term "0,1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "31") (term "0,0,1,0,0,0,0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "31") (term "1,0,0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,0,1,0,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,0,1,0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "31") (term "0,1,0,1,0,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "31") (term "0,1,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "31") (term "0,0,1,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "31") (term "0,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "31") (term "1,0,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "31") (term "0,1,0,0,0,0,0,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "31") (term "1,0,0,0,0,0,0") (ifseqformula "9"))
                                             (rule "qeq_literals" (formula "31") (term "0,1,0,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "polyDiv_pullOut" (formula "31") (term "0,1,0,0,0,0,0,0,0") (inst "polyDivCoeff=Z(1(#))"))
                                             (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0,2,0,1,0,0,0,0,0,0,0"))
                                             (rule "equal_literals" (formula "31") (term "0,0,1,0,0,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "mul_literals" (formula "31") (term "1,0,0,0,1,0,0,0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,0,0,0,0"))
                                             (rule "polySimp_addComm1" (formula "31") (term "0,0,1,1,0,0,0,0,0,0,0"))
                                             (rule "polySimp_addComm1" (formula "31") (term "0,0,0,1,1,0,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "31") (term "0,0,0,0,1,1,0,0,0,0,0,0,0"))
                                             (rule "polySimp_addComm0" (formula "31") (term "1,1,0,0,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "31") (term "0,1,0,0,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,0,0,0,0"))
                                             (rule "polySimp_addComm1" (formula "31") (term "0,0,0,0,0,0,0,0"))
                                             (rule "polySimp_addComm1" (formula "31") (term "0,0,0,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "31") (term "0,0,0,0,0,0,0,0,0,0"))
                                             (rule "commute_or_2" (formula "31") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "31") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "31") (term "0,0"))
                                             (rule "commute_or_2" (formula "31") (term "0"))
                                             (rule "cut_direct" (formula "31") (term "1,0"))
                                             (branch "CUT: bitIndex_1_0 ≥ 63 TRUE"
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "true_left" (formula "32"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "31"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_antiSymm" (formula "30") (ifseqformula "9"))
                                                (rule "applyEqRigid" (formula "37") (term "0,1,1") (ifseqformula "30"))
                                                (rule "mul_literals" (formula "37") (term "1,1"))
                                                (rule "add_literals" (formula "37") (term "1"))
                                                (rule "applyEqRigid" (formula "31") (term "0") (ifseqformula "30"))
                                                (rule "qeq_literals" (formula "31"))
                                                (rule "true_left" (formula "31"))
                                                (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "30"))
                                                (rule "pow_literals" (formula "1") (term "0"))
                                                (rule "equal_literals" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch "CUT: bitIndex_1_0 ≥ 63 FALSE"
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "inEqSimp_geqRight" (formula "49"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "1"))
                                                (rule "leq_literals" (formula "11") (term "0"))
                                                 (builtin "One Step Simplification" (formula "11"))
                                                (rule "true_left" (formula "11"))
                                                (rule "allLeft" (formula "33") (inst "t=bitIndex_1_0"))
                                                (rule "applyEqRigid" (formula "33") (term "1,0,0,1,0") (ifseqformula "2"))
                                                (rule "inEqSimp_contradInEq0" (formula "33") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "33") (term "0,1,0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0,0,0,0") (ifseqformula "10"))
                                                (rule "qeq_literals" (formula "33") (term "0,1,0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "allLeft" (formula "33") (inst "t=i_4_0"))
                                                (rule "replace_known_right" (formula "33") (term "1") (ifseqformula "58"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
                                                (rule "applyEq" (formula "33") (term "0,1,0,0,0,0,0") (ifseqformula "3"))
                                                (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "33") (term "0,0,0,0,0"))
                                                (rule "replace_known_left" (formula "33") (term "0,0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "inEqSimp_contradInEq0" (formula "33") (term "1,0") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "33") (term "0,1,0"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "inEqSimp_contradInEq1" (formula "33") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "33") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "33"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_homoInEq1" (formula "8"))
                                                (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
                                                (rule "add_literals" (formula "8") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "8") (term "1,0"))
                                                (rule "add_literals" (formula "8") (term "0"))
                                                (rule "leq_literals" (formula "8"))
                                                (rule "closeFalse" (formula "8"))
                                             )
                                          )
                                          (branch "CUT: pow(2, bitIndex_1_0) = 0 FALSE"
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "andLeft" (formula "2"))
                                             (rule "andLeft" (formula "2"))
                                             (rule "applyEq" (formula "58") (term "0,0") (ifseqformula "3"))
                                             (rule "mod_axiom" (formula "58") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "58") (term "1,0"))
                                             (rule "polySimp_homoEq" (formula "58"))
                                             (rule "polySimp_mulComm0" (formula "58") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "58") (term "1,0"))
                                             (rule "polySimp_mulLiterals" (formula "58") (term "1,1,0"))
                                             (rule "polySimp_mulComm0" (formula "58") (term "0,1,0"))
                                             (rule "polySimp_addAssoc" (formula "58") (term "0"))
                                             (rule "polySimp_sepPosMonomial" (formula "58"))
                                             (rule "polySimp_mulComm0" (formula "58") (term "1"))
                                             (rule "polySimp_rightDist" (formula "58") (term "1"))
                                             (rule "polySimp_mulLiterals" (formula "58") (term "1,1"))
                                             (rule "mul_literals" (formula "58") (term "0,1"))
                                             (rule "polySimp_elimOne" (formula "58") (term "1,1"))
                                             (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "50"))
                                             (rule "add_zero_right" (formula "1") (term "1"))
                                             (rule "inEqSimp_contradEq7" (formula "50") (ifseqformula "1"))
                                             (rule "mul_literals" (formula "50") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "50") (term "0,0"))
                                             (rule "leq_literals" (formula "50") (term "0"))
                                              (builtin "One Step Simplification" (formula "50"))
                                             (rule "false_right" (formula "50"))
                                             (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "2"))
                                             (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                                             (rule "polySimp_pullOutFactor2b" (formula "4") (term "0"))
                                             (rule "add_literals" (formula "4") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "4") (term "1,0"))
                                             (rule "add_zero_right" (formula "4") (term "0"))
                                             (rule "polySimp_rightDist" (formula "4") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                                             (rule "mul_literals" (formula "4") (term "0,0"))
                                             (rule "polySimp_elimOne" (formula "4") (term "1,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                             (rule "mul_literals" (formula "4") (term "1"))
                                             (rule "allLeft" (formula "33") (inst "t=bitIndex_1_0"))
                                             (rule "inEqSimp_contradInEq0" (formula "33") (term "1,0,0,0,0,0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "33") (term "0,1,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0,0,0,0") (ifseqformula "12"))
                                             (rule "qeq_literals" (formula "33") (term "0,1,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "allLeft" (formula "34") (inst "t=mul(int::select(heap, self, BitSet::$wordsInUse),
    Z(4(6(#))))"))
                                             (rule "inEqSimp_contradInEq5" (formula "34") (term "1,0,0,0,0,0,0") (ifseqformula "26"))
                                             (rule "mul_literals" (formula "34") (term "1,1,0,1,0,0,0,0,0,0"))
                                             (rule "greater_literals" (formula "34") (term "0,0,1,0,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "qeq_literals" (formula "34") (term "0,1,0,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_subsumption6" (formula "34") (term "1,0,0,0,0,0") (ifseqformula "26"))
                                             (rule "greater_literals" (formula "34") (term "0,0,1,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "mul_literals" (formula "34") (term "1,0,1,0,0,0,0,0"))
                                             (rule "leq_literals" (formula "34") (term "0,1,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "true_left" (formula "34"))
                                             (rule "div_axiom" (formula "58") (term "0,0") (inst "quotient=quotient_4"))
                                             (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                                             (rule "qeq_literals" (formula "1") (term "0,1,1"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "equal_literals" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "polySimp_addComm1" (formula "3") (term "1"))
                                             (rule "add_literals" (formula "3") (term "0,1"))
                                             (rule "inEqSimp_commuteLeq" (formula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "3"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "3") (term "0"))
                                             (rule "applyEqRigid" (formula "61") (term "0,0") (ifseqformula "1"))
                                             (rule "polySimp_homoEq" (formula "61"))
                                             (rule "polySimp_mulLiterals" (formula "61") (term "1,0"))
                                             (rule "polySimp_addComm1" (formula "61") (term "0"))
                                             (rule "polySimp_sepPosMonomial" (formula "61"))
                                             (rule "polySimp_mulComm0" (formula "61") (term "1"))
                                             (rule "polySimp_rightDist" (formula "61") (term "1"))
                                             (rule "mul_literals" (formula "61") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "61") (term "1,1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                             (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                             (rule "polySimp_rightDist" (formula "3") (term "1"))
                                             (rule "mul_literals" (formula "3") (term "0,1"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                             (rule "inEqSimp_strengthen0" (formula "3") (ifseqformula "61"))
                                             (rule "polySimp_addAssoc" (formula "3") (term "1"))
                                             (rule "add_literals" (formula "3") (term "0,1"))
                                             (rule "add_zero_left" (formula "3") (term "1"))
                                             (rule "inEqSimp_contradEq3" (formula "61") (ifseqformula "3"))
                                             (rule "polySimp_rightDist" (formula "61") (term "1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0"))
                                             (rule "mul_literals" (formula "61") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "61") (term "0,0"))
                                             (rule "polySimp_addComm0" (formula "61") (term "0,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "61") (term "0,0"))
                                             (rule "add_literals" (formula "61") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "61") (term "1,0,0"))
                                             (rule "add_literals" (formula "61") (term "0,0"))
                                             (rule "qeq_literals" (formula "61") (term "0"))
                                              (builtin "One Step Simplification" (formula "61"))
                                             (rule "false_right" (formula "61"))
                                             (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "3"))
                                             (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "3"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                             (rule "polySimp_pullOutFactor0" (formula "3") (term "0"))
                                             (rule "add_literals" (formula "3") (term "1,0"))
                                             (rule "times_zero_1" (formula "3") (term "0"))
                                             (rule "leq_literals" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
                                             (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq0" (formula "3"))
                                             (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                             (rule "polySimp_pullOutFactor0" (formula "3") (term "0"))
                                             (rule "add_literals" (formula "3") (term "1,0"))
                                             (rule "times_zero_1" (formula "3") (term "0"))
                                             (rule "qeq_literals" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "2"))
                                             (rule "polySimp_mulAssoc" (formula "6") (term "0"))
                                             (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "2"))
                                             (rule "polySimp_mulAssoc" (formula "4") (term "0"))
                                             (rule "applyEqRigid" (formula "5") (term "1") (ifseqformula "2"))
                                             (rule "polyDiv_pullOut" (formula "1") (term "0") (inst "polyDivCoeff=quotient_4"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,2,0"))
                                             (rule "equal_literals" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "polySimp_homoEq" (formula "1"))
                                             (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,0,1,0"))
                                             (rule "add_literals" (formula "1") (term "1,0,0,0,1,0"))
                                             (rule "times_zero_1" (formula "1") (term "0,0,0,1,0"))
                                             (rule "div_literals" (formula "1") (term "0,0,1,0"))
                                             (rule "add_zero_left" (formula "1") (term "0,1,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "1,0"))
                                             (rule "times_zero_1" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "inEqSimp_exactShadow0" (formula "5") (ifseqformula "3"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "greater_literals" (formula "5") (term "0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                             (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
                                             (rule "polySimp_rightDist" (formula "5") (term "0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0,0"))
                                             (rule "mul_literals" (formula "5") (term "0,0,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor0b" (formula "5") (term "0"))
                                             (rule "add_literals" (formula "5") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "5") (term "1,0"))
                                             (rule "add_zero_right" (formula "5") (term "0"))
                                             (rule "polySimp_rightDist" (formula "5") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                                             (rule "mul_literals" (formula "5") (term "0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                             (rule "mul_literals" (formula "5") (term "1"))
                                             (rule "inEqSimp_subsumption6" (formula "5") (ifseqformula "2"))
                                             (rule "mul_literals" (formula "5") (term "1,1,0"))
                                             (rule "greater_literals" (formula "5") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "leq_literals" (formula "5") (term "0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "allLeft" (formula "35") (inst "t=add(Z(1(#)), bitIndex_1_0)"))
                                             (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,1,0,0,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "35") (term "0,0,0,0,1,0,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_homoInEq0" (formula "35") (term "1,0,0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "35") (term "1,0,1,0,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "35") (term "1,0,1,0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "35") (term "0,1,0,1,0,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "35") (term "0,1,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "35") (term "0,0,1,0,0,0,0,0,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "35") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "35") (term "1,0,1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "35") (term "1,0,1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "35") (term "0,1,0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "35") (term "0,1,0,0,0,0,0"))
                                             (rule "add_literals" (formula "35") (term "0,0,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "35") (term "1,0,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "35") (term "0,1,0,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "35") (term "0,1,0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "35") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "35") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "35") (term "0,1,0,0,0,0,0"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0,0,0,0,0,0") (ifseqformula "13"))
                                             (rule "qeq_literals" (formula "35") (term "0,1,0,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "polyDiv_pullOut" (formula "35") (term "0,1,0,0,0,0,0,0,0") (inst "polyDivCoeff=Z(1(#))"))
                                             (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,2,0,1,0,0,0,0,0,0,0"))
                                             (rule "equal_literals" (formula "35") (term "0,0,1,0,0,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "mul_literals" (formula "35") (term "1,0,0,0,1,0,0,0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0,0,0"))
                                             (rule "polySimp_addComm0" (formula "35") (term "1,1,0,0,0,0,0,0,0"))
                                             (rule "polySimp_addComm1" (formula "35") (term "0,1,1,1,0,0,0,0,0,0,0"))
                                             (rule "polySimp_addComm1" (formula "35") (term "0,0,1,1,1,0,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "35") (term "0,0,0,1,1,1,0,0,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "35") (term "0,1,0,0,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,0,0,0,0"))
                                             (rule "polySimp_addComm1" (formula "35") (term "0,0,0,0,0,0,0,0"))
                                             (rule "polySimp_addComm1" (formula "35") (term "0,0,0,0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "35") (term "0,0,0,0,0,0,0,0,0,0"))
                                             (rule "commute_or_2" (formula "35") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "35") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "35") (term "0,0"))
                                             (rule "commute_or_2" (formula "35") (term "0"))
                                             (rule "cut_direct" (formula "35") (term "1,0"))
                                             (branch "CUT: bitIndex_1_0 ≥ 63 TRUE"
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "true_left" (formula "36"))
                                                (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "35"))
                                                (rule "leq_literals" (formula "13") (term "0"))
                                                 (builtin "One Step Simplification" (formula "13"))
                                                (rule "true_left" (formula "13"))
                                                (rule "inEqSimp_antiSymm" (formula "34") (ifseqformula "13"))
                                                (rule "applyEqRigid" (formula "13") (term "0") (ifseqformula "34"))
                                                (rule "leq_literals" (formula "13"))
                                                (rule "true_left" (formula "13"))
                                                (rule "applyEq" (formula "40") (term "0,1,1") (ifseqformula "33"))
                                                (rule "mul_literals" (formula "40") (term "1,1"))
                                                (rule "add_literals" (formula "40") (term "1"))
                                                (rule "applyEq" (formula "32") (term "1,1,0,0,0,1,0") (ifseqformula "33"))
                                                (rule "pow_literals" (formula "32") (term "1,0,0,0,1,0"))
                                                (rule "applyEqRigid" (formula "5") (term "1,0,0,0") (ifseqformula "33"))
                                                (rule "pow_literals" (formula "5") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "5") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "5"))
                                                (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                                                (rule "polySimp_addComm1" (formula "5") (term "0"))
                                                (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                                                (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "33"))
                                                (rule "qeq_literals" (formula "34"))
                                                (rule "true_left" (formula "34"))
                                                (rule "applyEq" (formula "4") (term "1,1,0") (ifseqformula "33"))
                                                (rule "pow_literals" (formula "4") (term "1,0"))
                                                (rule "applyEq" (formula "37") (term "0,1") (ifseqformula "33"))
                                                (rule "mul_literals" (formula "37") (term "1"))
                                                (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "33"))
                                                (rule "pow_literals" (formula "2") (term "0"))
                                                (rule "qeq_literals" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "applyEqRigid" (formula "2") (term "1,0,0,0") (ifseqformula "32"))
                                                (rule "pow_literals" (formula "2") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "2"))
                                                (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "32"))
                                                (rule "applyEqRigid" (formula "39") (term "1,0,1") (ifseqformula "32"))
                                                (rule "add_literals" (formula "39") (term "0,1"))
                                                (rule "applyEq" (formula "4") (term "1,0,1,0,0") (ifseqformula "32"))
                                                (rule "pow_literals" (formula "4") (term "0,1,0,0"))
                                                (rule "mul_literals" (formula "4") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                                                (rule "add_literals" (formula "4") (term "0,0,0"))
                                                (rule "applyEqRigid" (formula "5") (term "1,0,0,0") (ifseqformula "32"))
                                                (rule "add_literals" (formula "5") (term "0,0,0"))
                                                (rule "applyEq" (formula "31") (term "1,0,0,0,1,0,0,0,0,0,0") (ifseqformula "32"))
                                                (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,0,0,0"))
                                                (rule "applyEqRigid" (formula "40") (term "1,0,1") (ifseqformula "32"))
                                                (rule "add_literals" (formula "40") (term "0,1"))
                                                (rule "applyEqRigid" (formula "31") (term "0,0,0,0,0,0,0,0") (ifseqformula "32"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                                (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                                (rule "polySimp_rightDist" (formula "4") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                                (rule "mul_literals" (formula "4") (term "0,1"))
                                                (rule "inEqSimp_subsumption6" (formula "39") (ifseqformula "9"))
                                                (rule "greater_literals" (formula "39") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1,0"))
                                                (rule "mul_literals" (formula "39") (term "0,1,0"))
                                                (rule "inEqSimp_homoInEq0" (formula "39") (term "0"))
                                                (rule "polySimp_pullOutFactor1" (formula "39") (term "0,0"))
                                                (rule "add_literals" (formula "39") (term "1,0,0"))
                                                (rule "times_zero_1" (formula "39") (term "0,0"))
                                                (rule "qeq_literals" (formula "39") (term "0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "true_left" (formula "39"))
                                                (rule "inEqSimp_subsumption6" (formula "39") (ifseqformula "10"))
                                                (rule "greater_literals" (formula "39") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1,0"))
                                                (rule "mul_literals" (formula "39") (term "0,1,0"))
                                                (rule "inEqSimp_homoInEq0" (formula "39") (term "0"))
                                                (rule "polySimp_pullOutFactor1" (formula "39") (term "0,0"))
                                                (rule "add_literals" (formula "39") (term "1,0,0"))
                                                (rule "times_zero_1" (formula "39") (term "0,0"))
                                                (rule "qeq_literals" (formula "39") (term "0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "true_left" (formula "39"))
                                                (rule "inEqSimp_subsumption4" (formula "38") (ifseqformula "8"))
                                                (rule "mul_literals" (formula "38") (term "0,1,0"))
                                                (rule "greater_literals" (formula "38") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "leq_literals" (formula "38") (term "0"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "true_left" (formula "38"))
                                                (rule "inEqSimp_subsumption6" (formula "36") (ifseqformula "7"))
                                                (rule "mul_literals" (formula "36") (term "1,1,0"))
                                                (rule "greater_literals" (formula "36") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "leq_literals" (formula "36") (term "0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "true_left" (formula "36"))
                                                (rule "polyDiv_pullOut" (formula "31") (term "0,1,0,0,0,0,0,0") (inst "polyDivCoeff=Z(1(#))"))
                                                (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0,2,0,1,0,0,0,0,0,0"))
                                                (rule "equal_literals" (formula "31") (term "0,0,1,0,0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "mul_literals" (formula "31") (term "1,0,0,0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "31") (term "1,1,0,0,0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "31") (term "0,1,1,1,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "31") (term "0,0,1,1,1,0,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "31") (term "1,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "31") (term "0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "31") (term "0,0,0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "31") (term "0,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "31") (term "0,0,0,0,0,0,0,0"))
                                                (rule "polyDiv_pullOut" (formula "5") (term "0") (inst "polyDivCoeff=Z(1(#))"))
                                                (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,2,0"))
                                                (rule "equal_literals" (formula "5") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "mul_literals" (formula "5") (term "1,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "5") (term "0,0,0"))
                                                (rule "add_literals" (formula "5") (term "0,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "5") (term "0"))
                                                (rule "polySimp_sepPosMonomial" (formula "5"))
                                                (rule "mul_literals" (formula "5") (term "1"))
                                                (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "43"))
                                                (rule "polySimp_mulAssoc" (formula "2") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "2") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_4") (inst "elimGcd=Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
                                                (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,1,0"))
                                                (rule "leq_literals" (formula "2") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_addLiterals" (formula "2") (term "0,0,0,0"))
                                                (rule "add_literals" (formula "2") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                                                (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "2") (term "0,0"))
                                                (rule "qeq_literals" (formula "2") (term "0"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "5"))
                                                (rule "mul_literals" (formula "40") (term "0,0"))
                                                (rule "polySimp_addAssoc" (formula "40") (term "0"))
                                                (rule "add_literals" (formula "40") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "40"))
                                                (rule "mul_literals" (formula "40") (term "1"))
                                                (rule "elimGcdGeq_antec" (formula "40") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_4") (inst "elimGcd=Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))"))
                                                (rule "polySimp_mulLiterals" (formula "40") (term "1,0,1,0"))
                                                (rule "leq_literals" (formula "40") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "polySimp_mulLiterals" (formula "40") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_addLiterals" (formula "40") (term "0,0,0,0"))
                                                (rule "add_literals" (formula "40") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "40") (term "0,0"))
                                                (rule "add_literals" (formula "40") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "40") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "40") (term "0,0"))
                                                (rule "leq_literals" (formula "40") (term "0"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "inEqSimp_antiSymm" (formula "40") (ifseqformula "2"))
                                                (rule "applyEqRigid" (formula "3") (term "0,1") (ifseqformula "40"))
                                                (rule "mul_literals" (formula "3") (term "1"))
                                                (rule "applyEq" (formula "2") (term "0") (ifseqformula "40"))
                                                (rule "leq_literals" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "applyEqRigid" (formula "40") (term "0") (ifseqformula "39"))
                                                (rule "qeq_literals" (formula "40"))
                                                (rule "true_left" (formula "40"))
                                                (rule "applyEq" (formula "4") (term "0,1,1") (ifseqformula "39"))
                                                (rule "mul_literals" (formula "4") (term "1,1"))
                                                (rule "add_zero_right" (formula "4") (term "1"))
                                                (rule "applyEq" (formula "3") (term "0,1") (ifseqformula "38"))
                                                (rule "mul_literals" (formula "3") (term "1"))
                                                (rule "applyEqRigid" (formula "1") (term "0,1") (ifseqformula "38"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "2"))
                                                (rule "leq_literals" (formula "39") (term "0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "true_left" (formula "39"))
                                                (rule "div_axiom" (formula "3") (term "0") (inst "quotient=quotient_5"))
                                                (rule "equal_literals" (formula "3") (term "0"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "qeq_literals" (formula "3") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "mul_literals" (formula "3") (term "1,1,1"))
                                                (rule "andLeft" (formula "3"))
                                                (rule "andLeft" (formula "3"))
                                                (rule "polySimp_addComm1" (formula "5") (term "1"))
                                                (rule "add_literals" (formula "5") (term "0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "4"))
                                                (rule "inEqSimp_homoInEq1" (formula "5"))
                                                (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                                                (rule "polySimp_addComm1" (formula "5") (term "0"))
                                                (rule "applyEq" (formula "3") (term "0") (ifseqformula "6"))
                                                (rule "eqSymm" (formula "3"))
                                                (rule "applyEq" (formula "4") (term "0,1") (ifseqformula "3"))
                                                (rule "mul_literals" (formula "4") (term "1"))
                                                (rule "applyEqRigid" (formula "4") (term "0,1,0,0") (ifseqformula "3"))
                                                (rule "mul_literals" (formula "4") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "4") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                                                (rule "mul_literals" (formula "4") (term "1"))
                                                (rule "allLeft" (formula "34") (inst "t=mul(int::select(heap, self, BitSet::$wordsInUse),
    Z(4(6(#))))"))
                                                (rule "inEqSimp_subsumption6" (formula "34") (term "1,0,0,0,0,0") (ifseqformula "24"))
                                                (rule "greater_literals" (formula "34") (term "0,0,1,0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "mul_literals" (formula "34") (term "1,0,1,0,0,0,0,0"))
                                                (rule "leq_literals" (formula "34") (term "0,1,0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "true_left" (formula "34"))
                                                (rule "div_axiom" (formula "5") (term "0") (inst "quotient=quotient_6"))
                                                (rule "mul_literals" (formula "5") (term "1,1,1,1,1"))
                                                (rule "qeq_literals" (formula "5") (term "0,1,1"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "equal_literals" (formula "5") (term "0"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "andLeft" (formula "5"))
                                                (rule "andLeft" (formula "5"))
                                                (rule "polySimp_addAssoc" (formula "7") (term "0,1"))
                                                (rule "add_literals" (formula "7") (term "0,0,1"))
                                                (rule "polySimp_addComm1" (formula "7") (term "1"))
                                                (rule "add_literals" (formula "7") (term "0,1"))
                                                (rule "inEqSimp_homoInEq0" (formula "6"))
                                                (rule "polySimp_mulLiterals" (formula "6") (term "1,0"))
                                                (rule "polySimp_addComm1" (formula "6") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "7"))
                                                (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
                                                (rule "polySimp_addComm1" (formula "7") (term "0"))
                                                (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "8"))
                                                (rule "eqSymm" (formula "5"))
                                                (rule "applyEqRigid" (formula "7") (term "0,1,0,0") (ifseqformula "5"))
                                                (rule "mul_literals" (formula "7") (term "1,0,0"))
                                                (rule "add_literals" (formula "7") (term "0,0"))
                                                (rule "applyEqRigid" (formula "6") (term "0,1,0,0") (ifseqformula "5"))
                                                (rule "mul_literals" (formula "6") (term "1,0,0"))
                                                (rule "add_literals" (formula "6") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                                                (rule "mul_literals" (formula "7") (term "1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                                                (rule "mul_literals" (formula "6") (term "1"))
                                                (rule "inEqSimp_subsumption4" (formula "7") (ifseqformula "11"))
                                                (rule "greater_literals" (formula "7") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "mul_literals" (formula "7") (term "0,0"))
                                                (rule "leq_literals" (formula "7") (term "0"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "true_left" (formula "7"))
                                                (rule "inEqSimp_subsumption6" (formula "6") (ifseqformula "9"))
                                                (rule "greater_literals" (formula "6") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "mul_literals" (formula "6") (term "1,0"))
                                                (rule "leq_literals" (formula "6") (term "0"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "allLeft" (formula "34") (inst "t=Z(3(6(#)))"))
                                                (rule "leq_literals" (formula "34") (term "1,0,0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "qeq_literals" (formula "34") (term "1,0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "pow_literals" (formula "34") (term "1,0,0,0,1,0"))
                                                (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,0,0,0,0"))
                                                (rule "polyDiv_pullOut" (formula "34") (term "0,1,0,0,0,0,0,0") (inst "polyDivCoeff=Z(1(#))"))
                                                (rule "equal_literals" (formula "34") (term "0,0,1,0,0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0,0,1,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "34") (term "1,0,0,0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "34") (term "1,1,0,0,0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "34") (term "0,1,1,1,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "34") (term "0,0,1,1,1,0,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "34") (term "0,0,0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "34") (term "0,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "34") (term "0,0,0,0,0,0,0,0"))
                                                (rule "allLeft" (formula "37") (inst "t=add(Z(3(6(#))), mul(i_4_0, Z(4(6(#)))))"))
                                                (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "7"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "inEqSimp_homoInEq0" (formula "37") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "37") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "37") (term "1,0,0"))
                                                (rule "mul_literals" (formula "37") (term "0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "37") (term "0,0"))
                                                (rule "add_literals" (formula "37") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1"))
                                                (rule "mul_literals" (formula "37") (term "1,1"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "37") (term "0"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "0,0"))
                                                (rule "inEqSimp_contradInEq5" (formula "37") (term "0") (ifseqformula "8"))
                                                (rule "mul_literals" (formula "37") (term "1,1,0,0"))
                                                (rule "greater_literals" (formula "37") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "qeq_literals" (formula "37") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "inEqSimp_subsumption6" (formula "37") (ifseqformula "8"))
                                                (rule "greater_literals" (formula "37") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "mul_literals" (formula "37") (term "1,0"))
                                                (rule "leq_literals" (formula "37") (term "0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "true_left" (formula "37"))
                                                (rule "allLeft" (formula "35") (inst "t=Z(3(6(#)))"))
                                                (rule "qeq_literals" (formula "35") (term "1,0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "add_literals" (formula "35") (term "0,0,0,1,0,0,0,0,0,0,0,0"))
                                                (rule "pow_literals" (formula "35") (term "1,0,0,1,0"))
                                                (rule "leq_literals" (formula "35") (term "1,0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "polyDiv_pullOut" (formula "35") (term "0,1,0,0,0,0,0,0,0") (inst "polyDivCoeff=Z(1(#))"))
                                                (rule "equal_literals" (formula "35") (term "0,0,1,0,0,0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0,1,0,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "35") (term "1,0,0,0,1,0,0,0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "35") (term "0,0,1,1,0,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "35") (term "0,0,0,1,1,0,0,0,0,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "35") (term "1,1,0,0,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "35") (term "0,1,0,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "35") (term "0,0,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "35") (term "0,0,0,0,0,0,0,0,0"))
                                                (rule "allLeft" (formula "39") (inst "t=add(Z(3(6(#))), mul(i_4_0, Z(4(6(#)))))"))
                                                (rule "replace_known_left" (formula "39") (term "0,0,0,0") (ifseqformula "7"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "39") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "39") (term "0,0,0"))
                                                (rule "add_literals" (formula "39") (term "0,0,0,0"))
                                                (rule "inEqSimp_homoInEq0" (formula "39") (term "1"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,0,1"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1,0,1"))
                                                (rule "mul_literals" (formula "39") (term "0,1,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,1"))
                                                (rule "polySimp_addComm1" (formula "39") (term "0,1"))
                                                (rule "polySimp_addAssoc" (formula "39") (term "0,0,1"))
                                                (rule "add_literals" (formula "39") (term "0,0,0,1"))
                                                (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "39") (term "0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "39") (term "0,1,0"))
                                                (rule "add_literals" (formula "39") (term "0,0,1,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "39") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,1"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1,1"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1"))
                                                (rule "mul_literals" (formula "39") (term "0,1,1"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "39") (term "1,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "0,1,0"))
                                                (rule "inEqSimp_contradInEq5" (formula "39") (term "0,0") (ifseqformula "8"))
                                                (rule "mul_literals" (formula "39") (term "1,1,0,0,0"))
                                                (rule "greater_literals" (formula "39") (term "0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "qeq_literals" (formula "39") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "inEqSimp_contradInEq3" (formula "39") (term "0") (ifseqformula "9"))
                                                (rule "greater_literals" (formula "39") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "mul_literals" (formula "39") (term "0,0,0"))
                                                (rule "qeq_literals" (formula "39") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "inEqSimp_subsumption6" (formula "39") (ifseqformula "11"))
                                                (rule "greater_literals" (formula "39") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1,0"))
                                                (rule "mul_literals" (formula "39") (term "0,1,0"))
                                                (rule "inEqSimp_homoInEq0" (formula "39") (term "0"))
                                                (rule "polySimp_pullOutFactor1" (formula "39") (term "0,0"))
                                                (rule "add_literals" (formula "39") (term "1,0,0"))
                                                (rule "times_zero_1" (formula "39") (term "0,0"))
                                                (rule "qeq_literals" (formula "39") (term "0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "true_left" (formula "39"))
                                                (rule "allLeft" (formula "32") (inst "t=i_4_0"))
                                                (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0"))
                                                (rule "applyEqRigid" (formula "32") (term "0,1,0,0,0,0,0") (ifseqformula "6"))
                                                (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "32") (term "0,0,0,0,0"))
                                                (rule "add_literals" (formula "32") (term "0,0,0,0,0,0"))
                                                (rule "replace_known_left" (formula "32") (term "0,0,0,0") (ifseqformula "7"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "true_left" (formula "32"))
                                                (rule "allLeft" (formula "32") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, BitSet::$wordsInUse))"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "32") (term "0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "32") (term "0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_homoInEq0" (formula "32") (term "1,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "32") (term "1,0,1,0,0,0"))
                                                (rule "mul_literals" (formula "32") (term "0,1,0,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "32") (term "0,1,0,0,0"))
                                                (rule "add_literals" (formula "32") (term "0,0,1,0,0,0"))
                                                (rule "add_zero_left" (formula "32") (term "0,1,0,0,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "32") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "32") (term "0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "32") (term "0,1,0"))
                                                (rule "polySimp_addComm0" (formula "32") (term "0,0,1,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,1,0"))
                                                (rule "add_literals" (formula "32") (term "1,1,0,1,0"))
                                                (rule "times_zero_1" (formula "32") (term "1,0,1,0"))
                                                (rule "add_zero_right" (formula "32") (term "0,1,0"))
                                                (rule "leq_literals" (formula "32") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "32") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "32") (term "0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "32") (term "0,1,0"))
                                                (rule "add_literals" (formula "32") (term "0,0,1,0"))
                                                (rule "inEqSimp_invertInEq1" (formula "32") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0,0"))
                                                (rule "mul_literals" (formula "32") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "32") (term "0,1,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "1,0"))
                                                (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0"))
                                                (rule "polySimp_elimOne" (formula "32") (term "0,1,0"))
                                                (rule "inEqSimp_contradInEq0" (formula "32") (term "1,0") (ifseqformula "30"))
                                                (rule "qeq_literals" (formula "32") (term "0,1,0"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "25"))
                                                (rule "qeq_literals" (formula "32") (term "0,1,0"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "polyDiv_pullOut" (formula "32") (term "0,1,0,0") (inst "polyDivCoeff=Z(neglit(1(#)))"))
                                                (rule "equal_literals" (formula "32") (term "0,0,1,0,0"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "32") (term "1,0,0,0,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "32") (term "0,0,1,1,0,0"))
                                                (rule "add_literals" (formula "32") (term "0,0,0,1,1,0,0"))
                                                (rule "polySimp_addComm0" (formula "32") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "32") (term "1,0,0"))
                                                (rule "mul_literals" (formula "32") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "32") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "32") (term "0,0,0"))
                                                (rule "add_literals" (formula "32") (term "0,0,0,0"))
                                                (rule "div_axiom" (formula "32") (term "0,0,0,1") (inst "quotient=quotient_7"))
                                                (rule "mul_literals" (formula "32") (term "1,1,1,1,1"))
                                                (rule "qeq_literals" (formula "32") (term "0,1,1"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "equal_literals" (formula "32") (term "0"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "andLeft" (formula "32"))
                                                (rule "andLeft" (formula "32"))
                                                (rule "polySimp_addComm1" (formula "34") (term "1"))
                                                (rule "add_literals" (formula "34") (term "0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "33"))
                                                (rule "inEqSimp_homoInEq1" (formula "34"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "1,0"))
                                                (rule "polySimp_addComm1" (formula "34") (term "0"))
                                                (rule "applyEq" (formula "35") (term "0,0,0,1") (ifseqformula "32"))
                                                (rule "mod_axiom" (formula "35") (term "0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,1"))
                                                (rule "polySimp_homoEq" (formula "35") (term "0,1"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "35") (term "0,0,1"))
                                                (rule "polySimp_sepPosMonomial" (formula "35") (term "0,1"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,0,1"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,1"))
                                                (rule "mul_literals" (formula "35") (term "0,1,0,1"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,1,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "34"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                                                (rule "mul_literals" (formula "34") (term "0,1"))
                                                (rule "inEqSimp_exactShadow3" (formula "33") (ifseqformula "50"))
                                                (rule "polySimp_mulAssoc" (formula "33") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "33") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "33") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "33") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "33"))
                                                (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                                                (rule "elimGcdLeq_antec" (formula "33") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_7") (inst "elimGcd=Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#))))))))))))))))))))"))
                                                (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,0"))
                                                (rule "neg_literal" (formula "33") (term "0,0,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "33") (term "0,1,0,0,0,0,1,0"))
                                                (rule "leq_literals" (formula "33") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "mul_literals" (formula "33") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_addLiterals" (formula "33") (term "0,0,0,0"))
                                                (rule "add_literals" (formula "33") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "33") (term "0,0"))
                                                (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "33") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "33") (term "0,0"))
                                                (rule "qeq_literals" (formula "33") (term "0"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "inEqSimp_exactShadow3" (formula "47") (ifseqformula "35"))
                                                (rule "mul_literals" (formula "47") (term "0,0"))
                                                (rule "polySimp_addAssoc" (formula "47") (term "0"))
                                                (rule "add_literals" (formula "47") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "47"))
                                                (rule "mul_literals" (formula "47") (term "1"))
                                                (rule "elimGcdGeq_antec" (formula "47") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_7") (inst "elimGcd=Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#))))))))))))))))))))"))
                                                (rule "polySimp_mulLiterals" (formula "47") (term "1,0,1,0"))
                                                (rule "leq_literals" (formula "47") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "47"))
                                                (rule "polySimp_mulLiterals" (formula "47") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "47") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_addLiterals" (formula "47") (term "0,0,0,0"))
                                                (rule "add_literals" (formula "47") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "47") (term "0,0"))
                                                (rule "add_literals" (formula "47") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "47") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "47") (term "0,0"))
                                                (rule "leq_literals" (formula "47") (term "0"))
                                                 (builtin "One Step Simplification" (formula "47"))
                                                (rule "div_axiom" (formula "36") (term "0,1,0,0") (inst "quotient=quotient_8"))
                                                (rule "qeq_literals" (formula "36") (term "0,1,1"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "mul_literals" (formula "36") (term "1,1,1,1"))
                                                (rule "equal_literals" (formula "36") (term "0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "andLeft" (formula "36"))
                                                (rule "andLeft" (formula "36"))
                                                (rule "polySimp_addAssoc" (formula "38") (term "0,1"))
                                                (rule "add_literals" (formula "38") (term "0,0,1"))
                                                (rule "polySimp_addComm1" (formula "38") (term "1"))
                                                (rule "add_literals" (formula "38") (term "0,1"))
                                                (rule "inEqSimp_homoInEq0" (formula "37"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,0"))
                                                (rule "polySimp_addComm1" (formula "37") (term "0"))
                                                (rule "inEqSimp_homoInEq1" (formula "38"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,0"))
                                                (rule "polySimp_addComm1" (formula "38") (term "0"))
                                                (rule "applyEq" (formula "39") (term "0,1,0,0") (ifseqformula "36"))
                                                (rule "polySimp_addComm1" (formula "39") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                                (rule "polySimp_mulComm0" (formula "37") (term "1"))
                                                (rule "polySimp_rightDist" (formula "37") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,1"))
                                                (rule "mul_literals" (formula "37") (term "0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "38"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1"))
                                                (rule "polySimp_rightDist" (formula "38") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,1"))
                                                (rule "mul_literals" (formula "38") (term "0,1"))
                                                (rule "elimGcdLeq_antec" (formula "38") (inst "elimGcdRightDiv=add(Z(2(7(8(5(5(8(5(7(0(8(8(1(5(1(1(4(4(1(#))))))))))))))))))),
    mul(quotient_8,
        Z(4(4(7(1(1(7(1(5(1(6(7(3(0(3(2(8(8(2(#)))))))))))))))))))))") (inst "elimGcdLeftDiv=int::select(heap, self, BitSet::$wordsInUse)") (inst "elimGcd=Z(4(6(#)))"))
                                                (rule "mul_literals" (formula "38") (term "0,1,0,0,0,0,1,0"))
                                                (rule "neg_literal" (formula "38") (term "0,0,0,0,0,1,0"))
                                                (rule "leq_literals" (formula "38") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "38") (term "0,0"))
                                                (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "38") (term "0,0"))
                                                (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "38") (term "0,0,0"))
                                                (rule "add_literals" (formula "38") (term "0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "38") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "38") (term "0,0,0"))
                                                (rule "add_literals" (formula "38") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "38") (term "0,0"))
                                                (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "38") (term "0,0"))
                                                (rule "qeq_literals" (formula "38") (term "0"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "elimGcdGeq_antec" (formula "37") (inst "elimGcdRightDiv=add(Z(neglit(1(7(8(5(5(8(5(7(0(8(8(1(5(1(1(4(4(1(#)))))))))))))))))))),
    mul(quotient_8,
        Z(4(4(7(1(1(7(1(5(1(6(7(3(0(3(2(8(8(2(#)))))))))))))))))))))") (inst "elimGcdLeftDiv=int::select(heap, self, BitSet::$wordsInUse)") (inst "elimGcd=Z(4(6(#)))"))
                                                (rule "leq_literals" (formula "37") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "mul_literals" (formula "37") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "37") (term "0,0"))
                                                (rule "add_literals" (formula "37") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "37") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "37") (term "0,0"))
                                                (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "37") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "37") (term "0,0,0"))
                                                (rule "add_literals" (formula "37") (term "0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "37") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "37") (term "0,0,0"))
                                                (rule "add_literals" (formula "37") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "37") (term "0,0"))
                                                (rule "add_literals" (formula "37") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "37") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "37") (term "0,0"))
                                                (rule "leq_literals" (formula "37") (term "0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "38"))
                                                (rule "mul_literals" (formula "25") (term "0,0"))
                                                (rule "polySimp_addAssoc" (formula "25") (term "0"))
                                                (rule "add_literals" (formula "25") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                                                (rule "mul_literals" (formula "25") (term "1"))
                                                (rule "elimGcdGeq_antec" (formula "25") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_8") (inst "elimGcd=Z(4(4(7(1(1(7(1(5(1(6(7(3(0(3(2(8(8(2(#)))))))))))))))))))"))
                                                (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,0,0,1,0"))
                                                (rule "leq_literals" (formula "25") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "25"))
                                                (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_addLiterals" (formula "25") (term "0,0,0,0"))
                                                (rule "add_literals" (formula "25") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "25") (term "0,0"))
                                                (rule "add_literals" (formula "25") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "25") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "25") (term "0,0"))
                                                (rule "leq_literals" (formula "25") (term "0"))
                                                 (builtin "One Step Simplification" (formula "25"))
                                                (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "39"))
                                                (rule "polySimp_rightDist" (formula "11") (term "0,0"))
                                                (rule "mul_literals" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "11") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "11") (term "0,0"))
                                                (rule "add_literals" (formula "11") (term "0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "0"))
                                                (rule "inEqSimp_exactShadow3" (formula "39") (ifseqformula "30"))
                                                (rule "polySimp_rightDist" (formula "39") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0"))
                                                (rule "mul_literals" (formula "39") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "39"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1"))
                                                (rule "mul_literals" (formula "39") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,1"))
                                                (rule "inEqSimp_exactShadow3" (formula "40") (ifseqformula "32"))
                                                (rule "polySimp_rightDist" (formula "40") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "40") (term "1,0,0"))
                                                (rule "mul_literals" (formula "40") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "40") (term "0"))
                                                (rule "add_literals" (formula "40") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "40"))
                                                (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                                                (rule "elimGcdLeq_antec" (formula "40") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_8") (inst "elimGcd=Z(4(4(7(1(1(7(1(5(1(6(7(3(0(3(2(8(8(2(#)))))))))))))))))))"))
                                                (rule "polySimp_mulLiterals" (formula "40") (term "1,0,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "40") (term "1,0,1,0"))
                                                (rule "neg_literal" (formula "40") (term "0,0,0,0,0,1,0"))
                                                (rule "leq_literals" (formula "40") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_addLiterals" (formula "40") (term "0,0,0,0"))
                                                (rule "add_literals" (formula "40") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "40") (term "0,0"))
                                                (rule "add_literals" (formula "40") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "40") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "40") (term "0,0"))
                                                (rule "qeq_literals" (formula "40") (term "0"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "inEqSimp_antiSymm" (formula "26") (ifseqformula "40"))
                                                (rule "applyEqRigid" (formula "40") (term "0,1,1") (ifseqformula "26"))
                                                (rule "mul_literals" (formula "40") (term "1,1"))
                                                (rule "add_zero_right" (formula "40") (term "1"))
                                                (rule "applyEqRigid" (formula "43") (term "0,1,1") (ifseqformula "26"))
                                                (rule "mul_literals" (formula "43") (term "1,1"))
                                                (rule "add_zero_right" (formula "43") (term "1"))
                                                (rule "applyEq" (formula "11") (term "0,1,1") (ifseqformula "26"))
                                                (rule "mul_literals" (formula "11") (term "1,1"))
                                                (rule "add_zero_right" (formula "11") (term "1"))
                                                (rule "applyEq" (formula "42") (term "0,1,1") (ifseqformula "26"))
                                                (rule "mul_literals" (formula "42") (term "1,1"))
                                                (rule "add_zero_right" (formula "42") (term "1"))
                                                (rule "applyEq" (formula "41") (term "0") (ifseqformula "26"))
                                                (rule "leq_literals" (formula "41"))
                                                (rule "true_left" (formula "41"))
                                                (rule "applyEqRigid" (formula "27") (term "0") (ifseqformula "26"))
                                                (rule "qeq_literals" (formula "27"))
                                                (rule "true_left" (formula "27"))
                                                (rule "applyEq" (formula "38") (term "1") (ifseqformula "26"))
                                                (rule "applyEq" (formula "42") (term "0,1,0,0,0") (ifseqformula "26"))
                                                (rule "mul_literals" (formula "42") (term "1,0,0,0"))
                                                (rule "add_zero_right" (formula "42") (term "0,0,0"))
                                                (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "24"))
                                                (rule "leq_literals" (formula "39") (term "0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "true_left" (formula "39"))
                                                (rule "inEqSimp_subsumption0" (formula "40") (ifseqformula "32"))
                                                (rule "leq_literals" (formula "40") (term "0"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "true_left" (formula "40"))
                                                (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "27"))
                                                (rule "leq_literals" (formula "39") (term "0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "true_left" (formula "39"))
                                                (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "9"))
                                                (rule "leq_literals" (formula "11") (term "0"))
                                                 (builtin "One Step Simplification" (formula "11"))
                                                (rule "true_left" (formula "11"))
                                                (rule "div_axiom" (formula "38") (term "0,0,0,1") (inst "quotient=quotient_9"))
                                                (rule "mul_literals" (formula "38") (term "1,1,1,1,1"))
                                                (rule "qeq_literals" (formula "38") (term "0,1,1"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "equal_literals" (formula "38") (term "0"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "andLeft" (formula "38"))
                                                (rule "andLeft" (formula "38"))
                                                (rule "polySimp_addComm1" (formula "40") (term "1"))
                                                (rule "add_literals" (formula "40") (term "0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "39"))
                                                (rule "inEqSimp_homoInEq1" (formula "40"))
                                                (rule "polySimp_mulLiterals" (formula "40") (term "1,0"))
                                                (rule "polySimp_addComm1" (formula "40") (term "0"))
                                                (rule "applyEq" (formula "41") (term "0,0,0,1") (ifseqformula "38"))
                                                (rule "polySimp_homoEq" (formula "41") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,0,0,1"))
                                                (rule "polySimp_addComm1" (formula "41") (term "0,0,1"))
                                                (rule "polySimp_sepPosMonomial" (formula "41") (term "0,1"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,0,1"))
                                                (rule "polySimp_rightDist" (formula "41") (term "1,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,1"))
                                                (rule "mul_literals" (formula "41") (term "0,1,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "40"))
                                                (rule "polySimp_mulComm0" (formula "40") (term "1"))
                                                (rule "polySimp_rightDist" (formula "40") (term "1"))
                                                (rule "mul_literals" (formula "40") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "40") (term "1,1"))
                                                (rule "inEqSimp_exactShadow3" (formula "52") (ifseqformula "40"))
                                                (rule "mul_literals" (formula "52") (term "0,0"))
                                                (rule "polySimp_addAssoc" (formula "52") (term "0"))
                                                (rule "add_literals" (formula "52") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "52"))
                                                (rule "mul_literals" (formula "52") (term "1"))
                                                (rule "elimGcdGeq_antec" (formula "52") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_9") (inst "elimGcd=Z(2(#))"))
                                                (rule "polySimp_mulLiterals" (formula "52") (term "1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "52") (term "1,0,0,0,0,1,0"))
                                                (rule "leq_literals" (formula "52") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "52"))
                                                (rule "mul_literals" (formula "52") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_addLiterals" (formula "52") (term "0,0,0,0"))
                                                (rule "add_zero_right" (formula "52") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "52") (term "0,0"))
                                                (rule "add_literals" (formula "52") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "52") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "52") (term "0,0"))
                                                (rule "leq_literals" (formula "52") (term "0"))
                                                 (builtin "One Step Simplification" (formula "52"))
                                                (rule "inEqSimp_exactShadow3" (formula "39") (ifseqformula "34"))
                                                (rule "add_zero_right" (formula "39") (term "0"))
                                                (rule "polySimp_mulAssoc" (formula "39") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "0"))
                                                (rule "inEqSimp_invertInEq1" (formula "39"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "0"))
                                                (rule "mul_literals" (formula "39") (term "1"))
                                                (rule "elimGcdLeq_antec" (formula "39") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_9") (inst "elimGcd=Z(2(#))"))
                                                (rule "mul_literals" (formula "39") (term "0,1,0,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,0,1,0"))
                                                (rule "neg_literal" (formula "39") (term "0,0,0,0,0,1,0"))
                                                (rule "leq_literals" (formula "39") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "add_zero_right" (formula "39") (term "0,0,0,0"))
                                                (rule "mul_literals" (formula "39") (term "1,0,0,0,0"))
                                                (rule "add_zero_right" (formula "39") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "39") (term "0,0"))
                                                (rule "add_literals" (formula "39") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "39") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "39") (term "0,0"))
                                                (rule "qeq_literals" (formula "39") (term "0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "allLeft" (formula "46") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, BitSet::$wordsInUse))"))
                                                (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "46") (term "1,0,0,1,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "46") (term "0,1,0,0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "46") (term "1,0,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "46") (term "0,1,0,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "46") (term "0,0,1,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "46") (term "0,0,0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "46") (term "0,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "46") (term "0,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_homoInEq0" (formula "46") (term "1,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "46") (term "1,0,1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "46") (term "1,0,1,0,0,0"))
                                                (rule "mul_literals" (formula "46") (term "0,1,0,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "46") (term "0,1,0,0,0"))
                                                (rule "add_literals" (formula "46") (term "0,0,1,0,0,0"))
                                                (rule "add_zero_left" (formula "46") (term "0,1,0,0,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "46") (term "1,0"))
                                                (rule "polySimp_mulComm0" (formula "46") (term "1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "46") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "46") (term "0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "46") (term "0,1,0"))
                                                (rule "polySimp_addComm0" (formula "46") (term "0,0,1,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "46") (term "0,1,0"))
                                                (rule "add_literals" (formula "46") (term "1,1,0,1,0"))
                                                (rule "times_zero_1" (formula "46") (term "1,0,1,0"))
                                                (rule "add_zero_right" (formula "46") (term "0,1,0"))
                                                (rule "leq_literals" (formula "46") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "46"))
                                                (rule "inEqSimp_homoInEq1" (formula "46") (term "1,0"))
                                                (rule "polySimp_mulComm0" (formula "46") (term "1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "46") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "46") (term "0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "46") (term "0,1,0"))
                                                (rule "add_literals" (formula "46") (term "0,0,1,0"))
                                                (rule "applyEq" (formula "46") (term "0,0,1") (ifseqformula "33"))
                                                (rule "mod_axiom" (formula "46") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "46") (term "1,0,1"))
                                                (rule "polySimp_homoEq" (formula "46") (term "1"))
                                                (rule "polySimp_mulComm0" (formula "46") (term "1,0,1"))
                                                (rule "polySimp_rightDist" (formula "46") (term "1,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,1"))
                                                (rule "polySimp_mulComm0" (formula "46") (term "0,1,0,1"))
                                                (rule "polySimp_addAssoc" (formula "46") (term "0,1"))
                                                (rule "applyEq" (formula "46") (term "0,1,0,1") (ifseqformula "38"))
                                                (rule "polySimp_addComm1" (formula "46") (term "0,1"))
                                                (rule "polySimp_sepNegMonomial" (formula "46") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "46") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "46") (term "0,1"))
                                                (rule "inEqSimp_invertInEq1" (formula "46") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "46") (term "0,1,0,0"))
                                                (rule "times_zero_2" (formula "46") (term "1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "46") (term "0,1,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "46") (term "1,0"))
                                                (rule "polySimp_mulLiterals" (formula "46") (term "0,1,0"))
                                                (rule "polySimp_elimOne" (formula "46") (term "0,1,0"))
                                                (rule "inEqSimp_contradInEq1" (formula "46") (term "1,0,0") (ifseqformula "26"))
                                                (rule "qeq_literals" (formula "46") (term "0,1,0,0"))
                                                 (builtin "One Step Simplification" (formula "46"))
                                                (rule "inEqSimp_contradInEq0" (formula "46") (term "1,0") (ifseqformula "31"))
                                                (rule "qeq_literals" (formula "46") (term "0,1,0"))
                                                 (builtin "One Step Simplification" (formula "46"))
                                                (rule "polyDiv_pullOut" (formula "46") (term "0,1,0,0,0") (inst "polyDivCoeff=Z(neglit(1(#)))"))
                                                (rule "mul_literals" (formula "46") (term "0,1,0,0,2,0,1,0,0,0"))
                                                (rule "equal_literals" (formula "46") (term "0,0,1,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "46"))
                                                (rule "mul_literals" (formula "46") (term "1,0,0,0,1,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "46") (term "0,0,1,1,0,0,0"))
                                                (rule "add_literals" (formula "46") (term "0,0,0,1,1,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "46") (term "1,1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "46") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "46") (term "0,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "46") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "46") (term "0,0,0,0"))
                                                (rule "add_literals" (formula "46") (term "0,0,0,0,0"))
                                                (rule "applyEq" (formula "46") (term "0,1,0,0,0") (ifseqformula "37"))
                                                (rule "mul_literals" (formula "46") (term "1,0,0,0"))
                                                (rule "add_zero_right" (formula "46") (term "0,0,0"))
                                                (rule "allLeft" (formula "47") (inst "t=i_4_0"))
                                                (rule "inEqSimp_commuteGeq" (formula "47") (term "1,0"))
                                                (rule "applyEq" (formula "47") (term "0,1,0,0,0,0,0,0") (ifseqformula "6"))
                                                (rule "mul_literals" (formula "47") (term "1,0,0,0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "47") (term "0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "47") (term "0,0,0,0,0,0,0"))
                                                (rule "replace_known_left" (formula "47") (term "0,0,0,0,0") (ifseqformula "7"))
                                                 (builtin "One Step Simplification" (formula "47"))
                                                (rule "applyEq" (formula "47") (term "0,0,1") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "47"))
                                                (rule "equal_literals" (formula "47") (term "1"))
                                                 (builtin "One Step Simplification" (formula "47"))
                                                (rule "inEqSimp_contradInEq1" (formula "47") (term "1") (ifseqformula "11"))
                                                (rule "inEqSimp_homoInEq1" (formula "47") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,0,1"))
                                                (rule "add_literals" (formula "47") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "47") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "47") (term "0,0,1"))
                                                (rule "leq_literals" (formula "47") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "47"))
                                                (rule "inEqSimp_contradInEq1" (formula "47") (term "0") (ifseqformula "8"))
                                                (rule "qeq_literals" (formula "47") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "47"))
                                                (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "47"))
                                                (rule "qeq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "closeFalse" (formula "9"))
                                             )
                                             (branch "CUT: bitIndex_1_0 ≥ 63 FALSE"
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_geqRight" (formula "53"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "mul_literals" (formula "1") (term "1"))
                                                (rule "inEqSimp_subsumption0" (formula "15") (ifseqformula "1"))
                                                (rule "leq_literals" (formula "15") (term "0"))
                                                 (builtin "One Step Simplification" (formula "15"))
                                                (rule "true_left" (formula "15"))
                                                (rule "allLeft" (formula "37") (inst "t=bitIndex_1_0"))
                                                (rule "inEqSimp_contradInEq1" (formula "37") (term "1,0,0,0,0,0,0") (ifseqformula "14"))
                                                (rule "qeq_literals" (formula "37") (term "0,1,0,0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "inEqSimp_contradInEq0" (formula "37") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "37") (term "0,1,0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "allLeft" (formula "38") (inst "t=add(Z(1(#)), bitIndex_1_0)"))
                                                (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "38") (term "0,0,0,0,1,0,0,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "38") (term "1,0,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "38") (term "0,1,0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "38") (term "0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "38") (term "0,0,1,0,0,0,0,0"))
                                                (rule "inEqSimp_homoInEq0" (formula "38") (term "1,0,0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1,0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "38") (term "1,0,1,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "38") (term "0,1,0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "38") (term "0,1,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "38") (term "0,0,1,0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "38") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "38") (term "0,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "38") (term "1,0,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "38") (term "0,1,0,0,0,0,0,0"))
                                                (rule "inEqSimp_contradInEq0" (formula "38") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                (rule "qeq_literals" (formula "38") (term "0,1,0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "inEqSimp_contradInEq1" (formula "38") (term "1,0,0,0,0,0") (ifseqformula "14"))
                                                (rule "qeq_literals" (formula "38") (term "0,1,0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "polyDiv_pullOut" (formula "38") (term "0,1,0,0,0,0,0,0,0") (inst "polyDivCoeff=Z(1(#))"))
                                                (rule "mul_literals" (formula "38") (term "0,1,0,0,2,0,1,0,0,0,0,0,0,0"))
                                                (rule "equal_literals" (formula "38") (term "0,0,1,0,0,0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "mul_literals" (formula "38") (term "1,0,0,0,1,0,0,0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "38") (term "1,1,0,0,0,0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "38") (term "0,1,1,1,0,0,0,0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "38") (term "0,0,1,1,1,0,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "38") (term "0,0,0,1,1,1,0,0,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "38") (term "0,1,0,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "38") (term "0,0,0,0,0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "38") (term "0,0,0,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "38") (term "0,0,0,0,0,0,0,0,0,0"))
                                                (rule "allLeft" (formula "39") (inst "t=mul(int::select(heap, self, BitSet::$wordsInUse),
    Z(4(6(#))))"))
                                                (rule "inEqSimp_subsumption6" (formula "39") (term "1,0,0,0,0,0") (ifseqformula "27"))
                                                (rule "greater_literals" (formula "39") (term "0,0,1,0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "mul_literals" (formula "39") (term "1,0,1,0,0,0,0,0"))
                                                (rule "leq_literals" (formula "39") (term "0,1,0,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "true_left" (formula "39"))
                                                (rule "allLeft" (formula "34") (inst "t=i_4_0"))
                                                (rule "inEqSimp_commuteGeq" (formula "34") (term "1,0"))
                                                (rule "applyEqRigid" (formula "34") (term "0,1,0,0,0,0,0") (ifseqformula "7"))
                                                (rule "mul_literals" (formula "34") (term "1,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "34") (term "0,0,0,0,0"))
                                                (rule "replace_known_left" (formula "34") (term "0,0,0,0") (ifseqformula "8"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "true_left" (formula "34"))
                                                (rule "allLeft" (formula "34") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, BitSet::$wordsInUse))"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "34") (term "0,0,0,0,0,0"))
                                                (rule "polySimp_addComm0" (formula "34") (term "0,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "34") (term "0,0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "34") (term "0,0,0,0,1,0,0,0,0,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "34") (term "0,1,0"))
                                                (rule "polySimp_addComm0" (formula "34") (term "0,0,1,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,1,0"))
                                                (rule "add_literals" (formula "34") (term "1,1,0,1,0"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,1,0"))
                                                (rule "add_zero_right" (formula "34") (term "0,1,0"))
                                                (rule "leq_literals" (formula "34") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_homoInEq0" (formula "34") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,0,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,1,0,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "34") (term "0,1,0,0"))
                                                (rule "add_literals" (formula "34") (term "0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "34") (term "0,1,0,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "34") (term "1,0"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "34") (term "0,1,0"))
                                                (rule "add_literals" (formula "34") (term "0,0,1,0"))
                                                (rule "inEqSimp_invertInEq1" (formula "34") (term "1,0,0"))
                                                (rule "mul_literals" (formula "34") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "0,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "34") (term "0,1,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "34") (term "1,0"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "0,1,0"))
                                                (rule "polySimp_elimOne" (formula "34") (term "0,1,0"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0,0") (ifseqformula "27"))
                                                (rule "qeq_literals" (formula "34") (term "0,1,0,0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_contradInEq0" (formula "34") (term "1,0") (ifseqformula "32"))
                                                (rule "qeq_literals" (formula "34") (term "0,1,0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "div_axiom" (formula "34") (term "0,0,0,1") (inst "quotient=quotient_5"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,1,1,1,1"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "0,1,1,1"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "0,2,1,1"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "0,1,0,1"))
                                                (rule "polySimp_addComm1" (formula "34") (term "1,2,1,1"))
                                                (rule "polySimp_addComm1" (formula "34") (term "1,1,1,1"))
                                                (rule "inEqSimp_contradEq7" (formula "34") (term "0") (ifseqformula "3"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,0"))
                                                (rule "add_zero_right" (formula "34") (term "0,0,0"))
                                                (rule "leq_literals" (formula "34") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "andLeft" (formula "34"))
                                                (rule "andLeft" (formula "34"))
                                                (rule "applyEq" (formula "37") (term "0,0,0,1") (ifseqformula "34"))
                                                (rule "mod_axiom" (formula "37") (term "0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,0,0,1"))
                                                (rule "polySimp_homoEq" (formula "37") (term "0,1"))
                                                (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "37") (term "0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "37") (term "0,0,1"))
                                                (rule "polySimp_sepPosMonomial" (formula "37") (term "0,1"))
                                                (rule "polySimp_mulComm0" (formula "37") (term "1,0,1"))
                                                (rule "polySimp_rightDist" (formula "37") (term "1,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,1"))
                                                (rule "mul_literals" (formula "37") (term "0,1,0,1"))
                                                (rule "polySimp_elimOne" (formula "37") (term "1,1,0,1"))
                                                (rule "inEqSimp_subsumption1" (formula "36") (term "0") (ifseqformula "3"))
                                                (rule "leq_literals" (formula "36") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_exactShadow3" (formula "36") (ifseqformula "35"))
                                                (rule "polySimp_rightDist" (formula "36") (term "0,0"))
                                                (rule "polySimp_pullOutFactor2b" (formula "36") (term "0"))
                                                (rule "add_literals" (formula "36") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "36") (term "1,0"))
                                                (rule "add_zero_right" (formula "36") (term "0"))
                                                (rule "polySimp_rightDist" (formula "36") (term "0"))
                                                (rule "mul_literals" (formula "36") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "36") (term "1,0"))
                                                (rule "polySimp_elimOne" (formula "36") (term "1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "36"))
                                                (rule "mul_literals" (formula "36") (term "1"))
                                                (rule "div_axiom" (formula "37") (term "0,1,0,0") (inst "quotient=quotient_6"))
                                                (rule "equal_literals" (formula "37") (term "0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "mul_literals" (formula "37") (term "1,1,1,1"))
                                                (rule "qeq_literals" (formula "37") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "andLeft" (formula "37"))
                                                (rule "andLeft" (formula "37"))
                                                (rule "polySimp_addAssoc" (formula "39") (term "0,1"))
                                                (rule "polySimp_addComm1" (formula "39") (term "1"))
                                                (rule "polySimp_addAssoc" (formula "39") (term "0,0,1"))
                                                (rule "add_literals" (formula "39") (term "0,0,0,1"))
                                                (rule "polySimp_addComm1" (formula "39") (term "0,1"))
                                                (rule "add_literals" (formula "39") (term "0,0,1"))
                                                (rule "inEqSimp_homoInEq0" (formula "38"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,0"))
                                                (rule "polySimp_addComm1" (formula "38") (term "0"))
                                                (rule "polySimp_addComm1" (formula "38") (term "0,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "39"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,0"))
                                                (rule "polySimp_addComm1" (formula "39") (term "0"))
                                                (rule "polySimp_addComm1" (formula "39") (term "0,0"))
                                                (rule "applyEq" (formula "40") (term "0,1,0,0") (ifseqformula "37"))
                                                (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "40") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1"))
                                                (rule "polySimp_rightDist" (formula "38") (term "1"))
                                                (rule "polySimp_rightDist" (formula "38") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,0,1"))
                                                (rule "mul_literals" (formula "38") (term "0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "39"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1"))
                                                (rule "polySimp_rightDist" (formula "39") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,0,1"))
                                                (rule "mul_literals" (formula "39") (term "0,0,1"))
                                                (rule "inEqSimp_exactShadow2" (formula "12") (ifseqformula "39"))
                                                (rule "greater_literals" (formula "12") (term "0"))
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "12") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                                                (rule "polySimp_addAssoc" (formula "12") (term "0,0,0"))
                                                (rule "add_literals" (formula "12") (term "0,0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                                (rule "inEqSimp_exactShadow1" (formula "39") (ifseqformula "31"))
                                                (rule "greater_literals" (formula "39") (term "0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "39") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0"))
                                                (rule "polySimp_elimOne" (formula "39") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "39") (term "0,0,0"))
                                                (rule "mul_literals" (formula "39") (term "0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "39"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1"))
                                                (rule "polySimp_rightDist" (formula "39") (term "0,1"))
                                                (rule "mul_literals" (formula "39") (term "0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,0,1"))
                                                (rule "inEqSimp_exactShadow0" (formula "54") (ifseqformula "41"))
                                                 (builtin "One Step Simplification" (formula "54"))
                                                (rule "greater_literals" (formula "54") (term "0"))
                                                 (builtin "One Step Simplification" (formula "54"))
                                                (rule "polySimp_rightDist" (formula "54") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "54") (term "1,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0"))
                                                (rule "polySimp_rightDist" (formula "54") (term "0,1,0,0"))
                                                (rule "mul_literals" (formula "54") (term "0,0,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "54") (term "0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "54") (term "0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "54") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "54") (term "0"))
                                                (rule "polySimp_rightDist" (formula "54") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "54") (term "0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "54") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "54") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor3b" (formula "54") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "54") (term "0,0,0"))
                                                (rule "add_literals" (formula "54") (term "0,0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "54"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "0"))
                                                (rule "elimGcdLeq_antec" (formula "54") (inst "elimGcdRightDiv=add(add(Z(5(3(9(7(8(3(7(2(4(8(1(0(6(8(6(1(1(6(4(#)))))))))))))))))))),
        mul(quotient_6,
            Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))))),
    mul(bitIndex_1_0, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=mul(i_4_0, Z(2(3(#))))") (inst "elimGcd=Z(8(2(1(#))))"))
                                                (rule "mul_literals" (formula "54") (term "0,1,0,0,0,0,1,0"))
                                                (rule "neg_literal" (formula "54") (term "0,0,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,0,0,1,0"))
                                                (rule "leq_literals" (formula "54") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "54"))
                                                (rule "polySimp_pullOutFactor0b" (formula "54") (term "0,0"))
                                                (rule "add_literals" (formula "54") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "54") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "54") (term "0,0"))
                                                (rule "polySimp_rightDist" (formula "54") (term "1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "54") (term "0,1,0,0,0"))
                                                (rule "mul_literals" (formula "54") (term "0,0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,0,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "54") (term "0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "54") (term "0,0,0,0"))
                                                (rule "add_literals" (formula "54") (term "0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "54") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "54") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "54") (term "0,0"))
                                                (rule "add_literals" (formula "54") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "54") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "54") (term "0,0"))
                                                (rule "polySimp_addAssoc" (formula "54") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "54") (term "0,0,0"))
                                                (rule "add_literals" (formula "54") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "54") (term "0,0"))
                                                (rule "add_literals" (formula "54") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "54") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "54") (term "0,0"))
                                                (rule "qeq_literals" (formula "54") (term "0"))
                                                 (builtin "One Step Simplification" (formula "54"))
                                                (rule "inEqSimp_exactShadow2" (formula "28") (ifseqformula "41"))
                                                (rule "greater_literals" (formula "28") (term "0"))
                                                 (builtin "One Step Simplification" (formula "28"))
                                                (rule "mul_literals" (formula "28") (term "1,0,0"))
                                                (rule "mul_literals" (formula "28") (term "0,0"))
                                                (rule "polySimp_addAssoc" (formula "28") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "28") (term "0,0"))
                                                (rule "add_literals" (formula "28") (term "0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "28"))
                                                (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                                (rule "polySimp_elimOne" (formula "28") (term "0"))
                                                (rule "inEqSimp_exactShadow1" (formula "41") (ifseqformula "34"))
                                                (rule "greater_literals" (formula "41") (term "0"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "mul_literals" (formula "41") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "41") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,0,0"))
                                                (rule "polySimp_elimOne" (formula "41") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "41") (term "0"))
                                                (rule "polySimp_rightDist" (formula "41") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "41") (term "0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                (rule "add_literals" (formula "41") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "41"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1"))
                                                (rule "polySimp_rightDist" (formula "41") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,1"))
                                                (rule "mul_literals" (formula "41") (term "0,1"))
                                                (rule "inEqSimp_exactShadow2" (formula "9") (ifseqformula "12"))
                                                (rule "mul_literals" (formula "9") (term "1,0,0,1"))
                                                (rule "greater_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "mul_literals" (formula "9") (term "0,0"))
                                                (rule "add_zero_left" (formula "9") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "inEqSimp_exactShadow0" (formula "52") (ifseqformula "12"))
                                                 (builtin "One Step Simplification" (formula "52"))
                                                (rule "greater_literals" (formula "52") (term "0"))
                                                 (builtin "One Step Simplification" (formula "52"))
                                                (rule "polySimp_mulComm0" (formula "52") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "52") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "52") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "52") (term "0,0"))
                                                (rule "polySimp_rightDist" (formula "52") (term "1,0"))
                                                (rule "polySimp_mulLiterals" (formula "52") (term "1,1,0"))
                                                (rule "polySimp_rightDist" (formula "52") (term "0,1,0"))
                                                (rule "mul_literals" (formula "52") (term "0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "52") (term "1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "52") (term "0"))
                                                (rule "polySimp_addComm0" (formula "52") (term "0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "52") (term "0"))
                                                (rule "add_literals" (formula "52") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "52") (term "1,0"))
                                                (rule "add_zero_right" (formula "52") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "52"))
                                                (rule "mul_literals" (formula "52") (term "1"))
                                                (rule "elimGcdGeq_antec" (formula "52") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_6") (inst "elimGcd=Z(4(2(4(3(0(3(1(1(4(7(1(7(0(2(6(1(9(5(0(8(1(1(#)))))))))))))))))))))))"))
                                                (rule "leq_literals" (formula "52") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "52"))
                                                (rule "polySimp_mulLiterals" (formula "52") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "52") (term "1,0,0"))
                                                (rule "mul_literals" (formula "52") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_addLiterals" (formula "52") (term "0,0,0,0"))
                                                (rule "add_literals" (formula "52") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "52") (term "0,0"))
                                                (rule "add_literals" (formula "52") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "52") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "52") (term "0,0"))
                                                (rule "leq_literals" (formula "52") (term "0"))
                                                 (builtin "One Step Simplification" (formula "52"))
                                                (rule "inEqSimp_exactShadow0" (formula "53") (ifseqformula "57"))
                                                (rule "greater_literals" (formula "53") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "53"))
                                                (rule "greater_literals" (formula "53") (term "0"))
                                                 (builtin "One Step Simplification" (formula "53"))
                                                (rule "polySimp_mulComm0" (formula "53") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "53") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "53") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "53") (term "0,0"))
                                                (rule "polySimp_rightDist" (formula "53") (term "1,0"))
                                                (rule "polySimp_mulLiterals" (formula "53") (term "1,1,0"))
                                                (rule "polySimp_rightDist" (formula "53") (term "0,1,0"))
                                                (rule "mul_literals" (formula "53") (term "0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "53") (term "1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "53") (term "0"))
                                                (rule "polySimp_addComm0" (formula "53") (term "0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "53") (term "0"))
                                                (rule "add_literals" (formula "53") (term "1,1,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "53"))
                                                (rule "polySimp_mulLiterals" (formula "53") (term "0"))
                                                (rule "inEqSimp_subsumption4" (formula "53") (ifseqformula "28"))
                                                (rule "greater_literals" (formula "53") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "53"))
                                                (rule "polySimp_rightDist" (formula "53") (term "0,0"))
                                                (rule "mul_literals" (formula "53") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "53") (term "1,0,0"))
                                                (rule "inEqSimp_homoInEq0" (formula "53") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "53") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "53") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "53") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "53") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "53") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "53") (term "0,0,0"))
                                                (rule "add_literals" (formula "53") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "53") (term "0,0"))
                                                (rule "add_literals" (formula "53") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "53") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "53") (term "0,0"))
                                                (rule "qeq_literals" (formula "53") (term "0"))
                                                 (builtin "One Step Simplification" (formula "53"))
                                                (rule "true_left" (formula "53"))
                                                (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "28"))
                                                (rule "mul_literals" (formula "15") (term "0,0"))
                                                (rule "add_zero_left" (formula "15") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "15"))
                                                (rule "mul_literals" (formula "15") (term "1"))
                                                (rule "inEqSimp_subsumption6" (formula "15") (ifseqformula "53"))
                                                (rule "greater_literals" (formula "15") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "15"))
                                                (rule "mul_literals" (formula "15") (term "1,0"))
                                                (rule "leq_literals" (formula "15") (term "0"))
                                                 (builtin "One Step Simplification" (formula "15"))
                                                (rule "true_left" (formula "15"))
                                                (rule "inEqSimp_exactShadow2" (formula "9") (ifseqformula "57"))
                                                (rule "mul_literals" (formula "9") (term "1,0,0,1"))
                                                (rule "greater_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "mul_literals" (formula "9") (term "0,0"))
                                                (rule "add_zero_left" (formula "9") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "inEqSimp_exactShadow1" (formula "41") (ifseqformula "31"))
                                                (rule "mul_literals" (formula "41") (term "1,0,1"))
                                                (rule "greater_literals" (formula "41") (term "0"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "polySimp_rightDist" (formula "41") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,0,0"))
                                                (rule "polySimp_elimOne" (formula "41") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "41") (term "0"))
                                                (rule "polySimp_rightDist" (formula "41") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "41") (term "0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "41") (term "0,0"))
                                                (rule "add_literals" (formula "41") (term "0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "41"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1"))
                                                (rule "polySimp_rightDist" (formula "41") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,1"))
                                                (rule "mul_literals" (formula "41") (term "0,1"))
                                                (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "41"))
                                                (rule "inEqSimp_homoInEq0" (formula "43") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "43") (term "1,0,0"))
                                                (rule "mul_literals" (formula "43") (term "0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "43") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "43") (term "0,0,0"))
                                                (rule "add_literals" (formula "43") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "43") (term "0,0"))
                                                (rule "add_literals" (formula "43") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "43") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "43") (term "0,0"))
                                                (rule "qeq_literals" (formula "43") (term "0"))
                                                 (builtin "One Step Simplification" (formula "43"))
                                                (rule "true_left" (formula "43"))
                                                (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "9"))
                                                (rule "mul_literals" (formula "16") (term "0,0"))
                                                (rule "add_zero_left" (formula "16") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                                                (rule "mul_literals" (formula "16") (term "1"))
                                                (rule "inEqSimp_subsumption6" (formula "16") (ifseqformula "54"))
                                                (rule "mul_literals" (formula "16") (term "1,1,0"))
                                                (rule "greater_literals" (formula "16") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "16"))
                                                (rule "leq_literals" (formula "16") (term "0"))
                                                 (builtin "One Step Simplification" (formula "16"))
                                                (rule "true_left" (formula "16"))
                                                (rule "inEqSimp_exactShadow3" (formula "41") (ifseqformula "1"))
                                                (rule "polySimp_rightDist" (formula "41") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,0,0"))
                                                (rule "mul_literals" (formula "41") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "41") (term "0"))
                                                (rule "add_literals" (formula "41") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "41"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "0"))
                                                (rule "elimGcdLeq_antec" (formula "41") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_6") (inst "elimGcd=Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "41") (term "1,0,0,0,0,1,0"))
                                                (rule "neg_literal" (formula "41") (term "0,0,0,0,0,1,0"))
                                                (rule "leq_literals" (formula "41") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "mul_literals" (formula "41") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_addLiterals" (formula "41") (term "0,0,0,0"))
                                                (rule "add_literals" (formula "41") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "41") (term "0,0"))
                                                (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "41") (term "0,0"))
                                                (rule "qeq_literals" (formula "41") (term "0"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "inEqSimp_exactShadow3" (formula "42") (ifseqformula "9"))
                                                (rule "polySimp_rightDist" (formula "42") (term "0,0"))
                                                (rule "mul_literals" (formula "42") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "42") (term "1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "42") (term "0"))
                                                (rule "polySimp_addComm1" (formula "42") (term "0,0"))
                                                (rule "add_literals" (formula "42") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "42") (term "0"))
                                                (rule "add_literals" (formula "42") (term "1,1,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "42"))
                                                (rule "polySimp_mulLiterals" (formula "42") (term "0"))
                                                (rule "inEqSimp_subsumption4" (formula "42") (ifseqformula "41"))
                                                (rule "greater_literals" (formula "42") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "mul_literals" (formula "42") (term "0,0"))
                                                (rule "leq_literals" (formula "42") (term "0"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "true_left" (formula "42"))
                                                (rule "inEqSimp_antiSymm" (formula "54") (ifseqformula "41"))
                                                (rule "applyEq" (formula "29") (term "0,1,1") (ifseqformula "54"))
                                                (rule "times_zero_2" (formula "29") (term "1,1"))
                                                (rule "add_zero_right" (formula "29") (term "1"))
                                                (rule "applyEqRigid" (formula "42") (term "0,1,1") (ifseqformula "54"))
                                                (rule "mul_literals" (formula "42") (term "1,1"))
                                                (rule "add_zero_right" (formula "42") (term "1"))
                                                (rule "applyEqRigid" (formula "9") (term "0,1,1") (ifseqformula "54"))
                                                (rule "mul_literals" (formula "9") (term "1,1"))
                                                (rule "add_zero_right" (formula "9") (term "1"))
                                                (rule "applyEqRigid" (formula "55") (term "0") (ifseqformula "54"))
                                                (rule "qeq_literals" (formula "55"))
                                                (rule "true_left" (formula "55"))
                                                (rule "applyEqRigid" (formula "41") (term "0") (ifseqformula "54"))
                                                (rule "leq_literals" (formula "41"))
                                                (rule "true_left" (formula "41"))
                                                (rule "applyEqRigid" (formula "44") (term "0,1,0,1") (ifseqformula "53"))
                                                (rule "mul_literals" (formula "44") (term "1,0,1"))
                                                (rule "add_zero_right" (formula "44") (term "0,1"))
                                                (rule "applyEq" (formula "43") (term "0,1,0,1") (ifseqformula "53"))
                                                (rule "mul_literals" (formula "43") (term "1,0,1"))
                                                (rule "add_zero_right" (formula "43") (term "0,1"))
                                                (rule "applyEqRigid" (formula "42") (term "0,1,0,1") (ifseqformula "53"))
                                                (rule "mul_literals" (formula "42") (term "1,0,1"))
                                                (rule "add_zero_right" (formula "42") (term "0,1"))
                                                (rule "applyEqRigid" (formula "58") (term "0,1,0,1") (ifseqformula "53"))
                                                (rule "mul_literals" (formula "58") (term "1,0,1"))
                                                (rule "add_zero_right" (formula "58") (term "0,1"))
                                                (rule "applyEqRigid" (formula "40") (term "1") (ifseqformula "53"))
                                                (rule "applyEq" (formula "13") (term "0,1,0,1") (ifseqformula "53"))
                                                (rule "mul_literals" (formula "13") (term "1,0,1"))
                                                (rule "add_zero_right" (formula "13") (term "0,1"))
                                                (rule "applyEq" (formula "45") (term "0,1,0,0,0,0") (ifseqformula "53"))
                                                (rule "mul_literals" (formula "45") (term "1,0,0,0,0"))
                                                (rule "add_zero_right" (formula "45") (term "0,0,0,0"))
                                                (rule "inEqSimp_subsumption2" (formula "13") (ifseqformula "56"))
                                                 (builtin "One Step Simplification" (formula "13"))
                                                (rule "greater_literals" (formula "13") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "13"))
                                                (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                                                (rule "mul_literals" (formula "13") (term "0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0"))
                                                (rule "polySimp_rightDist" (formula "13") (term "0,0"))
                                                (rule "mul_literals" (formula "13") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
                                                (rule "inEqSimp_homoInEq0" (formula "13") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                                                (rule "mul_literals" (formula "13") (term "0,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "13") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
                                                (rule "add_literals" (formula "13") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
                                                (rule "add_literals" (formula "13") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "13") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "13") (term "0,0"))
                                                (rule "qeq_literals" (formula "13") (term "0"))
                                                 (builtin "One Step Simplification" (formula "13"))
                                                (rule "true_left" (formula "13"))
                                                (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "1"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_subsumption0" (formula "27") (ifseqformula "1"))
                                                (rule "leq_literals" (formula "27") (term "0"))
                                                 (builtin "One Step Simplification" (formula "27"))
                                                (rule "true_left" (formula "27"))
                                                (rule "inEqSimp_subsumption1" (formula "38") (ifseqformula "14"))
                                                (rule "leq_literals" (formula "38") (term "0"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "true_left" (formula "38"))
                                                (rule "inEqSimp_exactShadow2" (formula "27") (ifseqformula "40"))
                                                (rule "mul_literals" (formula "27") (term "1,0,0,1"))
                                                (rule "greater_literals" (formula "27") (term "0"))
                                                 (builtin "One Step Simplification" (formula "27"))
                                                (rule "mul_literals" (formula "27") (term "0,0"))
                                                (rule "polySimp_addAssoc" (formula "27") (term "0"))
                                                (rule "add_literals" (formula "27") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "27"))
                                                (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                                                (rule "polySimp_elimOne" (formula "27") (term "0"))
                                                (rule "inEqSimp_subsumption0" (formula "27") (ifseqformula "1"))
                                                (rule "leq_literals" (formula "27") (term "0"))
                                                 (builtin "One Step Simplification" (formula "27"))
                                                (rule "true_left" (formula "27"))
                                                (rule "inEqSimp_exactShadow2" (formula "12") (ifseqformula "40"))
                                                (rule "greater_literals" (formula "12") (term "0"))
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "12") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                                                (rule "add_literals" (formula "12") (term "0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "12"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                                (rule "inEqSimp_subsumption2" (formula "12") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "greater_literals" (formula "12") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "polySimp_rightDist" (formula "12") (term "0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                                                (rule "mul_literals" (formula "12") (term "0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0"))
                                                (rule "inEqSimp_homoInEq0" (formula "12") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "12") (term "0,0,0"))
                                                (rule "add_literals" (formula "12") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "12") (term "0,0"))
                                                (rule "add_literals" (formula "12") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "12") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "12") (term "0,0"))
                                                (rule "qeq_literals" (formula "12") (term "0"))
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "true_left" (formula "12"))
                                                (rule "inEqSimp_exactShadow0" (formula "55") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "55"))
                                                (rule "greater_literals" (formula "55") (term "0"))
                                                 (builtin "One Step Simplification" (formula "55"))
                                                (rule "polySimp_rightDist" (formula "55") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "55") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "55") (term "1,0"))
                                                (rule "polySimp_mulLiterals" (formula "55") (term "1,1,0"))
                                                (rule "mul_literals" (formula "55") (term "0,1,0"))
                                                (rule "polySimp_rightDist" (formula "55") (term "0,1,0,0"))
                                                (rule "mul_literals" (formula "55") (term "0,0,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "55") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "55") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "55") (term "0"))
                                                (rule "polySimp_rightDist" (formula "55") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "55") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "55") (term "0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "55") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "55") (term "0,0,0"))
                                                (rule "add_literals" (formula "55") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "55") (term "0,0"))
                                                (rule "add_literals" (formula "55") (term "1,1,0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "55"))
                                                (rule "polySimp_mulLiterals" (formula "55") (term "0"))
                                                (rule "inEqSimp_subsumption2" (formula "54") (ifseqformula "55"))
                                                (rule "greater_literals" (formula "54") (term "1,0,0"))
                                                 (builtin "One Step Simplification" (formula "54"))
                                                (rule "greater_literals" (formula "54") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "54"))
                                                (rule "polySimp_rightDist" (formula "54") (term "0,0"))
                                                (rule "mul_literals" (formula "54") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "54") (term "1,0"))
                                                (rule "mul_literals" (formula "54") (term "0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0"))
                                                (rule "inEqSimp_homoInEq0" (formula "54") (term "0"))
                                                (rule "polySimp_pullOutFactor1" (formula "54") (term "0,0"))
                                                (rule "add_literals" (formula "54") (term "1,0,0"))
                                                (rule "times_zero_1" (formula "54") (term "0,0"))
                                                (rule "qeq_literals" (formula "54") (term "0"))
                                                 (builtin "One Step Simplification" (formula "54"))
                                                (rule "true_left" (formula "54"))
                                                (rule "elimGcdLeq_antec" (formula "54") (inst "elimGcdRightDiv=add(Z(5(3(9(7(8(3(7(2(4(8(1(0(6(8(6(1(1(6(4(#)))))))))))))))))))),
    mul(bitIndex_1_0, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=mul(i_4_0, Z(2(3(#))))") (inst "elimGcd=Z(8(2(1(#))))"))
                                                (rule "mul_literals" (formula "54") (term "0,1,0,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,0,0,1,0"))
                                                (rule "leq_literals" (formula "54") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "54"))
                                                (rule "neg_literal" (formula "54") (term "0,0,0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "54") (term "0,0"))
                                                (rule "add_literals" (formula "54") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "54") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "54") (term "0,0"))
                                                (rule "polySimp_rightDist" (formula "54") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "54") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "54") (term "0,0,0"))
                                                (rule "add_literals" (formula "54") (term "0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "54") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "54") (term "0,0,0"))
                                                (rule "add_literals" (formula "54") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "54") (term "0,0"))
                                                (rule "add_literals" (formula "54") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "54") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "54") (term "0,0"))
                                                (rule "qeq_literals" (formula "54") (term "0"))
                                                 (builtin "One Step Simplification" (formula "54"))
                                                (rule "inEqSimp_exactShadow1" (formula "39") (ifseqformula "32"))
                                                (rule "mul_literals" (formula "39") (term "1,0,1"))
                                                (rule "greater_literals" (formula "39") (term "0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "polySimp_rightDist" (formula "39") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0"))
                                                (rule "mul_literals" (formula "39") (term "0,0,0"))
                                                (rule "polySimp_elimOne" (formula "39") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "39") (term "0"))
                                                (rule "add_literals" (formula "39") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "39"))
                                                (rule "mul_literals" (formula "39") (term "1"))
                                                (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "14"))
                                                (rule "leq_literals" (formula "39") (term "0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "true_left" (formula "39"))
                                                (rule "inEqSimp_exactShadow1" (formula "39") (ifseqformula "30"))
                                                (rule "greater_literals" (formula "39") (term "0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "39") (term "0,0"))
                                                (rule "mul_literals" (formula "39") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0"))
                                                (rule "polySimp_elimOne" (formula "39") (term "1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "39"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1"))
                                                (rule "polySimp_rightDist" (formula "39") (term "1"))
                                                (rule "mul_literals" (formula "39") (term "0,1"))
                                                (rule "inEqSimp_exactShadow1" (formula "38") (ifseqformula "28"))
                                                (rule "mul_literals" (formula "38") (term "1,0,1"))
                                                (rule "greater_literals" (formula "38") (term "0"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "polySimp_rightDist" (formula "38") (term "0,0"))
                                                (rule "mul_literals" (formula "38") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,0,0"))
                                                (rule "polySimp_elimOne" (formula "38") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "38") (term "0"))
                                                (rule "add_literals" (formula "38") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                                (rule "mul_literals" (formula "38") (term "1"))
                                                (rule "inEqSimp_subsumption1" (formula "38") (ifseqformula "14"))
                                                (rule "leq_literals" (formula "38") (term "0"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "true_left" (formula "38"))
                                                (rule "inEqSimp_exactShadow0" (formula "50") (ifseqformula "54"))
                                                (rule "greater_literals" (formula "50") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "50"))
                                                (rule "greater_literals" (formula "50") (term "0"))
                                                 (builtin "One Step Simplification" (formula "50"))
                                                (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "50") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "50") (term "0,0"))
                                                (rule "polySimp_mulLiterals" (formula "50") (term "0,0"))
                                                (rule "polySimp_rightDist" (formula "50") (term "1,0"))
                                                (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0"))
                                                (rule "mul_literals" (formula "50") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "50") (term "0"))
                                                (rule "polySimp_addComm0" (formula "50") (term "0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "50") (term "0"))
                                                (rule "add_literals" (formula "50") (term "1,1,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "50"))
                                                (rule "polySimp_mulLiterals" (formula "50") (term "0"))
                                                (rule "inEqSimp_subsumption4" (formula "50") (ifseqformula "1"))
                                                (rule "greater_literals" (formula "50") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "50"))
                                                (rule "mul_literals" (formula "50") (term "0,0"))
                                                (rule "leq_literals" (formula "50") (term "0"))
                                                 (builtin "One Step Simplification" (formula "50"))
                                                (rule "true_left" (formula "50"))
                                                (rule "inEqSimp_exactShadow2" (formula "9") (ifseqformula "54"))
                                                (rule "mul_literals" (formula "9") (term "1,0,0,1"))
                                                (rule "greater_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "mul_literals" (formula "9") (term "0,0"))
                                                (rule "add_zero_left" (formula "9") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "1"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "div_axiom" (formula "41") (term "0,0,0,1") (inst "quotient=quotient_7"))
                                                (rule "equal_literals" (formula "41") (term "0"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "mul_literals" (formula "41") (term "1,1,1,1"))
                                                (rule "qeq_literals" (formula "41") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "andLeft" (formula "41"))
                                                (rule "andLeft" (formula "41"))
                                                (rule "polySimp_addComm1" (formula "43") (term "1"))
                                                (rule "add_literals" (formula "43") (term "0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "42"))
                                                (rule "inEqSimp_homoInEq1" (formula "43"))
                                                (rule "polySimp_mulLiterals" (formula "43") (term "1,0"))
                                                (rule "polySimp_addComm1" (formula "43") (term "0"))
                                                (rule "applyEqRigid" (formula "44") (term "0,0,0,1") (ifseqformula "41"))
                                                (rule "polySimp_homoEq" (formula "44") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "44") (term "1,0,0,1"))
                                                (rule "polySimp_addComm1" (formula "44") (term "0,0,1"))
                                                (rule "polySimp_sepPosMonomial" (formula "44") (term "0,1"))
                                                (rule "polySimp_mulComm0" (formula "44") (term "1,0,1"))
                                                (rule "polySimp_rightDist" (formula "44") (term "1,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,1"))
                                                (rule "mul_literals" (formula "44") (term "0,1,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "43"))
                                                (rule "polySimp_mulComm0" (formula "43") (term "1"))
                                                (rule "polySimp_rightDist" (formula "43") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "43") (term "1,1"))
                                                (rule "mul_literals" (formula "43") (term "0,1"))
                                                (rule "allLeft" (formula "46") (inst "t=i_4_0"))
                                                (rule "inEqSimp_commuteGeq" (formula "46") (term "1,0"))
                                                (rule "inEqSimp_contradInEq1" (formula "46") (term "1,0,0,0") (ifseqformula "9"))
                                                (rule "qeq_literals" (formula "46") (term "0,1,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "46"))
                                                (rule "inEqSimp_contradInEq1" (formula "46") (term "1,0") (ifseqformula "12"))
                                                (rule "inEqSimp_homoInEq1" (formula "46") (term "0,1,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "46") (term "0,0,1,0"))
                                                (rule "add_literals" (formula "46") (term "1,1,0,0,1,0"))
                                                (rule "times_zero_1" (formula "46") (term "1,0,0,1,0"))
                                                (rule "add_zero_right" (formula "46") (term "0,0,1,0"))
                                                (rule "leq_literals" (formula "46") (term "0,1,0"))
                                                 (builtin "One Step Simplification" (formula "46"))
                                                (rule "inEqSimp_contradInEq0" (formula "46") (term "1,0") (ifseqformula "10"))
                                                (rule "qeq_literals" (formula "46") (term "0,1,0"))
                                                 (builtin "One Step Simplification" (formula "46"))
                                                (rule "allLeft" (formula "47") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, BitSet::$wordsInUse))"))
                                                (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "47") (term "1,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "47") (term "0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "47") (term "0,0,0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "47") (term "0,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "47") (term "0,0,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "47") (term "0,0,0,1,0,0,0,0,0"))
                                                (rule "add_literals" (formula "47") (term "0,0,0,0,1,0,0,0,0,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "47") (term "1,0"))
                                                (rule "polySimp_mulComm0" (formula "47") (term "1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "47") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "47") (term "0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "47") (term "0,1,0"))
                                                (rule "polySimp_addComm0" (formula "47") (term "0,0,1,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,1,0"))
                                                (rule "add_literals" (formula "47") (term "1,1,0,1,0"))
                                                (rule "times_zero_1" (formula "47") (term "1,0,1,0"))
                                                (rule "add_zero_right" (formula "47") (term "0,1,0"))
                                                (rule "leq_literals" (formula "47") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "47"))
                                                (rule "inEqSimp_homoInEq0" (formula "47") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "47") (term "1,0,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "47") (term "1,0,1,0,0"))
                                                (rule "mul_literals" (formula "47") (term "0,1,0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "47") (term "0,1,0,0"))
                                                (rule "add_literals" (formula "47") (term "0,0,1,0,0"))
                                                (rule "add_zero_left" (formula "47") (term "0,1,0,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "47") (term "1,0"))
                                                (rule "polySimp_mulComm0" (formula "47") (term "1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "47") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "47") (term "0,1,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "47") (term "0,1,0"))
                                                (rule "add_literals" (formula "47") (term "0,0,1,0"))
                                                (rule "inEqSimp_invertInEq1" (formula "47") (term "1,0,0"))
                                                (rule "mul_literals" (formula "47") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "47") (term "0,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "47") (term "0,1,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "47") (term "1,0"))
                                                (rule "polySimp_mulLiterals" (formula "47") (term "0,1,0"))
                                                (rule "polySimp_elimOne" (formula "47") (term "0,1,0"))
                                                (rule "inEqSimp_contradInEq1" (formula "47") (term "1,0,0") (ifseqformula "27"))
                                                (rule "qeq_literals" (formula "47") (term "0,1,0,0"))
                                                 (builtin "One Step Simplification" (formula "47"))
                                                (rule "inEqSimp_contradInEq0" (formula "47") (term "1,0") (ifseqformula "32"))
                                                (rule "qeq_literals" (formula "47") (term "0,1,0"))
                                                 (builtin "One Step Simplification" (formula "47"))
                                                (rule "polyDiv_pullOut" (formula "47") (term "0,1,0,0") (inst "polyDivCoeff=Z(neglit(1(#)))"))
                                                (rule "equal_literals" (formula "47") (term "0,0,1,0,0"))
                                                 (builtin "One Step Simplification" (formula "47"))
                                                (rule "polySimp_mulLiterals" (formula "47") (term "1,0,0,0,1,0,0"))
                                                (rule "mul_literals" (formula "47") (term "1,0,0,0,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "47") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "47") (term "0,0,1,1,0,0"))
                                                (rule "polySimp_addComm1" (formula "47") (term "0,0,0,1,1,0,0"))
                                                (rule "add_literals" (formula "47") (term "0,0,0,0,1,1,0,0"))
                                                (rule "polySimp_addComm0" (formula "47") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "47") (term "1,0,0"))
                                                (rule "mul_literals" (formula "47") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "47") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "47") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "47") (term "0,0,0,0"))
                                                (rule "add_literals" (formula "47") (term "0,0,0,0,0"))
                                                (rule "allLeft" (formula "50") (inst "t=i_4_0"))
                                                (rule "inEqSimp_commuteGeq" (formula "50") (term "1,0"))
                                                (rule "applyEq" (formula "50") (term "0,0,1") (ifseqformula "5"))
                                                (rule "applyEq" (formula "50") (term "0,1,0,0,0,0,0,0") (ifseqformula "7"))
                                                (rule "mul_literals" (formula "50") (term "1,0,0,0,0,0,0"))
                                                (rule "add_zero_right" (formula "50") (term "0,0,0,0,0,0"))
                                                (rule "replace_known_left" (formula "50") (term "0,0,0,0,0") (ifseqformula "8"))
                                                 (builtin "One Step Simplification" (formula "50"))
                                                (rule "mod_axiom" (formula "50") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "50") (term "1,0,1"))
                                                (rule "polySimp_homoEq" (formula "50") (term "1"))
                                                (rule "polySimp_mulComm0" (formula "50") (term "1,0,1"))
                                                (rule "polySimp_rightDist" (formula "50") (term "1,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,1"))
                                                (rule "polySimp_mulAssoc" (formula "50") (term "0,1,0,1"))
                                                (rule "polySimp_mulComm0" (formula "50") (term "0,0,1,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "50") (term "0,1,0,1"))
                                                (rule "polySimp_addAssoc" (formula "50") (term "0,1"))
                                                (rule "polySimp_sepPosMonomial" (formula "50") (term "1"))
                                                (rule "polySimp_mulComm0" (formula "50") (term "1,1"))
                                                (rule "polySimp_rightDist" (formula "50") (term "1,1"))
                                                (rule "mul_literals" (formula "50") (term "0,1,1"))
                                                (rule "polySimp_mulLiterals" (formula "50") (term "1,1,1"))
                                                (rule "inEqSimp_contradInEq1" (formula "50") (term "0,0,0") (ifseqformula "9"))
                                                (rule "qeq_literals" (formula "50") (term "0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "50"))
                                                (rule "inEqSimp_contradInEq1" (formula "50") (term "1,0") (ifseqformula "12"))
                                                (rule "inEqSimp_homoInEq1" (formula "50") (term "0,1,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "50") (term "0,0,1,0"))
                                                (rule "add_literals" (formula "50") (term "1,1,0,0,1,0"))
                                                (rule "times_zero_1" (formula "50") (term "1,0,0,1,0"))
                                                (rule "add_zero_right" (formula "50") (term "0,0,1,0"))
                                                (rule "leq_literals" (formula "50") (term "0,1,0"))
                                                 (builtin "One Step Simplification" (formula "50"))
                                                (rule "inEqSimp_contradInEq0" (formula "50") (term "0") (ifseqformula "10"))
                                                (rule "qeq_literals" (formula "50") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "50"))
                                                (rule "elimGcdEq" (formula "50") (inst "elimGcdRightDiv=add(Z(neglit(1(#))), quotient_4)") (inst "elimGcdLeftDiv=div(mul(quotient_4, Z(2(#))), Z(2(#)))") (inst "elimGcd=Z(2(#))"))
                                                 (builtin "One Step Simplification" (formula "50"))
                                                (rule "mul_literals" (formula "50") (term "0,1,0,1,0"))
                                                (rule "mul_literals" (formula "50") (term "0,1,0,0,1"))
                                                (rule "mul_literals" (formula "50") (term "0,1,0,0,0"))
                                                (rule "add_literals" (formula "50") (term "1,0,0"))
                                                (rule "polySimp_rightDist" (formula "50") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "50") (term "0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "50") (term "1,0,0,1"))
                                                (rule "mul_literals" (formula "50") (term "0,1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "50") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "50") (term "0,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "50") (term "0,1,0"))
                                                (rule "polySimp_addComm1" (formula "50") (term "0,0,1,0"))
                                                (rule "add_literals" (formula "50") (term "0,0,0,1,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "50") (term "0,1,0"))
                                                (rule "add_literals" (formula "50") (term "1,1,0,1,0"))
                                                (rule "times_zero_1" (formula "50") (term "1,0,1,0"))
                                                (rule "add_zero_right" (formula "50") (term "0,1,0"))
                                                (rule "qeq_literals" (formula "50") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "50"))
                                                (rule "polySimp_addAssoc" (formula "50") (term "0,0,1"))
                                                (rule "polySimp_addComm1" (formula "50") (term "0,0,0,1"))
                                                (rule "add_literals" (formula "50") (term "0,0,0,0,1"))
                                                (rule "polySimp_pullOutFactor0b" (formula "50") (term "0,0,1"))
                                                (rule "add_literals" (formula "50") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "50") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "50") (term "0,0,1"))
                                                (rule "equal_literals" (formula "50") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "50"))
                                                (rule "polySimp_addAssoc" (formula "50") (term "0,0"))
                                                (rule "polySimp_addComm1" (formula "50") (term "0,0,0"))
                                                (rule "add_literals" (formula "50") (term "0,0,0,0"))
                                                (rule "polySimp_pullOutFactor0b" (formula "50") (term "0,0"))
                                                (rule "add_literals" (formula "50") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "50") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "50") (term "0,0"))
                                                (rule "leq_literals" (formula "50") (term "0"))
                                                 (builtin "One Step Simplification" (formula "50"))
                                                (rule "closeFalse" (formula "50"))
                                             )
                                          )
                                       )
                                       (branch "pow(2, bitIndex_1_0) ≥ 0 FALSE"
                                          (rule "inEqSimp_geqRight" (formula "47"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "powPositiveConcrete" (formula "1"))
                                          (rule "qeq_literals" (formula "48") (term "1"))
                                           (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "10")))
                                          (rule "closeTrue" (formula "48"))
                                       )
                                    )
                                    (branch "Case '<-'"
                                       (rule "commute_or_2" (formula "27") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "27") (term "0,0,0,0,0,0"))
                                       (rule "cnf_rightDist" (formula "27") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "27") (term "0"))
                                       (rule "distr_forallAnd" (formula "27"))
                                       (rule "andLeft" (formula "27"))
                                       (rule "commute_or_2" (formula "28") (term "0,0"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0,0"))
                                       (rule "cnf_rightDist" (formula "27") (term "0,0"))
                                       (rule "distr_forallAnd" (formula "27") (term "0"))
                                       (rule "distr_forallAnd" (formula "27"))
                                       (rule "andLeft" (formula "27"))
                                       (rule "shift_paren_or" (formula "27") (term "0,0"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "29") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "29") (term "0,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "29") (term "0,0,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "27") (term "0,0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "29") (term "1,0,0,0,0,0,0,0"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_or_subsumption1" (formula "27") (term "0,0,0,0,0,0,0"))
                                       (rule "qeq_literals" (formula "27") (term "0,1,0,0,0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "shift_paren_or" (formula "29") (term "0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_or_subsumption3" (formula "29") (term "0,0,0,0,0,0"))
                                       (rule "qeq_literals" (formula "29") (term "0,1,0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_or_subsumption3" (formula "27") (term "0,0,0,0,0,0"))
                                       (rule "qeq_literals" (formula "27") (term "0,1,0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "shift_paren_or" (formula "29") (term "0,0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "commute_or" (formula "27") (term "0,0,0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "27") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_or_subsumption1" (formula "27") (term "0,0,0,0,0"))
                                       (rule "qeq_literals" (formula "27") (term "0,1,0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0,0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "28") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_or_subsumption3" (formula "28") (term "0,0,0,0,0"))
                                       (rule "qeq_literals" (formula "28") (term "0,1,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "commute_or_2" (formula "28") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_or_subsumption1" (formula "28") (term "0,0,0,0,0,0"))
                                       (rule "qeq_literals" (formula "28") (term "0,1,0,0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "commute_or_2" (formula "28") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_or_tautInEq3" (formula "28") (term "0,0,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "28") (term "1,1,0,0,0,0,0,0,0"))
                                       (rule "qeq_literals" (formula "28") (term "1,0,0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "true_left" (formula "28"))
                                       (rule "shift_paren_or" (formula "28") (term "0,0,0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "28") (term "0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_or_subsumption1" (formula "28") (term "0,0,0,0,0,0,0"))
                                       (rule "qeq_literals" (formula "28") (term "0,1,0,0,0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "commute_or_2" (formula "28") (term "0,0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "28") (term "0,0,0,0,0,0"))
                                       (rule "commute_or_2" (formula "28") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_or_subsumption1" (formula "28") (term "0,0,0,0,0"))
                                       (rule "qeq_literals" (formula "28") (term "0,1,0,0,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "div_axiom" (formula "45") (term "0,1,0") (inst "quotient=quotient_2"))
                                       (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
                                       (rule "equal_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "qeq_literals" (formula "1") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
                                       (rule "polySimp_addComm1" (formula "3") (term "1"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0,0,1"))
                                       (rule "add_literals" (formula "3") (term "0,0,0,1"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,1"))
                                       (rule "add_literals" (formula "3") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                       (rule "applyEqRigid" (formula "48") (term "0,1,0") (ifseqformula "1"))
                                       (rule "polySimp_addComm1" (formula "48") (term "0"))
                                       (rule "polySimp_addComm0" (formula "48") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1"))
                                       (rule "mul_literals" (formula "2") (term "0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1"))
                                       (rule "polySimp_rightDist" (formula "3") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1"))
                                       (rule "mul_literals" (formula "3") (term "0,0,1"))
                                       (rule "inEqSimp_exactShadow2" (formula "5") (ifseqformula "3"))
                                       (rule "mul_literals" (formula "5") (term "1,0,0,1"))
                                       (rule "greater_literals" (formula "5") (term "0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "mul_literals" (formula "5") (term "0,0"))
                                       (rule "add_zero_left" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                       (rule "polySimp_elimOne" (formula "5") (term "0"))
                                       (rule "inEqSimp_exactShadow1" (formula "2") (ifseqformula "7"))
                                       (rule "mul_literals" (formula "2") (term "1,0,1"))
                                       (rule "greater_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,0,0"))
                                       (rule "mul_literals" (formula "2") (term "0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                       (rule "mul_literals" (formula "2") (term "0,1"))
                                       (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "6"))
                                       (rule "mul_literals" (formula "11") (term "0,0"))
                                       (rule "add_zero_left" (formula "11") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                                       (rule "mul_literals" (formula "11") (term "1"))
                                       (rule "elimGcdGeq_antec" (formula "11") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,1,0"))
                                       (rule "leq_literals" (formula "11") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "11") (term "0,0"))
                                       (rule "add_literals" (formula "11") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0"))
                                       (rule "leq_literals" (formula "11") (term "0"))
                                        (builtin "One Step Simplification" (formula "11"))
                                       (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "13"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                                       (rule "mul_literals" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))"))
                                       (rule "leq_literals" (formula "2") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0"))
                                       (rule "neg_literal" (formula "2") (term "0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "2") (term "0,0,0,0"))
                                       (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0"))
                                       (rule "qeq_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "inEqSimp_antiSymm" (formula "12") (ifseqformula "2"))
                                       (rule "applyEq" (formula "13") (term "0") (ifseqformula "12"))
                                       (rule "qeq_literals" (formula "13"))
                                       (rule "true_left" (formula "13"))
                                       (rule "applyEqRigid" (formula "3") (term "0,1,1") (ifseqformula "12"))
                                       (rule "mul_literals" (formula "3") (term "1,1"))
                                       (rule "add_zero_right" (formula "3") (term "1"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "12"))
                                       (rule "leq_literals" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "11"))
                                       (rule "mul_literals" (formula "6") (term "1,1"))
                                       (rule "add_zero_right" (formula "6") (term "1"))
                                       (rule "applyEqRigid" (formula "3") (term "0,1,0,1") (ifseqformula "11"))
                                       (rule "times_zero_2" (formula "3") (term "1,0,1"))
                                       (rule "add_zero_right" (formula "3") (term "0,1"))
                                       (rule "applyEq" (formula "4") (term "0,1,0,1") (ifseqformula "11"))
                                       (rule "times_zero_2" (formula "4") (term "1,0,1"))
                                       (rule "add_literals" (formula "4") (term "0,1"))
                                       (rule "applyEq" (formula "1") (term "1") (ifseqformula "11"))
                                       (rule "applyEq" (formula "51") (term "0,0,0,0") (ifseqformula "11"))
                                       (rule "mul_literals" (formula "51") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "51") (term "0,0"))
                                       (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "12"))
                                       (rule "leq_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "12"))
                                       (rule "leq_literals" (formula "5") (term "0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "inEqSimp_exactShadow2" (formula "5") (ifseqformula "3"))
                                       (rule "greater_literals" (formula "5") (term "0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "mul_literals" (formula "5") (term "1,0,0"))
                                       (rule "mul_literals" (formula "5") (term "0,0"))
                                       (rule "add_zero_left" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                       (rule "polySimp_elimOne" (formula "5") (term "0"))
                                       (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "12"))
                                       (rule "leq_literals" (formula "5") (term "0"))
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "true_left" (formula "5"))
                                       (rule "inEqSimp_exactShadow1" (formula "2") (ifseqformula "6"))
                                       (rule "mul_literals" (formula "2") (term "1,0,1"))
                                       (rule "greater_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
                                       (rule "mul_literals" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1"))
                                       (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "11"))
                                       (rule "leq_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "div_axiom" (formula "4") (term "0,0") (inst "quotient=quotient_3"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "1,1,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "0,1,1,1"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "0,2,1,1"))
                                       (rule "polySimp_mulComm0" (formula "4") (term "0,1,0,1"))
                                       (rule "polySimp_addComm1" (formula "4") (term "1,2,1,1"))
                                       (rule "polySimp_addComm1" (formula "4") (term "1,1,1,1"))
                                       (rule "allLeft" (formula "39") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, BitSet::$wordsInUse))"))
                                       (rule "inEqSimp_homoInEq0" (formula "39") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0"))
                                       (rule "mul_literals" (formula "39") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "39") (term "0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "39") (term "0,0,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "39") (term "1,0,1,0,0"))
                                       (rule "mul_literals" (formula "39") (term "0,1,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "39") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "39") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "39") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "39") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "39") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "39") (term "0,0,1,0"))
                                       (rule "inEqSimp_invertInEq1" (formula "39") (term "0,0,0"))
                                       (rule "mul_literals" (formula "39") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "39") (term "0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "39") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "39") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "39") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "39") (term "0,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "39") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "39") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "39") (term "0,1,0"))
                                       (rule "inEqSimp_contradInEq0" (formula "39") (term "1,0,0") (ifseqformula "30"))
                                       (rule "qeq_literals" (formula "39") (term "0,1,0,0"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "inEqSimp_contradInEq0" (formula "39") (term "1,0") (ifseqformula "28"))
                                       (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "39") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "39") (term "1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "39") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "39") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "25"))
                                       (rule "qeq_literals" (formula "39") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "allLeft" (formula "43") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, BitSet::$wordsInUse))"))
                                       (rule "inEqSimp_homoInEq1" (formula "43") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "43") (term "1,0,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "43") (term "1,0,1,0,0"))
                                       (rule "mul_literals" (formula "43") (term "0,1,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "43") (term "0,1,0,0"))
                                       (rule "add_literals" (formula "43") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_homoInEq1" (formula "43") (term "1,0"))
                                       (rule "polySimp_mulComm0" (formula "43") (term "1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "43") (term "1,0,1,0"))
                                       (rule "mul_literals" (formula "43") (term "0,1,0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "43") (term "0,1,0"))
                                       (rule "polySimp_addComm0" (formula "43") (term "0,0,1,0"))
                                       (rule "inEqSimp_homoInEq0" (formula "43") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0,0"))
                                       (rule "mul_literals" (formula "43") (term "0,1,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "43") (term "0,0,0,0"))
                                       (rule "add_literals" (formula "43") (term "0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "43") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "43") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "43") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "43") (term "0,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "43") (term "1,0"))
                                       (rule "polySimp_mulLiterals" (formula "43") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "43") (term "0,1,0"))
                                       (rule "inEqSimp_invertInEq1" (formula "43") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "43") (term "0,0,0,0"))
                                       (rule "times_zero_2" (formula "43") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "43") (term "0,0,0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "43") (term "0,0,0") (ifseqformula "25"))
                                       (rule "qeq_literals" (formula "43") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "inEqSimp_contradInEq0" (formula "43") (term "1,0") (ifseqformula "28"))
                                       (rule "inEqSimp_homoInEq1" (formula "43") (term "0,1,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "43") (term "0,0,1,0"))
                                       (rule "add_literals" (formula "43") (term "1,1,0,0,1,0"))
                                       (rule "times_zero_1" (formula "43") (term "1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "43") (term "0,0,1,0"))
                                       (rule "leq_literals" (formula "43") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "inEqSimp_contradInEq0" (formula "43") (term "0") (ifseqformula "30"))
                                       (rule "qeq_literals" (formula "43") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "commute_and" (formula "4") (term "0,1"))
                                       (rule "ifthenelse_split_for" (formula "4") (term "1,1"))
                                       (branch "pow(2, bitIndex_1_0) ≥ 0 TRUE"
                                          (rule "cnf_rightDist" (formula "5"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "commute_or" (formula "6"))
                                          (rule "cnf_rightDist" (formula "5"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "commute_or" (formula "6"))
                                          (rule "allLeft" (formula "35") (inst "t=bitIndex_1_0"))
                                          (rule "inEqSimp_contradInEq0" (formula "35") (term "1,0,0,0,0,0") (ifseqformula "15"))
                                          (rule "qeq_literals" (formula "35") (term "0,1,0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_contradInEq1" (formula "35") (term "1,0,0,0,0,0") (ifseqformula "14"))
                                          (rule "qeq_literals" (formula "35") (term "0,1,0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "allLeft" (formula "35") (inst "t=i_4_0"))
                                          (rule "replace_known_left" (formula "35") (term "0,1") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                          (rule "applyEqRigid" (formula "35") (term "0,1,0,0,0,0") (ifseqformula "1"))
                                          (rule "times_zero_2" (formula "35") (term "1,0,0,0,0"))
                                          (rule "add_zero_right" (formula "35") (term "0,0,0,0"))
                                          (rule "replace_known_right" (formula "35") (term "0,0,0") (ifseqformula "57"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_contradInEq0" (formula "35") (term "1,0") (ifseqformula "10"))
                                          (rule "qeq_literals" (formula "35") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "12"))
                                          (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                          (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                          (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                          (rule "leq_literals" (formula "35") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                          (rule "qeq_literals" (formula "35") (term "0"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "closeFalse" (formula "35"))
                                       )
                                       (branch "pow(2, bitIndex_1_0) ≥ 0 FALSE"
                                          (rule "inEqSimp_geqRight" (formula "45"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "powPositiveConcrete" (formula "1"))
                                          (rule "qeq_literals" (formula "46") (term "1"))
                                           (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "12")))
                                          (rule "closeTrue" (formula "46"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "33") (inst "sk=x_2_0"))
                           (rule "orRight" (formula "33"))
                           (rule "orRight" (formula "33"))
                           (rule "notRight" (formula "33"))
                           (rule "orRight" (formula "34"))
                           (rule "inEqSimp_geqRight" (formula "34"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_leqRight" (formula "35"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "inEqSimp_homoInEq0" (formula "36") (term "1"))
                           (rule "polySimp_addComm1" (formula "36") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                           (rule "mul_literals" (formula "1") (term "1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1"))
                           (rule "polySimp_mulComm0" (formula "36") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "36") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1"))
                           (rule "mul_literals" (formula "36") (term "0,1,1"))
                           (rule "polySimp_elimOne" (formula "36") (term "1,1,1"))
                           (rule "shift_paren_or" (formula "23") (term "0,0,0,0,0"))
                           (rule "commute_or_2" (formula "23") (term "0,0,0"))
                           (rule "commute_or_2" (formula "23") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "23") (term "0,0,0,0,0"))
                           (rule "shift_paren_and" (formula "23") (term "1,0,0"))
                           (rule "shift_paren_or" (formula "23") (term "0,0,0,0,0,0"))
                           (rule "cnf_rightDist" (formula "23") (term "0,0"))
                           (rule "distr_forallAnd" (formula "23") (term "0"))
                           (rule "distr_forallAnd" (formula "23"))
                           (rule "andLeft" (formula "23"))
                           (rule "commute_or_2" (formula "24") (term "0,0"))
                           (rule "shift_paren_or" (formula "24") (term "0,0,0"))
                           (rule "cnf_rightDist" (formula "23") (term "0,0"))
                           (rule "distr_forallAnd" (formula "23") (term "0"))
                           (rule "distr_forallAnd" (formula "23"))
                           (rule "andLeft" (formula "23"))
                           (rule "shift_paren_or" (formula "24") (term "0,0"))
                           (rule "shift_paren_or" (formula "23") (term "0,0"))
                           (rule "commute_or_2" (formula "23") (term "0,0,0"))
                           (rule "shift_paren_or" (formula "24") (term "0,0,0"))
                           (rule "commute_or_2" (formula "23") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "25") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "24") (term "0,0,0,0"))
                           (rule "commute_or_2" (formula "23") (term "0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "25") (term "0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "24") (term "0,0,0,0,0"))
                           (rule "commute_or_2" (formula "23") (term "0,0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "25") (term "0,0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "24") (term "0,0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "23") (term "0,0,0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "25") (term "0,0,0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "24") (term "0,0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "23") (term "0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_or_subsumption1" (formula "23") (term "0,0,0,0,0,0,0"))
                           (rule "qeq_literals" (formula "23") (term "0,1,0,0,0,0,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "commute_or_2" (formula "23") (term "0,0,0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "23") (term "0,0,0,0,0,0,0"))
                           (rule "inEqSimp_or_subsumption3" (formula "23") (term "0,0,0,0,0,0"))
                           (rule "qeq_literals" (formula "23") (term "0,1,0,0,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "commute_or_2" (formula "23") (term "0,0,0,0,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "commute_or" (formula "23") (term "0,0,0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "23") (term "0,0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "23") (term "0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "23") (term "0,0,0,0,0"))
                           (rule "inEqSimp_or_subsumption1" (formula "23") (term "0,0,0,0,0"))
                           (rule "qeq_literals" (formula "23") (term "0,1,0,0,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "shift_paren_or" (formula "25") (term "0,0,0,0,0,0,0,0"))
                           (rule "commute_or" (formula "24") (term "1,0,0,0,0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "24") (term "0,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_or_tautInEq3" (formula "24") (term "0,0,0,0,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "24") (term "1,1,0,0,0,0,0,0,0,0,0"))
                           (rule "qeq_literals" (formula "24") (term "1,0,0,0,0,0,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "commute_or" (formula "24") (term "1,0,0,0,0,0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "24") (term "0,0,0,0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "24") (term "0,0,0,0,0,0,0"))
                           (rule "inEqSimp_or_subsumption3" (formula "24") (term "0,0,0,0,0,0"))
                           (rule "qeq_literals" (formula "24") (term "0,1,0,0,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "commute_or_2" (formula "24") (term "0,0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "24") (term "0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "24") (term "0,0,0,0,0"))
                           (rule "inEqSimp_or_subsumption1" (formula "24") (term "0,0,0,0,0"))
                           (rule "qeq_literals" (formula "24") (term "0,1,0,0,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "commute_or_2" (formula "24") (term "0,0,0,0,0,0,0"))
                           (rule "inEqSimp_or_subsumption1" (formula "24") (term "0,0,0,0,0,0,0"))
                           (rule "qeq_literals" (formula "24") (term "0,1,0,0,0,0,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "allLeft" (formula "26") (inst "t=x_2_0"))
                           (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "26") (term "0,0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "replace_known_left" (formula "38") (term "0") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "inEqSimp_geqRight" (formula "38"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "27"))
                           (rule "leq_literals" (formula "2") (term "0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "inEqSimp_exactShadow2" (formula "16") (ifseqformula "1"))
                           (rule "greater_literals" (formula "16") (term "0"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "mul_literals" (formula "16") (term "1,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                           (rule "mul_literals" (formula "16") (term "1"))
                           (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "16"))
                           (rule "leq_literals" (formula "27") (term "0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "allLeft" (formula "28") (inst "t=x_2_0"))
                           (rule "replace_known_left" (formula "28") (term "0,0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_homoInEq0" (formula "28") (term "1"))
                           (rule "polySimp_addComm1" (formula "28") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,1"))
                           (rule "mul_literals" (formula "28") (term "0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0") (ifseqformula "16"))
                           (rule "qeq_literals" (formula "28") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_contradInEq2" (formula "28") (term "1") (ifseqformula "1"))
                           (rule "greater_literals" (formula "28") (term "0,1,0,1"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "greater_literals" (formula "28") (term "0,0,1"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "28") (term "0,0,1"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,1"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,1"))
                           (rule "inEqSimp_homoInEq1" (formula "28") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,1"))
                           (rule "polySimp_pullOutFactor0b" (formula "28") (term "0,0,1"))
                           (rule "add_literals" (formula "28") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "28") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "28") (term "0,0,1"))
                           (rule "leq_literals" (formula "28") (term "0,1"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "28"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "33") (inst "sk=i_4_0"))
                        (rule "orRight" (formula "33"))
                        (rule "crossInst" (formula "25") (inst "sk=i_4_1") (ifseqformula "33"))
                        (rule "crossInst" (formula "24") (inst "sk=i_4_2") (ifseqformula "34"))
                        (rule "cutUpperBound" (formula "35") (ifseqformula "25"))
                        (branch "Case 1"
                           (rule "cutUpperBound" (formula "36") (ifseqformula "28"))
                           (branch "Case 1"
                              (rule "orRight" (formula "36"))
                              (rule "andLeft" (formula "27"))
                              (rule "andLeft" (formula "25"))
                              (rule "orRight" (formula "38"))
                              (rule "orRight" (formula "40"))
                              (rule "eqSymm" (formula "1"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "41"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_geqRight" (formula "41"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "33") (term "1,0"))
                              (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0"))
                              (rule "applyEqRigid" (formula "33") (term "0,0,0,0") (ifseqformula "32"))
                              (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "34") (term "1,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "19") (term "0") (ifseqformula "5"))
                              (rule "applyEq" (formula "16") (term "0") (ifseqformula "5"))
                              (rule "applyEq" (formula "33") (term "0,2,0,1") (ifseqformula "32"))
                              (rule "applyEqRigid" (formula "30") (term "0,0,0,0") (ifseqformula "29"))
                              (rule "applyEq" (formula "30") (term "0,1,0,0") (ifseqformula "29"))
                              (rule "applyEqRigid" (formula "33") (term "0,1,0,0") (ifseqformula "32"))
                              (rule "applyEq" (formula "30") (term "0,2,0,1") (ifseqformula "29"))
                              (rule "applyEq" (formula "21") (term "1") (ifseqformula "5"))
                              (rule "applyEq" (formula "31") (term "1,1,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "5"))
                              (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
                              (rule "add_literals" (formula "4") (term "1,1,0"))
                              (rule "times_zero_1" (formula "4") (term "1,0"))
                              (rule "add_literals" (formula "4") (term "0"))
                              (rule "leq_literals" (formula "4"))
                              (rule "closeFalse" (formula "4"))
                           )
                           (branch "Case 2"
                              (rule "orRight" (formula "37"))
                              (rule "andLeft" (formula "28"))
                              (rule "andLeft" (formula "26"))
                              (rule "notLeft" (formula "1"))
                              (rule "close" (formula "31") (ifseqformula "1"))
                           )
                        )
                        (branch "Case 2"
                           (rule "cutUpperBound" (formula "36") (ifseqformula "28"))
                           (branch "Case 1"
                              (rule "orRight" (formula "37"))
                              (rule "andLeft" (formula "28"))
                              (rule "andLeft" (formula "26"))
                              (rule "notLeft" (formula "2"))
                              (rule "close" (formula "31") (ifseqformula "1"))
                           )
                           (branch "Case 2"
                              (rule "orRight" (formula "36"))
                              (rule "andLeft" (formula "27"))
                              (rule "andLeft" (formula "25"))
                              (rule "notLeft" (formula "1"))
                              (rule "orRight" (formula "39"))
                              (rule "orRight" (formula "38"))
                              (rule "eqSymm" (formula "30"))
                              (rule "inEqSimp_geqRight" (formula "40"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_leqRight" (formula "41"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_geqRight" (formula "41"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "41"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0"))
                              (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
                              (rule "applyEq" (formula "29") (term "1,1,0") (ifseqformula "28"))
                              (rule "applyEqRigid" (formula "32") (term "0,0,0,0") (ifseqformula "31"))
                              (rule "applyEq" (formula "32") (term "0,1,0,0") (ifseqformula "31"))
                              (rule "applyEqRigid" (formula "32") (term "1,1,0") (ifseqformula "31"))
                              (rule "applyEq" (formula "29") (term "0,0,0,0") (ifseqformula "28"))
                              (rule "applyEqRigid" (formula "29") (term "0,2,0,1") (ifseqformula "28"))
                              (rule "applyEq" (formula "29") (term "0,1,0,0") (ifseqformula "28"))
                              (rule "applyEq" (formula "32") (term "0,2,0,1") (ifseqformula "31"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                              (rule "mul_literals" (formula "4") (term "1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                              (rule "mul_literals" (formula "3") (term "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                              (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                              (rule "polySimp_elimOne" (formula "2") (term "0"))
                              (rule "inEqSimp_contradEq7" (formula "34") (ifseqformula "2"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0"))
                              (rule "add_zero_right" (formula "34") (term "0,0"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "false_right" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "29") (term "1,0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1,0"))
                              (rule "add_literals" (formula "29") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "29") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "29") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "29") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0") (ifseqformula "2"))
                              (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0"))
                              (rule "add_literals" (formula "32") (term "1,1,0,0,1,0"))
                              (rule "times_zero_1" (formula "32") (term "1,0,0,1,0"))
                              (rule "add_zero_right" (formula "32") (term "0,0,1,0"))
                              (rule "leq_literals" (formula "32") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
                              (rule "leq_literals" (formula "3") (term "0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "true_left" (formula "3"))
                              (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "28") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "inEqSimp_contradInEq0" (formula "31") (term "1,0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "31") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "31") (term "0,0"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "inEqSimp_contradInEq0" (formula "28") (term "0") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "28") (term "0,0"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "pullOutSelect" (formula "40") (term "0,1") (inst "selectSK=arr_1"))
                              (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "1"))
                              (rule "simplifySelectOfCreate" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")))
                              (rule "simplifySelectOfCreate" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                              (rule "applyEqReverse" (formula "41") (term "0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "41") (term "0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "replace_known_left" (formula "40") (term "0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "31")))
                              (rule "closeTrue" (formula "40"))
                           )
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "33") (inst "sk=f_0"))
                     (rule "allRight" (formula "33") (inst "sk=o_0"))
                     (rule "orRight" (formula "33"))
                     (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=f_0_0"))
                     (rule "simplifySelectOfStore" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "35"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                     (rule "simplifySelectOfStore" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                     (rule "simplifySelectOfStore" (formula "1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "1,0,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                     (rule "simplifySelectOfCreate" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "33"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
                     (rule "simplifySelectOfCreate" (formula "1"))
                     (rule "castDel" (formula "1") (term "1,0"))
                     (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "37"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_or" (formula "25") (term "1,1,1,0,0"))
                     (rule "commute_and" (formula "5") (term "0,0"))
                     (rule "commute_and" (formula "4") (term "0,0"))
                     (rule "commute_and" (formula "3") (term "0,0"))
                     (rule "commute_and" (formula "2") (term "0,0"))
                     (rule "shift_paren_or" (formula "25") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0"))
                     (rule "commute_and" (formula "1") (term "0,0"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "25") (term "0,0,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "25") (term "0,0"))
                     (rule "distr_forallAnd" (formula "25") (term "0"))
                     (rule "distr_forallAnd" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "commute_or" (formula "26") (term "0,0"))
                     (rule "shift_paren_or" (formula "25") (term "0,0"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0,0"))
                     (rule "cnf_rightDist" (formula "26") (term "0,0"))
                     (rule "distr_forallAnd" (formula "26") (term "0"))
                     (rule "distr_forallAnd" (formula "26"))
                     (rule "andLeft" (formula "26"))
                     (rule "commute_or_2" (formula "26") (term "0,0"))
                     (rule "commute_or_2" (formula "27") (term "0,0"))
                     (rule "commute_or_2" (formula "26") (term "0,0,0"))
                     (rule "shift_paren_or" (formula "27") (term "0,0,0"))
                     (rule "commute_or_2" (formula "26") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "27") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "26") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "27") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "26") (term "0,0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "26") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_or_subsumption3" (formula "26") (term "0,0,0,0,0"))
                     (rule "qeq_literals" (formula "26") (term "0,1,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "shift_paren_or" (formula "27") (term "0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "26") (term "0,0,0,0,0,0,0"))
                     (rule "inEqSimp_or_subsumption1" (formula "26") (term "0,0,0,0,0,0,0"))
                     (rule "qeq_literals" (formula "26") (term "0,1,0,0,0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "shift_paren_or" (formula "26") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_or_subsumption3" (formula "26") (term "0,0,0,0,0"))
                     (rule "qeq_literals" (formula "26") (term "0,1,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "commute_or_2" (formula "26") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_or_tautInEq1" (formula "26") (term "0,0,0,0,0"))
                     (rule "add_zero_right" (formula "26") (term "1,1,0,0,0,0,0"))
                     (rule "qeq_literals" (formula "26") (term "1,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "shift_paren_or" (formula "25") (term "0,0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "26") (term "1,0,0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_or_subsumption1" (formula "25") (term "0,0,0,0,0,0,0"))
                     (rule "qeq_literals" (formula "25") (term "0,1,0,0,0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "shift_paren_or" (formula "26") (term "0,0,0,0,0,0,0"))
                     (rule "inEqSimp_or_subsumption3" (formula "26") (term "0,0,0,0,0,0"))
                     (rule "qeq_literals" (formula "26") (term "0,1,0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0,0,0,0,0"))
                     (rule "inEqSimp_or_subsumption3" (formula "25") (term "0,0,0,0,0,0"))
                     (rule "qeq_literals" (formula "25") (term "0,1,0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "commute_or_2" (formula "26") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_or_subsumption1" (formula "26") (term "1,0,0,0,0,0,0,0"))
                     (rule "qeq_literals" (formula "26") (term "0,1,0,1,0,0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "shift_paren_or" (formula "26") (term "0,0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "26") (term "0,0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "26") (term "0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "26") (term "0,0,0,0,0"))
                     (rule "inEqSimp_or_subsumption1" (formula "26") (term "0,0,0,0,0"))
                     (rule "qeq_literals" (formula "26") (term "0,1,0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "commute_or" (formula "25") (term "0,0,0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0,0,0"))
                     (rule "inEqSimp_or_subsumption1" (formula "25") (term "0,0,0,0,0"))
                     (rule "qeq_literals" (formula "25") (term "0,1,0,0,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "f_0 = java.lang.Object::<created> ∧ o_0 = sk_0 TRUE"
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "applyEq" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "applyEqReverse" (formula "40") (term "1") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "applyEq" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "applyEqRigid" (formula "38") (term "1,0") (ifseqformula "2"))
                        (rule "applyEqRigid" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "38") (term "1") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "applyEq" (formula "36") (term "1,0,0,1") (ifseqformula "2"))
                        (rule "applyEq" (formula "37") (term "2,0") (ifseqformula "1"))
                        (rule "narrowSelectType" (formula "37") (term "0") (ifseqformula "6"))
                        (rule "replace_known_right" (formula "36") (term "0,1") (ifseqformula "37"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "notRight" (formula "36"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                        (rule "close" (formula "36") (ifseqformula "1"))
                     )
                     (branch "f_0 = java.lang.Object::<created> ∧ o_0 = sk_0 FALSE"
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "cut_direct" (formula "39") (term "0,0"))
                        (branch "CUT: o_0 = null TRUE"
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "false_right" (formula "40"))
                           (rule "applyEq" (formula "40") (term "1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "5") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "5") (term "1,0,0"))
                           (rule "replace_known_right" (formula "5") (term "1,0,0") (ifseqformula "36"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "applyEqReverse" (formula "40") (term "1") (ifseqformula "5"))
                           (rule "hideAuxiliaryEq" (formula "5"))
                           (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3") (term "1,0,0"))
                           (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "35"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3") (term "1,0,0"))
                           (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "34"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "38") (term "1") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "applyEqRigid" (formula "29") (term "0,1") (ifseqformula "1"))
                           (rule "eqSymm" (formula "29") (term "1"))
                           (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "36"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "false_right" (formula "29"))
                           (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "2") (term "1,0,0"))
                           (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "32"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "applyEqReverse" (formula "36") (term "1") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "eqSymm" (formula "35"))
                           (rule "applyEqRigid" (formula "35") (term "1,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "closeTrue" (formula "35"))
                        )
                        (branch "CUT: o_0 = null FALSE"
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "notRight" (formula "40"))
                           (rule "allLeft" (formula "30") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, BitSet::$wordsInUse))"))
                           (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0,1,0"))
                           (rule "mul_literals" (formula "30") (term "0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0,1,0"))
                           (rule "polySimp_addComm0" (formula "30") (term "0,0,1,0"))
                           (rule "inEqSimp_homoInEq0" (formula "30") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "30") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0,0,0,0"))
                           (rule "add_literals" (formula "30") (term "0,0,0,0,0"))
                           (rule "add_zero_left" (formula "30") (term "0,0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "30") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "30") (term "1,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "30") (term "1,0,1,0,0"))
                           (rule "mul_literals" (formula "30") (term "0,1,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "30") (term "0,1,0,0"))
                           (rule "add_literals" (formula "30") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0,1,0"))
                           (rule "inEqSimp_invertInEq1" (formula "30") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0,0,0,0"))
                           (rule "mul_literals" (formula "30") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "30") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "30") (term "0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "30") (term "0,1,0,0"))
                           (rule "inEqSimp_contradInEq0" (formula "30") (term "1,0") (ifseqformula "21"))
                           (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1,0"))
                           (rule "add_literals" (formula "30") (term "1,1,0,0,1,0"))
                           (rule "times_zero_1" (formula "30") (term "1,0,0,1,0"))
                           (rule "add_zero_right" (formula "30") (term "0,0,1,0"))
                           (rule "leq_literals" (formula "30") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0") (ifseqformula "18"))
                           (rule "qeq_literals" (formula "30") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "inEqSimp_contradInEq0" (formula "30") (term "0") (ifseqformula "23"))
                           (rule "qeq_literals" (formula "30") (term "0,0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "allLeft" (formula "32") (inst "t=add(Z(neglit(1(#))),
    int::select(heap, self, BitSet::$wordsInUse))"))
                           (rule "inEqSimp_homoInEq0" (formula "32") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,0"))
                           (rule "add_literals" (formula "32") (term "0,0,0,0,0"))
                           (rule "add_zero_left" (formula "32") (term "0,0,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0,1,0,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0,1,0,0"))
                           (rule "add_literals" (formula "32") (term "0,0,1,0,0"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "1,0"))
                           (rule "polySimp_mulComm0" (formula "32") (term "1,0,1,0"))
                           (rule "polySimp_rightDist" (formula "32") (term "1,0,1,0"))
                           (rule "mul_literals" (formula "32") (term "0,1,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "32") (term "0,1,0"))
                           (rule "polySimp_addComm0" (formula "32") (term "0,0,1,0"))
                           (rule "inEqSimp_invertInEq1" (formula "32") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "0,0,0,0"))
                           (rule "mul_literals" (formula "32") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "0,1,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "32") (term "1,0"))
                           (rule "polySimp_mulLiterals" (formula "32") (term "0,1,0"))
                           (rule "polySimp_elimOne" (formula "32") (term "0,1,0"))
                           (rule "inEqSimp_contradInEq0" (formula "32") (term "1,0,0") (ifseqformula "23"))
                           (rule "qeq_literals" (formula "32") (term "0,1,0,0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_contradInEq1" (formula "32") (term "0,0") (ifseqformula "18"))
                           (rule "qeq_literals" (formula "32") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "inEqSimp_contradInEq0" (formula "32") (term "0") (ifseqformula "21"))
                           (rule "inEqSimp_homoInEq1" (formula "32") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,0"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0,0"))
                           (rule "add_literals" (formula "32") (term "0,0,0"))
                           (rule "leq_literals" (formula "32") (term "0,0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch "f_0 = java.lang.Object::<created> ∧ o_0 = i_3 TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "3"))
                              (rule "eqSymm" (formula "35"))
                              (rule "sortsDisjointModuloNull" (formula "35"))
                              (rule "replace_known_right" (formula "35") (term "1") (ifseqformula "39"))
                               (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "42")))
                              (rule "false_right" (formula "35"))
                              (rule "applyEqRigid" (formula "6") (term "0,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "6"))
                              (rule "hideAuxiliaryEq" (formula "6"))
                              (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "applyEqReverse" (formula "42") (term "1") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEqReverse" (formula "41") (term "1") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "applyEq" (formula "40") (term "2,0") (ifseqformula "2"))
                              (rule "castTrueImpliesOriginalTrue" (formula "40") (ifseqformula "1"))
                              (rule "closeTrue" (formula "40"))
                           )
                           (branch "f_0 = java.lang.Object::<created> ∧ o_0 = i_3 FALSE"
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "cut_direct" (formula "34") (term "0"))
                              (branch "CUT: f_0 = java.lang.Object::<created> TRUE"
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "34"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "33"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "32"))
                                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "42")))
                                 (rule "closeFalse" (formula "3"))
                              )
                              (branch "CUT: f_0 = java.lang.Object::<created> FALSE"
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "false_right" (formula "35"))
                                 (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "34"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "false_right" (formula "33"))
                                 (rule "ifthenelse_split" (formula "2") (term "0"))
                                 (branch "f_0 = java.lang.Throwable::$message ∧ o_0 = i_3 TRUE"
                                    (rule "andLeft" (formula "2"))
                                    (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "applyEqReverse" (formula "42") (term "1") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "applyEqRigid" (formula "32") (term "0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "false_right" (formula "32"))
                                    (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                    (rule "close" (formula "34") (ifseqformula "1"))
                                 )
                                 (branch "f_0 = java.lang.Throwable::$message ∧ o_0 = i_3 FALSE"
                                    (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "ifthenelse_split" (formula "2") (term "0"))
                                    (branch "f_0 = java.lang.Throwable::$cause ∧ o_0 = i_3 TRUE"
                                       (rule "andLeft" (formula "2"))
                                       (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "3"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "applyEqRigid" (formula "32") (term "0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "false_right" (formula "32"))
                                       (rule "applyEq" (formula "40") (term "0") (ifseqformula "3"))
                                       (rule "applyEq" (formula "40") (term "2,0") (ifseqformula "2"))
                                       (rule "narrowSelectType" (formula "40") (term "0") (ifseqformula "7"))
                                       (rule "applyEq" (formula "32") (term "0") (ifseqformula "2"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "false_right" (formula "32"))
                                       (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                       (rule "close" (formula "34") (ifseqformula "1"))
                                    )
                                    (branch "f_0 = java.lang.Throwable::$cause ∧ o_0 = i_3 FALSE"
                                       (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "ifthenelse_split" (formula "2") (term "0"))
                                       (branch "f_0 = java.lang.Object::<initialized> ∧ o_0 = i_3 TRUE"
                                          (rule "andLeft" (formula "2"))
                                          (rule "applyEqReverse" (formula "44") (term "1") (ifseqformula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "3"))
                                           (builtin "One Step Simplification" (formula "33"))
                                          (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "3"))
                                           (builtin "One Step Simplification" (formula "32"))
                                          (rule "applyEq" (formula "33") (term "0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "33"))
                                          (rule "false_right" (formula "33"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "32"))
                                          (rule "false_right" (formula "32"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                          (rule "close" (formula "35") (ifseqformula "1"))
                                       )
                                       (branch "f_0 = java.lang.Object::<initialized> ∧ o_0 = i_3 FALSE"
                                          (rule "close" (formula "43") (ifseqformula "2"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
               )
            )
            (branch "if i instanceof java.lang.Throwable false"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Null Reference (i_1 = null)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Null Reference (this = null)"
       (builtin "One Step Simplification" (formula "17"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "if x false"
    (builtin "One Step Simplification" (formula "10"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
)
}
