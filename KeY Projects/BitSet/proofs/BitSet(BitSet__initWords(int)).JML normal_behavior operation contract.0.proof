\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Mar 14 18:57:23 CET 2023
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:on , bigint-bigint\\:on , floatRules-floatRules\\:strictfpOnly , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:allow , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[Labels]UseOriginLabels=true
[NewSMT]Axiomatisations=false
[NewSMT]Presburger=false
[NewSMT]sqrtSMTTranslation=SMT
[SMTSettings]SelectedTaclets=
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]maxGenericSorts=2
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[Strategy]ActiveStrategy=JavaCardDLStrategy
[Strategy]MaximumNumberOfAutomaticApplications=7000
[Strategy]Timeout=-1
"
}

\javaSource "..";

\include "../taclets/intSet.key",  "../taclets/binaryAxiomsExtension.key",  "../taclets/bitwiseOperations.key";

\proofObligation "#Proof Obligation Settings
#Tue Mar 14 18:57:23 CET 2023
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
contract=BitSet[BitSet\\:\\:initWords(int)].JML normal_behavior operation contract.0
name=BitSet[BitSet\\:\\:initWords(int)].JML normal_behavior operation contract.0
";

\proof {
(keyLog "0" (keyUser "christianhein" ) (keyVersion "208396f69e"))

(autoModeTime "3624")

(branch "dummy ID"
(rule "expand_inInt" (formula "1") (term "1,0,0,0,1,1,0,0,0,1,1") (newnames "heapAtPre,o,f"))
(rule "expand_inInt" (formula "1") (term "1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,0,1,1,0,0,0,1,1"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,0,1,1,0,0,0,1,1"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "translateJavaAddInt" (formula "9") (term "1,0,1,0,0,0,1"))
(rule "translateJavaSubInt" (formula "9") (term "1,0,1,0,1,0,0,0,1"))
(rule "setEquality" (formula "9") (term "1,1,1,0,0,0,1") (inst "n=n"))
 (builtin "One Step Simplification" (formula "9"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "1,1,0,0,0,1,1,0,0,0,1"))
(rule "assignment" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0,0,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0,0,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
(rule "leq_literals" (formula "5") (term "0"))
 (builtin "One Step Simplification" (formula "5"))
(rule "true_left" (formula "5"))
(rule "elementOfUnion" (formula "8") (term "0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "8") (term "1,0,0,0,0,1,0,1"))
(rule "elementOfSingleton" (formula "8") (term "0,0,0,0,0,1,0,1"))
(rule "expand_addJint" (formula "8") (term "1,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "8") (term "0,1,0,1,0,0,0,1"))
(rule "expand_subJint" (formula "8") (term "1,1,0,1,0,1,0,0,0,1"))
(rule "polySimp_elimSub" (formula "8") (term "0,1,1,0,1,0,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "1,0,1,1,0,1,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "8") (term "0,1,1,0,1,0,1,0,0,0,1"))
(rule "expand_moduloInteger" (formula "8") (term "1,0,1,0,0,0,1"))
(rule "replace_int_RANGE" (formula "8") (term "1,1,1,0,1,0,0,0,1"))
(rule "replace_int_HALFRANGE" (formula "8") (term "0,0,1,1,0,1,0,0,0,1"))
(rule "replace_int_MIN" (formula "8") (term "0,1,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "8") (term "0,1,1,0,1,0,0,0,1"))
(rule "add_literals" (formula "8") (term "0,0,1,1,0,1,0,0,0,1"))
(rule "polyMod_pullOut" (formula "8") (term "1,1,0,1,0,0,0,1") (inst "polyDivCoeff=Z(1(#))"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,1,0,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_addComm1" (formula "8") (term "0,1,1,0,1,0,0,0,1"))
(rule "add_literals" (formula "8") (term "0,0,1,1,0,1,0,0,0,1"))
(rule "expand_moduloInteger" (formula "8") (term "1,1,0,1,1,0,1,0,0,0,1"))
(rule "replace_int_RANGE" (formula "8") (term "1,1,1,1,0,1,1,0,1,0,0,0,1"))
(rule "replace_int_HALFRANGE" (formula "8") (term "0,0,1,1,1,0,1,1,0,1,0,0,0,1"))
(rule "replace_int_MIN" (formula "8") (term "0,1,1,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "8") (term "0,1,1,1,0,1,1,0,1,0,0,0,1"))
(rule "add_literals" (formula "8") (term "0,0,1,1,1,0,1,1,0,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "8") (term "0,0,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "8") (term "0,0,0,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "8") (term "1,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "8") (term "1,1,0,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "1,0,0,1,1,0,0,0,1,1,0,0,0,1"))
(rule "add_literals" (formula "8") (term "0,0,1,1,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,1,0,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "1,1,1,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "8") (term "0,1,0,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "1,0,0,0,1,0,0,0,1,1,0,0,0,1"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,1,0,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "1,0,1,0,0,0,1,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "8") (term "0,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0,0,1,1,0,0,0,1"))
(rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,0,0,1,1,0,0,0,1"))
(rule "add_literals" (formula "8") (term "0,0,0,0,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,0,0,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "8") (term "0,1,0,0,1,0,0,0,0,1,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,0,0,1,1,0,0,0,1"))
(rule "add_literals" (formula "8") (term "0,0,0,1,0,0,0,0,1,1,0,0,0,1"))
(rule "add_zero_left" (formula "8") (term "0,0,1,0,0,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,0,1,1,0,0,0,1"))
(rule "methodBodyExpand" (formula "8") (term "1") (newnames "heapBefore_initWords,savedHeapBefore_initWords"))
 (builtin "One Step Simplification" (formula "8"))
(rule "eval_order_access4_this" (formula "8") (term "1") (inst "#v1=x_arr"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x_arr"))
(rule "arrayCreation" (formula "8") (term "1") (inst "#v0=x_arr_1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x_arr_1"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "dim0"))
(rule "compound_addition_1" (formula "8") (term "1") (inst "#v=x"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "x"))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "8") (term "1"))
(rule "variableDeclarationAssign" (formula "8") (term "1"))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "var"))
(rule "assignmentSubtractionInt" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "translateJavaSubInt" (formula "8") (term "0,1,0"))
(rule "expand_subJint" (formula "8") (term "0,1,0"))
(rule "polySimp_elimSub" (formula "8") (term "0,0,1,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,1,0"))
(rule "polySimp_addComm0" (formula "8") (term "0,0,1,0"))
(rule "expand_moduloInteger" (formula "8") (term "0,1,0"))
(rule "replace_int_RANGE" (formula "8") (term "1,1,0,1,0"))
(rule "replace_int_HALFRANGE" (formula "8") (term "0,0,1,0,1,0"))
(rule "replace_int_MIN" (formula "8") (term "0,0,1,0"))
(rule "polySimp_addAssoc" (formula "8") (term "0,1,0,1,0"))
(rule "add_literals" (formula "8") (term "0,0,1,0,1,0"))
 (builtin "Use Operation Contract" (formula "8") (newnames "heapBefore_wordIndex,result_wordIndex,exc_0") (contract "BitSet[BitSet::wordIndex(int)].JML normal_behavior operation contract.0"))
(branch "Post (wordIndex)"
    (builtin "One Step Simplification" (formula "9"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "expand_inInt" (formula "7") (term "1,0"))
   (rule "replace_int_MAX" (formula "7") (term "1,0,1,0"))
   (rule "replace_int_MIN" (formula "7") (term "0,1,1,0"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "translateJavaDivInt" (formula "11") (term "1,1"))
   (rule "eqSymm" (formula "11") (term "1"))
   (rule "polySimp_homoEq" (formula "11") (term "0,0"))
   (rule "polySimp_homoEq" (formula "10") (term "0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "9"))
   (rule "assignment" (formula "13") (term "1"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "blockEmpty" (formula "13") (term "1"))
   (rule "mod_axiom" (formula "11") (term "1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,1"))
   (rule "add_literals" (formula "11") (term "0,0,0,0,1"))
   (rule "mod_axiom" (formula "11") (term "0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,0,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "0,1,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,0,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,0,0"))
   (rule "mod_axiom" (formula "10") (term "0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "0,1,0,0"))
   (rule "mul_literals" (formula "10") (term "0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,0"))
   (rule "polySimp_sepPosMonomial" (formula "11") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,0,0"))
   (rule "polySimp_sepPosMonomial" (formula "10") (term "0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,0"))
   (rule "expand_divJint" (formula "11") (term "0,1"))
   (rule "expand_moduloInteger" (formula "11") (term "0,1"))
   (rule "replace_int_RANGE" (formula "11") (term "1,1,0,1"))
   (rule "replace_int_HALFRANGE" (formula "11") (term "0,0,1,0,1"))
   (rule "replace_int_MIN" (formula "11") (term "0,0,1"))
   (rule "polySimp_homoEq" (formula "11") (term "1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,1"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,1"))
   (rule "mul_literals" (formula "11") (term "0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,1"))
   (rule "polySimp_addComm0" (formula "11") (term "0,0,1"))
   (rule "polySimp_sepNegMonomial" (formula "11") (term "1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,1"))
   (rule "polySimp_elimOne" (formula "11") (term "0,1"))
   (rule "assignmentAdditionInt" (formula "13") (term "1"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "translateJavaAddInt" (formula "13") (term "0,1,0"))
   (rule "expand_addJint" (formula "13") (term "0,1,0"))
   (rule "polySimp_addComm0" (formula "13") (term "0,0,1,0"))
   (rule "expand_moduloInteger" (formula "13") (term "0,1,0"))
   (rule "replace_int_RANGE" (formula "13") (term "1,1,0,1,0"))
   (rule "replace_int_HALFRANGE" (formula "13") (term "0,0,1,0,1,0"))
   (rule "replace_int_MIN" (formula "13") (term "0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,1,0,1,0"))
   (rule "add_literals" (formula "13") (term "0,0,1,0,1,0"))
   (rule "polyMod_pullOut" (formula "13") (term "1,0,1,0") (inst "polyDivCoeff=Z(1(#))"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,1,0"))
   (rule "mul_literals" (formula "13") (term "1,0,1,0,1,0"))
   (rule "polySimp_addComm1" (formula "13") (term "0,1,0,1,0"))
   (rule "add_literals" (formula "13") (term "0,0,1,0,1,0"))
   (rule "div_axiom" (formula "11") (term "0,0,0,0") (inst "quotient=quotient_0"))
   (rule "mul_literals" (formula "11") (term "1,1,1,1,1"))
   (rule "qeq_literals" (formula "11") (term "0,1,1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "equal_literals" (formula "11") (term "0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "polySimp_addAssoc" (formula "13") (term "0,1"))
   (rule "add_literals" (formula "13") (term "0,0,1"))
   (rule "polySimp_addComm1" (formula "13") (term "1"))
   (rule "add_literals" (formula "13") (term "0,1"))
   (rule "inEqSimp_homoInEq0" (formula "12"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
   (rule "polySimp_addComm1" (formula "12") (term "0"))
   (rule "inEqSimp_homoInEq1" (formula "13"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,0"))
   (rule "polySimp_addComm1" (formula "13") (term "0"))
   (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "11"))
   (rule "eqSymm" (formula "10") (term "0"))
   (rule "applyEq" (formula "14") (term "0,0,0,0") (ifseqformula "11"))
   (rule "eqSymm" (formula "14") (term "0,0"))
   (rule "applyEq" (formula "14") (term "0,1,0,1,0,0,1") (ifseqformula "11"))
   (rule "polySimp_addComm1" (formula "14") (term "0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12"))
   (rule "polySimp_mulComm0" (formula "12") (term "1"))
   (rule "polySimp_rightDist" (formula "12") (term "1"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
   (rule "mul_literals" (formula "12") (term "0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13"))
   (rule "polySimp_mulComm0" (formula "13") (term "1"))
   (rule "polySimp_rightDist" (formula "13") (term "1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
   (rule "mul_literals" (formula "13") (term "0,1"))
   (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "13"))
   (rule "times_zero_1" (formula "6") (term "0,0"))
   (rule "add_zero_left" (formula "6") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "6"))
   (rule "mul_literals" (formula "6") (term "1"))
   (rule "elimGcdGeq_antec" (formula "6") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
   (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0"))
   (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "6") (term "0,0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "polySimp_addLiterals" (formula "6") (term "0,0,0,0"))
   (rule "add_literals" (formula "6") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "6") (term "0,0"))
   (rule "add_literals" (formula "6") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "6") (term "1,0,0"))
   (rule "add_zero_right" (formula "6") (term "0,0"))
   (rule "leq_literals" (formula "6") (term "0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "4"))
   (rule "polySimp_rightDist" (formula "13") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
   (rule "mul_literals" (formula "13") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "13") (term "0"))
   (rule "add_literals" (formula "13") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "13"))
   (rule "polySimp_mulLiterals" (formula "13") (term "0"))
   (rule "elimGcdLeq_antec" (formula "13") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0"))
   (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1,0"))
   (rule "neg_literal" (formula "13") (term "0,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "13") (term "0,0"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "polySimp_addLiterals" (formula "13") (term "0,0,0,0"))
   (rule "add_literals" (formula "13") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
   (rule "add_literals" (formula "13") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "13") (term "1,0,0"))
   (rule "add_zero_right" (formula "13") (term "0,0"))
   (rule "qeq_literals" (formula "13") (term "0"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "13"))
   (rule "applyEqRigid" (formula "14") (term "0") (ifseqformula "6"))
   (rule "leq_literals" (formula "14"))
   (rule "true_left" (formula "14"))
   (rule "applyEqRigid" (formula "14") (term "0,1,1") (ifseqformula "6"))
   (rule "times_zero_2" (formula "14") (term "1,1"))
   (rule "add_zero_right" (formula "14") (term "1"))
   (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
   (rule "qeq_literals" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "applyEqRigid" (formula "14") (term "0,1,1") (ifseqformula "6"))
   (rule "times_zero_2" (formula "14") (term "1,1"))
   (rule "add_zero_right" (formula "14") (term "1"))
   (rule "applyEqRigid" (formula "12") (term "1") (ifseqformula "6"))
   (rule "applyEq" (formula "15") (term "0,1,0,0,1,0,0,1") (ifseqformula "6"))
   (rule "times_zero_2" (formula "15") (term "1,0,0,1,0,0,1"))
   (rule "add_zero_right" (formula "15") (term "0,0,1,0,0,1"))
   (rule "applyEqRigid" (formula "11") (term "0,1,0") (ifseqformula "6"))
   (rule "times_zero_2" (formula "11") (term "1,0"))
   (rule "applyEq" (formula "15") (term "0,1,0,0") (ifseqformula "6"))
   (rule "times_zero_2" (formula "15") (term "1,0,0"))
   (rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "7"))
   (rule "leq_literals" (formula "13") (term "0"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "true_left" (formula "13"))
   (rule "inEqSimp_subsumption0" (formula "13") (ifseqformula "4"))
   (rule "leq_literals" (formula "13") (term "0"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "true_left" (formula "13"))
   (rule "ifUnfold" (formula "15") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_1"))
   (rule "less_than_comparison_simple" (formula "15") (term "1"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1,0"))
   (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "15") (term "0,0,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,1,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,1,0"))
   (rule "mul_literals" (formula "15") (term "1,0,0,1,0"))
   (rule "jdiv_axiom" (formula "13") (term "1,0,0,1"))
   (rule "eqSymm" (formula "13"))
   (rule "polySimp_mulComm0" (formula "13") (term "0,0,2,0"))
   (rule "polySimp_rightDist" (formula "13") (term "0,0,2,0"))
   (rule "mul_literals" (formula "13") (term "0,0,0,2,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0"))
   (rule "mul_literals" (formula "13") (term "1,0,0"))
   (rule "div_axiom" (formula "13") (term "1,0") (inst "quotient=quotient_1"))
   (rule "mul_literals" (formula "13") (term "1,1,1,1,1"))
   (rule "qeq_literals" (formula "13") (term "0,1,1"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "equal_literals" (formula "13") (term "0"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "13"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,1"))
   (rule "add_literals" (formula "15") (term "0,0,1"))
   (rule "add_zero_left" (formula "15") (term "0,1"))
   (rule "polySimp_addComm0" (formula "15") (term "1"))
   (rule "inEqSimp_homoInEq0" (formula "14"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
   (rule "polySimp_addComm1" (formula "14") (term "0"))
   (rule "inEqSimp_homoInEq1" (formula "15"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
   (rule "polySimp_addComm1" (formula "15") (term "0"))
   (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "13"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14"))
   (rule "polySimp_mulComm0" (formula "14") (term "1"))
   (rule "polySimp_rightDist" (formula "14") (term "1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
   (rule "mul_literals" (formula "14") (term "0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15"))
   (rule "polySimp_mulComm0" (formula "15") (term "1"))
   (rule "polySimp_rightDist" (formula "15") (term "1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
   (rule "mul_literals" (formula "15") (term "0,1"))
   (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "15"))
   (rule "times_zero_1" (formula "7") (term "0,0"))
   (rule "add_zero_left" (formula "7") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "7"))
   (rule "mul_literals" (formula "7") (term "1"))
   (rule "elimGcdGeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(4(6(#)))"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "7") (term "0,0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
   (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
   (rule "add_literals" (formula "7") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "7") (term "1,0,0"))
   (rule "add_zero_right" (formula "7") (term "0,0"))
   (rule "leq_literals" (formula "7") (term "0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "4"))
   (rule "polySimp_rightDist" (formula "15") (term "0,0"))
   (rule "mul_literals" (formula "15") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "15") (term "0"))
   (rule "add_literals" (formula "15") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "15"))
   (rule "polySimp_mulLiterals" (formula "15") (term "0"))
   (rule "elimGcdLeq_antec" (formula "15") (inst "elimGcdRightDiv=Z(1(3(4(4(5(5(3(3(#)))))))))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(4(6(#)))"))
   (rule "neg_literal" (formula "15") (term "0,0,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "15") (term "0,0"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
   (rule "polySimp_addLiterals" (formula "15") (term "0,0,0,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
   (rule "add_literals" (formula "15") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "15") (term "1,0,0"))
   (rule "add_zero_right" (formula "15") (term "0,0"))
   (rule "qeq_literals" (formula "15") (term "0"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "div_axiom" (formula "18") (term "0,2,0") (inst "quotient=quotient_2"))
   (rule "mul_literals" (formula "18") (term "1,1,1,1,1"))
   (rule "equal_literals" (formula "18") (term "0"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "qeq_literals" (formula "18") (term "0,1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "18"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,1"))
   (rule "add_literals" (formula "20") (term "0,0,1"))
   (rule "polySimp_addComm1" (formula "20") (term "1"))
   (rule "add_literals" (formula "20") (term "0,1"))
   (rule "inEqSimp_homoInEq0" (formula "19"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,0"))
   (rule "polySimp_addComm1" (formula "19") (term "0"))
   (rule "inEqSimp_homoInEq1" (formula "20"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,0"))
   (rule "polySimp_addComm1" (formula "20") (term "0"))
   (rule "applyEq" (formula "21") (term "0,2,0") (ifseqformula "18"))
   (rule "inEqSimp_sepNegMonomial1" (formula "19"))
   (rule "polySimp_mulLiterals" (formula "19") (term "0"))
   (rule "polySimp_elimOne" (formula "19") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "20"))
   (rule "polySimp_mulLiterals" (formula "20") (term "0"))
   (rule "polySimp_elimOne" (formula "20") (term "0"))
   (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "19"))
   (rule "polySimp_rightDist" (formula "16") (term "0,0"))
   (rule "mul_literals" (formula "16") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "16") (term "0"))
   (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
   (rule "add_literals" (formula "16") (term "0,0,0"))
   (rule "add_zero_left" (formula "16") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "16"))
   (rule "polySimp_mulLiterals" (formula "16") (term "0"))
   (rule "elimGcdLeq_antec" (formula "16") (inst "elimGcdRightDiv=mul(quotient_2, Z(neglit(1(#))))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(4(6(#)))"))
   (rule "leq_literals" (formula "16") (term "0,0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "neg_literal" (formula "16") (term "0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
   (rule "add_literals" (formula "16") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "16") (term "1,0,0"))
   (rule "add_zero_right" (formula "16") (term "0,0"))
   (rule "polySimp_mulAssoc" (formula "16") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
   (rule "add_literals" (formula "16") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "16") (term "1,0,0"))
   (rule "add_zero_right" (formula "16") (term "0,0"))
   (rule "qeq_literals" (formula "16") (term "0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "20"))
   (rule "times_zero_1" (formula "8") (term "0,0"))
   (rule "add_zero_left" (formula "8") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "8"))
   (rule "polySimp_mulLiterals" (formula "8") (term "0"))
   (rule "elimGcdLeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0,1,0"))
   (rule "neg_literal" (formula "8") (term "0,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "8") (term "0,0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
   (rule "add_literals" (formula "8") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0"))
   (rule "qeq_literals" (formula "8") (term "0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "4"))
   (rule "polySimp_rightDist" (formula "22") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0"))
   (rule "mul_literals" (formula "22") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "22") (term "0"))
   (rule "add_literals" (formula "22") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "22"))
   (rule "mul_literals" (formula "22") (term "1"))
   (rule "elimGcdGeq_antec" (formula "22") (inst "elimGcdRightDiv=Z(neglit(2(3(4(4(5(5(3(3(#))))))))))") (inst "elimGcdLeftDiv=quotient_2") (inst "elimGcd=Z(4(6(#)))"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "22") (term "0,0"))
    (builtin "One Step Simplification" (formula "22"))
   (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
   (rule "polySimp_addLiterals" (formula "22") (term "0,0,0,0"))
   (rule "add_literals" (formula "22") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "22") (term "0,0"))
   (rule "add_literals" (formula "22") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "22") (term "1,0,0"))
   (rule "add_zero_right" (formula "22") (term "0,0"))
   (rule "leq_literals" (formula "22") (term "0"))
    (builtin "One Step Simplification" (formula "22"))
   (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "19"))
   (rule "polySimp_rightDist" (formula "23") (term "0,0"))
   (rule "mul_literals" (formula "23") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0"))
   (rule "polySimp_addAssoc" (formula "23") (term "0"))
   (rule "polySimp_addComm1" (formula "23") (term "0,0"))
   (rule "add_literals" (formula "23") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "23"))
   (rule "polySimp_mulComm0" (formula "23") (term "1"))
   (rule "polySimp_rightDist" (formula "23") (term "1"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
   (rule "mul_literals" (formula "23") (term "0,1"))
   (rule "elimGcdGeq_antec" (formula "23") (inst "elimGcdRightDiv=add(Z(neglit(1(#))), mul(quotient_2, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(4(6(#)))"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0"))
   (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "23") (term "0,0"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0"))
   (rule "add_literals" (formula "23") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "23") (term "1,0,0"))
   (rule "add_zero_right" (formula "23") (term "0,0"))
   (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "23") (term "0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "23") (term "0,0,0"))
   (rule "add_literals" (formula "23") (term "0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "23") (term "0,0"))
   (rule "polySimp_addComm1" (formula "23") (term "0,0,0"))
   (rule "add_literals" (formula "23") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0"))
   (rule "add_literals" (formula "23") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "23") (term "1,0,0"))
   (rule "add_zero_right" (formula "23") (term "0,0"))
   (rule "leq_literals" (formula "23") (term "0"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "17"))
   (rule "mul_literals" (formula "7") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "7"))
   (rule "polySimp_mulLiterals" (formula "7") (term "0"))
   (rule "polySimp_elimOne" (formula "7") (term "0"))
   (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "9"))
   (rule "leq_literals" (formula "7") (term "0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "16"))
   (rule "polySimp_rightDist" (formula "23") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0"))
   (rule "mul_literals" (formula "23") (term "0,0,0"))
   (rule "polySimp_elimOne" (formula "23") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "23") (term "0"))
   (rule "add_literals" (formula "23") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "23"))
   (rule "mul_literals" (formula "23") (term "1"))
   (rule "ifSplit" (formula "28"))
   (branch "if x_1 true"
       (builtin "One Step Simplification" (formula "29"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "blockThrow" (formula "29") (term "1"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "mod_axiom" (formula "1") (term "0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0"))
      (rule "inEqSimp_homoInEq0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "throwUnfold" (formula "29") (term "1") (inst "#v0=n"))
      (rule "variableDeclarationAssign" (formula "29") (term "1"))
      (rule "variableDeclaration" (formula "29") (term "1") (newnames "n"))
      (rule "div_axiom" (formula "1") (term "0,0") (inst "quotient=quotient_3"))
      (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
      (rule "qeq_literals" (formula "1") (term "0,1,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "equal_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
      (rule "add_literals" (formula "3") (term "0,0,1"))
      (rule "polySimp_addComm1" (formula "3") (term "1"))
      (rule "add_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_homoInEq0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq1" (formula "4"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
      (rule "polySimp_addComm1" (formula "4") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1"))
      (rule "polySimp_rightDist" (formula "2") (term "1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
      (rule "mul_literals" (formula "2") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1"))
      (rule "polySimp_rightDist" (formula "4") (term "1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
      (rule "mul_literals" (formula "4") (term "0,1"))
      (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "4"))
      (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
      (rule "mul_literals" (formula "3") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
      (rule "add_literals" (formula "3") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
      (rule "add_literals" (formula "3") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "3") (term "1,0,0"))
      (rule "add_zero_right" (formula "3") (term "0,0"))
      (rule "qeq_literals" (formula "3") (term "0"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "14"))
      (rule "polySimp_rightDist" (formula "2") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0"))
      (rule "mul_literals" (formula "2") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "add_literals" (formula "2") (term "0,0"))
      (rule "add_zero_left" (formula "2") (term "0"))
      (rule "inEqSimp_invertInEq1" (formula "2"))
      (rule "times_zero_2" (formula "2") (term "1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "elimGcdLeq_antec" (formula "2") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
      (rule "neg_literal" (formula "2") (term "0,0,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
      (rule "leq_literals" (formula "2") (term "0,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
      (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
      (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
      (rule "add_literals" (formula "2") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "2") (term "1,0,0"))
      (rule "add_zero_right" (formula "2") (term "0,0"))
      (rule "qeq_literals" (formula "2") (term "0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "4"))
      (rule "mul_literals" (formula "16") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "16") (term "0"))
      (rule "add_literals" (formula "16") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "16"))
      (rule "mul_literals" (formula "16") (term "1"))
      (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0,1,0"))
      (rule "leq_literals" (formula "16") (term "0,0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
      (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
      (rule "add_literals" (formula "16") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "16") (term "1,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,0"))
      (rule "leq_literals" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "instanceCreationAssignment" (formula "33") (term "1") (inst "#v0=n_1"))
      (rule "variableDeclarationAssign" (formula "33") (term "1"))
      (rule "variableDeclaration" (formula "33") (term "1") (newnames "n_1"))
      (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "33") (term "1") (inst "#v0=n_2"))
      (rule "variableDeclaration" (formula "33") (term "1") (newnames "n_2"))
      (rule "methodBodyExpand" (formula "33") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
       (builtin "One Step Simplification" (formula "33"))
      (rule "variableDeclaration" (formula "33") (term "1") (newnames "__NEW__"))
      (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "33") (term "1") (inst "#v0=n_3"))
      (rule "variableDeclaration" (formula "33") (term "1") (newnames "n_3"))
      (rule "allocateInstance" (formula "33"))
       (builtin "One Step Simplification" (formula "34"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "blockEmpty" (formula "36") (term "1"))
      (rule "assignment" (formula "36") (term "1"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "methodBodyExpand" (formula "36") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "assignment_write_attribute_this" (formula "36") (term "1"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "methodCallWithinClass" (formula "36") (term "1"))
      (rule "methodBodyExpand" (formula "36") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "methodCallSuper" (formula "36") (term "1"))
      (rule "methodBodyExpand" (formula "36") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "methodCallSuper" (formula "36") (term "1"))
      (rule "methodBodyExpand" (formula "36") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "methodCallSuper" (formula "36") (term "1"))
      (rule "methodBodyExpand" (formula "36") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "methodCallSuper" (formula "36") (term "1"))
      (rule "methodBodyExpand" (formula "36") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "methodCallEmpty" (formula "36") (term "1"))
      (rule "blockEmpty" (formula "36") (term "1"))
      (rule "assignment_write_attribute_this" (formula "36") (term "1"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "assignment_write_attribute_this" (formula "36") (term "1"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "methodCallEmpty" (formula "36") (term "1"))
      (rule "methodCallEmpty" (formula "36") (term "1"))
      (rule "methodCallEmpty" (formula "36") (term "1"))
      (rule "methodCallEmpty" (formula "36") (term "1"))
      (rule "blockEmpty" (formula "36") (term "1"))
      (rule "methodCallReturnIgnoreResult" (formula "36") (term "1"))
      (rule "methodCallReturn" (formula "36") (term "1"))
      (rule "assignment" (formula "36") (term "1"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "methodCallEmpty" (formula "36") (term "1"))
      (rule "blockEmpty" (formula "36") (term "1"))
      (rule "assignment" (formula "36") (term "1"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "methodBodyExpand" (formula "36") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "methodCallSuper" (formula "36") (term "1"))
      (rule "methodBodyExpand" (formula "36") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "methodCallSuper" (formula "36") (term "1"))
      (rule "methodBodyExpand" (formula "36") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "methodCallSuper" (formula "36") (term "1"))
      (rule "methodBodyExpand" (formula "36") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "methodCallSuper" (formula "36") (term "1"))
      (rule "methodBodyExpand" (formula "36") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "methodCallEmpty" (formula "36") (term "1"))
      (rule "blockEmpty" (formula "36") (term "1"))
      (rule "assignment_write_attribute_this" (formula "36") (term "1"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "assignment_write_attribute_this" (formula "36") (term "1"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "methodCallEmpty" (formula "36") (term "1"))
      (rule "methodCallEmpty" (formula "36") (term "1"))
      (rule "methodCallEmpty" (formula "36") (term "1"))
      (rule "methodCallEmpty" (formula "36") (term "1"))
      (rule "blockEmpty" (formula "36") (term "1"))
      (rule "assignment_write_attribute" (formula "36") (term "1"))
      (branch "Normal Execution (n_1 != null)"
          (builtin "One Step Simplification" (formula "37"))
          (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "34")))
         (rule "false_right" (formula "36"))
         (rule "assignment" (formula "36") (term "1"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "methodCallThrow" (formula "36") (term "1"))
         (rule "tryCatchThrow" (formula "36") (term "1"))
         (rule "ifElseUnfold" (formula "36") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "36") (term "1") (newnames "x_2"))
         (rule "equality_comparison_simple" (formula "36") (term "1"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "replace_known_right" (formula "36") (term "0,0,1,0") (ifseqformula "34"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "ifElseSplit" (formula "36"))
         (branch "if x_2 true"
             (builtin "One Step Simplification" (formula "37"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_2 false"
             (builtin "One Step Simplification" (formula "37"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "elim_double_block" (formula "36") (term "1"))
            (rule "ifElseSplit" (formula "36"))
            (branch "if n instanceof java.lang.Throwable true"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
               (rule "true_left" (formula "1"))
               (rule "variableDeclaration" (formula "36") (term "1") (newnames "e"))
               (rule "delete_unnecessary_cast" (formula "36") (term "1"))
                (builtin "One Step Simplification" (formula "37"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "36") (term "1"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "emptyModality" (formula "36") (term "1"))
                (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "34")))
               (rule "false_right" (formula "36"))
               (rule "ifthenelse_split" (formula "31") (term "0"))
               (branch "nbits >= 1 TRUE"
                  (rule "eqSymm" (formula "32"))
                  (rule "applyEq" (formula "33") (term "1,0,0,1") (ifseqformula "32"))
                  (rule "mod_axiom" (formula "33") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1"))
                  (rule "polySimp_homoEq" (formula "33") (term "1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "33") (term "1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,1"))
                  (rule "polySimp_rightDist" (formula "33") (term "0,1,0,1"))
                  (rule "mul_literals" (formula "33") (term "0,0,1,0,1"))
                  (rule "polySimp_addComm1" (formula "33") (term "0,1"))
                  (rule "polySimp_addAssoc" (formula "33") (term "0,0,1"))
                  (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,1"))
                  (rule "add_literals" (formula "33") (term "0,0,0,0,1"))
                  (rule "add_zero_left" (formula "33") (term "0,0,0,1"))
                  (rule "polySimp_sepPosMonomial" (formula "33") (term "1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "33") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1"))
                  (rule "polySimp_mulAssoc" (formula "33") (term "0,1,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "0,1,1"))
                  (rule "polySimp_elimOne" (formula "33") (term "0,1,1"))
                  (rule "inEqSimp_contradEq7" (formula "19") (term "0") (ifseqformula "31"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "19") (term "0,0,0"))
                  (rule "leq_literals" (formula "19") (term "0,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "inEqSimp_contradEq7" (formula "32") (term "0,0") (ifseqformula "30"))
                  (rule "times_zero_1" (formula "32") (term "1,0,0,0,0"))
                  (rule "add_zero_right" (formula "32") (term "0,0,0,0"))
                  (rule "leq_literals" (formula "32") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "32"))
                  (rule "inEqSimp_homoInEq0" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "5") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "32"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0"))
                  (rule "applyEq" (formula "18") (term "0") (ifseqformula "32"))
                  (rule "inEqSimp_homoInEq1" (formula "18"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0"))
                  (rule "applyEq" (formula "16") (term "0") (ifseqformula "32"))
                  (rule "inEqSimp_homoInEq0" (formula "16"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0"))
                  (rule "applyEq" (formula "2") (term "1,0,0") (ifseqformula "32"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "5") (term "0,1"))
                  (rule "mul_literals" (formula "5") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                  (rule "mul_literals" (formula "4") (term "0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1"))
                  (rule "polySimp_rightDist" (formula "18") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                  (rule "mul_literals" (formula "18") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1"))
                  (rule "polySimp_rightDist" (formula "16") (term "1"))
                  (rule "mul_literals" (formula "16") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                  (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "30"))
                  (rule "leq_literals" (formula "14") (term "0"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "polyDiv_pullOut" (formula "2") (term "0") (inst "polyDivCoeff=mul(div(add(Z(8(4(6(3(8(4(7(4(1(2(#))))))))))),
            quotient_1),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
                  (rule "equal_literals" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0,0"))
                  (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0,0"))
                  (rule "polySimp_homoEq" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                  (rule "polySimp_mulAssoc" (formula "2") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "polySimp_sepNegMonomial" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_exactShadow0" (formula "15") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "greater_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "0,1,0"))
                  (rule "mul_literals" (formula "15") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
                  (rule "polySimp_rightDist" (formula "15") (term "0,0"))
                  (rule "mul_literals" (formula "15") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "15") (term "0"))
                  (rule "add_literals" (formula "15") (term "1,1,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0"))
                  (rule "add_zero_right" (formula "15") (term "0"))
                  (rule "polySimp_addAssoc" (formula "15") (term "0"))
                  (rule "add_literals" (formula "15") (term "0,0"))
                  (rule "add_zero_left" (formula "15") (term "0"))
                  (rule "inEqSimp_invertInEq1" (formula "15"))
                  (rule "times_zero_2" (formula "15") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                  (rule "inEqSimp_subsumption4" (formula "15") (ifseqformula "3"))
                  (rule "times_zero_1" (formula "15") (term "0,1,0"))
                  (rule "greater_literals" (formula "15") (term "0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "leq_literals" (formula "15") (term "0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "23"))
                  (rule "mul_literals" (formula "29") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0"))
                  (rule "add_literals" (formula "29") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                  (rule "mul_literals" (formula "29") (term "1"))
                  (rule "elimGcdGeq_antec" (formula "29") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(4(6(#)))"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0"))
                  (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "29") (term "0,0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "polySimp_addLiterals" (formula "29") (term "0,0,0,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "29") (term "0,0"))
                  (rule "add_literals" (formula "29") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "29") (term "1,0,0"))
                  (rule "add_zero_right" (formula "29") (term "0,0"))
                  (rule "leq_literals" (formula "29") (term "0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "29"))
                  (rule "leq_literals" (formula "12") (term "0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "24"))
                  (rule "mul_literals" (formula "29") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "29") (term "0"))
                  (rule "add_literals" (formula "29") (term "0,0"))
                  (rule "add_zero_left" (formula "29") (term "0"))
                  (rule "inEqSimp_invertInEq1" (formula "29"))
                  (rule "times_zero_2" (formula "29") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                  (rule "inEqSimp_subsumption4" (formula "29") (ifseqformula "12"))
                  (rule "greater_literals" (formula "29") (term "0,0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "times_zero_1" (formula "29") (term "0,0"))
                  (rule "leq_literals" (formula "29") (term "0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "true_left" (formula "29"))
                  (rule "inEqSimp_exactShadow0" (formula "5") (ifseqformula "16"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "greater_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                  (rule "mul_literals" (formula "5") (term "0,1,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "0,1,0,0"))
                  (rule "mul_literals" (formula "5") (term "0,0,1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "0,0,0"))
                  (rule "mul_literals" (formula "5") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "5") (term "0"))
                  (rule "add_literals" (formula "5") (term "1,1,0"))
                  (rule "times_zero_1" (formula "5") (term "1,0"))
                  (rule "add_zero_right" (formula "5") (term "0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "add_literals" (formula "5") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                  (rule "mul_literals" (formula "5") (term "1"))
                  (rule "inEqSimp_subsumption6" (formula "5") (ifseqformula "16"))
                  (rule "mul_literals" (formula "5") (term "1,1,0"))
                  (rule "greater_literals" (formula "5") (term "0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "leq_literals" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "20"))
                  (rule "times_zero_1" (formula "28") (term "0,0"))
                  (rule "add_zero_left" (formula "28") (term "0"))
                  (rule "inEqSimp_invertInEq1" (formula "28"))
                  (rule "times_zero_2" (formula "28") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                  (rule "polySimp_elimOne" (formula "28") (term "0"))
                  (rule "div_axiom" (formula "31") (term "0,1,1") (inst "quotient=quotient_4"))
                  (rule "mul_literals" (formula "31") (term "1,1,1,1,1"))
                  (rule "qeq_literals" (formula "31") (term "0,1,1"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "equal_literals" (formula "31") (term "0"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "andLeft" (formula "31"))
                  (rule "andLeft" (formula "31"))
                  (rule "polySimp_addAssoc" (formula "33") (term "0,1"))
                  (rule "add_literals" (formula "33") (term "0,0,1"))
                  (rule "polySimp_addComm1" (formula "33") (term "1"))
                  (rule "add_literals" (formula "33") (term "0,1"))
                  (rule "inEqSimp_homoInEq0" (formula "32"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "32") (term "0"))
                  (rule "inEqSimp_homoInEq1" (formula "33"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "33") (term "0"))
                  (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "31"))
                  (rule "inEqSimp_homoInEq0" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                  (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "31"))
                  (rule "inEqSimp_homoInEq1" (formula "14"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "14") (term "0"))
                  (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "30"))
                  (rule "inEqSimp_homoInEq1" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                  (rule "applyEqRigid" (formula "15") (term "0,0") (ifseqformula "30"))
                  (rule "inEqSimp_homoInEq0" (formula "15"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "15") (term "0"))
                  (rule "applyEqRigid" (formula "32") (term "0,1,1") (ifseqformula "29"))
                  (rule "polySimp_addComm0" (formula "32") (term "1"))
                  (rule "applyEq" (formula "2") (term "1,1") (ifseqformula "29"))
                  (rule "polySimp_addComm0" (formula "2") (term "1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "30"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1"))
                  (rule "polySimp_rightDist" (formula "30") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
                  (rule "mul_literals" (formula "30") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "31"))
                  (rule "polySimp_mulComm0" (formula "31") (term "1"))
                  (rule "polySimp_rightDist" (formula "31") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
                  (rule "mul_literals" (formula "31") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1"))
                  (rule "polySimp_rightDist" (formula "4") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1"))
                  (rule "mul_literals" (formula "4") (term "0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "5") (term "0,1"))
                  (rule "mul_literals" (formula "5") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "31"))
                  (rule "polySimp_rightDist" (formula "24") (term "0,0"))
                  (rule "mul_literals" (formula "24") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "24") (term "0"))
                  (rule "polySimp_addAssoc" (formula "24") (term "0,0"))
                  (rule "add_literals" (formula "24") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1"))
                  (rule "polySimp_rightDist" (formula "24") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                  (rule "mul_literals" (formula "24") (term "0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "5"))
                  (rule "polySimp_rightDist" (formula "31") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0"))
                  (rule "mul_literals" (formula "31") (term "0,0,0"))
                  (rule "polySimp_addAssoc" (formula "31") (term "0"))
                  (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "31") (term "0,0,0"))
                  (rule "add_literals" (formula "31") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "31") (term "0,0"))
                  (rule "add_literals" (formula "31") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "31") (term "1,0,0"))
                  (rule "add_zero_right" (formula "31") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                  (rule "mul_literals" (formula "31") (term "1"))
                  (rule "inEqSimp_subsumption6" (formula "31") (ifseqformula "14"))
                  (rule "mul_literals" (formula "31") (term "1,1,0"))
                  (rule "greater_literals" (formula "31") (term "0,0"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "leq_literals" (formula "31") (term "0"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "true_left" (formula "31"))
                  (rule "inEqSimp_exactShadow3" (formula "31") (ifseqformula "17"))
                  (rule "polySimp_rightDist" (formula "31") (term "0,0"))
                  (rule "mul_literals" (formula "31") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "31") (term "0"))
                  (rule "add_literals" (formula "31") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "31"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                  (rule "elimGcdLeq_antec" (formula "31") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_4") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                  (rule "polySimp_mulLiterals" (formula "31") (term "1,0,1,0"))
                  (rule "neg_literal" (formula "31") (term "0,0,0,0,0,1,0"))
                  (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "31") (term "0,0"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "polySimp_addLiterals" (formula "31") (term "0,0,0,0"))
                  (rule "add_literals" (formula "31") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "31") (term "0,0"))
                  (rule "add_literals" (formula "31") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "31") (term "1,0,0"))
                  (rule "add_zero_right" (formula "31") (term "0,0"))
                  (rule "qeq_literals" (formula "31") (term "0"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "inEqSimp_exactShadow3" (formula "25") (ifseqformula "5"))
                  (rule "polySimp_rightDist" (formula "25") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0"))
                  (rule "mul_literals" (formula "25") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "25") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "25") (term "0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "25") (term "0,0,0"))
                  (rule "add_literals" (formula "25") (term "0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "25"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1"))
                  (rule "polySimp_rightDist" (formula "25") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "25") (term "0,1"))
                  (rule "mul_literals" (formula "25") (term "0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "1,0,1"))
                  (rule "inEqSimp_exactShadow3" (formula "28") (ifseqformula "5"))
                  (rule "times_zero_1" (formula "28") (term "0,0"))
                  (rule "add_zero_left" (formula "28") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "28"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1"))
                  (rule "polySimp_rightDist" (formula "28") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1"))
                  (rule "mul_literals" (formula "28") (term "0,1"))
                  (rule "elimGcdGeq_antec" (formula "28") (inst "elimGcdRightDiv=add(Z(0(#)), mul(quotient_4, Z(neglit(1(#)))))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,0,1,0"))
                  (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,1,0"))
                  (rule "add_zero_left" (formula "28") (term "1,1"))
                  (rule "add_zero_left" (formula "28") (term "1,1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "28") (term "0,0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "polySimp_pullOutFactor0b" (formula "28") (term "0,0"))
                  (rule "add_literals" (formula "28") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "28") (term "1,0,0"))
                  (rule "add_zero_right" (formula "28") (term "0,0"))
                  (rule "polySimp_mulAssoc" (formula "28") (term "1,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0"))
                  (rule "polySimp_addComm1" (formula "28") (term "0,0,0"))
                  (rule "add_literals" (formula "28") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "28") (term "0,0"))
                  (rule "add_literals" (formula "28") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "28") (term "1,0,0"))
                  (rule "add_zero_right" (formula "28") (term "0,0"))
                  (rule "leq_literals" (formula "28") (term "0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "inEqSimp_exactShadow3" (formula "34") (ifseqformula "18"))
                  (rule "polySimp_rightDist" (formula "34") (term "0,0"))
                  (rule "mul_literals" (formula "34") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "34"))
                  (rule "polySimp_mulLiterals" (formula "34") (term "0"))
                  (rule "polySimp_elimOne" (formula "34") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "29") (ifseqformula "36"))
                  (rule "times_zero_1" (formula "29") (term "0,0"))
                  (rule "add_zero_left" (formula "29") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "29"))
                  (rule "mul_literals" (formula "29") (term "1"))
                  (rule "elimGcdGeq_antec" (formula "29") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_4") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
                  (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0"))
                  (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "29") (term "0,0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "polySimp_addLiterals" (formula "29") (term "0,0,0,0"))
                  (rule "add_literals" (formula "29") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "29") (term "0,0"))
                  (rule "add_literals" (formula "29") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "29") (term "1,0,0"))
                  (rule "add_zero_right" (formula "29") (term "0,0"))
                  (rule "leq_literals" (formula "29") (term "0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "18"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "18"))
                  (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "polySimp_rightDist" (formula "5") (term "0,0,0"))
                  (rule "mul_literals" (formula "5") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                  (rule "add_literals" (formula "5") (term "0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "inEqSimp_contradInEq5" (formula "5") (ifseqformula "30"))
                  (rule "greater_literals" (formula "5") (term "0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1"))
                  (rule "inEqSimp_homoInEq1" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0"))
                  (rule "mul_literals" (formula "5") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "5") (term "0"))
                  (rule "polySimp_addComm0" (formula "5") (term "0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "5") (term "0"))
                  (rule "add_literals" (formula "5") (term "1,1,0"))
                  (rule "times_zero_1" (formula "5") (term "1,0"))
                  (rule "add_zero_right" (formula "5") (term "0"))
                  (rule "leq_literals" (formula "5"))
                  (rule "closeFalse" (formula "5"))
               )
               (branch "nbits >= 1 FALSE"
                  (rule "eqSymm" (formula "31"))
                  (rule "inEqSimp_geqRight" (formula "33"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "applyEq" (formula "33") (term "1,0,0,1") (ifseqformula "32"))
                  (rule "mod_axiom" (formula "33") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1"))
                  (rule "polySimp_homoEq" (formula "33") (term "1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "33") (term "1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,1"))
                  (rule "polySimp_rightDist" (formula "33") (term "0,1,0,1"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,0,1"))
                  (rule "mul_literals" (formula "33") (term "0,0,1,0,1"))
                  (rule "polySimp_elimOne" (formula "33") (term "1,0,1,0,1"))
                  (rule "polySimp_addComm1" (formula "33") (term "0,1"))
                  (rule "polySimp_addAssoc" (formula "33") (term "0,0,1"))
                  (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,1"))
                  (rule "add_literals" (formula "33") (term "0,0,0,0,1"))
                  (rule "add_zero_left" (formula "33") (term "0,0,0,1"))
                  (rule "polySimp_sepPosMonomial" (formula "33") (term "1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "33") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1,1,1"))
                  (rule "polySimp_mulComm0" (formula "33") (term "0,1,1"))
                  (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "1"))
                  (rule "leq_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "inEqSimp_antiSymm" (formula "14") (ifseqformula "1"))
                  (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "14"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "replace_known_left" (formula "33") (term "0,0") (ifseqformula "14"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "true_left" (formula "33"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "14"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "26") (term "0,1,0,0") (ifseqformula "13"))
                  (rule "times_zero_2" (formula "26") (term "1,0,0"))
                  (rule "add_zero_right" (formula "26") (term "0,0"))
                  (rule "div_literals" (formula "26") (term "0"))
                  (rule "eqSymm" (formula "26"))
                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "19"))
                  (rule "inEqSimp_homoInEq0" (formula "5"))
                  (rule "mul_literals" (formula "5") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                  (rule "add_literals" (formula "5") (term "0,0"))
                  (rule "applyEq" (formula "2") (term "1,0,0") (ifseqformula "19"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "div_literals" (formula "2") (term "0"))
                  (rule "eqSymm" (formula "2"))
                  (rule "applyEq" (formula "24") (term "0") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq1" (formula "24"))
                  (rule "times_zero_2" (formula "24") (term "1,0"))
                  (rule "add_zero_right" (formula "24") (term "0"))
                  (rule "applyEq" (formula "14") (term "0") (ifseqformula "13"))
                  (rule "qeq_literals" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "applyEq" (formula "19") (term "1,0,0") (ifseqformula "13"))
                  (rule "add_zero_right" (formula "19") (term "0,0"))
                  (rule "div_literals" (formula "19") (term "0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "true_left" (formula "19"))
                  (rule "applyEq" (formula "25") (term "0") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq0" (formula "25"))
                  (rule "times_zero_2" (formula "25") (term "1,0"))
                  (rule "add_zero_right" (formula "25") (term "0"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "18"))
                  (rule "inEqSimp_homoInEq1" (formula "4"))
                  (rule "mul_literals" (formula "4") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                  (rule "add_literals" (formula "4") (term "0,0"))
                  (rule "applyEq" (formula "17") (term "0") (ifseqformula "18"))
                  (rule "qeq_literals" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "applyEq" (formula "27") (term "0") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq1" (formula "27"))
                  (rule "times_zero_2" (formula "27") (term "1,0"))
                  (rule "add_zero_right" (formula "27") (term "0"))
                  (rule "applyEq" (formula "22") (term "0") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq0" (formula "22"))
                  (rule "times_zero_2" (formula "22") (term "1,0"))
                  (rule "add_zero_right" (formula "22") (term "0"))
                  (rule "applyEq" (formula "28") (term "1,0,0") (ifseqformula "13"))
                  (rule "add_zero_right" (formula "28") (term "0,0"))
                  (rule "jdiv_axiom_inline" (formula "28") (term "0"))
                  (rule "mul_literals" (formula "28") (term "0,0,2,0"))
                  (rule "div_literals" (formula "28") (term "1,0"))
                  (rule "qeq_literals" (formula "28") (term "0,0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "div_literals" (formula "28") (term "0,0"))
                  (rule "mul_literals" (formula "28") (term "0"))
                  (rule "eqSymm" (formula "28"))
                  (rule "applyEq" (formula "15") (term "0") (ifseqformula "17"))
                  (rule "leq_literals" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "applyEq" (formula "17") (term "1,0,0") (ifseqformula "13"))
                  (rule "add_zero_right" (formula "17") (term "0,0"))
                  (rule "div_literals" (formula "17") (term "0"))
                  (rule "eqSymm" (formula "17"))
                  (rule "apply_eq_monomials" (formula "25") (term "1,1") (ifseqformula "22"))
                  (rule "add_zero_left" (formula "25") (term "1,0,1,1"))
                  (rule "polySimp_mulAssoc" (formula "25") (term "0,1,1"))
                  (rule "polySimp_mulComm0" (formula "25") (term "0,0,1,1"))
                  (rule "polySimp_mulLiterals" (formula "25") (term "0,1,1"))
                  (rule "polySimp_pullOutFactor0" (formula "25") (term "1,1"))
                  (rule "add_literals" (formula "25") (term "1,1,1"))
                  (rule "times_zero_1" (formula "25") (term "1,1"))
                  (rule "add_zero_right" (formula "25") (term "1"))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "17"))
                  (rule "qeq_literals" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "16"))
                  (rule "leq_literals" (formula "17"))
                  (rule "true_left" (formula "17"))
                  (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
                  (rule "leq_literals" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "applyEqRigid" (formula "13") (term "0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "13"))
                  (rule "true_left" (formula "13"))
                  (rule "applyEqRigid" (formula "15") (term "0") (ifseqformula "14"))
                  (rule "inEqSimp_commuteLeq" (formula "15"))
                  (rule "inEqSimp_homoInEq1" (formula "15"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,0"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,0"))
                  (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "18"))
                  (rule "qeq_literals" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "applyEqRigid" (formula "10") (term "0") (ifseqformula "18"))
                  (rule "leq_literals" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "applyEqRigid" (formula "20") (term "0,0") (ifseqformula "17"))
                  (rule "times_zero_2" (formula "20") (term "0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "applyEqRigid" (formula "16") (term "0,1,0") (ifseqformula "13"))
                  (rule "mul_literals" (formula "16") (term "1,0"))
                  (rule "add_literals" (formula "16") (term "0"))
                  (rule "qeq_literals" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "applyEqRigid" (formula "18") (term "0,1,0") (ifseqformula "16"))
                  (rule "times_zero_2" (formula "18") (term "1,0"))
                  (rule "add_zero_right" (formula "18") (term "0"))
                  (rule "leq_literals" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "applyEqRigid" (formula "4") (term "0,1,0") (ifseqformula "2"))
                  (rule "mul_literals" (formula "4") (term "1,0"))
                  (rule "add_literals" (formula "4") (term "0"))
                  (rule "qeq_literals" (formula "4"))
                  (rule "closeFalse" (formula "4"))
               )
            )
            (branch "if n instanceof java.lang.Throwable false"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Null Reference (n_1 = null)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "if x_1 false"
       (builtin "One Step Simplification" (formula "29"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_leqRight" (formula "27"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "mod_axiom" (formula "1") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "div_axiom" (formula "1") (term "0,0") (inst "quotient=quotient_3"))
      (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
      (rule "equal_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "qeq_literals" (formula "1") (term "0,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
      (rule "add_literals" (formula "3") (term "0,0,1"))
      (rule "polySimp_addComm1" (formula "3") (term "1"))
      (rule "add_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_homoInEq0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0"))
      (rule "inEqSimp_homoInEq1" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "4"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
      (rule "polySimp_addComm1" (formula "4") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1"))
      (rule "polySimp_rightDist" (formula "2") (term "1"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
      (rule "mul_literals" (formula "2") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "4"))
      (rule "polySimp_mulComm0" (formula "4") (term "1"))
      (rule "polySimp_rightDist" (formula "4") (term "1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
      (rule "mul_literals" (formula "4") (term "0,1"))
      (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "4"))
      (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
      (rule "mul_literals" (formula "2") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
      (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
      (rule "add_literals" (formula "2") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "2") (term "0,0"))
      (rule "add_literals" (formula "2") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "2") (term "1,0,0"))
      (rule "add_zero_right" (formula "2") (term "0,0"))
      (rule "qeq_literals" (formula "2") (term "0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "2"))
      (rule "mul_literals" (formula "15") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "15") (term "0"))
      (rule "add_literals" (formula "15") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15"))
      (rule "mul_literals" (formula "15") (term "1"))
      (rule "elimGcdGeq_antec" (formula "15") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0,1,0"))
      (rule "leq_literals" (formula "15") (term "0,0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
      (rule "polySimp_addLiterals" (formula "15") (term "0,0,0,0"))
      (rule "add_literals" (formula "15") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "15") (term "0,0"))
      (rule "add_literals" (formula "15") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "15") (term "1,0,0"))
      (rule "add_zero_right" (formula "15") (term "0,0"))
      (rule "leq_literals" (formula "15") (term "0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "14"))
      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
      (rule "mul_literals" (formula "3") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "add_literals" (formula "3") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "elimGcdLeq_antec" (formula "3") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_3") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,1,0"))
      (rule "neg_literal" (formula "3") (term "0,0,0,0,0,1,0"))
      (rule "leq_literals" (formula "3") (term "0,0"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "mul_literals" (formula "3") (term "1,0,0,0,0,0"))
      (rule "polySimp_addLiterals" (formula "3") (term "0,0,0,0"))
      (rule "add_literals" (formula "3") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor0b" (formula "3") (term "0,0"))
      (rule "add_literals" (formula "3") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "3") (term "1,0,0"))
      (rule "add_zero_right" (formula "3") (term "0,0"))
      (rule "qeq_literals" (formula "3") (term "0"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "inEqSimp_antiSymm" (formula "16") (ifseqformula "3"))
      (rule "applyEq" (formula "17") (term "0") (ifseqformula "16"))
      (rule "qeq_literals" (formula "17"))
      (rule "true_left" (formula "17"))
      (rule "applyEqRigid" (formula "4") (term "0,1,1") (ifseqformula "16"))
      (rule "mul_literals" (formula "4") (term "1,1"))
      (rule "add_literals" (formula "4") (term "1"))
      (rule "applyEqRigid" (formula "2") (term "0,1,1") (ifseqformula "16"))
      (rule "mul_literals" (formula "2") (term "1,1"))
      (rule "add_literals" (formula "2") (term "1"))
      (rule "applyEq" (formula "3") (term "0") (ifseqformula "16"))
      (rule "leq_literals" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "15"))
      (rule "inEqSimp_subsumption0" (formula "14") (ifseqformula "2"))
      (rule "leq_literals" (formula "14") (term "0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "3"))
      (rule "leq_literals" (formula "15") (term "0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "30") (term "1") (inst "#v0=x_arr_2"))
      (rule "variableDeclaration" (formula "30") (term "1") (newnames "x_arr_2"))
      (rule "variableDeclarationAssign" (formula "30") (term "1"))
      (rule "variableDeclaration" (formula "30") (term "1") (newnames "length_1"))
      (rule "assignment" (formula "30") (term "1"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "methodBodyExpand" (formula "30") (term "1") (newnames "heapBefore_<createArray>,savedHeapBefore_<createArray>"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "variableDeclaration" (formula "30") (term "1") (newnames "newObject"))
      (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "30") (term "1") (inst "#v0=x_arr_3"))
      (rule "variableDeclaration" (formula "30") (term "1") (newnames "x_arr_3"))
      (rule "variableDeclarationAssign" (formula "30") (term "1"))
      (rule "variableDeclaration" (formula "30") (term "1") (newnames "length_2"))
      (rule "assignment" (formula "30") (term "1"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "allocateInstanceWithLength" (formula "30"))
       (builtin "One Step Simplification" (formula "31"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "blockEmpty" (formula "34") (term "1"))
      (rule "assignment" (formula "34") (term "1"))
       (builtin "One Step Simplification" (formula "34"))
      (rule "mod_axiom" (formula "1") (term "1,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
      (rule "polySimp_addAssoc" (formula "1") (term "1"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
      (rule "add_literals" (formula "1") (term "0,0,1"))
      (rule "applyEq" (formula "1") (term "0,1,1") (ifseqformula "3"))
      (rule "mul_literals" (formula "1") (term "1,1"))
      (rule "polySimp_addComm1" (formula "1") (term "1"))
      (rule "add_literals" (formula "1") (term "0,1"))
      (rule "arrayLengthNotNegative" (formula "1") (term "0"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "arrayLengthIsAnInt" (formula "1") (term "0"))
      (rule "expand_inInt" (formula "1"))
      (rule "replace_int_MAX" (formula "1") (term "1,0"))
      (rule "replace_int_MIN" (formula "1") (term "0,1"))
      (rule "andLeft" (formula "1"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
      (rule "inEqSimp_homoInEq1" (formula "2"))
      (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
      (rule "polySimp_rightDist" (formula "2") (term "1,0"))
      (rule "mul_literals" (formula "2") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0"))
      (rule "add_literals" (formula "2") (term "0,0"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
      (rule "inEqSimp_homoInEq0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "6"))
      (rule "leq_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "methodCall" (formula "34") (term "1"))
      (branch "Normal Execution (newObject != null )"
          (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "32")))
         (rule "false_right" (formula "34"))
         (rule "methodBodyExpand" (formula "34") (term "1") (newnames "heapBefore_<createArrayHelper>,savedHeapBefore_<createArrayHelper>"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "assignment_write_attribute_this" (formula "34") (term "1"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "methodCallWithinClass" (formula "34") (term "1"))
         (rule "methodBodyExpand" (formula "34") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "arrayInitialisation" (formula "34") (term "1"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "polySimp_elimSub" (formula "34") (term "2,1,0,1,0"))
         (rule "mul_literals" (formula "34") (term "1,2,1,0,1,0"))
         (rule "polySimp_addComm0" (formula "34") (term "2,1,0,1,0"))
         (rule "applyEq" (formula "34") (term "1,2,1,0,1,0") (ifseqformula "1"))
         (rule "polySimp_addAssoc" (formula "34") (term "2,1,0,1,0"))
         (rule "add_literals" (formula "34") (term "0,2,1,0,1,0"))
         (rule "add_zero_left" (formula "34") (term "2,1,0,1,0"))
         (rule "methodCallEmpty" (formula "34") (term "1"))
         (rule "blockEmpty" (formula "34") (term "1"))
         (rule "assignment_write_attribute_this" (formula "34") (term "1"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "methodCallReturnIgnoreResult" (formula "34") (term "1"))
         (rule "blockEmpty" (formula "34") (term "1"))
         (rule "methodCallReturn" (formula "34") (term "1"))
         (rule "assignment" (formula "34") (term "1"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "methodCallEmpty" (formula "34") (term "1"))
         (rule "blockEmpty" (formula "34") (term "1"))
         (rule "assignment" (formula "34") (term "1"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "blockEmpty" (formula "34") (term "1"))
         (rule "assignment" (formula "34") (term "1"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "assignment_write_attribute_this" (formula "34") (term "1"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "assignment_write_attribute_this" (formula "34") (term "1"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "emptyStatement" (formula "34") (term "1"))
         (rule "methodCallEmpty" (formula "34") (term "1"))
         (rule "tryEmpty" (formula "34") (term "1"))
         (rule "emptyModality" (formula "34") (term "1"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "eqSymm" (formula "34") (term "1,0,0,1"))
         (rule "dismissNonSelectedField" (formula "34") (term "1,0,1,0,0,1,1,0"))
         (rule "dismissNonSelectedField" (formula "34") (term "0,1,1,0,0,0,0,1,1,0"))
         (rule "dismissNonSelectedField" (formula "34") (term "0,0,0,1,0"))
         (rule "polySimp_homoEq" (formula "34") (term "0,1,0"))
         (rule "polySimp_addComm1" (formula "34") (term "0,0,1,0"))
         (rule "dismissNonSelectedField" (formula "34") (term "0,0,0,0"))
         (rule "dismissNonSelectedField" (formula "34") (term "0,1,0,0,1,1,0"))
         (rule "dismissNonSelectedField" (formula "34") (term "0,1,0,0,1,1,0"))
         (rule "dismissNonSelectedField" (formula "34") (term "0,1,0,0,1,1,0"))
         (rule "mod_axiom" (formula "34") (term "1,1,1,0,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,1,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "34") (term "1,1,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "34") (term "0,1,1,0,1,0,0,1,0"))
         (rule "add_literals" (formula "34") (term "0,0,1,1,0,1,0,0,1,0"))
         (rule "applyEq" (formula "34") (term "0,1,1,1,0,1,0,0,1,0") (ifseqformula "18"))
         (rule "times_zero_2" (formula "34") (term "1,1,1,0,1,0,0,1,0"))
         (rule "add_zero_right" (formula "34") (term "1,1,0,1,0,0,1,0"))
         (rule "mod_axiom" (formula "34") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "34") (term "0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "34") (term "0,0,0,0,1,0"))
         (rule "add_literals" (formula "34") (term "0,0,0,0,0,1,0"))
         (rule "polySimp_sepNegMonomial" (formula "34") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "34") (term "0,0,1,0"))
         (rule "Query_axiom_for_wordIndex_int__in_BitSet" (formula "34") (term "1,1,0,1,0") (inst "wordIndex_sk=wordIndex_sk_0") (inst "#p0=x_1") (inst "#res=x"))
         (rule "expand_inInt" (formula "1") (term "0,0,1"))
         (rule "replace_int_MIN" (formula "1") (term "0,1,0,0,1"))
         (rule "replace_int_MAX" (formula "1") (term "1,0,0,0,1"))
         (rule "eqSymm" (formula "1") (term "1,0,1"))
         (rule "polySimp_addComm1" (formula "35") (term "1,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1"))
         (rule "Query_axiom_for_wordIndex_int__in_BitSet" (formula "35") (term "1,0,0,0,0,1,0") (inst "wordIndex_sk=wordIndex_sk_1") (inst "#p0=x_1") (inst "#res=x"))
         (rule "expand_inInt" (formula "1") (term "0,0,1"))
         (rule "replace_int_MIN" (formula "1") (term "0,1,0,0,1"))
         (rule "replace_int_MAX" (formula "1") (term "1,0,0,0,1"))
         (rule "eqSymm" (formula "1") (term "1,0,1"))
         (rule "polySimp_homoEq" (formula "36") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "36") (term "0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1"))
         (rule "polySimp_sepNegMonomial" (formula "36") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "36") (term "0,0,1,0"))
         (rule "polySimp_elimOne" (formula "36") (term "0,0,1,0"))
         (rule "pullOutSelect" (formula "36") (term "1,0,0,1,1,1,0") (inst "selectSK=BitSet_iSet_0"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "37") (term "1,0,0,1,1,1,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "37"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "36") (term "0,0,0,1,0") (inst "selectSK=BitSet_words_0"))
         (rule "applyEq" (formula "37") (term "0,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "37") (term "0,1,1,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "37") (term "1,0,1,0,1,1,0") (ifseqformula "1"))
         (rule "simplifySelectOfStore" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "castDel" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "37") (term "0,0,0,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "37") (term "0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "37") (term "0,1,1,0,0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "37") (term "1,0,1,0,1,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_right" (formula "36") (term "0,0,0") (ifseqformula "34"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "applyEq" (formula "36") (term "0,0,0") (ifseqformula "3"))
         (rule "polySimp_homoEq" (formula "36") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0"))
         (rule "mul_literals" (formula "36") (term "0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "36") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "36") (term "0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "36") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "36") (term "0,0,0,0,0,0"))
         (rule "applyEq" (formula "36") (term "1,1,0,0,0,1,0") (ifseqformula "3"))
         (rule "polySimp_sepNegMonomial" (formula "36") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "36") (term "0,0,0"))
         (rule "boxToDiamond" (formula "2") (term "1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "notLeft" (formula "2"))
         (rule "boxToDiamond" (formula "1") (term "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "methodBodyExpand" (formula "32") (term "1") (newnames "heapBefore_wordIndex_0,savedHeapBefore_wordIndex"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "methodBodyExpand" (formula "31") (term "1") (newnames "heapBefore_wordIndex_1,savedHeapBefore_wordIndex_0"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "returnUnfold" (formula "32") (term "1") (inst "#v0=x_2"))
         (rule "variableDeclarationAssign" (formula "32") (term "1"))
         (rule "variableDeclaration" (formula "32") (term "1") (newnames "x_2"))
         (rule "returnUnfold" (formula "31") (term "1") (inst "#v0=x_2"))
         (rule "variableDeclarationAssign" (formula "31") (term "1"))
         (rule "variableDeclaration" (formula "31") (term "1") (newnames "x_3"))
         (rule "assignmentShiftRightInt" (formula "32") (term "1"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "translateJavaShiftRightInt" (formula "32") (term "0,1,0"))
         (rule "javaShiftRightIntDef" (formula "32") (term "0,1,0"))
         (rule "mod_axiom" (formula "32") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,1,0"))
         (rule "div_literals" (formula "32") (term "0,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "32") (term "1,1,0,0,1,0"))
         (rule "add_literals" (formula "32") (term "1,0,0,1,0"))
         (rule "shiftRightDef" (formula "32") (term "0,0,1,0"))
         (rule "neg_literal" (formula "32") (term "1,1,0,0,1,0"))
         (rule "less_literals" (formula "32") (term "0,0,0,1,0"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "shiftRightPositiveShiftDef" (formula "32") (term "0,0,1,0"))
         (rule "pow_literals" (formula "32") (term "1,0,0,1,0"))
         (rule "applyEq" (formula "32") (term "0,0,1,0") (ifseqformula "19"))
         (rule "expand_moduloInteger" (formula "32") (term "0,1,0"))
         (rule "replace_int_MIN" (formula "32") (term "0,0,1,0"))
         (rule "replace_int_RANGE" (formula "32") (term "1,1,0,1,0"))
         (rule "replace_int_HALFRANGE" (formula "32") (term "0,0,1,0,1,0"))
         (rule "assignmentShiftRightInt" (formula "31") (term "1"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "translateJavaShiftRightInt" (formula "31") (term "0,1,0"))
         (rule "javaShiftRightIntDef" (formula "31") (term "0,1,0"))
         (rule "mod_axiom" (formula "31") (term "1,0,0,1,0"))
         (rule "div_literals" (formula "31") (term "0,0,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1,0"))
         (rule "mul_literals" (formula "31") (term "1,1,0,0,1,0"))
         (rule "add_literals" (formula "31") (term "1,0,0,1,0"))
         (rule "shiftRightDef" (formula "31") (term "0,0,1,0"))
         (rule "less_literals" (formula "31") (term "0,0,0,1,0"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "shiftRightPositiveShiftDef" (formula "31") (term "0,0,1,0"))
         (rule "pow_literals" (formula "31") (term "1,0,0,1,0"))
         (rule "applyEq" (formula "31") (term "0,0,1,0") (ifseqformula "19"))
         (rule "expand_moduloInteger" (formula "31") (term "0,1,0"))
         (rule "replace_int_MIN" (formula "31") (term "0,0,1,0"))
         (rule "replace_int_RANGE" (formula "31") (term "1,1,0,1,0"))
         (rule "replace_int_HALFRANGE" (formula "31") (term "0,0,1,0,1,0"))
         (rule "methodCallReturn" (formula "32") (term "1"))
         (rule "assignment" (formula "32") (term "1"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "methodCallReturn" (formula "31") (term "1"))
         (rule "assignment" (formula "31") (term "1"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "methodCallEmpty" (formula "32") (term "1"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "methodCallEmpty" (formula "31") (term "1"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "emptyModality" (formula "32") (term "1"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "notRight" (formula "32"))
         (rule "polySimp_homoEq" (formula "1") (term "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,1"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,1"))
         (rule "mul_literals" (formula "1") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0,1"))
         (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1,0"))
         (rule "add_literals" (formula "1") (term "0,0,1,0"))
         (rule "add_zero_left" (formula "1") (term "0,1,0"))
         (rule "mod_axiom" (formula "1") (term "0,1,0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,1"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,1"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,1"))
         (rule "polySimp_addComm1" (formula "1") (term "0,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1"))
         (rule "add_literals" (formula "1") (term "0,0,0,0,1"))
         (rule "add_zero_left" (formula "1") (term "0,0,0,1"))
         (rule "mod_axiom" (formula "1") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
         (rule "mod_axiom" (formula "1") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,0,1,0"))
         (rule "mul_literals" (formula "1") (term "0,0,0,1,0"))
         (rule "polySimp_sepPosMonomial" (formula "1") (term "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
         (rule "polySimp_mulAssoc" (formula "1") (term "0,1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "0,1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,1,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
         (rule "emptyModality" (formula "32") (term "1"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "notRight" (formula "32"))
         (rule "polySimp_homoEq" (formula "1") (term "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,1"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,1"))
         (rule "mul_literals" (formula "1") (term "0,1,0,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
         (rule "polySimp_addComm0" (formula "1") (term "0,0,1"))
         (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,1,0"))
         (rule "add_literals" (formula "1") (term "0,0,1,0"))
         (rule "add_zero_left" (formula "1") (term "0,1,0"))
         (rule "mod_axiom" (formula "1") (term "0,1,0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,1"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,1"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,1"))
         (rule "polySimp_addComm1" (formula "1") (term "0,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,1"))
         (rule "add_literals" (formula "1") (term "0,0,0,0,1"))
         (rule "add_zero_left" (formula "1") (term "0,0,0,1"))
         (rule "mod_axiom" (formula "1") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0,0"))
         (rule "mul_literals" (formula "1") (term "0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
         (rule "mod_axiom" (formula "1") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "0,0,1,0"))
         (rule "mul_literals" (formula "1") (term "0,0,0,1,0"))
         (rule "polySimp_sepPosMonomial" (formula "1") (term "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1"))
         (rule "polySimp_mulAssoc" (formula "1") (term "0,1,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0,1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "0,1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0"))
         (rule "cut_direct" (formula "19") (term "0"))
         (branch "CUT: nbits = 0 TRUE"
             (builtin "One Step Simplification" (formula "20"))
            (rule "replace_known_left" (formula "33") (term "0,0") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "true_left" (formula "33"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "20"))
            (rule "qeq_literals" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "applyEq" (formula "26") (term "0,1,0,0") (ifseqformula "18"))
            (rule "times_zero_2" (formula "26") (term "1,0,0"))
            (rule "add_literals" (formula "26") (term "0,0"))
            (rule "div_literals" (formula "26") (term "0"))
            (rule "eqSymm" (formula "26"))
            (rule "applyEq" (formula "35") (term "2,1,0,0,0,0,0,1,0,0,1") (ifseqformula "19"))
            (rule "applyEq" (formula "25") (term "0") (ifseqformula "18"))
            (rule "inEqSimp_homoInEq0" (formula "25"))
            (rule "times_zero_2" (formula "25") (term "1,0"))
            (rule "add_zero_right" (formula "25") (term "0"))
            (rule "applyEq" (formula "10") (term "0") (ifseqformula "18"))
            (rule "leq_literals" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "applyEq" (formula "34") (term "2,1,0,0,1,0,1,0") (ifseqformula "18"))
            (rule "applyEq" (formula "29") (term "0") (ifseqformula "17"))
            (rule "inEqSimp_homoInEq1" (formula "29"))
            (rule "times_zero_2" (formula "29") (term "1,0"))
            (rule "add_zero_right" (formula "29") (term "0"))
            (rule "applyEq" (formula "23") (term "0") (ifseqformula "17"))
            (rule "inEqSimp_homoInEq1" (formula "23"))
            (rule "times_zero_2" (formula "23") (term "1,0"))
            (rule "add_zero_right" (formula "23") (term "0"))
            (rule "applyEq" (formula "30") (term "0,0,0") (ifseqformula "17"))
            (rule "qeq_literals" (formula "30") (term "0,0"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "eqSymm" (formula "30"))
            (rule "applyEq" (formula "26") (term "0") (ifseqformula "17"))
            (rule "inEqSimp_homoInEq0" (formula "26"))
            (rule "times_zero_2" (formula "26") (term "1,0"))
            (rule "add_zero_right" (formula "26") (term "0"))
            (rule "applyEq" (formula "34") (term "1,1,1,0,0,0,1,0") (ifseqformula "18"))
            (rule "add_literals" (formula "34") (term "1,1,0,0,0,1,0"))
            (rule "applyEq" (formula "20") (term "1,0,0") (ifseqformula "17"))
            (rule "add_zero_right" (formula "20") (term "0,0"))
            (rule "div_literals" (formula "20") (term "0"))
            (rule "eqSymm" (formula "20"))
            (rule "applyEq" (formula "6") (term "0") (ifseqformula "18"))
            (rule "leq_literals" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "applyEq" (formula "5") (term "1,0,0") (ifseqformula "17"))
            (rule "add_literals" (formula "5") (term "0,0"))
            (rule "div_literals" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "applyEq" (formula "12") (term "0") (ifseqformula "15"))
            (rule "qeq_literals" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "14"))
            (rule "add_zero_right" (formula "16") (term "0,0"))
            (rule "div_literals" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "15"))
            (rule "add_literals" (formula "3") (term "1"))
            (rule "applyEqRigid" (formula "18") (term "0,1") (ifseqformula "21"))
            (rule "times_zero_2" (formula "18") (term "1"))
            (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "21"))
            (rule "qeq_literals" (formula "23"))
            (rule "true_left" (formula "23"))
            (rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "21"))
            (rule "leq_literals" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "applyEqRigid" (formula "2") (term "1,1,0,0") (ifseqformula "15"))
            (rule "add_literals" (formula "2") (term "1,0,0"))
            (rule "applyEqRigid" (formula "2") (term "1,0,0,0,1,0") (ifseqformula "15"))
            (rule "add_literals" (formula "2") (term "0,0,0,1,0"))
            (rule "div_literals" (formula "2") (term "0,0,1,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0"))
            (rule "inEqSimp_homoInEq0" (formula "2") (term "1,0"))
            (rule "times_zero_2" (formula "2") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "2") (term "0,1,0"))
            (rule "applyEq" (formula "1") (term "1,0,0,0,1,0") (ifseqformula "15"))
            (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
            (rule "div_literals" (formula "1") (term "0,0,1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0"))
            (rule "inEqSimp_homoInEq0" (formula "1") (term "1,0"))
            (rule "mul_literals" (formula "1") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "1") (term "0,1,0"))
            (rule "applyEq" (formula "17") (term "0") (ifseqformula "15"))
            (rule "leq_literals" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "applyEq" (formula "10") (term "0") (ifseqformula "15"))
            (rule "qeq_literals" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "14"))
            (rule "leq_literals" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "14"))
            (rule "inEqSimp_homoInEq1" (formula "19"))
            (rule "mul_literals" (formula "19") (term "1,0"))
            (rule "polySimp_addComm1" (formula "19") (term "0"))
            (rule "add_literals" (formula "19") (term "0,0"))
            (rule "add_zero_left" (formula "19") (term "0"))
            (rule "applyEqRigid" (formula "1") (term "1,1,0,0") (ifseqformula "14"))
            (rule "add_literals" (formula "1") (term "1,0,0"))
            (rule "applyEq" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "14"))
            (rule "add_literals" (formula "2") (term "0,0,0,0,0"))
            (rule "div_literals" (formula "2") (term "0,0,0,0"))
            (rule "mul_literals" (formula "2") (term "0,0,0"))
            (rule "qeq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "applyEq" (formula "1") (term "1,0,0,0,0,0") (ifseqformula "14"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
            (rule "div_literals" (formula "1") (term "0,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,0"))
            (rule "qeq_literals" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEq" (formula "15") (term "0,1,0") (ifseqformula "14"))
            (rule "mul_literals" (formula "15") (term "1,0"))
            (rule "add_literals" (formula "15") (term "0"))
            (rule "leq_literals" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "applyEq" (formula "19") (term "0,1,0") (ifseqformula "16"))
            (rule "times_zero_2" (formula "19") (term "1,0"))
            (rule "add_zero_right" (formula "19") (term "0"))
            (rule "leq_literals" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "applyEqRigid" (formula "17") (term "0,1,0") (ifseqformula "16"))
            (rule "mul_literals" (formula "17") (term "1,0"))
            (rule "add_literals" (formula "17") (term "0"))
            (rule "qeq_literals" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "applyEqRigid" (formula "15") (term "0,1,0") (ifseqformula "14"))
            (rule "mul_literals" (formula "15") (term "1,0"))
            (rule "add_literals" (formula "15") (term "0"))
            (rule "qeq_literals" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "applyEq" (formula "17") (term "1,0,0") (ifseqformula "12"))
            (rule "add_zero_right" (formula "17") (term "0,0"))
            (rule "jdiv_axiom_inline" (formula "17") (term "0"))
            (rule "qeq_literals" (formula "17") (term "0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "mul_literals" (formula "17") (term "0,0,0"))
            (rule "div_literals" (formula "17") (term "0,0"))
            (rule "times_zero_2" (formula "17") (term "0"))
            (rule "eqSymm" (formula "17"))
            (rule "applyEq" (formula "21") (term "0,1,0,1,0,0") (ifseqformula "13"))
            (rule "mul_literals" (formula "21") (term "1,0,1,0,0"))
            (rule "add_literals" (formula "21") (term "0,1,0,0"))
            (rule "applyEqRigid" (formula "16") (term "0,0") (ifseqformula "15"))
            (rule "times_zero_2" (formula "16") (term "0"))
            (rule "leq_literals" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "applyEqRigid" (formula "2") (term "1,0,0") (ifseqformula "14"))
            (rule "add_literals" (formula "2") (term "0,0"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "applyEqRigid" (formula "16") (term "0,0") (ifseqformula "15"))
            (rule "times_zero_2" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "applyEqRigid" (formula "1") (term "1,0,0") (ifseqformula "14"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEq" (formula "19") (term "1,0,0,0,0,0") (ifseqformula "1"))
            (rule "polySimp_homoEq" (formula "19") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,0"))
            (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0"))
            (rule "applyEq" (formula "2") (term "1,0,0,1,1") (ifseqformula "14"))
            (rule "add_literals" (formula "2") (term "0,0,1,1"))
            (rule "div_literals" (formula "2") (term "0,1,1"))
            (rule "times_zero_2" (formula "2") (term "1,1"))
            (rule "add_zero_right" (formula "2") (term "1"))
            (rule "applyEq" (formula "1") (term "1,0,0,1,1") (ifseqformula "14"))
            (rule "add_literals" (formula "1") (term "0,0,1,1"))
            (rule "div_literals" (formula "1") (term "0,1,1"))
            (rule "times_zero_2" (formula "1") (term "1,1"))
            (rule "add_zero_right" (formula "1") (term "1"))
            (rule "applyEqRigid" (formula "19") (term "1,0,0,0") (ifseqformula "2"))
            (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
            (rule "applyEq" (formula "19") (term "1,0,0,1,0,0,1,0,0,0") (ifseqformula "14"))
            (rule "add_literals" (formula "19") (term "0,0,1,0,0,1,0,0,0"))
            (rule "div_literals" (formula "19") (term "0,1,0,0,1,0,0,0"))
            (rule "times_zero_2" (formula "19") (term "1,0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "19") (term "0,0,1,0,0,0"))
            (rule "applyEq" (formula "2") (term "1") (ifseqformula "14"))
            (rule "applyEqRigid" (formula "19") (term "1,0,0,1,0,0,0") (ifseqformula "14"))
            (rule "add_literals" (formula "19") (term "0,0,1,0,0,0"))
            (rule "div_literals" (formula "19") (term "0,1,0,0,0"))
            (rule "mul_literals" (formula "19") (term "1,0,0,0"))
            (rule "polySimp_addComm1" (formula "19") (term "0,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,0"))
            (rule "applyEq" (formula "1") (term "1") (ifseqformula "14"))
            (rule "applyEq" (formula "19") (term "1,0,0,0") (ifseqformula "14"))
            (rule "add_literals" (formula "19") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_or_tautInEq0" (formula "19") (term "0,0,0,0"))
            (rule "add_zero_right" (formula "19") (term "1,1,0,0,0,0"))
            (rule "qeq_literals" (formula "19") (term "1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "allRight" (formula "19") (inst "sk=f_0"))
            (rule "allRight" (formula "19") (inst "sk=o_0"))
            (rule "orRight" (formula "19"))
            (rule "orRight" (formula "19"))
            (rule "orRight" (formula "19"))
            (rule "pullOutSelect" (formula "22") (term "0") (inst "selectSK=f_0_0"))
            (rule "simplifySelectOfStore" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "23"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "eqSymm" (formula "1") (term "1,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfStore" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "eqSymm" (formula "1") (term "1,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfStore" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "eqSymm" (formula "1") (term "1,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
            (rule "simplifySelectOfMemset" (formula "1"))
            (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
            (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
            (rule "simplifySelectOfStore" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "eqSymm" (formula "1") (term "1,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
            (rule "simplifySelectOfStore" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "eqSymm" (formula "1") (term "1,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
            (rule "simplifySelectOfStore" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0"))
            (rule "eqSymm" (formula "1") (term "1,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_5"))
            (rule "simplifySelectOfCreate" (formula "1"))
            (rule "castDel" (formula "1") (term "1,0"))
            (rule "eqSymm" (formula "1") (term "0,0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "commute_and" (formula "25"))
            (rule "commute_and" (formula "26"))
            (rule "commute_and" (formula "6") (term "0,0"))
            (rule "commute_and" (formula "4") (term "0,0"))
            (rule "commute_and" (formula "3") (term "0,0"))
            (rule "commute_and" (formula "2") (term "0,0"))
            (rule "commute_and" (formula "1") (term "0,0"))
            (rule "commute_and_2" (formula "5") (term "0,1,0,0,0"))
            (rule "inEqSimp_and_contradInEq1" (formula "5") (term "0,1,0,0,0"))
            (rule "qeq_literals" (formula "5") (term "1,0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
            (rule "hideAuxiliaryEq" (formula "5"))
            (rule "ifthenelse_split" (formula "1") (term "0"))
            (branch "f_0 = java.lang.Object::<created> & o_0 = x_arr_3 TRUE"
               (rule "andLeft" (formula "1"))
               (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
               (rule "hideAuxiliaryEq" (formula "5"))
               (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "applyEq" (formula "25") (term "0,0,0") (ifseqformula "2"))
               (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "notRight" (formula "25"))
               (rule "applyEq" (formula "25") (term "0,1") (ifseqformula "3"))
               (rule "eqSymm" (formula "25") (term "1"))
               (rule "sortsDisjointModuloNull" (formula "25") (term "1"))
               (rule "replace_known_right" (formula "25") (term "0,1") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "22")))
               (rule "false_right" (formula "25"))
               (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "5"))
               (rule "hideAuxiliaryEq" (formula "5"))
               (rule "applyEqRigid" (formula "24") (term "2,0") (ifseqformula "2"))
               (rule "narrowSelectType" (formula "24") (term "0") (ifseqformula "9"))
               (rule "eqSymm" (formula "24"))
               (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "false_right" (formula "23"))
               (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "applyEqReverse" (formula "23") (term "0") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "eqSymm" (formula "22"))
               (rule "close" (formula "22") (ifseqformula "1"))
            )
            (branch "f_0 = java.lang.Object::<created> & o_0 = x_arr_3 FALSE"
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "ifthenelse_split" (formula "1") (term "0"))
               (branch "f_0 = java.lang.Object::<transient> & o_0 = x_arr_3 TRUE"
                  (rule "andLeft" (formula "1"))
                  (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "applyEq" (formula "18") (term "0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "false_right" (formula "18"))
                  (rule "applyEq" (formula "24") (term "1,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "false_right" (formula "21"))
                  (rule "applyEq" (formula "22") (term "0,0,0") (ifseqformula "2"))
                  (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "19"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "notRight" (formula "22"))
                  (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "3"))
                  (rule "eqSymm" (formula "22") (term "1"))
                  (rule "sortsDisjointModuloNull" (formula "22") (term "1"))
                  (rule "replace_known_right" (formula "22") (term "1,1") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "21")))
                  (rule "false_right" (formula "22"))
                  (rule "applyEq" (formula "22") (term "2,0") (ifseqformula "2"))
                  (rule "narrowSelectType" (formula "22") (term "0") (ifseqformula "8"))
                  (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                  (rule "close" (formula "19") (ifseqformula "1"))
               )
               (branch "f_0 = java.lang.Object::<transient> & o_0 = x_arr_3 FALSE"
                  (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "cut_direct" (formula "26") (term "0,0"))
                  (branch "CUT: o_0 = null TRUE"
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "false_right" (formula "27"))
                     (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "21") (term "0,1") (ifseqformula "1"))
                     (rule "eqSymm" (formula "21") (term "1"))
                     (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "23"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "false_right" (formula "21"))
                     (rule "applyEqRigid" (formula "20") (term "0,1") (ifseqformula "1"))
                     (rule "eqSymm" (formula "20") (term "1"))
                     (rule "replace_known_right" (formula "20") (term "1") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "false_right" (formula "20"))
                     (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "2") (term "1,0,0"))
                     (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "applyEqRigid" (formula "23") (term "0,1") (ifseqformula "1"))
                     (rule "eqSymm" (formula "23") (term "1"))
                     (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "false_right" (formula "23"))
                     (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "3") (term "1,0,0"))
                     (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "applyEqRigid" (formula "22") (term "1,0") (ifseqformula "1"))
                     (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "2") (term "1,0,0"))
                     (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "22")))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: o_0 = null FALSE"
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "notRight" (formula "27"))
                     (rule "ifthenelse_split" (formula "2") (term "0"))
                     (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> & o_0 = x_arr_3 TRUE"
                        (rule "andLeft" (formula "2"))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                        (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "applyEq" (formula "20") (term "0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "false_right" (formula "20"))
                        (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEqReverse" (formula "27") (term "1") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "applyEq" (formula "19") (term "0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "false_right" (formula "19"))
                        (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "false_right" (formula "22"))
                        (rule "applyEq" (formula "23") (term "0") (ifseqformula "3"))
                        (rule "applyEq" (formula "22") (term "0,1") (ifseqformula "3"))
                        (rule "eqSymm" (formula "22") (term "1"))
                        (rule "sortsDisjointModuloNull" (formula "22") (term "1"))
                        (rule "replace_known_right" (formula "22") (term "1,1") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "21")))
                        (rule "false_right" (formula "22"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                        (rule "close" (formula "19") (ifseqformula "1"))
                     )
                     (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> & o_0 = x_arr_3 FALSE"
                        (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "ifthenelse_split" (formula "2") (term "0"))
                        (branch "f_0 = java.lang.Object::<initialized> & o_0 = x_arr_3 TRUE"
                           (rule "andLeft" (formula "2"))
                           (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")))
                           (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "applyEq" (formula "19") (term "0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "false_right" (formula "19"))
                           (rule "applyEq" (formula "20") (term "0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "false_right" (formula "20"))
                           (rule "applyEqRigid" (formula "23") (term "0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "false_right" (formula "23"))
                           (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "false_right" (formula "23"))
                           (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                           (rule "close" (formula "20") (ifseqformula "1"))
                        )
                        (branch "f_0 = java.lang.Object::<initialized> & o_0 = x_arr_3 FALSE"
                           (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "28")))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                  )
               )
            )
         )
         (branch "CUT: nbits = 0 FALSE"
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "replace_known_right" (formula "31") (term "0,0") (ifseqformula "32"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "inEqSimp_strengthen1" (formula "16") (ifseqformula "32"))
            (rule "add_zero_right" (formula "16") (term "1"))
            (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "eqSymm" (formula "30"))
            (rule "applyEq" (formula "31") (term "1,0,0") (ifseqformula "30"))
            (rule "mod_axiom" (formula "31") (term "0"))
            (rule "polySimp_mulLiterals" (formula "31") (term "1,0"))
            (rule "polySimp_homoEq" (formula "31"))
            (rule "polySimp_mulComm0" (formula "31") (term "1,0"))
            (rule "polySimp_rightDist" (formula "31") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "31") (term "0,1,0"))
            (rule "mul_literals" (formula "31") (term "0,0,1,0"))
            (rule "polySimp_addComm1" (formula "31") (term "0"))
            (rule "polySimp_addAssoc" (formula "31") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "31") (term "0,0,0"))
            (rule "add_literals" (formula "31") (term "0,0,0,0"))
            (rule "add_zero_left" (formula "31") (term "0,0,0"))
            (rule "polySimp_sepPosMonomial" (formula "31"))
            (rule "polySimp_mulComm0" (formula "31") (term "1"))
            (rule "polySimp_rightDist" (formula "31") (term "1"))
            (rule "polySimp_mulLiterals" (formula "31") (term "1,1"))
            (rule "polySimp_mulAssoc" (formula "31") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "31") (term "0,0,1"))
            (rule "polySimp_mulLiterals" (formula "31") (term "0,1"))
            (rule "polySimp_elimOne" (formula "31") (term "0,1"))
            (rule "applyEq" (formula "36") (term "2,1,0,0,0,0,0,1,0,0,1") (ifseqformula "31"))
            (rule "applyEq" (formula "36") (term "1,1,1,0,0,0,1,0") (ifseqformula "31"))
            (rule "polySimp_addAssoc" (formula "36") (term "1,1,0,0,0,1,0"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "31"))
            (rule "inEqSimp_homoInEq1" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0"))
            (rule "applyEq" (formula "5") (term "1,0,0") (ifseqformula "31"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,0"))
            (rule "applyEq" (formula "6") (term "0") (ifseqformula "31"))
            (rule "inEqSimp_homoInEq0" (formula "6"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
            (rule "polySimp_rightDist" (formula "6") (term "1,0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "6") (term "0"))
            (rule "applyEq" (formula "36") (term "2,1,0,0,1,0,1,0") (ifseqformula "31"))
            (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "31"))
            (rule "polySimp_addAssoc" (formula "3") (term "1"))
            (rule "applyEq" (formula "36") (term "0,1,0,1,0,0") (ifseqformula "31"))
            (rule "polySimp_mulComm0" (formula "36") (term "1,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "36") (term "1,0,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "36") (term "0,1,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "36") (term "0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7"))
            (rule "polySimp_mulComm0" (formula "7") (term "1"))
            (rule "polySimp_rightDist" (formula "7") (term "1"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
            (rule "mul_literals" (formula "7") (term "0,1"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "6"))
            (rule "polySimp_mulComm0" (formula "6") (term "1"))
            (rule "polySimp_rightDist" (formula "6") (term "1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
            (rule "mul_literals" (formula "6") (term "0,1"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1"))
            (rule "inEqSimp_contradEq7" (formula "32") (ifseqformula "16"))
            (rule "times_zero_1" (formula "32") (term "1,0,0"))
            (rule "add_zero_right" (formula "32") (term "0,0"))
            (rule "leq_literals" (formula "32") (term "0"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "false_right" (formula "32"))
            (rule "inEqSimp_subsumption1" (formula "2") (term "0,0") (ifseqformula "6"))
            (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
            (rule "qeq_literals" (formula "2") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_subsumption5" (formula "1") (term "0,0") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "greater_literals" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,0"))
            (rule "qeq_literals" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_subsumption0" (formula "2") (term "0") (ifseqformula "7"))
            (rule "inEqSimp_homoInEq0" (formula "2") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
            (rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "2") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "2") (term "0,0,0,0"))
            (rule "add_literals" (formula "2") (term "0,0,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0"))
            (rule "add_literals" (formula "2") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "2") (term "0,0,0"))
            (rule "qeq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "applyEq" (formula "35") (term "1,1,0,0") (ifseqformula "2"))
            (rule "polySimp_addAssoc" (formula "35") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "35") (term "0,1,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "35") (term "1,0,0"))
            (rule "add_literals" (formula "35") (term "1,1,1,0,0"))
            (rule "times_zero_1" (formula "35") (term "1,1,0,0"))
            (rule "add_zero_right" (formula "35") (term "1,0,0"))
            (rule "polySimp_pullOutFactor2b" (formula "35") (term "1,0,0"))
            (rule "add_literals" (formula "35") (term "1,1,1,0,0"))
            (rule "times_zero_1" (formula "35") (term "1,1,0,0"))
            (rule "add_literals" (formula "35") (term "1,0,0"))
            (rule "inEqSimp_subsumption2" (formula "1") (term "0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "greater_literals" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_rightDist" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0"))
            (rule "qeq_literals" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqRigid" (formula "35") (term "1,0,0,0,0,0") (ifseqformula "1"))
            (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,0,0"))
            (rule "applyEqRigid" (formula "35") (term "0,0,0,0") (ifseqformula "5"))
            (rule "mul_literals" (formula "35") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "35"))
            (rule "polyDiv_pullOut" (formula "5") (term "0") (inst "polyDivCoeff=mul(div(add(Z(8(4(6(3(8(4(7(4(1(2(#))))))))))),
            quotient_1),
        Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))),
    Z(neglit(1(#))))"))
            (rule "equal_literals" (formula "5") (term "0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "5") (term "0,0,0"))
            (rule "add_literals" (formula "5") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "5") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "5") (term "0,0,0"))
            (rule "polySimp_homoEq" (formula "5"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
            (rule "polySimp_addComm0" (formula "5") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0"))
            (rule "polySimp_mulAssoc" (formula "5") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0"))
            (rule "polySimp_elimOne" (formula "5") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "5") (term "0"))
            (rule "polySimp_sepNegMonomial" (formula "5"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0"))
            (rule "polySimp_elimOne" (formula "5") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "26"))
            (rule "mul_literals" (formula "16") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0"))
            (rule "add_literals" (formula "16") (term "0,0"))
            (rule "add_zero_left" (formula "16") (term "0"))
            (rule "inEqSimp_invertInEq1" (formula "16"))
            (rule "times_zero_2" (formula "16") (term "1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0"))
            (rule "inEqSimp_subsumption4" (formula "16") (ifseqformula "15"))
            (rule "times_zero_1" (formula "16") (term "0,1,0"))
            (rule "greater_literals" (formula "16") (term "0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "leq_literals" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "inEqSimp_exactShadow3" (formula "16") (ifseqformula "24"))
            (rule "mul_literals" (formula "16") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0"))
            (rule "add_literals" (formula "16") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16"))
            (rule "mul_literals" (formula "16") (term "1"))
            (rule "elimGcdGeq_antec" (formula "16") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_1") (inst "elimGcd=Z(4(6(#)))"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,0,1,0"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,1,0"))
            (rule "leq_literals" (formula "16") (term "0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "polySimp_addLiterals" (formula "16") (term "0,0,0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0,0"))
            (rule "polySimp_pullOutFactor0b" (formula "16") (term "0,0"))
            (rule "add_literals" (formula "16") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "16") (term "1,0,0"))
            (rule "add_zero_right" (formula "16") (term "0,0"))
            (rule "leq_literals" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "16"))
            (rule "leq_literals" (formula "14") (term "0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "22"))
            (rule "times_zero_1" (formula "15") (term "0,0"))
            (rule "add_zero_left" (formula "15") (term "0"))
            (rule "inEqSimp_invertInEq1" (formula "15"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0"))
            (rule "mul_literals" (formula "15") (term "1"))
            (rule "polySimp_elimOne" (formula "15") (term "0"))
            (rule "andRight" (formula "35"))
            (branch "Case 1"
               (rule "allRight" (formula "35") (inst "sk=i_0"))
               (rule "orRight" (formula "35"))
               (rule "orRight" (formula "35"))
               (rule "orRight" (formula "35"))
               (rule "orRight" (formula "37"))
               (rule "inEqSimp_leqRight" (formula "35"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "36"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_geqRight" (formula "37"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_leqRight" (formula "38"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "polySimp_mulComm0" (formula "3") (term "1"))
               (rule "polySimp_rightDist" (formula "3") (term "1"))
               (rule "polySimp_mulAssoc" (formula "3") (term "0,1"))
               (rule "polySimp_mulComm0" (formula "3") (term "0,0,1"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0,1"))
               (rule "polySimp_elimOne" (formula "3") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
               (rule "leq_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=arr_0"))
               (rule "simplifySelectOfMemset" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfArrayRangeConcrete" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
               (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
               (rule "dismissNonSelectedField" (formula "1") (term "2,0"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_homoInEq0" (formula "1") (term "0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "39"))
               (rule "closeTrue" (formula "39"))
            )
            (branch "Case 2"
               (rule "allRight" (formula "35") (inst "sk=f_0"))
               (rule "allRight" (formula "35") (inst "sk=o_0"))
               (rule "orRight" (formula "35"))
               (rule "orRight" (formula "35"))
               (rule "orRight" (formula "35"))
               (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "39"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "37"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "36"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
               (rule "simplifySelectOfMemset" (formula "1"))
               (rule "elementOfArrayRange" (formula "1") (term "0,0,0") (inst "iv=iv"))
               (rule "eqSymm" (formula "1") (term "0,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0,1,0,0,0"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
               (rule "simplifySelectOfStore" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0"))
               (rule "eqSymm" (formula "1") (term "1,0,0"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_5"))
               (rule "simplifySelectOfCreate" (formula "1"))
               (rule "castDel" (formula "1") (term "1,0"))
               (rule "eqSymm" (formula "1") (term "0,0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "commute_and" (formula "41"))
               (rule "div_axiom" (formula "37") (term "0,1,1") (inst "quotient=quotient_4"))
               (rule "equal_literals" (formula "37") (term "0"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "qeq_literals" (formula "37") (term "0,1"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "mul_literals" (formula "37") (term "1,1,1"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "37"))
               (rule "polySimp_addAssoc" (formula "39") (term "0,1"))
               (rule "add_literals" (formula "39") (term "0,0,1"))
               (rule "polySimp_addComm1" (formula "39") (term "1"))
               (rule "add_literals" (formula "39") (term "0,1"))
               (rule "inEqSimp_homoInEq0" (formula "38"))
               (rule "polySimp_mulLiterals" (formula "38") (term "1,0"))
               (rule "polySimp_addComm1" (formula "38") (term "0"))
               (rule "inEqSimp_homoInEq1" (formula "39"))
               (rule "polySimp_mulLiterals" (formula "39") (term "1,0"))
               (rule "polySimp_addComm1" (formula "39") (term "0"))
               (rule "applyEqRigid" (formula "12") (term "0,0") (ifseqformula "37"))
               (rule "inEqSimp_homoInEq1" (formula "12"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0"))
               (rule "applyEqRigid" (formula "13") (term "0,0") (ifseqformula "37"))
               (rule "inEqSimp_homoInEq0" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "applyEq" (formula "5") (term "0,1,1,1,0,1,0,0,0") (ifseqformula "37"))
               (rule "polySimp_addComm0" (formula "5") (term "1,1,0,1,0,0,0"))
               (rule "applyEq" (formula "7") (term "0,1,1") (ifseqformula "37"))
               (rule "polySimp_addComm0" (formula "7") (term "1"))
               (rule "applyEq" (formula "9") (term "0,1,1") (ifseqformula "37"))
               (rule "polySimp_addComm1" (formula "9") (term "1"))
               (rule "applyEq" (formula "40") (term "0,1,1") (ifseqformula "37"))
               (rule "polySimp_addComm0" (formula "40") (term "1"))
               (rule "applyEq" (formula "11") (term "1,1") (ifseqformula "37"))
               (rule "applyEq" (formula "8") (term "0,1,1") (ifseqformula "37"))
               (rule "polySimp_addComm0" (formula "8") (term "1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "38"))
               (rule "polySimp_mulComm0" (formula "38") (term "1"))
               (rule "polySimp_rightDist" (formula "38") (term "1"))
               (rule "polySimp_mulLiterals" (formula "38") (term "1,1"))
               (rule "mul_literals" (formula "38") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "39"))
               (rule "polySimp_mulComm0" (formula "39") (term "1"))
               (rule "polySimp_rightDist" (formula "39") (term "1"))
               (rule "mul_literals" (formula "39") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "39") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "12"))
               (rule "polySimp_mulComm0" (formula "12") (term "1"))
               (rule "polySimp_rightDist" (formula "12") (term "1"))
               (rule "mul_literals" (formula "12") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1"))
               (rule "polySimp_rightDist" (formula "13") (term "1"))
               (rule "mul_literals" (formula "13") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
               (rule "inEqSimp_subsumption1" (formula "38") (ifseqformula "13"))
               (rule "inEqSimp_homoInEq0" (formula "38") (term "0"))
               (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "38") (term "1,0,0"))
               (rule "mul_literals" (formula "38") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0"))
               (rule "polySimp_addAssoc" (formula "38") (term "0,0"))
               (rule "polySimp_addComm1" (formula "38") (term "0,0,0"))
               (rule "add_literals" (formula "38") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "38") (term "0,0"))
               (rule "add_literals" (formula "38") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "38") (term "1,0,0"))
               (rule "add_zero_right" (formula "38") (term "0,0"))
               (rule "qeq_literals" (formula "38") (term "0"))
                (builtin "One Step Simplification" (formula "38"))
               (rule "true_left" (formula "38"))
               (rule "inEqSimp_subsumption0" (formula "38") (ifseqformula "12"))
               (rule "inEqSimp_homoInEq0" (formula "38") (term "0"))
               (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "38") (term "1,0,0"))
               (rule "mul_literals" (formula "38") (term "0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0"))
               (rule "polySimp_addAssoc" (formula "38") (term "0,0"))
               (rule "polySimp_addComm1" (formula "38") (term "0,0,0"))
               (rule "add_literals" (formula "38") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "38") (term "0,0"))
               (rule "add_literals" (formula "38") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "38") (term "1,0,0"))
               (rule "add_zero_right" (formula "38") (term "0,0"))
               (rule "qeq_literals" (formula "38") (term "0"))
                (builtin "One Step Simplification" (formula "38"))
               (rule "true_left" (formula "38"))
               (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "12"))
               (rule "times_zero_1" (formula "21") (term "0,0"))
               (rule "add_zero_left" (formula "21") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "21"))
               (rule "mul_literals" (formula "21") (term "1"))
               (rule "elimGcdGeq_antec" (formula "21") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_4") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,0,1,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,1,0"))
               (rule "leq_literals" (formula "21") (term "0,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0"))
               (rule "polySimp_addLiterals" (formula "21") (term "0,0,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "21") (term "0,0"))
               (rule "add_literals" (formula "21") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,0"))
               (rule "add_zero_right" (formula "21") (term "0,0"))
               (rule "leq_literals" (formula "21") (term "0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "28"))
               (rule "polySimp_rightDist" (formula "13") (term "0,0"))
               (rule "mul_literals" (formula "13") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "add_literals" (formula "13") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0"))
               (rule "elimGcdLeq_antec" (formula "13") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=quotient_4") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
               (rule "leq_literals" (formula "13") (term "0,0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "neg_literal" (formula "13") (term "0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0"))
               (rule "polySimp_addLiterals" (formula "13") (term "0,0,0,0"))
               (rule "add_literals" (formula "13") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,0"))
               (rule "add_literals" (formula "13") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0"))
               (rule "qeq_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "30"))
               (rule "polySimp_rightDist" (formula "14") (term "0,0"))
               (rule "mul_literals" (formula "14") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "14"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0"))
               (rule "polySimp_elimOne" (formula "14") (term "0"))
               (rule "inEqSimp_exactShadow3" (formula "37") (ifseqformula "12"))
               (rule "polySimp_rightDist" (formula "37") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "37") (term "1,0,0"))
               (rule "mul_literals" (formula "37") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "37") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "37") (term "0"))
               (rule "polySimp_addAssoc" (formula "37") (term "0,0"))
               (rule "add_literals" (formula "37") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "37"))
               (rule "polySimp_mulComm0" (formula "37") (term "1"))
               (rule "polySimp_rightDist" (formula "37") (term "1"))
               (rule "polySimp_mulLiterals" (formula "37") (term "1,1"))
               (rule "mul_literals" (formula "37") (term "0,1"))
               (rule "inEqSimp_antiSymm" (formula "23") (ifseqformula "13"))
               (rule "applyEq" (formula "24") (term "0") (ifseqformula "23"))
               (rule "qeq_literals" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "applyEq" (formula "37") (term "0,1,1") (ifseqformula "23"))
               (rule "times_zero_2" (formula "37") (term "1,1"))
               (rule "add_zero_right" (formula "37") (term "1"))
               (rule "applyEq" (formula "15") (term "0,1,1") (ifseqformula "23"))
               (rule "times_zero_2" (formula "15") (term "1,1"))
               (rule "add_zero_right" (formula "15") (term "1"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "23"))
               (rule "leq_literals" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "applyEq" (formula "13") (term "0,1,1") (ifseqformula "22"))
               (rule "times_zero_2" (formula "13") (term "1,1"))
               (rule "add_zero_right" (formula "13") (term "1"))
               (rule "applyEqRigid" (formula "12") (term "0,1,1") (ifseqformula "22"))
               (rule "times_zero_2" (formula "12") (term "1,1"))
               (rule "add_zero_right" (formula "12") (term "1"))
               (rule "applyEqRigid" (formula "5") (term "0,0,1,1,0,1,0,0,0") (ifseqformula "22"))
               (rule "times_zero_2" (formula "5") (term "0,1,1,0,1,0,0,0"))
               (rule "add_zero_left" (formula "5") (term "1,1,0,1,0,0,0"))
               (rule "applyEqRigid" (formula "11") (term "1,1") (ifseqformula "22"))
               (rule "add_zero_right" (formula "11") (term "1"))
               (rule "applyEqRigid" (formula "40") (term "1") (ifseqformula "22"))
               (rule "applyEqRigid" (formula "8") (term "0,0,1") (ifseqformula "22"))
               (rule "times_zero_2" (formula "8") (term "0,1"))
               (rule "add_zero_left" (formula "8") (term "1"))
               (rule "applyEqRigid" (formula "7") (term "0,0,1") (ifseqformula "22"))
               (rule "times_zero_2" (formula "7") (term "0,1"))
               (rule "add_zero_left" (formula "7") (term "1"))
               (rule "applyEq" (formula "41") (term "0,0,1") (ifseqformula "22"))
               (rule "times_zero_2" (formula "41") (term "0,1"))
               (rule "add_zero_left" (formula "41") (term "1"))
               (rule "applyEqRigid" (formula "9") (term "0,1,0,1") (ifseqformula "22"))
               (rule "times_zero_2" (formula "9") (term "1,0,1"))
               (rule "add_zero_right" (formula "9") (term "0,1"))
               (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "35"))
               (rule "leq_literals" (formula "36") (term "0"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "true_left" (formula "36"))
               (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "23"))
               (rule "leq_literals" (formula "14") (term "0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "28"))
               (rule "leq_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "inEqSimp_subsumption0" (formula "12") (ifseqformula "19"))
               (rule "leq_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "commute_and" (formula "42"))
               (rule "commute_and" (formula "6") (term "0,0"))
               (rule "commute_and" (formula "4") (term "0,0"))
               (rule "commute_and" (formula "3") (term "0,0"))
               (rule "commute_and" (formula "2") (term "0,0"))
               (rule "commute_and" (formula "1") (term "0,0"))
               (rule "div_axiom" (formula "11") (term "0") (inst "quotient=quotient_5"))
               (rule "qeq_literals" (formula "11") (term "0,1,1"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "equal_literals" (formula "11") (term "0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "mul_literals" (formula "11") (term "1,1,1"))
               (rule "andLeft" (formula "11"))
               (rule "andLeft" (formula "11"))
               (rule "polySimp_addAssoc" (formula "13") (term "0,1"))
               (rule "add_literals" (formula "13") (term "0,0,1"))
               (rule "polySimp_addComm1" (formula "13") (term "1"))
               (rule "add_literals" (formula "13") (term "0,1"))
               (rule "inEqSimp_homoInEq0" (formula "12"))
               (rule "polySimp_mulLiterals" (formula "12") (term "1,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0"))
               (rule "inEqSimp_homoInEq1" (formula "13"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "14"))
               (rule "eqSymm" (formula "11"))
               (rule "applyEqRigid" (formula "13") (term "0,1,0,0") (ifseqformula "11"))
               (rule "mul_literals" (formula "13") (term "1,0,0"))
               (rule "add_literals" (formula "13") (term "0,0"))
               (rule "applyEqRigid" (formula "12") (term "0,1,0,0") (ifseqformula "11"))
               (rule "mul_literals" (formula "12") (term "1,0,0"))
               (rule "add_literals" (formula "12") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13"))
               (rule "mul_literals" (formula "13") (term "1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "12"))
               (rule "mul_literals" (formula "12") (term "1"))
               (rule "inEqSimp_subsumption0" (formula "13") (ifseqformula "29"))
               (rule "leq_literals" (formula "13") (term "0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "22"))
               (rule "leq_literals" (formula "12") (term "0"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "cut_direct" (formula "44") (term "0,0"))
               (branch "CUT: o_0 = null TRUE"
                   (builtin "One Step Simplification" (formula "45"))
                  (rule "false_right" (formula "45"))
                  (rule "applyEq" (formula "6") (term "0,0,0,0,0") (ifseqformula "1"))
                  (rule "eqSymm" (formula "6") (term "0,0,0,0"))
                  (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "41"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                  (rule "hideAuxiliaryEq" (formula "6"))
                  (rule "applyEq" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
                  (rule "eqSymm" (formula "4") (term "1,0,0"))
                  (rule "replace_known_right" (formula "4") (term "1,0,0") (ifseqformula "40"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "applyEq" (formula "5") (term "0,1,0,0") (ifseqformula "1"))
                  (rule "eqSymm" (formula "5") (term "1,0,0"))
                  (rule "replace_known_right" (formula "5") (term "1,0,0") (ifseqformula "39"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "5"))
                  (rule "hideAuxiliaryEq" (formula "5"))
                  (rule "applyEqRigid" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                  (rule "eqSymm" (formula "3") (term "1,0,0"))
                  (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "38"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "applyEq" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                  (rule "eqSymm" (formula "3") (term "1,0,0"))
                  (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEqReverse" (formula "41") (term "1") (ifseqformula "3"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                  (rule "eqSymm" (formula "2") (term "1,0,0"))
                  (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "36"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "40")))
                  (rule "closeFalse" (formula "2"))
               )
               (branch "CUT: o_0 = null FALSE"
                   (builtin "One Step Simplification" (formula "45"))
                  (rule "notRight" (formula "45"))
                  (rule "cut_direct" (formula "43") (term "1"))
                  (branch "CUT: o_0 = self TRUE"
                      (builtin "One Step Simplification" (formula "44"))
                     (rule "replace_known_left" (formula "45") (term "1") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "45"))
                     (rule "applyEq" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "sortsDisjointModuloNull" (formula "4") (term "1,0,0"))
                     (rule "replace_known_right" (formula "4") (term "0,1,0,0") (ifseqformula "43"))
                      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "42")))
                     (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "applyEq" (formula "6") (term "0,0,0,0,0") (ifseqformula "1"))
                     (rule "sortsDisjointModuloNull" (formula "6") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "6") (term "1,0,0,0,0") (ifseqformula "41"))
                      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "42")))
                     (rule "applyEqReverse" (formula "7") (term "2,0") (ifseqformula "6"))
                     (rule "hideAuxiliaryEq" (formula "6"))
                     (rule "applyEq" (formula "45") (term "1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "6") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "sortsDisjointModuloNull" (formula "6") (term "1,0,0"))
                     (rule "replace_known_right" (formula "6") (term "1,1,0,0") (ifseqformula "40"))
                      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "41")))
                     (rule "applyEqReverse" (formula "45") (term "1") (ifseqformula "6"))
                     (rule "hideAuxiliaryEq" (formula "6"))
                     (rule "applyEq" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "sortsDisjointModuloNull" (formula "4") (term "1,0,0"))
                     (rule "replace_known_right" (formula "4") (term "0,1,0,0") (ifseqformula "40"))
                      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "39")))
                     (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "sortsDisjointModuloNull" (formula "2") (term "1,0,0"))
                     (rule "replace_known_right" (formula "2") (term "0,1,0,0") (ifseqformula "38"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "37")))
                     (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "sortsDisjointModuloNull" (formula "2") (term "1,0,0"))
                     (rule "replace_known_right" (formula "2") (term "1,1,0,0") (ifseqformula "36"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "37")))
                     (rule "applyEqReverse" (formula "41") (term "1") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "eqSymm" (formula "40"))
                     (rule "applyEq" (formula "39") (term "0") (ifseqformula "1"))
                     (rule "applyEq" (formula "39") (term "1,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "39"))
                     (rule "closeTrue" (formula "39"))
                  )
                  (branch "CUT: o_0 = self FALSE"
                      (builtin "One Step Simplification" (formula "44"))
                     (rule "false_right" (formula "44"))
                     (rule "replace_known_right" (formula "44") (term "1") (ifseqformula "43"))
                      (builtin "One Step Simplification" (formula "44"))
                     (rule "false_right" (formula "44"))
                     (rule "ifthenelse_split" (formula "2") (term "0"))
                     (branch "f_0 = java.lang.Object::<created> & o_0 = x_arr_3 TRUE"
                        (rule "andLeft" (formula "2"))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "2")))
                        (rule "applyEqReverse" (formula "8") (term "2,0") (ifseqformula "7"))
                        (rule "hideAuxiliaryEq" (formula "7"))
                        (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "5"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "applyEqRigid" (formula "42") (term "2,0") (ifseqformula "2"))
                        (rule "narrowSelectType" (formula "42") (term "0") (ifseqformula "11"))
                        (rule "eqSymm" (formula "42"))
                        (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "eqSymm" (formula "41"))
                        (rule "close" (formula "41") (ifseqformula "1"))
                     )
                     (branch "f_0 = java.lang.Object::<created> & o_0 = x_arr_3 FALSE"
                        (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "ifthenelse_split" (formula "2") (term "0"))
                        (branch "f_0 = java.lang.Object::<transient> & o_0 = x_arr_3 TRUE"
                           (rule "andLeft" (formula "2"))
                           (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "replace_known_left" (formula "40") (term "1") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "40"))
                           (rule "replace_known_right" (formula "6") (term "0,1,0,0") (ifseqformula "40"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "applyEq" (formula "44") (term "0") (ifseqformula "3"))
                           (rule "eqSymm" (formula "44"))
                           (rule "sortsDisjointModuloNull" (formula "44"))
                           (rule "replace_known_right" (formula "44") (term "1") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "43")))
                           (rule "false_right" (formula "44"))
                           (rule "applyEq" (formula "7") (term "0,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "applyEqReverse" (formula "45") (term "1") (ifseqformula "7"))
                           (rule "hideAuxiliaryEq" (formula "7"))
                           (rule "applyEq" (formula "44") (term "2,0") (ifseqformula "2"))
                           (rule "narrowSelectType" (formula "44") (term "0") (ifseqformula "13"))
                           (rule "eqSymm" (formula "44"))
                           (rule "applyEq" (formula "43") (term "0") (ifseqformula "3"))
                           (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                           (rule "hideAuxiliaryEq" (formula "5"))
                           (rule "applyEqRigid" (formula "4") (term "0,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "5"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "eqSymm" (formula "40"))
                           (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "false_right" (formula "36"))
                           (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                           (rule "close" (formula "36") (ifseqformula "1"))
                        )
                        (branch "f_0 = java.lang.Object::<transient> & o_0 = x_arr_3 FALSE"
                           (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> & o_0 = x_arr_3 TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                              (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "39") (term "1") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "replace_known_right" (formula "4") (term "0,1,0,0") (ifseqformula "39"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "38") (term "1") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "38"))
                              (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "applyEqReverse" (formula "45") (term "1") (ifseqformula "5"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "applyEqRigid" (formula "38") (term "0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "38"))
                              (rule "false_right" (formula "38"))
                              (rule "applyEqRigid" (formula "4") (term "1,0,0,0,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "4"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "applyEq" (formula "40") (term "0") (ifseqformula "3"))
                              (rule "eqSymm" (formula "40"))
                              (rule "sortsDisjointModuloNull" (formula "40"))
                              (rule "replace_known_right" (formula "40") (term "0") (ifseqformula "39"))
                               (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "38")))
                              (rule "false_right" (formula "40"))
                              (rule "applyEqRigid" (formula "41") (term "2,0") (ifseqformula "2"))
                              (rule "narrowSelectType" (formula "41") (term "0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "notRight" (formula "41"))
                              (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "4"))
                              (rule "close" (formula "38") (ifseqformula "2"))
                           )
                           (branch " f_0 = java.lang.Object::<transactionConditionallyUpdated> & o_0 = x_arr_3 FALSE"
                              (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch "f_0 = java.lang.Object::<initialized> & o_0 = x_arr_3 TRUE"
                                 (rule "andLeft" (formula "2"))
                                 (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "2")))
                                 (rule "applyEqReverse" (formula "46") (term "1") (ifseqformula "5"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "replace_known_left" (formula "39") (term "1") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "39"))
                                 (rule "replace_known_right" (formula "4") (term "0,1,0,0") (ifseqformula "39"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "replace_known_left" (formula "38") (term "1") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "replace_known_left" (formula "37") (term "1") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "applyEq" (formula "39") (term "0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "39"))
                                 (rule "false_right" (formula "39"))
                                 (rule "applyEqRigid" (formula "4") (term "1,0,0,0,0,0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "applyEq" (formula "41") (term "0") (ifseqformula "3"))
                                 (rule "eqSymm" (formula "41"))
                                 (rule "sortsDisjointModuloNull" (formula "41"))
                                 (rule "replace_known_right" (formula "41") (term "1") (ifseqformula "39"))
                                  (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "40")))
                                 (rule "false_right" (formula "41"))
                                 (rule "applyEqRigid" (formula "42") (term "2,0") (ifseqformula "2"))
                                 (rule "narrowSelectType" (formula "42") (term "0") (ifseqformula "10"))
                                 (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "37"))
                                 (rule "false_right" (formula "37"))
                                 (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "false_right" (formula "36"))
                                 (rule "applyEq" (formula "39") (term "0") (ifseqformula "3"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                 (rule "close" (formula "36") (ifseqformula "1"))
                              )
                              (branch "f_0 = java.lang.Object::<initialized> & o_0 = x_arr_3 FALSE"
                                 (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "36"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "applyEqReverse" (formula "45") (term "1") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "ifthenelse_split" (formula "2") (term "0"))
                                 (branch " o_0 = x_arr_3 & exists int iv; (arr(iv) = f_0 & iv >= 0 & iv <= quotient_1) & !f_0 = java.lang.Object::<created> TRUE"
                                    (rule "andLeft" (formula "2"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "exLeft" (formula "3") (inst "sk=iv_0"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "andLeft" (formula "3"))
                                    (rule "applyEqReverse" (formula "49") (term "1") (ifseqformula "6"))
                                    (rule "hideAuxiliaryEq" (formula "6"))
                                    (rule "eqSymm" (formula "3"))
                                    (rule "replace_known_left" (formula "40") (term "1") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "replace_known_left" (formula "39") (term "1") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "replace_known_right" (formula "42") (term "0") (ifseqformula "38"))
                                     (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "2")))
                                    (rule "false_right" (formula "42"))
                                    (rule "replace_known_left" (formula "41") (term "1") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "applyEq" (formula "46") (term "0") (ifseqformula "2"))
                                    (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                    (rule "close" (formula "42") (ifseqformula "1"))
                                 )
                                 (branch " o_0 = x_arr_3 & exists int iv; (arr(iv) = f_0 & iv >= 0 & iv <= quotient_1) & !f_0 = java.lang.Object::<created> FALSE"
                                    (rule "close" (formula "45") (ifseqformula "2"))
                                 )
                              )
                           )
                        )
                     )
                  )
               )
            )
         )
      )
      (branch "Null Reference (newObject = null)"
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Exceptional Post (wordIndex)"
    (builtin "One Step Simplification" (formula "9"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "7"))
   (rule "close" (formula "11") (ifseqformula "10"))
)
(branch "Pre (wordIndex)"
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")))
   (rule "expand_inInt" (formula "8") (term "1"))
   (rule "replace_int_MAX" (formula "8") (term "1,0,1"))
   (rule "replace_int_MIN" (formula "8") (term "0,1,1"))
   (rule "inEqSimp_homoInEq0" (formula "8") (term "0"))
   (rule "mul_literals" (formula "8") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "8") (term "0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0"))
   (rule "inEqSimp_homoInEq0" (formula "8") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1"))
   (rule "add_literals" (formula "8") (term "0,0,0,1"))
   (rule "inEqSimp_homoInEq0" (formula "8") (term "1,1"))
   (rule "mul_literals" (formula "8") (term "1,0,1,1"))
   (rule "polySimp_addComm1" (formula "8") (term "0,1,1"))
   (rule "add_literals" (formula "8") (term "0,0,1,1"))
   (rule "add_zero_left" (formula "8") (term "0,1,1"))
   (rule "mod_axiom" (formula "8") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,0"))
   (rule "mod_axiom" (formula "8") (term "0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "8") (term "0,1,0,0,1"))
   (rule "mul_literals" (formula "8") (term "0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,1"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,1"))
   (rule "add_literals" (formula "8") (term "0,0,0,0,1"))
   (rule "mod_axiom" (formula "8") (term "0,1,1"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,0,1,1"))
   (rule "inEqSimp_sepNegMonomial1" (formula "8") (term "0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,1"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,1"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,1"))
   (rule "mul_literals" (formula "8") (term "0,1,0,1"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,1"))
   (rule "inEqSimp_sepNegMonomial1" (formula "8") (term "1,1"))
   (rule "polySimp_mulLiterals" (formula "8") (term "0,1,1"))
   (rule "shift_paren_and" (formula "8"))
   (rule "commute_and" (formula "8") (term "0"))
   (rule "inEqSimp_and_subsumption1" (formula "8"))
   (rule "inEqSimp_homoInEq0" (formula "8") (term "0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
   (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "8") (term "0,0,1"))
   (rule "qeq_literals" (formula "8") (term "0,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "div_axiom" (formula "8") (term "0,0,1") (inst "quotient=quotient_0"))
   (rule "mul_literals" (formula "1") (term "1,1,1,1,1"))
   (rule "qeq_literals" (formula "1") (term "0,1,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "equal_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,1"))
   (rule "add_literals" (formula "3") (term "0,0,1"))
   (rule "polySimp_addComm1" (formula "3") (term "1"))
   (rule "add_literals" (formula "3") (term "0,1"))
   (rule "inEqSimp_homoInEq0" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
   (rule "polySimp_addComm1" (formula "2") (term "0"))
   (rule "inEqSimp_homoInEq1" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "1"))
   (rule "inEqSimp_homoInEq1" (formula "11") (term "0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "11") (term "0,0"))
   (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "inEqSimp_leqRight" (formula "11"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "2"))
   (rule "polySimp_addComm1" (formula "1") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1"))
   (rule "polySimp_rightDist" (formula "3") (term "1"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
   (rule "mul_literals" (formula "3") (term "0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "4"))
   (rule "polySimp_mulComm0" (formula "4") (term "1"))
   (rule "polySimp_rightDist" (formula "4") (term "1"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
   (rule "mul_literals" (formula "4") (term "0,1"))
   (rule "inEqSimp_sepNegMonomial1" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "inEqSimp_subsumption0" (formula "4") (ifseqformula "1"))
   (rule "inEqSimp_homoInEq0" (formula "4") (term "0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "4") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0"))
   (rule "mul_literals" (formula "4") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "4") (term "0,0"))
   (rule "polySimp_addComm1" (formula "4") (term "0,0,0"))
   (rule "add_literals" (formula "4") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "4") (term "0,0"))
   (rule "add_literals" (formula "4") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "4") (term "1,0,0"))
   (rule "add_zero_right" (formula "4") (term "0,0"))
   (rule "qeq_literals" (formula "4") (term "0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "1"))
   (rule "times_zero_1" (formula "9") (term "0,0"))
   (rule "add_zero_left" (formula "9") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9"))
   (rule "mul_literals" (formula "9") (term "1"))
   (rule "elimGcdGeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0,1,0"))
   (rule "leq_literals" (formula "9") (term "0,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
   (rule "polySimp_addLiterals" (formula "9") (term "0,0,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,0"))
   (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
   (rule "add_literals" (formula "9") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0"))
   (rule "leq_literals" (formula "9") (term "0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "7"))
   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0"))
   (rule "mul_literals" (formula "3") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "add_literals" (formula "3") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "inEqSimp_contradInEq5" (formula "3") (ifseqformula "10"))
   (rule "mul_literals" (formula "3") (term "1,1,0"))
   (rule "greater_literals" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "qeq_literals" (formula "3") (term "0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "closeFalse" (formula "3"))
)
)
}
