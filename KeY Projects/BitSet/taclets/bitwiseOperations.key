\functions {
    // Gets single bit (0 or 1) of the first argument at a specified index,
    // where index 0 refers to the least-significant bit.
    int bitAt(int, int);
}

\schemaVariables {
    \term int left, right;
}

\rules(programRules:Java, intRules:javaSemantics) {
    bitAtDef {
        \schemaVar \term int number, index;
        \find(bitAt(number, index))
        \replacewith(\if (0 <= index)
                     \then (mod(div(number, pow(2, index)), 2))
                     \else (0))
        \heuristics(simplify)
    };

    binaryAndIntDef {
        \find(binaryAnd(left, right))
        \replacewith(
            bsum{int i;}(0, 31, pow(2, i) * bitAt(left, i) * bitAt(right, i))
            - \if(left < 0 & right < 0)
              \then (pow(2, 31))
              \else (0));
        \add(==> inInt(left), inInt(right))
        //\heuristics(simplify_enlarging)
    };
    
    binaryAndLongDef {
        \find(binaryAnd(left, right))
        \replacewith(
            bsum{int i;}(0, 63, pow(2, i) * bitAt(left, i) * bitAt(right, i))
            - \if(left < 0 & right < 0)
              \then (pow(2, 63))
              \else (0));
        \add(==> inLong(left), inLong(right))
        //\heuristics(simplify_enlarging)
    };

    binaryOrIntDef {
        \find(binaryOr(left, right))
        \replacewith(
            bsum{int i;}(0, 31,
                pow(2, i) * mod(bitAt(left, i)
                                + bitAt(right, i)
                                + (bitAt(left, i) * bitAt(right, i)), 2))
            - \if(left < 0 | right < 0)
              \then (pow(2, 31))
              \else (0));
        \add(==> inInt(left), inInt(right))
        //\heuristics(simplify_enlarging)
    };

    binaryOrLongDef {
        \find(binaryOr(left, right))
        \replacewith(
            bsum{int i;}(0, 63,
                pow(2, i) * mod(bitAt(left, i)
                                + bitAt(right, i)
                                + (bitAt(left, i) * bitAt(right, i)), 2))
            - \if(left < 0 | right < 0)
              \then (pow(2, 63))
              \else (0));
        \add(==> inLong(left), inLong(right))
        //\heuristics(simplify_enlarging)
    };

    binaryXOrIntDef {
        \find(binaryXOr(left, right))
        \replacewith(
            bsum{int i;}(0, 31,
                pow(2, i) * mod(bitAt(left, i) + bitAt(right, i), 2))
            - \if(!(left < 0 <-> right < 0))
              \then (pow(2, 31))
              \else (0));
        \add(==> inInt(left), inInt(right))
        //\heuristics(simplify_enlarging)
    };

    binaryXOrLongDef {
        \find(binaryXOr(left, right))
        \replacewith(
            bsum{int i;}(0, 63,
                pow(2, i) * mod(bitAt(left, i) + bitAt(right, i), 2))
            - \if(!(left < 0 <-> right < 0))
              \then (pow(2, 63))
              \else (0));
        \add(==> inLong(left), inLong(right))
        //\heuristics(simplify_enlarging)
    };
}
